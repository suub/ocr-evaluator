var CLOSURE_NO_DEPS = true;
var COMPILED = false;
var goog = goog || {};
goog.global = this;
goog.DEBUG = true;
goog.LOCALE = "en";
goog.TRUSTED_SITE = true;
goog.provide = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
    delete goog.implicitNamespaces_[name];
    var namespace = name;
    while (namespace = namespace.substring(0, namespace.lastIndexOf("."))) {
      if (goog.getObjectByName(namespace)) {
        break;
      }
      goog.implicitNamespaces_[namespace] = true;
    }
  }
  goog.exportPath_(name);
};
goog.setTestOnly = function(opt_message) {
  if (COMPILED && !goog.DEBUG) {
    opt_message = opt_message || "";
    throw Error("Importing test-only code into non-debug environment" + opt_message ? ": " + opt_message : ".");
  }
};
if (!COMPILED) {
  goog.isProvided_ = function(name) {
    return!goog.implicitNamespaces_[name] && !!goog.getObjectByName(name);
  };
  goog.implicitNamespaces_ = {};
}
goog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {
  var parts = name.split(".");
  var cur = opt_objectToExportTo || goog.global;
  if (!(parts[0] in cur) && cur.execScript) {
    cur.execScript("var " + parts[0]);
  }
  for (var part;parts.length && (part = parts.shift());) {
    if (!parts.length && goog.isDef(opt_object)) {
      cur[part] = opt_object;
    } else {
      if (cur[part]) {
        cur = cur[part];
      } else {
        cur = cur[part] = {};
      }
    }
  }
};
goog.getObjectByName = function(name, opt_obj) {
  var parts = name.split(".");
  var cur = opt_obj || goog.global;
  for (var part;part = parts.shift();) {
    if (goog.isDefAndNotNull(cur[part])) {
      cur = cur[part];
    } else {
      return null;
    }
  }
  return cur;
};
goog.globalize = function(obj, opt_global) {
  var global = opt_global || goog.global;
  for (var x in obj) {
    global[x] = obj[x];
  }
};
goog.addDependency = function(relPath, provides, requires) {
  if (!COMPILED) {
    var provide, require;
    var path = relPath.replace(/\\/g, "/");
    var deps = goog.dependencies_;
    for (var i = 0;provide = provides[i];i++) {
      deps.nameToPath[provide] = path;
      if (!(path in deps.pathToNames)) {
        deps.pathToNames[path] = {};
      }
      deps.pathToNames[path][provide] = true;
    }
    for (var j = 0;require = requires[j];j++) {
      if (!(path in deps.requires)) {
        deps.requires[path] = {};
      }
      deps.requires[path][require] = true;
    }
  }
};
goog.ENABLE_DEBUG_LOADER = true;
goog.require = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      return;
    }
    if (goog.ENABLE_DEBUG_LOADER) {
      var path = goog.getPathFromDeps_(name);
      if (path) {
        goog.included_[path] = true;
        goog.writeScripts_();
        return;
      }
    }
    var errorMessage = "goog.require could not find: " + name;
    if (goog.global.console) {
      goog.global.console["error"](errorMessage);
    }
    throw Error(errorMessage);
  }
};
goog.basePath = "";
goog.global.CLOSURE_BASE_PATH;
goog.global.CLOSURE_NO_DEPS;
goog.global.CLOSURE_IMPORT_SCRIPT;
goog.nullFunction = function() {
};
goog.identityFunction = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.abstractMethod = function() {
  throw Error("unimplemented abstract method");
};
goog.addSingletonGetter = function(ctor) {
  ctor.getInstance = function() {
    if (ctor.instance_) {
      return ctor.instance_;
    }
    if (goog.DEBUG) {
      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;
    }
    return ctor.instance_ = new ctor;
  };
};
goog.instantiatedSingletons_ = [];
if (!COMPILED && goog.ENABLE_DEBUG_LOADER) {
  goog.included_ = {};
  goog.dependencies_ = {pathToNames:{}, nameToPath:{}, requires:{}, visited:{}, written:{}};
  goog.inHtmlDocument_ = function() {
    var doc = goog.global.document;
    return typeof doc != "undefined" && "write" in doc;
  };
  goog.findBasePath_ = function() {
    if (goog.global.CLOSURE_BASE_PATH) {
      goog.basePath = goog.global.CLOSURE_BASE_PATH;
      return;
    } else {
      if (!goog.inHtmlDocument_()) {
        return;
      }
    }
    var doc = goog.global.document;
    var scripts = doc.getElementsByTagName("script");
    for (var i = scripts.length - 1;i >= 0;--i) {
      var src = scripts[i].src;
      var qmark = src.lastIndexOf("?");
      var l = qmark == -1 ? src.length : qmark;
      if (src.substr(l - 7, 7) == "base.js") {
        goog.basePath = src.substr(0, l - 7);
        return;
      }
    }
  };
  goog.importScript_ = function(src) {
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    if (!goog.dependencies_.written[src] && importScript(src)) {
      goog.dependencies_.written[src] = true;
    }
  };
  goog.writeScriptTag_ = function(src) {
    if (goog.inHtmlDocument_()) {
      var doc = goog.global.document;
      if (doc.readyState == "complete") {
        var isDeps = /\bdeps.js$/.test(src);
        if (isDeps) {
          return false;
        } else {
          throw Error('Cannot write "' + src + '" after document load');
        }
      }
      doc.write('\x3cscript type\x3d"text/javascript" src\x3d"' + src + '"\x3e\x3c/' + "script\x3e");
      return true;
    } else {
      return false;
    }
  };
  goog.writeScripts_ = function() {
    var scripts = [];
    var seenScript = {};
    var deps = goog.dependencies_;
    function visitNode(path) {
      if (path in deps.written) {
        return;
      }
      if (path in deps.visited) {
        if (!(path in seenScript)) {
          seenScript[path] = true;
          scripts.push(path);
        }
        return;
      }
      deps.visited[path] = true;
      if (path in deps.requires) {
        for (var requireName in deps.requires[path]) {
          if (!goog.isProvided_(requireName)) {
            if (requireName in deps.nameToPath) {
              visitNode(deps.nameToPath[requireName]);
            } else {
              throw Error("Undefined nameToPath for " + requireName);
            }
          }
        }
      }
      if (!(path in seenScript)) {
        seenScript[path] = true;
        scripts.push(path);
      }
    }
    for (var path in goog.included_) {
      if (!deps.written[path]) {
        visitNode(path);
      }
    }
    for (var i = 0;i < scripts.length;i++) {
      if (scripts[i]) {
        goog.importScript_(goog.basePath + scripts[i]);
      } else {
        throw Error("Undefined script input");
      }
    }
  };
  goog.getPathFromDeps_ = function(rule) {
    if (rule in goog.dependencies_.nameToPath) {
      return goog.dependencies_.nameToPath[rule];
    } else {
      return null;
    }
  };
  goog.findBasePath_();
  if (!goog.global.CLOSURE_NO_DEPS) {
    goog.importScript_(goog.basePath + "deps.js");
  }
}
goog.typeOf = function(value) {
  var s = typeof value;
  if (s == "object") {
    if (value) {
      if (value instanceof Array) {
        return "array";
      } else {
        if (value instanceof Object) {
          return s;
        }
      }
      var className = Object.prototype.toString.call((value));
      if (className == "[object Window]") {
        return "object";
      }
      if (className == "[object Array]" || typeof value.length == "number" && (typeof value.splice != "undefined" && (typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("splice")))) {
        return "array";
      }
      if (className == "[object Function]" || typeof value.call != "undefined" && (typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("call"))) {
        return "function";
      }
    } else {
      return "null";
    }
  } else {
    if (s == "function" && typeof value.call == "undefined") {
      return "object";
    }
  }
  return s;
};
goog.isDef = function(val) {
  return val !== undefined;
};
goog.isNull = function(val) {
  return val === null;
};
goog.isDefAndNotNull = function(val) {
  return val != null;
};
goog.isArray = function(val) {
  return goog.typeOf(val) == "array";
};
goog.isArrayLike = function(val) {
  var type = goog.typeOf(val);
  return type == "array" || type == "object" && typeof val.length == "number";
};
goog.isDateLike = function(val) {
  return goog.isObject(val) && typeof val.getFullYear == "function";
};
goog.isString = function(val) {
  return typeof val == "string";
};
goog.isBoolean = function(val) {
  return typeof val == "boolean";
};
goog.isNumber = function(val) {
  return typeof val == "number";
};
goog.isFunction = function(val) {
  return goog.typeOf(val) == "function";
};
goog.isObject = function(val) {
  var type = typeof val;
  return type == "object" && val != null || type == "function";
};
goog.getUid = function(obj) {
  return obj[goog.UID_PROPERTY_] || (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_);
};
goog.removeUid = function(obj) {
  if ("removeAttribute" in obj) {
    obj.removeAttribute(goog.UID_PROPERTY_);
  }
  try {
    delete obj[goog.UID_PROPERTY_];
  } catch (ex) {
  }
};
goog.UID_PROPERTY_ = "closure_uid_" + (Math.random() * 1E9 >>> 0);
goog.uidCounter_ = 0;
goog.getHashCode = goog.getUid;
goog.removeHashCode = goog.removeUid;
goog.cloneObject = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.cloneObject(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.bindNative_ = function(fn, selfObj, var_args) {
  return(fn.call.apply(fn.bind, arguments));
};
goog.bindJs_ = function(fn, selfObj, var_args) {
  if (!fn) {
    throw new Error;
  }
  if (arguments.length > 2) {
    var boundArgs = Array.prototype.slice.call(arguments, 2);
    return function() {
      var newArgs = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(newArgs, boundArgs);
      return fn.apply(selfObj, newArgs);
    };
  } else {
    return function() {
      return fn.apply(selfObj, arguments);
    };
  }
};
goog.bind = function(fn, selfObj, var_args) {
  if (Function.prototype.bind && Function.prototype.bind.toString().indexOf("native code") != -1) {
    goog.bind = goog.bindNative_;
  } else {
    goog.bind = goog.bindJs_;
  }
  return goog.bind.apply(null, arguments);
};
goog.partial = function(fn, var_args) {
  var args = Array.prototype.slice.call(arguments, 1);
  return function() {
    var newArgs = Array.prototype.slice.call(arguments);
    newArgs.unshift.apply(newArgs, args);
    return fn.apply(this, newArgs);
  };
};
goog.mixin = function(target, source) {
  for (var x in source) {
    target[x] = source[x];
  }
};
goog.now = goog.TRUSTED_SITE && Date.now || function() {
  return+new Date;
};
goog.globalEval = function(script) {
  if (goog.global.execScript) {
    goog.global.execScript(script, "JavaScript");
  } else {
    if (goog.global.eval) {
      if (goog.evalWorksForGlobals_ == null) {
        goog.global.eval("var _et_ \x3d 1;");
        if (typeof goog.global["_et_"] != "undefined") {
          delete goog.global["_et_"];
          goog.evalWorksForGlobals_ = true;
        } else {
          goog.evalWorksForGlobals_ = false;
        }
      }
      if (goog.evalWorksForGlobals_) {
        goog.global.eval(script);
      } else {
        var doc = goog.global.document;
        var scriptElt = doc.createElement("script");
        scriptElt.type = "text/javascript";
        scriptElt.defer = false;
        scriptElt.appendChild(doc.createTextNode(script));
        doc.body.appendChild(scriptElt);
        doc.body.removeChild(scriptElt);
      }
    } else {
      throw Error("goog.globalEval not available");
    }
  }
};
goog.evalWorksForGlobals_ = null;
goog.cssNameMapping_;
goog.cssNameMappingStyle_;
goog.getCssName = function(className, opt_modifier) {
  var getMapping = function(cssName) {
    return goog.cssNameMapping_[cssName] || cssName;
  };
  var renameByParts = function(cssName) {
    var parts = cssName.split("-");
    var mapped = [];
    for (var i = 0;i < parts.length;i++) {
      mapped.push(getMapping(parts[i]));
    }
    return mapped.join("-");
  };
  var rename;
  if (goog.cssNameMapping_) {
    rename = goog.cssNameMappingStyle_ == "BY_WHOLE" ? getMapping : renameByParts;
  } else {
    rename = function(a) {
      return a;
    };
  }
  if (opt_modifier) {
    return className + "-" + rename(opt_modifier);
  } else {
    return rename(className);
  }
};
goog.setCssNameMapping = function(mapping, opt_style) {
  goog.cssNameMapping_ = mapping;
  goog.cssNameMappingStyle_ = opt_style;
};
goog.global.CLOSURE_CSS_NAME_MAPPING;
if (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {
  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;
}
goog.getMsg = function(str, opt_values) {
  var values = opt_values || {};
  for (var key in values) {
    var value = ("" + values[key]).replace(/\$/g, "$$$$");
    str = str.replace(new RegExp("\\{\\$" + key + "\\}", "gi"), value);
  }
  return str;
};
goog.getMsgWithFallback = function(a, b) {
  return a;
};
goog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {
  goog.exportPath_(publicPath, object, opt_objectToExportTo);
};
goog.exportProperty = function(object, publicName, symbol) {
  object[publicName] = symbol;
};
goog.inherits = function(childCtor, parentCtor) {
  function tempCtor() {
  }
  tempCtor.prototype = parentCtor.prototype;
  childCtor.superClass_ = parentCtor.prototype;
  childCtor.prototype = new tempCtor;
  childCtor.prototype.constructor = childCtor;
};
goog.base = function(me, opt_methodName, var_args) {
  var caller = arguments.callee.caller;
  if (caller.superClass_) {
    return caller.superClass_.constructor.apply(me, Array.prototype.slice.call(arguments, 1));
  }
  var args = Array.prototype.slice.call(arguments, 2);
  var foundCaller = false;
  for (var ctor = me.constructor;ctor;ctor = ctor.superClass_ && ctor.superClass_.constructor) {
    if (ctor.prototype[opt_methodName] === caller) {
      foundCaller = true;
    } else {
      if (foundCaller) {
        return ctor.prototype[opt_methodName].apply(me, args);
      }
    }
  }
  if (me[opt_methodName] === caller) {
    return me.constructor.prototype[opt_methodName].apply(me, args);
  } else {
    throw Error("goog.base called from a method of one name " + "to a method of a different name");
  }
};
goog.scope = function(fn) {
  fn.call(goog.global);
};
goog.provide("goog.string");
goog.provide("goog.string.Unicode");
goog.string.Unicode = {NBSP:"\u00a0"};
goog.string.startsWith = function(str, prefix) {
  return str.lastIndexOf(prefix, 0) == 0;
};
goog.string.endsWith = function(str, suffix) {
  var l = str.length - suffix.length;
  return l >= 0 && str.indexOf(suffix, l) == l;
};
goog.string.caseInsensitiveStartsWith = function(str, prefix) {
  return goog.string.caseInsensitiveCompare(prefix, str.substr(0, prefix.length)) == 0;
};
goog.string.caseInsensitiveEndsWith = function(str, suffix) {
  return goog.string.caseInsensitiveCompare(suffix, str.substr(str.length - suffix.length, suffix.length)) == 0;
};
goog.string.subs = function(str, var_args) {
  for (var i = 1;i < arguments.length;i++) {
    var replacement = String(arguments[i]).replace(/\$/g, "$$$$");
    str = str.replace(/\%s/, replacement);
  }
  return str;
};
goog.string.collapseWhitespace = function(str) {
  return str.replace(/[\s\xa0]+/g, " ").replace(/^\s+|\s+$/g, "");
};
goog.string.isEmpty = function(str) {
  return/^[\s\xa0]*$/.test(str);
};
goog.string.isEmptySafe = function(str) {
  return goog.string.isEmpty(goog.string.makeSafe(str));
};
goog.string.isBreakingWhitespace = function(str) {
  return!/[^\t\n\r ]/.test(str);
};
goog.string.isAlpha = function(str) {
  return!/[^a-zA-Z]/.test(str);
};
goog.string.isNumeric = function(str) {
  return!/[^0-9]/.test(str);
};
goog.string.isAlphaNumeric = function(str) {
  return!/[^a-zA-Z0-9]/.test(str);
};
goog.string.isSpace = function(ch) {
  return ch == " ";
};
goog.string.isUnicodeChar = function(ch) {
  return ch.length == 1 && (ch >= " " && ch <= "~") || ch >= "\u0080" && ch <= "\ufffd";
};
goog.string.stripNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)+/g, " ");
};
goog.string.canonicalizeNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)/g, "\n");
};
goog.string.normalizeWhitespace = function(str) {
  return str.replace(/\xa0|\s/g, " ");
};
goog.string.normalizeSpaces = function(str) {
  return str.replace(/\xa0|[ \t]+/g, " ");
};
goog.string.collapseBreakingSpaces = function(str) {
  return str.replace(/[\t\r\n ]+/g, " ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g, "");
};
goog.string.trim = function(str) {
  return str.replace(/^[\s\xa0]+|[\s\xa0]+$/g, "");
};
goog.string.trimLeft = function(str) {
  return str.replace(/^[\s\xa0]+/, "");
};
goog.string.trimRight = function(str) {
  return str.replace(/[\s\xa0]+$/, "");
};
goog.string.caseInsensitiveCompare = function(str1, str2) {
  var test1 = String(str1).toLowerCase();
  var test2 = String(str2).toLowerCase();
  if (test1 < test2) {
    return-1;
  } else {
    if (test1 == test2) {
      return 0;
    } else {
      return 1;
    }
  }
};
goog.string.numerateCompareRegExp_ = /(\.\d+)|(\d+)|(\D+)/g;
goog.string.numerateCompare = function(str1, str2) {
  if (str1 == str2) {
    return 0;
  }
  if (!str1) {
    return-1;
  }
  if (!str2) {
    return 1;
  }
  var tokens1 = str1.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var tokens2 = str2.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var count = Math.min(tokens1.length, tokens2.length);
  for (var i = 0;i < count;i++) {
    var a = tokens1[i];
    var b = tokens2[i];
    if (a != b) {
      var num1 = parseInt(a, 10);
      if (!isNaN(num1)) {
        var num2 = parseInt(b, 10);
        if (!isNaN(num2) && num1 - num2) {
          return num1 - num2;
        }
      }
      return a < b ? -1 : 1;
    }
  }
  if (tokens1.length != tokens2.length) {
    return tokens1.length - tokens2.length;
  }
  return str1 < str2 ? -1 : 1;
};
goog.string.urlEncode = function(str) {
  return encodeURIComponent(String(str));
};
goog.string.urlDecode = function(str) {
  return decodeURIComponent(str.replace(/\+/g, " "));
};
goog.string.newLineToBr = function(str, opt_xml) {
  return str.replace(/(\r\n|\r|\n)/g, opt_xml ? "\x3cbr /\x3e" : "\x3cbr\x3e");
};
goog.string.htmlEscape = function(str, opt_isLikelyToContainHtmlChars) {
  if (opt_isLikelyToContainHtmlChars) {
    return str.replace(goog.string.amperRe_, "\x26amp;").replace(goog.string.ltRe_, "\x26lt;").replace(goog.string.gtRe_, "\x26gt;").replace(goog.string.quotRe_, "\x26quot;");
  } else {
    if (!goog.string.allRe_.test(str)) {
      return str;
    }
    if (str.indexOf("\x26") != -1) {
      str = str.replace(goog.string.amperRe_, "\x26amp;");
    }
    if (str.indexOf("\x3c") != -1) {
      str = str.replace(goog.string.ltRe_, "\x26lt;");
    }
    if (str.indexOf("\x3e") != -1) {
      str = str.replace(goog.string.gtRe_, "\x26gt;");
    }
    if (str.indexOf('"') != -1) {
      str = str.replace(goog.string.quotRe_, "\x26quot;");
    }
    return str;
  }
};
goog.string.amperRe_ = /&/g;
goog.string.ltRe_ = /</g;
goog.string.gtRe_ = />/g;
goog.string.quotRe_ = /\"/g;
goog.string.allRe_ = /[&<>\"]/;
goog.string.unescapeEntities = function(str) {
  if (goog.string.contains(str, "\x26")) {
    if ("document" in goog.global) {
      return goog.string.unescapeEntitiesUsingDom_(str);
    } else {
      return goog.string.unescapePureXmlEntities_(str);
    }
  }
  return str;
};
goog.string.unescapeEntitiesUsingDom_ = function(str) {
  var seen = {"\x26amp;":"\x26", "\x26lt;":"\x3c", "\x26gt;":"\x3e", "\x26quot;":'"'};
  var div = document.createElement("div");
  return str.replace(goog.string.HTML_ENTITY_PATTERN_, function(s, entity) {
    var value = seen[s];
    if (value) {
      return value;
    }
    if (entity.charAt(0) == "#") {
      var n = Number("0" + entity.substr(1));
      if (!isNaN(n)) {
        value = String.fromCharCode(n);
      }
    }
    if (!value) {
      div.innerHTML = s + " ";
      value = div.firstChild.nodeValue.slice(0, -1);
    }
    return seen[s] = value;
  });
};
goog.string.unescapePureXmlEntities_ = function(str) {
  return str.replace(/&([^;]+);/g, function(s, entity) {
    switch(entity) {
      case "amp":
        return "\x26";
      case "lt":
        return "\x3c";
      case "gt":
        return "\x3e";
      case "quot":
        return'"';
      default:
        if (entity.charAt(0) == "#") {
          var n = Number("0" + entity.substr(1));
          if (!isNaN(n)) {
            return String.fromCharCode(n);
          }
        }
        return s;
    }
  });
};
goog.string.HTML_ENTITY_PATTERN_ = /&([^;\s<&]+);?/g;
goog.string.whitespaceEscape = function(str, opt_xml) {
  return goog.string.newLineToBr(str.replace(/  /g, " \x26#160;"), opt_xml);
};
goog.string.stripQuotes = function(str, quoteChars) {
  var length = quoteChars.length;
  for (var i = 0;i < length;i++) {
    var quoteChar = length == 1 ? quoteChars : quoteChars.charAt(i);
    if (str.charAt(0) == quoteChar && str.charAt(str.length - 1) == quoteChar) {
      return str.substring(1, str.length - 1);
    }
  }
  return str;
};
goog.string.truncate = function(str, chars, opt_protectEscapedCharacters) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (str.length > chars) {
    str = str.substring(0, chars - 3) + "...";
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.truncateMiddle = function(str, chars, opt_protectEscapedCharacters, opt_trailingChars) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (opt_trailingChars && str.length > chars) {
    if (opt_trailingChars > chars) {
      opt_trailingChars = chars;
    }
    var endPoint = str.length - opt_trailingChars;
    var startPoint = chars - opt_trailingChars;
    str = str.substring(0, startPoint) + "..." + str.substring(endPoint);
  } else {
    if (str.length > chars) {
      var half = Math.floor(chars / 2);
      var endPos = str.length - half;
      half += chars % 2;
      str = str.substring(0, half) + "..." + str.substring(endPos);
    }
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.specialEscapeChars_ = {"\x00":"\\0", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\x0B", '"':'\\"', "\\":"\\\\"};
goog.string.jsEscapeCache_ = {"'":"\\'"};
goog.string.quote = function(s) {
  s = String(s);
  if (s.quote) {
    return s.quote();
  } else {
    var sb = ['"'];
    for (var i = 0;i < s.length;i++) {
      var ch = s.charAt(i);
      var cc = ch.charCodeAt(0);
      sb[i + 1] = goog.string.specialEscapeChars_[ch] || (cc > 31 && cc < 127 ? ch : goog.string.escapeChar(ch));
    }
    sb.push('"');
    return sb.join("");
  }
};
goog.string.escapeString = function(str) {
  var sb = [];
  for (var i = 0;i < str.length;i++) {
    sb[i] = goog.string.escapeChar(str.charAt(i));
  }
  return sb.join("");
};
goog.string.escapeChar = function(c) {
  if (c in goog.string.jsEscapeCache_) {
    return goog.string.jsEscapeCache_[c];
  }
  if (c in goog.string.specialEscapeChars_) {
    return goog.string.jsEscapeCache_[c] = goog.string.specialEscapeChars_[c];
  }
  var rv = c;
  var cc = c.charCodeAt(0);
  if (cc > 31 && cc < 127) {
    rv = c;
  } else {
    if (cc < 256) {
      rv = "\\x";
      if (cc < 16 || cc > 256) {
        rv += "0";
      }
    } else {
      rv = "\\u";
      if (cc < 4096) {
        rv += "0";
      }
    }
    rv += cc.toString(16).toUpperCase();
  }
  return goog.string.jsEscapeCache_[c] = rv;
};
goog.string.toMap = function(s) {
  var rv = {};
  for (var i = 0;i < s.length;i++) {
    rv[s.charAt(i)] = true;
  }
  return rv;
};
goog.string.contains = function(s, ss) {
  return s.indexOf(ss) != -1;
};
goog.string.countOf = function(s, ss) {
  return s && ss ? s.split(ss).length - 1 : 0;
};
goog.string.removeAt = function(s, index, stringLength) {
  var resultStr = s;
  if (index >= 0 && (index < s.length && stringLength > 0)) {
    resultStr = s.substr(0, index) + s.substr(index + stringLength, s.length - index - stringLength);
  }
  return resultStr;
};
goog.string.remove = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "");
  return s.replace(re, "");
};
goog.string.removeAll = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "g");
  return s.replace(re, "");
};
goog.string.regExpEscape = function(s) {
  return String(s).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08");
};
goog.string.repeat = function(string, length) {
  return(new Array(length + 1)).join(string);
};
goog.string.padNumber = function(num, length, opt_precision) {
  var s = goog.isDef(opt_precision) ? num.toFixed(opt_precision) : String(num);
  var index = s.indexOf(".");
  if (index == -1) {
    index = s.length;
  }
  return goog.string.repeat("0", Math.max(0, length - index)) + s;
};
goog.string.makeSafe = function(obj) {
  return obj == null ? "" : String(obj);
};
goog.string.buildString = function(var_args) {
  return Array.prototype.join.call(arguments, "");
};
goog.string.getRandomString = function() {
  var x = 2147483648;
  return Math.floor(Math.random() * x).toString(36) + Math.abs(Math.floor(Math.random() * x) ^ goog.now()).toString(36);
};
goog.string.compareVersions = function(version1, version2) {
  var order = 0;
  var v1Subs = goog.string.trim(String(version1)).split(".");
  var v2Subs = goog.string.trim(String(version2)).split(".");
  var subCount = Math.max(v1Subs.length, v2Subs.length);
  for (var subIdx = 0;order == 0 && subIdx < subCount;subIdx++) {
    var v1Sub = v1Subs[subIdx] || "";
    var v2Sub = v2Subs[subIdx] || "";
    var v1CompParser = new RegExp("(\\d*)(\\D*)", "g");
    var v2CompParser = new RegExp("(\\d*)(\\D*)", "g");
    do {
      var v1Comp = v1CompParser.exec(v1Sub) || ["", "", ""];
      var v2Comp = v2CompParser.exec(v2Sub) || ["", "", ""];
      if (v1Comp[0].length == 0 && v2Comp[0].length == 0) {
        break;
      }
      var v1CompNum = v1Comp[1].length == 0 ? 0 : parseInt(v1Comp[1], 10);
      var v2CompNum = v2Comp[1].length == 0 ? 0 : parseInt(v2Comp[1], 10);
      order = goog.string.compareElements_(v1CompNum, v2CompNum) || (goog.string.compareElements_(v1Comp[2].length == 0, v2Comp[2].length == 0) || goog.string.compareElements_(v1Comp[2], v2Comp[2]));
    } while (order == 0);
  }
  return order;
};
goog.string.compareElements_ = function(left, right) {
  if (left < right) {
    return-1;
  } else {
    if (left > right) {
      return 1;
    }
  }
  return 0;
};
goog.string.HASHCODE_MAX_ = 4294967296;
goog.string.hashCode = function(str) {
  var result = 0;
  for (var i = 0;i < str.length;++i) {
    result = 31 * result + str.charCodeAt(i);
    result %= goog.string.HASHCODE_MAX_;
  }
  return result;
};
goog.string.uniqueStringCounter_ = Math.random() * 2147483648 | 0;
goog.string.createUniqueString = function() {
  return "goog_" + goog.string.uniqueStringCounter_++;
};
goog.string.toNumber = function(str) {
  var num = Number(str);
  if (num == 0 && goog.string.isEmpty(str)) {
    return NaN;
  }
  return num;
};
goog.string.toCamelCase = function(str) {
  return String(str).replace(/\-([a-z])/g, function(all, match) {
    return match.toUpperCase();
  });
};
goog.string.toSelectorCase = function(str) {
  return String(str).replace(/([A-Z])/g, "-$1").toLowerCase();
};
goog.string.toTitleCase = function(str, opt_delimiters) {
  var delimiters = goog.isString(opt_delimiters) ? goog.string.regExpEscape(opt_delimiters) : "\\s";
  delimiters = delimiters ? "|[" + delimiters + "]+" : "";
  var regexp = new RegExp("(^" + delimiters + ")([a-z])", "g");
  return str.replace(regexp, function(all, p1, p2) {
    return p1 + p2.toUpperCase();
  });
};
goog.string.parseInt = function(value) {
  if (isFinite(value)) {
    value = String(value);
  }
  if (goog.isString(value)) {
    return/^\s*-?0x/i.test(value) ? parseInt(value, 16) : parseInt(value, 10);
  }
  return NaN;
};
goog.provide("goog.debug.Error");
goog.debug.Error = function(opt_msg) {
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, goog.debug.Error);
  } else {
    this.stack = (new Error).stack || "";
  }
  if (opt_msg) {
    this.message = String(opt_msg);
  }
};
goog.inherits(goog.debug.Error, Error);
goog.debug.Error.prototype.name = "CustomError";
goog.provide("goog.asserts");
goog.provide("goog.asserts.AssertionError");
goog.require("goog.debug.Error");
goog.require("goog.string");
goog.asserts.ENABLE_ASSERTS = goog.DEBUG;
goog.asserts.AssertionError = function(messagePattern, messageArgs) {
  messageArgs.unshift(messagePattern);
  goog.debug.Error.call(this, goog.string.subs.apply(null, messageArgs));
  messageArgs.shift();
  this.messagePattern = messagePattern;
};
goog.inherits(goog.asserts.AssertionError, goog.debug.Error);
goog.asserts.AssertionError.prototype.name = "AssertionError";
goog.asserts.doAssertFailure_ = function(defaultMessage, defaultArgs, givenMessage, givenArgs) {
  var message = "Assertion failed";
  if (givenMessage) {
    message += ": " + givenMessage;
    var args = givenArgs;
  } else {
    if (defaultMessage) {
      message += ": " + defaultMessage;
      args = defaultArgs;
    }
  }
  throw new goog.asserts.AssertionError("" + message, args || []);
};
goog.asserts.assert = function(condition, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !condition) {
    goog.asserts.doAssertFailure_("", null, opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return condition;
};
goog.asserts.fail = function(opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS) {
    throw new goog.asserts.AssertionError("Failure" + (opt_message ? ": " + opt_message : ""), Array.prototype.slice.call(arguments, 1));
  }
};
goog.asserts.assertNumber = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isNumber(value)) {
    goog.asserts.doAssertFailure_("Expected number but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertString = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isString(value)) {
    goog.asserts.doAssertFailure_("Expected string but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertFunction = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isFunction(value)) {
    goog.asserts.doAssertFailure_("Expected function but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertObject = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isObject(value)) {
    goog.asserts.doAssertFailure_("Expected object but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertArray = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isArray(value)) {
    goog.asserts.doAssertFailure_("Expected array but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertBoolean = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isBoolean(value)) {
    goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertInstanceof = function(value, type, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !(value instanceof type)) {
    goog.asserts.doAssertFailure_("instanceof check failed.", null, opt_message, Array.prototype.slice.call(arguments, 3));
  }
  return(value);
};
goog.provide("goog.array");
goog.provide("goog.array.ArrayLike");
goog.require("goog.asserts");
goog.NATIVE_ARRAY_PROTOTYPES = goog.TRUSTED_SITE;
goog.array.ArrayLike;
goog.array.peek = function(array) {
  return array[array.length - 1];
};
goog.array.ARRAY_PROTOTYPE_ = Array.prototype;
goog.array.indexOf = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.indexOf ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.indexOf.call(arr, obj, opt_fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? 0 : opt_fromIndex < 0 ? Math.max(0, arr.length + opt_fromIndex) : opt_fromIndex;
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.indexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i < arr.length;i++) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.lastIndexOf ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  return goog.array.ARRAY_PROTOTYPE_.lastIndexOf.call(arr, obj, fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  if (fromIndex < 0) {
    fromIndex = Math.max(0, arr.length + fromIndex);
  }
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.lastIndexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i >= 0;i--) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.forEach = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.forEach ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.forEach.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.forEachRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;--i) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.filter = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.filter ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.filter.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = [];
  var resLength = 0;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      var val = arr2[i];
      if (f.call(opt_obj, val, i, arr)) {
        res[resLength++] = val;
      }
    }
  }
  return res;
};
goog.array.map = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.map ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.map.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = new Array(l);
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      res[i] = f.call(opt_obj, arr2[i], i, arr);
    }
  }
  return res;
};
goog.array.reduce = function(arr, f, val, opt_obj) {
  if (arr.reduce) {
    if (opt_obj) {
      return arr.reduce(goog.bind(f, opt_obj), val);
    } else {
      return arr.reduce(f, val);
    }
  }
  var rval = val;
  goog.array.forEach(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.reduceRight = function(arr, f, val, opt_obj) {
  if (arr.reduceRight) {
    if (opt_obj) {
      return arr.reduceRight(goog.bind(f, opt_obj), val);
    } else {
      return arr.reduceRight(f, val);
    }
  }
  var rval = val;
  goog.array.forEachRight(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.some = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.some ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.some.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return true;
    }
  }
  return false;
};
goog.array.every = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.every ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.every.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && !f.call(opt_obj, arr2[i], i, arr)) {
      return false;
    }
  }
  return true;
};
goog.array.count = function(arr, f, opt_obj) {
  var count = 0;
  goog.array.forEach(arr, function(element, index, arr) {
    if (f.call(opt_obj, element, index, arr)) {
      ++count;
    }
  }, opt_obj);
  return count;
};
goog.array.find = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndex = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.findRight = function(arr, f, opt_obj) {
  var i = goog.array.findIndexRight(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndexRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;i--) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.contains = function(arr, obj) {
  return goog.array.indexOf(arr, obj) >= 0;
};
goog.array.isEmpty = function(arr) {
  return arr.length == 0;
};
goog.array.clear = function(arr) {
  if (!goog.isArray(arr)) {
    for (var i = arr.length - 1;i >= 0;i--) {
      delete arr[i];
    }
  }
  arr.length = 0;
};
goog.array.insert = function(arr, obj) {
  if (!goog.array.contains(arr, obj)) {
    arr.push(obj);
  }
};
goog.array.insertAt = function(arr, obj, opt_i) {
  goog.array.splice(arr, opt_i, 0, obj);
};
goog.array.insertArrayAt = function(arr, elementsToAdd, opt_i) {
  goog.partial(goog.array.splice, arr, opt_i, 0).apply(null, elementsToAdd);
};
goog.array.insertBefore = function(arr, obj, opt_obj2) {
  var i;
  if (arguments.length == 2 || (i = goog.array.indexOf(arr, opt_obj2)) < 0) {
    arr.push(obj);
  } else {
    goog.array.insertAt(arr, obj, i);
  }
};
goog.array.remove = function(arr, obj) {
  var i = goog.array.indexOf(arr, obj);
  var rv;
  if (rv = i >= 0) {
    goog.array.removeAt(arr, i);
  }
  return rv;
};
goog.array.removeAt = function(arr, i) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.call(arr, i, 1).length == 1;
};
goog.array.removeIf = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  if (i >= 0) {
    goog.array.removeAt(arr, i);
    return true;
  }
  return false;
};
goog.array.concat = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.toArray = function(object) {
  var length = object.length;
  if (length > 0) {
    var rv = new Array(length);
    for (var i = 0;i < length;i++) {
      rv[i] = object[i];
    }
    return rv;
  }
  return[];
};
goog.array.clone = goog.array.toArray;
goog.array.extend = function(arr1, var_args) {
  for (var i = 1;i < arguments.length;i++) {
    var arr2 = arguments[i];
    var isArrayLike;
    if (goog.isArray(arr2) || (isArrayLike = goog.isArrayLike(arr2)) && Object.prototype.hasOwnProperty.call(arr2, "callee")) {
      arr1.push.apply(arr1, arr2);
    } else {
      if (isArrayLike) {
        var len1 = arr1.length;
        var len2 = arr2.length;
        for (var j = 0;j < len2;j++) {
          arr1[len1 + j] = arr2[j];
        }
      } else {
        arr1.push(arr2);
      }
    }
  }
};
goog.array.splice = function(arr, index, howMany, var_args) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.apply(arr, goog.array.slice(arguments, 1));
};
goog.array.slice = function(arr, start, opt_end) {
  goog.asserts.assert(arr.length != null);
  if (arguments.length <= 2) {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start);
  } else {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start, opt_end);
  }
};
goog.array.removeDuplicates = function(arr, opt_rv) {
  var returnArray = opt_rv || arr;
  var seen = {}, cursorInsert = 0, cursorRead = 0;
  while (cursorRead < arr.length) {
    var current = arr[cursorRead++];
    var key = goog.isObject(current) ? "o" + goog.getUid(current) : (typeof current).charAt(0) + current;
    if (!Object.prototype.hasOwnProperty.call(seen, key)) {
      seen[key] = true;
      returnArray[cursorInsert++] = current;
    }
  }
  returnArray.length = cursorInsert;
};
goog.array.binarySearch = function(arr, target, opt_compareFn) {
  return goog.array.binarySearch_(arr, opt_compareFn || goog.array.defaultCompare, false, target);
};
goog.array.binarySelect = function(arr, evaluator, opt_obj) {
  return goog.array.binarySearch_(arr, evaluator, true, undefined, opt_obj);
};
goog.array.binarySearch_ = function(arr, compareFn, isEvaluator, opt_target, opt_selfObj) {
  var left = 0;
  var right = arr.length;
  var found;
  while (left < right) {
    var middle = left + right >> 1;
    var compareResult;
    if (isEvaluator) {
      compareResult = compareFn.call(opt_selfObj, arr[middle], middle, arr);
    } else {
      compareResult = compareFn(opt_target, arr[middle]);
    }
    if (compareResult > 0) {
      left = middle + 1;
    } else {
      right = middle;
      found = !compareResult;
    }
  }
  return found ? left : ~left;
};
goog.array.sort = function(arr, opt_compareFn) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.sort.call(arr, opt_compareFn || goog.array.defaultCompare);
};
goog.array.stableSort = function(arr, opt_compareFn) {
  for (var i = 0;i < arr.length;i++) {
    arr[i] = {index:i, value:arr[i]};
  }
  var valueCompareFn = opt_compareFn || goog.array.defaultCompare;
  function stableCompareFn(obj1, obj2) {
    return valueCompareFn(obj1.value, obj2.value) || obj1.index - obj2.index;
  }
  goog.array.sort(arr, stableCompareFn);
  for (var i = 0;i < arr.length;i++) {
    arr[i] = arr[i].value;
  }
};
goog.array.sortObjectsByKey = function(arr, key, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  goog.array.sort(arr, function(a, b) {
    return compare(a[key], b[key]);
  });
};
goog.array.isSorted = function(arr, opt_compareFn, opt_strict) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  for (var i = 1;i < arr.length;i++) {
    var compareResult = compare(arr[i - 1], arr[i]);
    if (compareResult > 0 || compareResult == 0 && opt_strict) {
      return false;
    }
  }
  return true;
};
goog.array.equals = function(arr1, arr2, opt_equalsFn) {
  if (!goog.isArrayLike(arr1) || (!goog.isArrayLike(arr2) || arr1.length != arr2.length)) {
    return false;
  }
  var l = arr1.length;
  var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;
  for (var i = 0;i < l;i++) {
    if (!equalsFn(arr1[i], arr2[i])) {
      return false;
    }
  }
  return true;
};
goog.array.compare = function(arr1, arr2, opt_equalsFn) {
  return goog.array.equals(arr1, arr2, opt_equalsFn);
};
goog.array.compare3 = function(arr1, arr2, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  var l = Math.min(arr1.length, arr2.length);
  for (var i = 0;i < l;i++) {
    var result = compare(arr1[i], arr2[i]);
    if (result != 0) {
      return result;
    }
  }
  return goog.array.defaultCompare(arr1.length, arr2.length);
};
goog.array.defaultCompare = function(a, b) {
  return a > b ? 1 : a < b ? -1 : 0;
};
goog.array.defaultCompareEquality = function(a, b) {
  return a === b;
};
goog.array.binaryInsert = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  if (index < 0) {
    goog.array.insertAt(array, value, -(index + 1));
    return true;
  }
  return false;
};
goog.array.binaryRemove = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  return index >= 0 ? goog.array.removeAt(array, index) : false;
};
goog.array.bucket = function(array, sorter) {
  var buckets = {};
  for (var i = 0;i < array.length;i++) {
    var value = array[i];
    var key = sorter(value, i, array);
    if (goog.isDef(key)) {
      var bucket = buckets[key] || (buckets[key] = []);
      bucket.push(value);
    }
  }
  return buckets;
};
goog.array.toObject = function(arr, keyFunc, opt_obj) {
  var ret = {};
  goog.array.forEach(arr, function(element, index) {
    ret[keyFunc.call(opt_obj, element, index, arr)] = element;
  });
  return ret;
};
goog.array.range = function(startOrEnd, opt_end, opt_step) {
  var array = [];
  var start = 0;
  var end = startOrEnd;
  var step = opt_step || 1;
  if (opt_end !== undefined) {
    start = startOrEnd;
    end = opt_end;
  }
  if (step * (end - start) < 0) {
    return[];
  }
  if (step > 0) {
    for (var i = start;i < end;i += step) {
      array.push(i);
    }
  } else {
    for (var i = start;i > end;i += step) {
      array.push(i);
    }
  }
  return array;
};
goog.array.repeat = function(value, n) {
  var array = [];
  for (var i = 0;i < n;i++) {
    array[i] = value;
  }
  return array;
};
goog.array.flatten = function(var_args) {
  var result = [];
  for (var i = 0;i < arguments.length;i++) {
    var element = arguments[i];
    if (goog.isArray(element)) {
      result.push.apply(result, goog.array.flatten.apply(null, element));
    } else {
      result.push(element);
    }
  }
  return result;
};
goog.array.rotate = function(array, n) {
  goog.asserts.assert(array.length != null);
  if (array.length) {
    n %= array.length;
    if (n > 0) {
      goog.array.ARRAY_PROTOTYPE_.unshift.apply(array, array.splice(-n, n));
    } else {
      if (n < 0) {
        goog.array.ARRAY_PROTOTYPE_.push.apply(array, array.splice(0, -n));
      }
    }
  }
  return array;
};
goog.array.zip = function(var_args) {
  if (!arguments.length) {
    return[];
  }
  var result = [];
  for (var i = 0;true;i++) {
    var value = [];
    for (var j = 0;j < arguments.length;j++) {
      var arr = arguments[j];
      if (i >= arr.length) {
        return result;
      }
      value.push(arr[i]);
    }
    result.push(value);
  }
};
goog.array.shuffle = function(arr, opt_randFn) {
  var randFn = opt_randFn || Math.random;
  for (var i = arr.length - 1;i > 0;i--) {
    var j = Math.floor(randFn() * (i + 1));
    var tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
  }
};
goog.provide("goog.object");
goog.object.forEach = function(obj, f, opt_obj) {
  for (var key in obj) {
    f.call(opt_obj, obj[key], key, obj);
  }
};
goog.object.filter = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      res[key] = obj[key];
    }
  }
  return res;
};
goog.object.map = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    res[key] = f.call(opt_obj, obj[key], key, obj);
  }
  return res;
};
goog.object.some = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      return true;
    }
  }
  return false;
};
goog.object.every = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (!f.call(opt_obj, obj[key], key, obj)) {
      return false;
    }
  }
  return true;
};
goog.object.getCount = function(obj) {
  var rv = 0;
  for (var key in obj) {
    rv++;
  }
  return rv;
};
goog.object.getAnyKey = function(obj) {
  for (var key in obj) {
    return key;
  }
};
goog.object.getAnyValue = function(obj) {
  for (var key in obj) {
    return obj[key];
  }
};
goog.object.contains = function(obj, val) {
  return goog.object.containsValue(obj, val);
};
goog.object.getValues = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = obj[key];
  }
  return res;
};
goog.object.getKeys = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = key;
  }
  return res;
};
goog.object.getValueByKeys = function(obj, var_args) {
  var isArrayLike = goog.isArrayLike(var_args);
  var keys = isArrayLike ? var_args : arguments;
  for (var i = isArrayLike ? 0 : 1;i < keys.length;i++) {
    obj = obj[keys[i]];
    if (!goog.isDef(obj)) {
      break;
    }
  }
  return obj;
};
goog.object.containsKey = function(obj, key) {
  return key in obj;
};
goog.object.containsValue = function(obj, val) {
  for (var key in obj) {
    if (obj[key] == val) {
      return true;
    }
  }
  return false;
};
goog.object.findKey = function(obj, f, opt_this) {
  for (var key in obj) {
    if (f.call(opt_this, obj[key], key, obj)) {
      return key;
    }
  }
  return undefined;
};
goog.object.findValue = function(obj, f, opt_this) {
  var key = goog.object.findKey(obj, f, opt_this);
  return key && obj[key];
};
goog.object.isEmpty = function(obj) {
  for (var key in obj) {
    return false;
  }
  return true;
};
goog.object.clear = function(obj) {
  for (var i in obj) {
    delete obj[i];
  }
};
goog.object.remove = function(obj, key) {
  var rv;
  if (rv = key in obj) {
    delete obj[key];
  }
  return rv;
};
goog.object.add = function(obj, key, val) {
  if (key in obj) {
    throw Error('The object already contains the key "' + key + '"');
  }
  goog.object.set(obj, key, val);
};
goog.object.get = function(obj, key, opt_val) {
  if (key in obj) {
    return obj[key];
  }
  return opt_val;
};
goog.object.set = function(obj, key, value) {
  obj[key] = value;
};
goog.object.setIfUndefined = function(obj, key, value) {
  return key in obj ? obj[key] : obj[key] = value;
};
goog.object.clone = function(obj) {
  var res = {};
  for (var key in obj) {
    res[key] = obj[key];
  }
  return res;
};
goog.object.unsafeClone = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.object.unsafeClone(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.object.transpose = function(obj) {
  var transposed = {};
  for (var key in obj) {
    transposed[obj[key]] = key;
  }
  return transposed;
};
goog.object.PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.object.extend = function(target, var_args) {
  var key, source;
  for (var i = 1;i < arguments.length;i++) {
    source = arguments[i];
    for (key in source) {
      target[key] = source[key];
    }
    for (var j = 0;j < goog.object.PROTOTYPE_FIELDS_.length;j++) {
      key = goog.object.PROTOTYPE_FIELDS_[j];
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }
};
goog.object.create = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.create.apply(null, arguments[0]);
  }
  if (argLength % 2) {
    throw Error("Uneven number of arguments");
  }
  var rv = {};
  for (var i = 0;i < argLength;i += 2) {
    rv[arguments[i]] = arguments[i + 1];
  }
  return rv;
};
goog.object.createSet = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.createSet.apply(null, arguments[0]);
  }
  var rv = {};
  for (var i = 0;i < argLength;i++) {
    rv[arguments[i]] = true;
  }
  return rv;
};
goog.object.createImmutableView = function(obj) {
  var result = obj;
  if (Object.isFrozen && !Object.isFrozen(obj)) {
    result = Object.create(obj);
    Object.freeze(result);
  }
  return result;
};
goog.object.isImmutableView = function(obj) {
  return!!Object.isFrozen && Object.isFrozen(obj);
};
goog.provide("goog.string.StringBuffer");
goog.string.StringBuffer = function(opt_a1, var_args) {
  if (opt_a1 != null) {
    this.append.apply(this, arguments);
  }
};
goog.string.StringBuffer.prototype.buffer_ = "";
goog.string.StringBuffer.prototype.set = function(s) {
  this.buffer_ = "" + s;
};
goog.string.StringBuffer.prototype.append = function(a1, opt_a2, var_args) {
  this.buffer_ += a1;
  if (opt_a2 != null) {
    for (var i = 1;i < arguments.length;i++) {
      this.buffer_ += arguments[i];
    }
  }
  return this;
};
goog.string.StringBuffer.prototype.clear = function() {
  this.buffer_ = "";
};
goog.string.StringBuffer.prototype.getLength = function() {
  return this.buffer_.length;
};
goog.string.StringBuffer.prototype.toString = function() {
  return this.buffer_;
};
goog.provide("cljs.core");
goog.require("goog.array");
goog.require("goog.array");
goog.require("goog.object");
goog.require("goog.object");
goog.require("goog.string.StringBuffer");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
goog.require("goog.string");
cljs.core._STAR_clojurescript_version_STAR_ = "0.0-2173";
cljs.core._STAR_unchecked_if_STAR_ = false;
cljs.core._STAR_print_fn_STAR_ = function _STAR_print_fn_STAR_(_) {
  throw new Error("No *print-fn* fn set for evaluation environment");
};
cljs.core.set_print_fn_BANG_ = function set_print_fn_BANG_(f) {
  return cljs.core._STAR_print_fn_STAR_ = f;
};
cljs.core._STAR_flush_on_newline_STAR_ = true;
cljs.core._STAR_print_newline_STAR_ = true;
cljs.core._STAR_print_readably_STAR_ = true;
cljs.core._STAR_print_meta_STAR_ = false;
cljs.core._STAR_print_dup_STAR_ = false;
cljs.core._STAR_print_length_STAR_ = null;
cljs.core._STAR_print_level_STAR_ = null;
cljs.core.pr_opts = function pr_opts() {
  return new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", 4338025857), cljs.core._STAR_flush_on_newline_STAR_, new cljs.core.Keyword(null, "readably", "readably", 4441712502), cljs.core._STAR_print_readably_STAR_, new cljs.core.Keyword(null, "meta", "meta", 1017252215), cljs.core._STAR_print_meta_STAR_, new cljs.core.Keyword(null, "dup", "dup", 1014004081), cljs.core._STAR_print_dup_STAR_, new cljs.core.Keyword(null, "print-length", "print-length", 
  3960797560), cljs.core._STAR_print_length_STAR_], null);
};
cljs.core.enable_console_print_BANG_ = function enable_console_print_BANG_() {
  cljs.core._STAR_print_newline_STAR_ = false;
  return cljs.core._STAR_print_fn_STAR_ = function() {
    var G__107294__delegate = function(args) {
      return console.log.apply(console, cljs.core.into_array.call(null, args));
    };
    var G__107294 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__107294__delegate.call(this, args);
    };
    G__107294.cljs$lang$maxFixedArity = 0;
    G__107294.cljs$lang$applyTo = function(arglist__107295) {
      var args = cljs.core.seq(arglist__107295);
      return G__107294__delegate(args);
    };
    G__107294.cljs$core$IFn$_invoke$arity$variadic = G__107294__delegate;
    return G__107294;
  }();
};
cljs.core.truth_ = function truth_(x) {
  return x != null && x !== false;
};
cljs.core.not_native = null;
cljs.core.identical_QMARK_ = function identical_QMARK_(x, y) {
  return x === y;
};
cljs.core.nil_QMARK_ = function nil_QMARK_(x) {
  return x == null;
};
cljs.core.array_QMARK_ = function array_QMARK_(x) {
  return x instanceof Array;
};
cljs.core.number_QMARK_ = function number_QMARK_(n) {
  return typeof n === "number";
};
cljs.core.not = function not(x) {
  if (cljs.core.truth_(x)) {
    return false;
  } else {
    return true;
  }
};
cljs.core.object_QMARK_ = function object_QMARK_(x) {
  if (!(x == null)) {
    return x.constructor === Object;
  } else {
    return false;
  }
};
cljs.core.string_QMARK_ = function string_QMARK_(x) {
  return goog.isString(x);
};
cljs.core.native_satisfies_QMARK_ = function native_satisfies_QMARK_(p, x) {
  var x__$1 = x == null ? null : x;
  if (p[goog.typeOf(x__$1)]) {
    return true;
  } else {
    if (p["_"]) {
      return true;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return false;
      } else {
        return null;
      }
    }
  }
};
cljs.core.is_proto_ = function is_proto_(x) {
  return x.constructor.prototype === x;
};
cljs.core._STAR_main_cli_fn_STAR_ = null;
cljs.core.type = function type(x) {
  if (x == null) {
    return null;
  } else {
    return x.constructor;
  }
};
cljs.core.missing_protocol = function missing_protocol(proto, obj) {
  var ty = cljs.core.type.call(null, obj);
  var ty__$1 = cljs.core.truth_(function() {
    var and__12818__auto__ = ty;
    if (cljs.core.truth_(and__12818__auto__)) {
      return ty.cljs$lang$type;
    } else {
      return and__12818__auto__;
    }
  }()) ? ty.cljs$lang$ctorStr : goog.typeOf(obj);
  return new Error(["No protocol method ", proto, " defined for type ", ty__$1, ": ", obj].join(""));
};
cljs.core.type__GT_str = function type__GT_str(ty) {
  var temp__4090__auto__ = ty.cljs$lang$ctorStr;
  if (cljs.core.truth_(temp__4090__auto__)) {
    var s = temp__4090__auto__;
    return s;
  } else {
    return[cljs.core.str(ty)].join("");
  }
};
cljs.core.make_array = function() {
  var make_array = null;
  var make_array__1 = function(size) {
    return new Array(size);
  };
  var make_array__2 = function(type, size) {
    return make_array.call(null, size);
  };
  make_array = function(type, size) {
    switch(arguments.length) {
      case 1:
        return make_array__1.call(this, type);
      case 2:
        return make_array__2.call(this, type, size);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  make_array.cljs$core$IFn$_invoke$arity$1 = make_array__1;
  make_array.cljs$core$IFn$_invoke$arity$2 = make_array__2;
  return make_array;
}();
cljs.core.aclone = function aclone(arr) {
  var len = arr.length;
  var new_arr = new Array(len);
  var n__13678__auto___107296 = len;
  var i_107297 = 0;
  while (true) {
    if (i_107297 < n__13678__auto___107296) {
      new_arr[i_107297] = arr[i_107297];
      var G__107298 = i_107297 + 1;
      i_107297 = G__107298;
      continue;
    } else {
    }
    break;
  }
  return new_arr;
};
cljs.core.array = function array(var_args) {
  return Array.prototype.slice.call(arguments);
};
cljs.core.aget = function() {
  var aget = null;
  var aget__2 = function(array, i) {
    return array[i];
  };
  var aget__3 = function() {
    var G__107299__delegate = function(array, i, idxs) {
      return cljs.core.apply.call(null, aget, aget.call(null, array, i), idxs);
    };
    var G__107299 = function(array, i, var_args) {
      var idxs = null;
      if (arguments.length > 2) {
        idxs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__107299__delegate.call(this, array, i, idxs);
    };
    G__107299.cljs$lang$maxFixedArity = 2;
    G__107299.cljs$lang$applyTo = function(arglist__107300) {
      var array = cljs.core.first(arglist__107300);
      arglist__107300 = cljs.core.next(arglist__107300);
      var i = cljs.core.first(arglist__107300);
      var idxs = cljs.core.rest(arglist__107300);
      return G__107299__delegate(array, i, idxs);
    };
    G__107299.cljs$core$IFn$_invoke$arity$variadic = G__107299__delegate;
    return G__107299;
  }();
  aget = function(array, i, var_args) {
    var idxs = var_args;
    switch(arguments.length) {
      case 2:
        return aget__2.call(this, array, i);
      default:
        return aget__3.cljs$core$IFn$_invoke$arity$variadic(array, i, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aget.cljs$lang$maxFixedArity = 2;
  aget.cljs$lang$applyTo = aget__3.cljs$lang$applyTo;
  aget.cljs$core$IFn$_invoke$arity$2 = aget__2;
  aget.cljs$core$IFn$_invoke$arity$variadic = aget__3.cljs$core$IFn$_invoke$arity$variadic;
  return aget;
}();
cljs.core.aset = function() {
  var aset = null;
  var aset__3 = function(array, i, val) {
    return array[i] = val;
  };
  var aset__4 = function() {
    var G__107301__delegate = function(array, idx, idx2, idxv) {
      return cljs.core.apply.call(null, aset, array[idx], idx2, idxv);
    };
    var G__107301 = function(array, idx, idx2, var_args) {
      var idxv = null;
      if (arguments.length > 3) {
        idxv = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__107301__delegate.call(this, array, idx, idx2, idxv);
    };
    G__107301.cljs$lang$maxFixedArity = 3;
    G__107301.cljs$lang$applyTo = function(arglist__107302) {
      var array = cljs.core.first(arglist__107302);
      arglist__107302 = cljs.core.next(arglist__107302);
      var idx = cljs.core.first(arglist__107302);
      arglist__107302 = cljs.core.next(arglist__107302);
      var idx2 = cljs.core.first(arglist__107302);
      var idxv = cljs.core.rest(arglist__107302);
      return G__107301__delegate(array, idx, idx2, idxv);
    };
    G__107301.cljs$core$IFn$_invoke$arity$variadic = G__107301__delegate;
    return G__107301;
  }();
  aset = function(array, idx, idx2, var_args) {
    var idxv = var_args;
    switch(arguments.length) {
      case 3:
        return aset__3.call(this, array, idx, idx2);
      default:
        return aset__4.cljs$core$IFn$_invoke$arity$variadic(array, idx, idx2, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aset.cljs$lang$maxFixedArity = 3;
  aset.cljs$lang$applyTo = aset__4.cljs$lang$applyTo;
  aset.cljs$core$IFn$_invoke$arity$3 = aset__3;
  aset.cljs$core$IFn$_invoke$arity$variadic = aset__4.cljs$core$IFn$_invoke$arity$variadic;
  return aset;
}();
cljs.core.alength = function alength(array) {
  return array.length;
};
cljs.core.into_array = function() {
  var into_array = null;
  var into_array__1 = function(aseq) {
    return into_array.call(null, null, aseq);
  };
  var into_array__2 = function(type, aseq) {
    return cljs.core.reduce.call(null, function(a, x) {
      a.push(x);
      return a;
    }, [], aseq);
  };
  into_array = function(type, aseq) {
    switch(arguments.length) {
      case 1:
        return into_array__1.call(this, type);
      case 2:
        return into_array__2.call(this, type, aseq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  into_array.cljs$core$IFn$_invoke$arity$1 = into_array__1;
  into_array.cljs$core$IFn$_invoke$arity$2 = into_array__2;
  return into_array;
}();
cljs.core.Fn = function() {
  var obj107304 = {};
  return obj107304;
}();
cljs.core.IFn = function() {
  var obj107306 = {};
  return obj107306;
}();
cljs.core._invoke = function() {
  var _invoke = null;
  var _invoke__1 = function(this$) {
    if (function() {
      var and__12818__auto__ = this$;
      if (and__12818__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$1;
      } else {
        return and__12818__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$1(this$);
    } else {
      var x__13457__auto__ = this$ == null ? null : this$;
      return function() {
        var or__12830__auto__ = cljs.core._invoke[goog.typeOf(x__13457__auto__)];
        if (or__12830__auto__) {
          return or__12830__auto__;
        } else {
          var or__12830__auto____$1 = cljs.core._invoke["_"];
          if (or__12830__auto____$1) {
            return or__12830__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$);
    }
  };
  var _invoke__2 = function(this$, a) {
    if (function() {
      var and__12818__auto__ = this$;
      if (and__12818__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$2;
      } else {
        return and__12818__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$2(this$, a);
    } else {
      var x__13457__auto__ = this$ == null ? null : this$;
      return function() {
        var or__12830__auto__ = cljs.core._invoke[goog.typeOf(x__13457__auto__)];
        if (or__12830__auto__) {
          return or__12830__auto__;
        } else {
          var or__12830__auto____$1 = cljs.core._invoke["_"];
          if (or__12830__auto____$1) {
            return or__12830__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a);
    }
  };
  var _invoke__3 = function(this$, a, b) {
    if (function() {
      var and__12818__auto__ = this$;
      if (and__12818__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$3;
      } else {
        return and__12818__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$3(this$, a, b);
    } else {
      var x__13457__auto__ = this$ == null ? null : this$;
      return function() {
        var or__12830__auto__ = cljs.core._invoke[goog.typeOf(x__13457__auto__)];
        if (or__12830__auto__) {
          return or__12830__auto__;
        } else {
          var or__12830__auto____$1 = cljs.core._invoke["_"];
          if (or__12830__auto____$1) {
            return or__12830__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b);
    }
  };
  var _invoke__4 = function(this$, a, b, c) {
    if (function() {
      var and__12818__auto__ = this$;
      if (and__12818__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$4;
      } else {
        return and__12818__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$4(this$, a, b, c);
    } else {
      var x__13457__auto__ = this$ == null ? null : this$;
      return function() {
        var or__12830__auto__ = cljs.core._invoke[goog.typeOf(x__13457__auto__)];
        if (or__12830__auto__) {
          return or__12830__auto__;
        } else {
          var or__12830__auto____$1 = cljs.core._invoke["_"];
          if (or__12830__auto____$1) {
            return or__12830__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c);
    }
  };
  var _invoke__5 = function(this$, a, b, c, d) {
    if (function() {
      var and__12818__auto__ = this$;
      if (and__12818__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$5;
      } else {
        return and__12818__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d);
    } else {
      var x__13457__auto__ = this$ == null ? null : this$;
      return function() {
        var or__12830__auto__ = cljs.core._invoke[goog.typeOf(x__13457__auto__)];
        if (or__12830__auto__) {
          return or__12830__auto__;
        } else {
          var or__12830__auto____$1 = cljs.core._invoke["_"];
          if (or__12830__auto____$1) {
            return or__12830__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d);
    }
  };
  var _invoke__6 = function(this$, a, b, c, d, e) {
    if (function() {
      var and__12818__auto__ = this$;
      if (and__12818__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$6;
      } else {
        return and__12818__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e);
    } else {
      var x__13457__auto__ = this$ == null ? null : this$;
      return function() {
        var or__12830__auto__ = cljs.core._invoke[goog.typeOf(x__13457__auto__)];
        if (or__12830__auto__) {
          return or__12830__auto__;
        } else {
          var or__12830__auto____$1 = cljs.core._invoke["_"];
          if (or__12830__auto____$1) {
            return or__12830__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e);
    }
  };
  var _invoke__7 = function(this$, a, b, c, d, e, f) {
    if (function() {
      var and__12818__auto__ = this$;
      if (and__12818__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$7;
      } else {
        return and__12818__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f);
    } else {
      var x__13457__auto__ = this$ == null ? null : this$;
      return function() {
        var or__12830__auto__ = cljs.core._invoke[goog.typeOf(x__13457__auto__)];
        if (or__12830__auto__) {
          return or__12830__auto__;
        } else {
          var or__12830__auto____$1 = cljs.core._invoke["_"];
          if (or__12830__auto____$1) {
            return or__12830__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f);
    }
  };
  var _invoke__8 = function(this$, a, b, c, d, e, f, g) {
    if (function() {
      var and__12818__auto__ = this$;
      if (and__12818__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$8;
      } else {
        return and__12818__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g);
    } else {
      var x__13457__auto__ = this$ == null ? null : this$;
      return function() {
        var or__12830__auto__ = cljs.core._invoke[goog.typeOf(x__13457__auto__)];
        if (or__12830__auto__) {
          return or__12830__auto__;
        } else {
          var or__12830__auto____$1 = cljs.core._invoke["_"];
          if (or__12830__auto____$1) {
            return or__12830__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g);
    }
  };
  var _invoke__9 = function(this$, a, b, c, d, e, f, g, h) {
    if (function() {
      var and__12818__auto__ = this$;
      if (and__12818__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$9;
      } else {
        return and__12818__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h);
    } else {
      var x__13457__auto__ = this$ == null ? null : this$;
      return function() {
        var or__12830__auto__ = cljs.core._invoke[goog.typeOf(x__13457__auto__)];
        if (or__12830__auto__) {
          return or__12830__auto__;
        } else {
          var or__12830__auto____$1 = cljs.core._invoke["_"];
          if (or__12830__auto____$1) {
            return or__12830__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h);
    }
  };
  var _invoke__10 = function(this$, a, b, c, d, e, f, g, h, i) {
    if (function() {
      var and__12818__auto__ = this$;
      if (and__12818__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$10;
      } else {
        return and__12818__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i);
    } else {
      var x__13457__auto__ = this$ == null ? null : this$;
      return function() {
        var or__12830__auto__ = cljs.core._invoke[goog.typeOf(x__13457__auto__)];
        if (or__12830__auto__) {
          return or__12830__auto__;
        } else {
          var or__12830__auto____$1 = cljs.core._invoke["_"];
          if (or__12830__auto____$1) {
            return or__12830__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i);
    }
  };
  var _invoke__11 = function(this$, a, b, c, d, e, f, g, h, i, j) {
    if (function() {
      var and__12818__auto__ = this$;
      if (and__12818__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$11;
      } else {
        return and__12818__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j);
    } else {
      var x__13457__auto__ = this$ == null ? null : this$;
      return function() {
        var or__12830__auto__ = cljs.core._invoke[goog.typeOf(x__13457__auto__)];
        if (or__12830__auto__) {
          return or__12830__auto__;
        } else {
          var or__12830__auto____$1 = cljs.core._invoke["_"];
          if (or__12830__auto____$1) {
            return or__12830__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j);
    }
  };
  var _invoke__12 = function(this$, a, b, c, d, e, f, g, h, i, j, k) {
    if (function() {
      var and__12818__auto__ = this$;
      if (and__12818__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$12;
      } else {
        return and__12818__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k);
    } else {
      var x__13457__auto__ = this$ == null ? null : this$;
      return function() {
        var or__12830__auto__ = cljs.core._invoke[goog.typeOf(x__13457__auto__)];
        if (or__12830__auto__) {
          return or__12830__auto__;
        } else {
          var or__12830__auto____$1 = cljs.core._invoke["_"];
          if (or__12830__auto____$1) {
            return or__12830__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k);
    }
  };
  var _invoke__13 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l) {
    if (function() {
      var and__12818__auto__ = this$;
      if (and__12818__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$13;
      } else {
        return and__12818__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l);
    } else {
      var x__13457__auto__ = this$ == null ? null : this$;
      return function() {
        var or__12830__auto__ = cljs.core._invoke[goog.typeOf(x__13457__auto__)];
        if (or__12830__auto__) {
          return or__12830__auto__;
        } else {
          var or__12830__auto____$1 = cljs.core._invoke["_"];
          if (or__12830__auto____$1) {
            return or__12830__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l);
    }
  };
  var _invoke__14 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    if (function() {
      var and__12818__auto__ = this$;
      if (and__12818__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$14;
      } else {
        return and__12818__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    } else {
      var x__13457__auto__ = this$ == null ? null : this$;
      return function() {
        var or__12830__auto__ = cljs.core._invoke[goog.typeOf(x__13457__auto__)];
        if (or__12830__auto__) {
          return or__12830__auto__;
        } else {
          var or__12830__auto____$1 = cljs.core._invoke["_"];
          if (or__12830__auto____$1) {
            return or__12830__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    }
  };
  var _invoke__15 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    if (function() {
      var and__12818__auto__ = this$;
      if (and__12818__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$15;
      } else {
        return and__12818__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    } else {
      var x__13457__auto__ = this$ == null ? null : this$;
      return function() {
        var or__12830__auto__ = cljs.core._invoke[goog.typeOf(x__13457__auto__)];
        if (or__12830__auto__) {
          return or__12830__auto__;
        } else {
          var or__12830__auto____$1 = cljs.core._invoke["_"];
          if (or__12830__auto____$1) {
            return or__12830__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    }
  };
  var _invoke__16 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    if (function() {
      var and__12818__auto__ = this$;
      if (and__12818__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$16;
      } else {
        return and__12818__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    } else {
      var x__13457__auto__ = this$ == null ? null : this$;
      return function() {
        var or__12830__auto__ = cljs.core._invoke[goog.typeOf(x__13457__auto__)];
        if (or__12830__auto__) {
          return or__12830__auto__;
        } else {
          var or__12830__auto____$1 = cljs.core._invoke["_"];
          if (or__12830__auto____$1) {
            return or__12830__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    }
  };
  var _invoke__17 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    if (function() {
      var and__12818__auto__ = this$;
      if (and__12818__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$17;
      } else {
        return and__12818__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    } else {
      var x__13457__auto__ = this$ == null ? null : this$;
      return function() {
        var or__12830__auto__ = cljs.core._invoke[goog.typeOf(x__13457__auto__)];
        if (or__12830__auto__) {
          return or__12830__auto__;
        } else {
          var or__12830__auto____$1 = cljs.core._invoke["_"];
          if (or__12830__auto____$1) {
            return or__12830__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    }
  };
  var _invoke__18 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    if (function() {
      var and__12818__auto__ = this$;
      if (and__12818__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$18;
      } else {
        return and__12818__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    } else {
      var x__13457__auto__ = this$ == null ? null : this$;
      return function() {
        var or__12830__auto__ = cljs.core._invoke[goog.typeOf(x__13457__auto__)];
        if (or__12830__auto__) {
          return or__12830__auto__;
        } else {
          var or__12830__auto____$1 = cljs.core._invoke["_"];
          if (or__12830__auto____$1) {
            return or__12830__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    }
  };
  var _invoke__19 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s) {
    if (function() {
      var and__12818__auto__ = this$;
      if (and__12818__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$19;
      } else {
        return and__12818__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s);
    } else {
      var x__13457__auto__ = this$ == null ? null : this$;
      return function() {
        var or__12830__auto__ = cljs.core._invoke[goog.typeOf(x__13457__auto__)];
        if (or__12830__auto__) {
          return or__12830__auto__;
        } else {
          var or__12830__auto____$1 = cljs.core._invoke["_"];
          if (or__12830__auto____$1) {
            return or__12830__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s);
    }
  };
  var _invoke__20 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t) {
    if (function() {
      var and__12818__auto__ = this$;
      if (and__12818__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$20;
      } else {
        return and__12818__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t);
    } else {
      var x__13457__auto__ = this$ == null ? null : this$;
      return function() {
        var or__12830__auto__ = cljs.core._invoke[goog.typeOf(x__13457__auto__)];
        if (or__12830__auto__) {
          return or__12830__auto__;
        } else {
          var or__12830__auto____$1 = cljs.core._invoke["_"];
          if (or__12830__auto____$1) {
            return or__12830__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t);
    }
  };
  var _invoke__21 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest) {
    if (function() {
      var and__12818__auto__ = this$;
      if (and__12818__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$21;
      } else {
        return and__12818__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest);
    } else {
      var x__13457__auto__ = this$ == null ? null : this$;
      return function() {
        var or__12830__auto__ = cljs.core._invoke[goog.typeOf(x__13457__auto__)];
        if (or__12830__auto__) {
          return or__12830__auto__;
        } else {
          var or__12830__auto____$1 = cljs.core._invoke["_"];
          if (or__12830__auto____$1) {
            return or__12830__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest);
    }
  };
  _invoke = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return _invoke__1.call(this, this$);
      case 2:
        return _invoke__2.call(this, this$, a);
      case 3:
        return _invoke__3.call(this, this$, a, b);
      case 4:
        return _invoke__4.call(this, this$, a, b, c);
      case 5:
        return _invoke__5.call(this, this$, a, b, c, d);
      case 6:
        return _invoke__6.call(this, this$, a, b, c, d, e);
      case 7:
        return _invoke__7.call(this, this$, a, b, c, d, e, f);
      case 8:
        return _invoke__8.call(this, this$, a, b, c, d, e, f, g);
      case 9:
        return _invoke__9.call(this, this$, a, b, c, d, e, f, g, h);
      case 10:
        return _invoke__10.call(this, this$, a, b, c, d, e, f, g, h, i);
      case 11:
        return _invoke__11.call(this, this$, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return _invoke__12.call(this, this$, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return _invoke__13.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return _invoke__14.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return _invoke__15.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return _invoke__16.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return _invoke__17.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return _invoke__18.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return _invoke__19.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s);
      case 20:
        return _invoke__20.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t);
      case 21:
        return _invoke__21.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _invoke.cljs$core$IFn$_invoke$arity$1 = _invoke__1;
  _invoke.cljs$core$IFn$_invoke$arity$2 = _invoke__2;
  _invoke.cljs$core$IFn$_invoke$arity$3 = _invoke__3;
  _invoke.cljs$core$IFn$_invoke$arity$4 = _invoke__4;
  _invoke.cljs$core$IFn$_invoke$arity$5 = _invoke__5;
  _invoke.cljs$core$IFn$_invoke$arity$6 = _invoke__6;
  _invoke.cljs$core$IFn$_invoke$arity$7 = _invoke__7;
  _invoke.cljs$core$IFn$_invoke$arity$8 = _invoke__8;
  _invoke.cljs$core$IFn$_invoke$arity$9 = _invoke__9;
  _invoke.cljs$core$IFn$_invoke$arity$10 = _invoke__10;
  _invoke.cljs$core$IFn$_invoke$arity$11 = _invoke__11;
  _invoke.cljs$core$IFn$_invoke$arity$12 = _invoke__12;
  _invoke.cljs$core$IFn$_invoke$arity$13 = _invoke__13;
  _invoke.cljs$core$IFn$_invoke$arity$14 = _invoke__14;
  _invoke.cljs$core$IFn$_invoke$arity$15 = _invoke__15;
  _invoke.cljs$core$IFn$_invoke$arity$16 = _invoke__16;
  _invoke.cljs$core$IFn$_invoke$arity$17 = _invoke__17;
  _invoke.cljs$core$IFn$_invoke$arity$18 = _invoke__18;
  _invoke.cljs$core$IFn$_invoke$arity$19 = _invoke__19;
  _invoke.cljs$core$IFn$_invoke$arity$20 = _invoke__20;
  _invoke.cljs$core$IFn$_invoke$arity$21 = _invoke__21;
  return _invoke;
}();
cljs.core.ICloneable = function() {
  var obj107308 = {};
  return obj107308;
}();
cljs.core._clone = function _clone(value) {
  if (function() {
    var and__12818__auto__ = value;
    if (and__12818__auto__) {
      return value.cljs$core$ICloneable$_clone$arity$1;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return value.cljs$core$ICloneable$_clone$arity$1(value);
  } else {
    var x__13457__auto__ = value == null ? null : value;
    return function() {
      var or__12830__auto__ = cljs.core._clone[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = cljs.core._clone["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICloneable.-clone", value);
        }
      }
    }().call(null, value);
  }
};
cljs.core.ICounted = function() {
  var obj107310 = {};
  return obj107310;
}();
cljs.core._count = function _count(coll) {
  if (function() {
    var and__12818__auto__ = coll;
    if (and__12818__auto__) {
      return coll.cljs$core$ICounted$_count$arity$1;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return coll.cljs$core$ICounted$_count$arity$1(coll);
  } else {
    var x__13457__auto__ = coll == null ? null : coll;
    return function() {
      var or__12830__auto__ = cljs.core._count[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = cljs.core._count["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICounted.-count", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IEmptyableCollection = function() {
  var obj107312 = {};
  return obj107312;
}();
cljs.core._empty = function _empty(coll) {
  if (function() {
    var and__12818__auto__ = coll;
    if (and__12818__auto__) {
      return coll.cljs$core$IEmptyableCollection$_empty$arity$1;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return coll.cljs$core$IEmptyableCollection$_empty$arity$1(coll);
  } else {
    var x__13457__auto__ = coll == null ? null : coll;
    return function() {
      var or__12830__auto__ = cljs.core._empty[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = cljs.core._empty["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEmptyableCollection.-empty", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ICollection = function() {
  var obj107314 = {};
  return obj107314;
}();
cljs.core._conj = function _conj(coll, o) {
  if (function() {
    var and__12818__auto__ = coll;
    if (and__12818__auto__) {
      return coll.cljs$core$ICollection$_conj$arity$2;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return coll.cljs$core$ICollection$_conj$arity$2(coll, o);
  } else {
    var x__13457__auto__ = coll == null ? null : coll;
    return function() {
      var or__12830__auto__ = cljs.core._conj[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = cljs.core._conj["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICollection.-conj", coll);
        }
      }
    }().call(null, coll, o);
  }
};
cljs.core.IIndexed = function() {
  var obj107316 = {};
  return obj107316;
}();
cljs.core._nth = function() {
  var _nth = null;
  var _nth__2 = function(coll, n) {
    if (function() {
      var and__12818__auto__ = coll;
      if (and__12818__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$2;
      } else {
        return and__12818__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$2(coll, n);
    } else {
      var x__13457__auto__ = coll == null ? null : coll;
      return function() {
        var or__12830__auto__ = cljs.core._nth[goog.typeOf(x__13457__auto__)];
        if (or__12830__auto__) {
          return or__12830__auto__;
        } else {
          var or__12830__auto____$1 = cljs.core._nth["_"];
          if (or__12830__auto____$1) {
            return or__12830__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n);
    }
  };
  var _nth__3 = function(coll, n, not_found) {
    if (function() {
      var and__12818__auto__ = coll;
      if (and__12818__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$3;
      } else {
        return and__12818__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$3(coll, n, not_found);
    } else {
      var x__13457__auto__ = coll == null ? null : coll;
      return function() {
        var or__12830__auto__ = cljs.core._nth[goog.typeOf(x__13457__auto__)];
        if (or__12830__auto__) {
          return or__12830__auto__;
        } else {
          var or__12830__auto____$1 = cljs.core._nth["_"];
          if (or__12830__auto____$1) {
            return or__12830__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n, not_found);
    }
  };
  _nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return _nth__2.call(this, coll, n);
      case 3:
        return _nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _nth.cljs$core$IFn$_invoke$arity$2 = _nth__2;
  _nth.cljs$core$IFn$_invoke$arity$3 = _nth__3;
  return _nth;
}();
cljs.core.ASeq = function() {
  var obj107318 = {};
  return obj107318;
}();
cljs.core.ISeq = function() {
  var obj107320 = {};
  return obj107320;
}();
cljs.core._first = function _first(coll) {
  if (function() {
    var and__12818__auto__ = coll;
    if (and__12818__auto__) {
      return coll.cljs$core$ISeq$_first$arity$1;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_first$arity$1(coll);
  } else {
    var x__13457__auto__ = coll == null ? null : coll;
    return function() {
      var or__12830__auto__ = cljs.core._first[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = cljs.core._first["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeq.-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._rest = function _rest(coll) {
  if (function() {
    var and__12818__auto__ = coll;
    if (and__12818__auto__) {
      return coll.cljs$core$ISeq$_rest$arity$1;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_rest$arity$1(coll);
  } else {
    var x__13457__auto__ = coll == null ? null : coll;
    return function() {
      var or__12830__auto__ = cljs.core._rest[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = cljs.core._rest["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeq.-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INext = function() {
  var obj107322 = {};
  return obj107322;
}();
cljs.core._next = function _next(coll) {
  if (function() {
    var and__12818__auto__ = coll;
    if (and__12818__auto__) {
      return coll.cljs$core$INext$_next$arity$1;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return coll.cljs$core$INext$_next$arity$1(coll);
  } else {
    var x__13457__auto__ = coll == null ? null : coll;
    return function() {
      var or__12830__auto__ = cljs.core._next[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = cljs.core._next["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INext.-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ILookup = function() {
  var obj107324 = {};
  return obj107324;
}();
cljs.core._lookup = function() {
  var _lookup = null;
  var _lookup__2 = function(o, k) {
    if (function() {
      var and__12818__auto__ = o;
      if (and__12818__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$2;
      } else {
        return and__12818__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$2(o, k);
    } else {
      var x__13457__auto__ = o == null ? null : o;
      return function() {
        var or__12830__auto__ = cljs.core._lookup[goog.typeOf(x__13457__auto__)];
        if (or__12830__auto__) {
          return or__12830__auto__;
        } else {
          var or__12830__auto____$1 = cljs.core._lookup["_"];
          if (or__12830__auto____$1) {
            return or__12830__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ILookup.-lookup", o);
          }
        }
      }().call(null, o, k);
    }
  };
  var _lookup__3 = function(o, k, not_found) {
    if (function() {
      var and__12818__auto__ = o;
      if (and__12818__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$3;
      } else {
        return and__12818__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$3(o, k, not_found);
    } else {
      var x__13457__auto__ = o == null ? null : o;
      return function() {
        var or__12830__auto__ = cljs.core._lookup[goog.typeOf(x__13457__auto__)];
        if (or__12830__auto__) {
          return or__12830__auto__;
        } else {
          var or__12830__auto____$1 = cljs.core._lookup["_"];
          if (or__12830__auto____$1) {
            return or__12830__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ILookup.-lookup", o);
          }
        }
      }().call(null, o, k, not_found);
    }
  };
  _lookup = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return _lookup__2.call(this, o, k);
      case 3:
        return _lookup__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _lookup.cljs$core$IFn$_invoke$arity$2 = _lookup__2;
  _lookup.cljs$core$IFn$_invoke$arity$3 = _lookup__3;
  return _lookup;
}();
cljs.core.IAssociative = function() {
  var obj107326 = {};
  return obj107326;
}();
cljs.core._contains_key_QMARK_ = function _contains_key_QMARK_(coll, k) {
  if (function() {
    var and__12818__auto__ = coll;
    if (and__12818__auto__) {
      return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2(coll, k);
  } else {
    var x__13457__auto__ = coll == null ? null : coll;
    return function() {
      var or__12830__auto__ = cljs.core._contains_key_QMARK_[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = cljs.core._contains_key_QMARK_["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IAssociative.-contains-key?", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core._assoc = function _assoc(coll, k, v) {
  if (function() {
    var and__12818__auto__ = coll;
    if (and__12818__auto__) {
      return coll.cljs$core$IAssociative$_assoc$arity$3;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, k, v);
  } else {
    var x__13457__auto__ = coll == null ? null : coll;
    return function() {
      var or__12830__auto__ = cljs.core._assoc[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = cljs.core._assoc["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IAssociative.-assoc", coll);
        }
      }
    }().call(null, coll, k, v);
  }
};
cljs.core.IMap = function() {
  var obj107328 = {};
  return obj107328;
}();
cljs.core._dissoc = function _dissoc(coll, k) {
  if (function() {
    var and__12818__auto__ = coll;
    if (and__12818__auto__) {
      return coll.cljs$core$IMap$_dissoc$arity$2;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return coll.cljs$core$IMap$_dissoc$arity$2(coll, k);
  } else {
    var x__13457__auto__ = coll == null ? null : coll;
    return function() {
      var or__12830__auto__ = cljs.core._dissoc[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = cljs.core._dissoc["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMap.-dissoc", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core.IMapEntry = function() {
  var obj107330 = {};
  return obj107330;
}();
cljs.core._key = function _key(coll) {
  if (function() {
    var and__12818__auto__ = coll;
    if (and__12818__auto__) {
      return coll.cljs$core$IMapEntry$_key$arity$1;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_key$arity$1(coll);
  } else {
    var x__13457__auto__ = coll == null ? null : coll;
    return function() {
      var or__12830__auto__ = cljs.core._key[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = cljs.core._key["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMapEntry.-key", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._val = function _val(coll) {
  if (function() {
    var and__12818__auto__ = coll;
    if (and__12818__auto__) {
      return coll.cljs$core$IMapEntry$_val$arity$1;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_val$arity$1(coll);
  } else {
    var x__13457__auto__ = coll == null ? null : coll;
    return function() {
      var or__12830__auto__ = cljs.core._val[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = cljs.core._val["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMapEntry.-val", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISet = function() {
  var obj107332 = {};
  return obj107332;
}();
cljs.core._disjoin = function _disjoin(coll, v) {
  if (function() {
    var and__12818__auto__ = coll;
    if (and__12818__auto__) {
      return coll.cljs$core$ISet$_disjoin$arity$2;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return coll.cljs$core$ISet$_disjoin$arity$2(coll, v);
  } else {
    var x__13457__auto__ = coll == null ? null : coll;
    return function() {
      var or__12830__auto__ = cljs.core._disjoin[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = cljs.core._disjoin["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISet.-disjoin", coll);
        }
      }
    }().call(null, coll, v);
  }
};
cljs.core.IStack = function() {
  var obj107334 = {};
  return obj107334;
}();
cljs.core._peek = function _peek(coll) {
  if (function() {
    var and__12818__auto__ = coll;
    if (and__12818__auto__) {
      return coll.cljs$core$IStack$_peek$arity$1;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_peek$arity$1(coll);
  } else {
    var x__13457__auto__ = coll == null ? null : coll;
    return function() {
      var or__12830__auto__ = cljs.core._peek[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = cljs.core._peek["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IStack.-peek", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._pop = function _pop(coll) {
  if (function() {
    var and__12818__auto__ = coll;
    if (and__12818__auto__) {
      return coll.cljs$core$IStack$_pop$arity$1;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_pop$arity$1(coll);
  } else {
    var x__13457__auto__ = coll == null ? null : coll;
    return function() {
      var or__12830__auto__ = cljs.core._pop[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = cljs.core._pop["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IStack.-pop", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IVector = function() {
  var obj107336 = {};
  return obj107336;
}();
cljs.core._assoc_n = function _assoc_n(coll, n, val) {
  if (function() {
    var and__12818__auto__ = coll;
    if (and__12818__auto__) {
      return coll.cljs$core$IVector$_assoc_n$arity$3;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return coll.cljs$core$IVector$_assoc_n$arity$3(coll, n, val);
  } else {
    var x__13457__auto__ = coll == null ? null : coll;
    return function() {
      var or__12830__auto__ = cljs.core._assoc_n[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = cljs.core._assoc_n["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IVector.-assoc-n", coll);
        }
      }
    }().call(null, coll, n, val);
  }
};
cljs.core.IDeref = function() {
  var obj107338 = {};
  return obj107338;
}();
cljs.core._deref = function _deref(o) {
  if (function() {
    var and__12818__auto__ = o;
    if (and__12818__auto__) {
      return o.cljs$core$IDeref$_deref$arity$1;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return o.cljs$core$IDeref$_deref$arity$1(o);
  } else {
    var x__13457__auto__ = o == null ? null : o;
    return function() {
      var or__12830__auto__ = cljs.core._deref[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = cljs.core._deref["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDeref.-deref", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IDerefWithTimeout = function() {
  var obj107340 = {};
  return obj107340;
}();
cljs.core._deref_with_timeout = function _deref_with_timeout(o, msec, timeout_val) {
  if (function() {
    var and__12818__auto__ = o;
    if (and__12818__auto__) {
      return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3(o, msec, timeout_val);
  } else {
    var x__13457__auto__ = o == null ? null : o;
    return function() {
      var or__12830__auto__ = cljs.core._deref_with_timeout[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = cljs.core._deref_with_timeout["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDerefWithTimeout.-deref-with-timeout", o);
        }
      }
    }().call(null, o, msec, timeout_val);
  }
};
cljs.core.IMeta = function() {
  var obj107342 = {};
  return obj107342;
}();
cljs.core._meta = function _meta(o) {
  if (function() {
    var and__12818__auto__ = o;
    if (and__12818__auto__) {
      return o.cljs$core$IMeta$_meta$arity$1;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return o.cljs$core$IMeta$_meta$arity$1(o);
  } else {
    var x__13457__auto__ = o == null ? null : o;
    return function() {
      var or__12830__auto__ = cljs.core._meta[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = cljs.core._meta["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMeta.-meta", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IWithMeta = function() {
  var obj107344 = {};
  return obj107344;
}();
cljs.core._with_meta = function _with_meta(o, meta) {
  if (function() {
    var and__12818__auto__ = o;
    if (and__12818__auto__) {
      return o.cljs$core$IWithMeta$_with_meta$arity$2;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return o.cljs$core$IWithMeta$_with_meta$arity$2(o, meta);
  } else {
    var x__13457__auto__ = o == null ? null : o;
    return function() {
      var or__12830__auto__ = cljs.core._with_meta[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = cljs.core._with_meta["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWithMeta.-with-meta", o);
        }
      }
    }().call(null, o, meta);
  }
};
cljs.core.IReduce = function() {
  var obj107346 = {};
  return obj107346;
}();
cljs.core._reduce = function() {
  var _reduce = null;
  var _reduce__2 = function(coll, f) {
    if (function() {
      var and__12818__auto__ = coll;
      if (and__12818__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$2;
      } else {
        return and__12818__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$2(coll, f);
    } else {
      var x__13457__auto__ = coll == null ? null : coll;
      return function() {
        var or__12830__auto__ = cljs.core._reduce[goog.typeOf(x__13457__auto__)];
        if (or__12830__auto__) {
          return or__12830__auto__;
        } else {
          var or__12830__auto____$1 = cljs.core._reduce["_"];
          if (or__12830__auto____$1) {
            return or__12830__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f);
    }
  };
  var _reduce__3 = function(coll, f, start) {
    if (function() {
      var and__12818__auto__ = coll;
      if (and__12818__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$3;
      } else {
        return and__12818__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$3(coll, f, start);
    } else {
      var x__13457__auto__ = coll == null ? null : coll;
      return function() {
        var or__12830__auto__ = cljs.core._reduce[goog.typeOf(x__13457__auto__)];
        if (or__12830__auto__) {
          return or__12830__auto__;
        } else {
          var or__12830__auto____$1 = cljs.core._reduce["_"];
          if (or__12830__auto____$1) {
            return or__12830__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f, start);
    }
  };
  _reduce = function(coll, f, start) {
    switch(arguments.length) {
      case 2:
        return _reduce__2.call(this, coll, f);
      case 3:
        return _reduce__3.call(this, coll, f, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _reduce.cljs$core$IFn$_invoke$arity$2 = _reduce__2;
  _reduce.cljs$core$IFn$_invoke$arity$3 = _reduce__3;
  return _reduce;
}();
cljs.core.IKVReduce = function() {
  var obj107348 = {};
  return obj107348;
}();
cljs.core._kv_reduce = function _kv_reduce(coll, f, init) {
  if (function() {
    var and__12818__auto__ = coll;
    if (and__12818__auto__) {
      return coll.cljs$core$IKVReduce$_kv_reduce$arity$3;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return coll.cljs$core$IKVReduce$_kv_reduce$arity$3(coll, f, init);
  } else {
    var x__13457__auto__ = coll == null ? null : coll;
    return function() {
      var or__12830__auto__ = cljs.core._kv_reduce[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = cljs.core._kv_reduce["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IKVReduce.-kv-reduce", coll);
        }
      }
    }().call(null, coll, f, init);
  }
};
cljs.core.IEquiv = function() {
  var obj107350 = {};
  return obj107350;
}();
cljs.core._equiv = function _equiv(o, other) {
  if (function() {
    var and__12818__auto__ = o;
    if (and__12818__auto__) {
      return o.cljs$core$IEquiv$_equiv$arity$2;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return o.cljs$core$IEquiv$_equiv$arity$2(o, other);
  } else {
    var x__13457__auto__ = o == null ? null : o;
    return function() {
      var or__12830__auto__ = cljs.core._equiv[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = cljs.core._equiv["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEquiv.-equiv", o);
        }
      }
    }().call(null, o, other);
  }
};
cljs.core.IHash = function() {
  var obj107352 = {};
  return obj107352;
}();
cljs.core._hash = function _hash(o) {
  if (function() {
    var and__12818__auto__ = o;
    if (and__12818__auto__) {
      return o.cljs$core$IHash$_hash$arity$1;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return o.cljs$core$IHash$_hash$arity$1(o);
  } else {
    var x__13457__auto__ = o == null ? null : o;
    return function() {
      var or__12830__auto__ = cljs.core._hash[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = cljs.core._hash["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IHash.-hash", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISeqable = function() {
  var obj107354 = {};
  return obj107354;
}();
cljs.core._seq = function _seq(o) {
  if (function() {
    var and__12818__auto__ = o;
    if (and__12818__auto__) {
      return o.cljs$core$ISeqable$_seq$arity$1;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return o.cljs$core$ISeqable$_seq$arity$1(o);
  } else {
    var x__13457__auto__ = o == null ? null : o;
    return function() {
      var or__12830__auto__ = cljs.core._seq[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = cljs.core._seq["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeqable.-seq", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISequential = function() {
  var obj107356 = {};
  return obj107356;
}();
cljs.core.IList = function() {
  var obj107358 = {};
  return obj107358;
}();
cljs.core.IRecord = function() {
  var obj107360 = {};
  return obj107360;
}();
cljs.core.IReversible = function() {
  var obj107362 = {};
  return obj107362;
}();
cljs.core._rseq = function _rseq(coll) {
  if (function() {
    var and__12818__auto__ = coll;
    if (and__12818__auto__) {
      return coll.cljs$core$IReversible$_rseq$arity$1;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return coll.cljs$core$IReversible$_rseq$arity$1(coll);
  } else {
    var x__13457__auto__ = coll == null ? null : coll;
    return function() {
      var or__12830__auto__ = cljs.core._rseq[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = cljs.core._rseq["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IReversible.-rseq", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISorted = function() {
  var obj107364 = {};
  return obj107364;
}();
cljs.core._sorted_seq = function _sorted_seq(coll, ascending_QMARK_) {
  if (function() {
    var and__12818__auto__ = coll;
    if (and__12818__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq$arity$2;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq$arity$2(coll, ascending_QMARK_);
  } else {
    var x__13457__auto__ = coll == null ? null : coll;
    return function() {
      var or__12830__auto__ = cljs.core._sorted_seq[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = cljs.core._sorted_seq["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-sorted-seq", coll);
        }
      }
    }().call(null, coll, ascending_QMARK_);
  }
};
cljs.core._sorted_seq_from = function _sorted_seq_from(coll, k, ascending_QMARK_) {
  if (function() {
    var and__12818__auto__ = coll;
    if (and__12818__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq_from$arity$3;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq_from$arity$3(coll, k, ascending_QMARK_);
  } else {
    var x__13457__auto__ = coll == null ? null : coll;
    return function() {
      var or__12830__auto__ = cljs.core._sorted_seq_from[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = cljs.core._sorted_seq_from["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-sorted-seq-from", coll);
        }
      }
    }().call(null, coll, k, ascending_QMARK_);
  }
};
cljs.core._entry_key = function _entry_key(coll, entry) {
  if (function() {
    var and__12818__auto__ = coll;
    if (and__12818__auto__) {
      return coll.cljs$core$ISorted$_entry_key$arity$2;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_entry_key$arity$2(coll, entry);
  } else {
    var x__13457__auto__ = coll == null ? null : coll;
    return function() {
      var or__12830__auto__ = cljs.core._entry_key[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = cljs.core._entry_key["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-entry-key", coll);
        }
      }
    }().call(null, coll, entry);
  }
};
cljs.core._comparator = function _comparator(coll) {
  if (function() {
    var and__12818__auto__ = coll;
    if (and__12818__auto__) {
      return coll.cljs$core$ISorted$_comparator$arity$1;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_comparator$arity$1(coll);
  } else {
    var x__13457__auto__ = coll == null ? null : coll;
    return function() {
      var or__12830__auto__ = cljs.core._comparator[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = cljs.core._comparator["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-comparator", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IWriter = function() {
  var obj107366 = {};
  return obj107366;
}();
cljs.core._write = function _write(writer, s) {
  if (function() {
    var and__12818__auto__ = writer;
    if (and__12818__auto__) {
      return writer.cljs$core$IWriter$_write$arity$2;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_write$arity$2(writer, s);
  } else {
    var x__13457__auto__ = writer == null ? null : writer;
    return function() {
      var or__12830__auto__ = cljs.core._write[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = cljs.core._write["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWriter.-write", writer);
        }
      }
    }().call(null, writer, s);
  }
};
cljs.core._flush = function _flush(writer) {
  if (function() {
    var and__12818__auto__ = writer;
    if (and__12818__auto__) {
      return writer.cljs$core$IWriter$_flush$arity$1;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_flush$arity$1(writer);
  } else {
    var x__13457__auto__ = writer == null ? null : writer;
    return function() {
      var or__12830__auto__ = cljs.core._flush[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = cljs.core._flush["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWriter.-flush", writer);
        }
      }
    }().call(null, writer);
  }
};
cljs.core.IPrintWithWriter = function() {
  var obj107368 = {};
  return obj107368;
}();
cljs.core._pr_writer = function _pr_writer(o, writer, opts) {
  if (function() {
    var and__12818__auto__ = o;
    if (and__12818__auto__) {
      return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3(o, writer, opts);
  } else {
    var x__13457__auto__ = o == null ? null : o;
    return function() {
      var or__12830__auto__ = cljs.core._pr_writer[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = cljs.core._pr_writer["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IPrintWithWriter.-pr-writer", o);
        }
      }
    }().call(null, o, writer, opts);
  }
};
cljs.core.IPending = function() {
  var obj107370 = {};
  return obj107370;
}();
cljs.core._realized_QMARK_ = function _realized_QMARK_(d) {
  if (function() {
    var and__12818__auto__ = d;
    if (and__12818__auto__) {
      return d.cljs$core$IPending$_realized_QMARK_$arity$1;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return d.cljs$core$IPending$_realized_QMARK_$arity$1(d);
  } else {
    var x__13457__auto__ = d == null ? null : d;
    return function() {
      var or__12830__auto__ = cljs.core._realized_QMARK_[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = cljs.core._realized_QMARK_["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IPending.-realized?", d);
        }
      }
    }().call(null, d);
  }
};
cljs.core.IWatchable = function() {
  var obj107372 = {};
  return obj107372;
}();
cljs.core._notify_watches = function _notify_watches(this$, oldval, newval) {
  if (function() {
    var and__12818__auto__ = this$;
    if (and__12818__auto__) {
      return this$.cljs$core$IWatchable$_notify_watches$arity$3;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_notify_watches$arity$3(this$, oldval, newval);
  } else {
    var x__13457__auto__ = this$ == null ? null : this$;
    return function() {
      var or__12830__auto__ = cljs.core._notify_watches[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = cljs.core._notify_watches["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-notify-watches", this$);
        }
      }
    }().call(null, this$, oldval, newval);
  }
};
cljs.core._add_watch = function _add_watch(this$, key, f) {
  if (function() {
    var and__12818__auto__ = this$;
    if (and__12818__auto__) {
      return this$.cljs$core$IWatchable$_add_watch$arity$3;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_add_watch$arity$3(this$, key, f);
  } else {
    var x__13457__auto__ = this$ == null ? null : this$;
    return function() {
      var or__12830__auto__ = cljs.core._add_watch[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = cljs.core._add_watch["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-add-watch", this$);
        }
      }
    }().call(null, this$, key, f);
  }
};
cljs.core._remove_watch = function _remove_watch(this$, key) {
  if (function() {
    var and__12818__auto__ = this$;
    if (and__12818__auto__) {
      return this$.cljs$core$IWatchable$_remove_watch$arity$2;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_remove_watch$arity$2(this$, key);
  } else {
    var x__13457__auto__ = this$ == null ? null : this$;
    return function() {
      var or__12830__auto__ = cljs.core._remove_watch[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = cljs.core._remove_watch["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-remove-watch", this$);
        }
      }
    }().call(null, this$, key);
  }
};
cljs.core.IEditableCollection = function() {
  var obj107374 = {};
  return obj107374;
}();
cljs.core._as_transient = function _as_transient(coll) {
  if (function() {
    var and__12818__auto__ = coll;
    if (and__12818__auto__) {
      return coll.cljs$core$IEditableCollection$_as_transient$arity$1;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return coll.cljs$core$IEditableCollection$_as_transient$arity$1(coll);
  } else {
    var x__13457__auto__ = coll == null ? null : coll;
    return function() {
      var or__12830__auto__ = cljs.core._as_transient[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = cljs.core._as_transient["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEditableCollection.-as-transient", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ITransientCollection = function() {
  var obj107376 = {};
  return obj107376;
}();
cljs.core._conj_BANG_ = function _conj_BANG_(tcoll, val) {
  if (function() {
    var and__12818__auto__ = tcoll;
    if (and__12818__auto__) {
      return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2(tcoll, val);
  } else {
    var x__13457__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__12830__auto__ = cljs.core._conj_BANG_[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = cljs.core._conj_BANG_["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientCollection.-conj!", tcoll);
        }
      }
    }().call(null, tcoll, val);
  }
};
cljs.core._persistent_BANG_ = function _persistent_BANG_(tcoll) {
  if (function() {
    var and__12818__auto__ = tcoll;
    if (and__12818__auto__) {
      return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(tcoll);
  } else {
    var x__13457__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__12830__auto__ = cljs.core._persistent_BANG_[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = cljs.core._persistent_BANG_["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientCollection.-persistent!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientAssociative = function() {
  var obj107378 = {};
  return obj107378;
}();
cljs.core._assoc_BANG_ = function _assoc_BANG_(tcoll, key, val) {
  if (function() {
    var and__12818__auto__ = tcoll;
    if (and__12818__auto__) {
      return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(tcoll, key, val);
  } else {
    var x__13457__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__12830__auto__ = cljs.core._assoc_BANG_[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = cljs.core._assoc_BANG_["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientAssociative.-assoc!", tcoll);
        }
      }
    }().call(null, tcoll, key, val);
  }
};
cljs.core.ITransientMap = function() {
  var obj107380 = {};
  return obj107380;
}();
cljs.core._dissoc_BANG_ = function _dissoc_BANG_(tcoll, key) {
  if (function() {
    var and__12818__auto__ = tcoll;
    if (and__12818__auto__) {
      return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2(tcoll, key);
  } else {
    var x__13457__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__12830__auto__ = cljs.core._dissoc_BANG_[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = cljs.core._dissoc_BANG_["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientMap.-dissoc!", tcoll);
        }
      }
    }().call(null, tcoll, key);
  }
};
cljs.core.ITransientVector = function() {
  var obj107382 = {};
  return obj107382;
}();
cljs.core._assoc_n_BANG_ = function _assoc_n_BANG_(tcoll, n, val) {
  if (function() {
    var and__12818__auto__ = tcoll;
    if (and__12818__auto__) {
      return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3(tcoll, n, val);
  } else {
    var x__13457__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__12830__auto__ = cljs.core._assoc_n_BANG_[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = cljs.core._assoc_n_BANG_["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientVector.-assoc-n!", tcoll);
        }
      }
    }().call(null, tcoll, n, val);
  }
};
cljs.core._pop_BANG_ = function _pop_BANG_(tcoll) {
  if (function() {
    var and__12818__auto__ = tcoll;
    if (and__12818__auto__) {
      return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1(tcoll);
  } else {
    var x__13457__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__12830__auto__ = cljs.core._pop_BANG_[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = cljs.core._pop_BANG_["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientVector.-pop!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientSet = function() {
  var obj107384 = {};
  return obj107384;
}();
cljs.core._disjoin_BANG_ = function _disjoin_BANG_(tcoll, v) {
  if (function() {
    var and__12818__auto__ = tcoll;
    if (and__12818__auto__) {
      return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2(tcoll, v);
  } else {
    var x__13457__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__12830__auto__ = cljs.core._disjoin_BANG_[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = cljs.core._disjoin_BANG_["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientSet.-disjoin!", tcoll);
        }
      }
    }().call(null, tcoll, v);
  }
};
cljs.core.IComparable = function() {
  var obj107386 = {};
  return obj107386;
}();
cljs.core._compare = function _compare(x, y) {
  if (function() {
    var and__12818__auto__ = x;
    if (and__12818__auto__) {
      return x.cljs$core$IComparable$_compare$arity$2;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return x.cljs$core$IComparable$_compare$arity$2(x, y);
  } else {
    var x__13457__auto__ = x == null ? null : x;
    return function() {
      var or__12830__auto__ = cljs.core._compare[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = cljs.core._compare["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IComparable.-compare", x);
        }
      }
    }().call(null, x, y);
  }
};
cljs.core.IChunk = function() {
  var obj107388 = {};
  return obj107388;
}();
cljs.core._drop_first = function _drop_first(coll) {
  if (function() {
    var and__12818__auto__ = coll;
    if (and__12818__auto__) {
      return coll.cljs$core$IChunk$_drop_first$arity$1;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return coll.cljs$core$IChunk$_drop_first$arity$1(coll);
  } else {
    var x__13457__auto__ = coll == null ? null : coll;
    return function() {
      var or__12830__auto__ = cljs.core._drop_first[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = cljs.core._drop_first["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunk.-drop-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedSeq = function() {
  var obj107390 = {};
  return obj107390;
}();
cljs.core._chunked_first = function _chunked_first(coll) {
  if (function() {
    var and__12818__auto__ = coll;
    if (and__12818__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1(coll);
  } else {
    var x__13457__auto__ = coll == null ? null : coll;
    return function() {
      var or__12830__auto__ = cljs.core._chunked_first[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = cljs.core._chunked_first["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedSeq.-chunked-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._chunked_rest = function _chunked_rest(coll) {
  if (function() {
    var and__12818__auto__ = coll;
    if (and__12818__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1(coll);
  } else {
    var x__13457__auto__ = coll == null ? null : coll;
    return function() {
      var or__12830__auto__ = cljs.core._chunked_rest[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = cljs.core._chunked_rest["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedSeq.-chunked-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedNext = function() {
  var obj107392 = {};
  return obj107392;
}();
cljs.core._chunked_next = function _chunked_next(coll) {
  if (function() {
    var and__12818__auto__ = coll;
    if (and__12818__auto__) {
      return coll.cljs$core$IChunkedNext$_chunked_next$arity$1;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedNext$_chunked_next$arity$1(coll);
  } else {
    var x__13457__auto__ = coll == null ? null : coll;
    return function() {
      var or__12830__auto__ = cljs.core._chunked_next[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = cljs.core._chunked_next["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedNext.-chunked-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INamed = function() {
  var obj107394 = {};
  return obj107394;
}();
cljs.core._name = function _name(x) {
  if (function() {
    var and__12818__auto__ = x;
    if (and__12818__auto__) {
      return x.cljs$core$INamed$_name$arity$1;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_name$arity$1(x);
  } else {
    var x__13457__auto__ = x == null ? null : x;
    return function() {
      var or__12830__auto__ = cljs.core._name[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = cljs.core._name["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INamed.-name", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._namespace = function _namespace(x) {
  if (function() {
    var and__12818__auto__ = x;
    if (and__12818__auto__) {
      return x.cljs$core$INamed$_namespace$arity$1;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_namespace$arity$1(x);
  } else {
    var x__13457__auto__ = x == null ? null : x;
    return function() {
      var or__12830__auto__ = cljs.core._namespace[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = cljs.core._namespace["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INamed.-namespace", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.StringBufferWriter = function(sb) {
  this.sb = sb;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 1073741824;
};
cljs.core.StringBufferWriter.cljs$lang$type = true;
cljs.core.StringBufferWriter.cljs$lang$ctorStr = "cljs.core/StringBufferWriter";
cljs.core.StringBufferWriter.cljs$lang$ctorPrWriter = function(this__13397__auto__, writer__13398__auto__, opt__13399__auto__) {
  return cljs.core._write.call(null, writer__13398__auto__, "cljs.core/StringBufferWriter");
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_write$arity$2 = function(_, s) {
  var self__ = this;
  var ___$1 = this;
  return self__.sb.append(s);
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_flush$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return null;
};
cljs.core.__GT_StringBufferWriter = function __GT_StringBufferWriter(sb) {
  return new cljs.core.StringBufferWriter(sb);
};
cljs.core.pr_str_STAR_ = function pr_str_STAR_(obj) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core._pr_writer.call(null, obj, writer, cljs.core.pr_opts.call(null));
  cljs.core._flush.call(null, writer);
  return[cljs.core.str(sb)].join("");
};
cljs.core.instance_QMARK_ = function instance_QMARK_(t, o) {
  return o instanceof t;
};
cljs.core.symbol_QMARK_ = function symbol_QMARK_(x) {
  return x instanceof cljs.core.Symbol;
};
cljs.core.hash_symbol = function hash_symbol(sym) {
  return cljs.core.hash_combine.call(null, cljs.core.hash.call(null, sym.ns), cljs.core.hash.call(null, sym.name));
};
cljs.core.compare_symbols = function compare_symbols(a, b) {
  if (cljs.core.truth_(cljs.core._EQ_.call(null, a, b))) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__12818__auto__ = cljs.core.not.call(null, a.ns);
      if (and__12818__auto__) {
        return b.ns;
      } else {
        return and__12818__auto__;
      }
    }())) {
      return-1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not.call(null, b.ns)) {
          return 1;
        } else {
          var nsc = cljs.core.compare.call(null, a.ns, b.ns);
          if (nsc === 0) {
            return cljs.core.compare.call(null, a.name, b.name);
          } else {
            return nsc;
          }
        }
      } else {
        if (new cljs.core.Keyword(null, "default", "default", 2558708147)) {
          return cljs.core.compare.call(null, a.name, b.name);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.Symbol = function(ns, name, str, _hash, _meta) {
  this.ns = ns;
  this.name = name;
  this.str = str;
  this._hash = _hash;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 2154168321;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Symbol.cljs$lang$type = true;
cljs.core.Symbol.cljs$lang$ctorStr = "cljs.core/Symbol";
cljs.core.Symbol.cljs$lang$ctorPrWriter = function(this__13397__auto__, writer__13398__auto__, opt__13399__auto__) {
  return cljs.core._write.call(null, writer__13398__auto__, "cljs.core/Symbol");
};
cljs.core.Symbol.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write.call(null, writer, self__.str);
};
cljs.core.Symbol.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Symbol.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Symbol.prototype.cljs$core$IHash$_hash$arity$1 = function(sym) {
  var self__ = this;
  var sym__$1 = this;
  var h__13241__auto__ = self__._hash;
  if (!(h__13241__auto__ == null)) {
    return h__13241__auto__;
  } else {
    var h__13241__auto____$1 = cljs.core.hash_symbol.call(null, sym__$1);
    self__._hash = h__13241__auto____$1;
    return h__13241__auto____$1;
  }
};
cljs.core.Symbol.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Symbol(self__.ns, self__.name, self__.str, self__._hash, new_meta);
};
cljs.core.Symbol.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Symbol.prototype.call = function() {
  var G__107396 = null;
  var G__107396__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.call(null, coll, sym, null);
  };
  var G__107396__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.call(null, coll, sym, not_found);
  };
  G__107396 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__107396__2.call(this, self__, coll);
      case 3:
        return G__107396__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__107396;
}();
cljs.core.Symbol.prototype.apply = function(self__, args107395) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args107395)));
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.call(null, coll, sym, null);
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.call(null, coll, sym, not_found);
};
cljs.core.Symbol.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Symbol) {
    return self__.str === other.str;
  } else {
    return false;
  }
};
cljs.core.Symbol.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.str;
};
cljs.core.__GT_Symbol = function __GT_Symbol(ns, name, str, _hash, _meta) {
  return new cljs.core.Symbol(ns, name, str, _hash, _meta);
};
cljs.core.symbol = function() {
  var symbol = null;
  var symbol__1 = function(name) {
    if (name instanceof cljs.core.Symbol) {
      return name;
    } else {
      return symbol.call(null, null, name);
    }
  };
  var symbol__2 = function(ns, name) {
    var sym_str = !(ns == null) ? [cljs.core.str(ns), cljs.core.str("/"), cljs.core.str(name)].join("") : name;
    return new cljs.core.Symbol(ns, name, sym_str, null, null);
  };
  symbol = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return symbol__1.call(this, ns);
      case 2:
        return symbol__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  symbol.cljs$core$IFn$_invoke$arity$1 = symbol__1;
  symbol.cljs$core$IFn$_invoke$arity$2 = symbol__2;
  return symbol;
}();
cljs.core.clone = function clone(value) {
  return cljs.core._clone.call(null, value);
};
cljs.core.cloneable_QMARK_ = function cloneable_QMARK_(value) {
  var G__107398 = value;
  if (G__107398) {
    var bit__13480__auto__ = G__107398.cljs$lang$protocol_mask$partition1$ & 8192;
    if (bit__13480__auto__ || G__107398.cljs$core$ICloneable$) {
      return true;
    } else {
      if (!G__107398.cljs$lang$protocol_mask$partition1$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICloneable, G__107398);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICloneable, G__107398);
  }
};
cljs.core.seq = function seq(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__107400 = coll;
      if (G__107400) {
        var bit__13473__auto__ = G__107400.cljs$lang$protocol_mask$partition0$ & 8388608;
        if (bit__13473__auto__ || G__107400.cljs$core$ISeqable$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._seq.call(null, coll);
    } else {
      if (coll instanceof Array) {
        if (coll.length === 0) {
          return null;
        } else {
          return new cljs.core.IndexedSeq(coll, 0);
        }
      } else {
        if (typeof coll === "string") {
          if (coll.length === 0) {
            return null;
          } else {
            return new cljs.core.IndexedSeq(coll, 0);
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, coll)) {
            return cljs.core._seq.call(null, coll);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              throw new Error([cljs.core.str(coll), cljs.core.str("is not ISeqable")].join(""));
            } else {
              return null;
            }
          }
        }
      }
    }
  }
};
cljs.core.first = function first(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__107402 = coll;
      if (G__107402) {
        var bit__13473__auto__ = G__107402.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__13473__auto__ || G__107402.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._first.call(null, coll);
    } else {
      var s = cljs.core.seq.call(null, coll);
      if (s == null) {
        return null;
      } else {
        return cljs.core._first.call(null, s);
      }
    }
  }
};
cljs.core.rest = function rest(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__107404 = coll;
      if (G__107404) {
        var bit__13473__auto__ = G__107404.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__13473__auto__ || G__107404.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._rest.call(null, coll);
    } else {
      var s = cljs.core.seq.call(null, coll);
      if (s) {
        return cljs.core._rest.call(null, s);
      } else {
        return cljs.core.List.EMPTY;
      }
    }
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.next = function next(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__107406 = coll;
      if (G__107406) {
        var bit__13473__auto__ = G__107406.cljs$lang$protocol_mask$partition0$ & 128;
        if (bit__13473__auto__ || G__107406.cljs$core$INext$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._next.call(null, coll);
    } else {
      return cljs.core.seq.call(null, cljs.core.rest.call(null, coll));
    }
  }
};
cljs.core._EQ_ = function() {
  var _EQ_ = null;
  var _EQ___1 = function(x) {
    return true;
  };
  var _EQ___2 = function(x, y) {
    if (x == null) {
      return y == null;
    } else {
      return x === y || cljs.core._equiv.call(null, x, y);
    }
  };
  var _EQ___3 = function() {
    var G__107407__delegate = function(x, y, more) {
      while (true) {
        if (_EQ_.call(null, x, y)) {
          if (cljs.core.next.call(null, more)) {
            var G__107408 = y;
            var G__107409 = cljs.core.first.call(null, more);
            var G__107410 = cljs.core.next.call(null, more);
            x = G__107408;
            y = G__107409;
            more = G__107410;
            continue;
          } else {
            return _EQ_.call(null, y, cljs.core.first.call(null, more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__107407 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__107407__delegate.call(this, x, y, more);
    };
    G__107407.cljs$lang$maxFixedArity = 2;
    G__107407.cljs$lang$applyTo = function(arglist__107411) {
      var x = cljs.core.first(arglist__107411);
      arglist__107411 = cljs.core.next(arglist__107411);
      var y = cljs.core.first(arglist__107411);
      var more = cljs.core.rest(arglist__107411);
      return G__107407__delegate(x, y, more);
    };
    G__107407.cljs$core$IFn$_invoke$arity$variadic = G__107407__delegate;
    return G__107407;
  }();
  _EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ___1.call(this, x);
      case 2:
        return _EQ___2.call(this, x, y);
      default:
        return _EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ_.cljs$lang$maxFixedArity = 2;
  _EQ_.cljs$lang$applyTo = _EQ___3.cljs$lang$applyTo;
  _EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ___1;
  _EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ___2;
  _EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ_;
}();
cljs.core.ICounted["null"] = true;
cljs.core._count["null"] = function(_) {
  return 0;
};
Date.prototype.cljs$core$IEquiv$ = true;
Date.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var o__$1 = this;
  return other instanceof Date && o__$1.toString() === other.toString();
};
cljs.core.IEquiv["number"] = true;
cljs.core._equiv["number"] = function(x, o) {
  return x === o;
};
cljs.core.IMeta["function"] = true;
cljs.core._meta["function"] = function(_) {
  return null;
};
cljs.core.Fn["function"] = true;
cljs.core.IHash["_"] = true;
cljs.core._hash["_"] = function(o) {
  return goog.getUid(o);
};
cljs.core.inc = function inc(x) {
  return x + 1;
};
cljs.core.Reduced = function(val) {
  this.val = val;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Reduced.cljs$lang$type = true;
cljs.core.Reduced.cljs$lang$ctorStr = "cljs.core/Reduced";
cljs.core.Reduced.cljs$lang$ctorPrWriter = function(this__13397__auto__, writer__13398__auto__, opt__13399__auto__) {
  return cljs.core._write.call(null, writer__13398__auto__, "cljs.core/Reduced");
};
cljs.core.Reduced.prototype.cljs$core$IDeref$_deref$arity$1 = function(o) {
  var self__ = this;
  var o__$1 = this;
  return self__.val;
};
cljs.core.__GT_Reduced = function __GT_Reduced(val) {
  return new cljs.core.Reduced(val);
};
cljs.core.reduced = function reduced(x) {
  return new cljs.core.Reduced(x);
};
cljs.core.reduced_QMARK_ = function reduced_QMARK_(r) {
  return r instanceof cljs.core.Reduced;
};
cljs.core.ci_reduce = function() {
  var ci_reduce = null;
  var ci_reduce__2 = function(cicoll, f) {
    var cnt = cljs.core._count.call(null, cicoll);
    if (cnt === 0) {
      return f.call(null);
    } else {
      var val = cljs.core._nth.call(null, cicoll, 0);
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = f.call(null, val, cljs.core._nth.call(null, cicoll, n));
          if (cljs.core.reduced_QMARK_.call(null, nval)) {
            return cljs.core.deref.call(null, nval);
          } else {
            var G__107412 = nval;
            var G__107413 = n + 1;
            val = G__107412;
            n = G__107413;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var ci_reduce__3 = function(cicoll, f, val) {
    var cnt = cljs.core._count.call(null, cicoll);
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, cljs.core._nth.call(null, cicoll, n));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__107414 = nval;
          var G__107415 = n + 1;
          val__$1 = G__107414;
          n = G__107415;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var ci_reduce__4 = function(cicoll, f, val, idx) {
    var cnt = cljs.core._count.call(null, cicoll);
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, cljs.core._nth.call(null, cicoll, n));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__107416 = nval;
          var G__107417 = n + 1;
          val__$1 = G__107416;
          n = G__107417;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  ci_reduce = function(cicoll, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return ci_reduce__2.call(this, cicoll, f);
      case 3:
        return ci_reduce__3.call(this, cicoll, f, val);
      case 4:
        return ci_reduce__4.call(this, cicoll, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ci_reduce.cljs$core$IFn$_invoke$arity$2 = ci_reduce__2;
  ci_reduce.cljs$core$IFn$_invoke$arity$3 = ci_reduce__3;
  ci_reduce.cljs$core$IFn$_invoke$arity$4 = ci_reduce__4;
  return ci_reduce;
}();
cljs.core.array_reduce = function() {
  var array_reduce = null;
  var array_reduce__2 = function(arr, f) {
    var cnt = arr.length;
    if (arr.length === 0) {
      return f.call(null);
    } else {
      var val = arr[0];
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = f.call(null, val, arr[n]);
          if (cljs.core.reduced_QMARK_.call(null, nval)) {
            return cljs.core.deref.call(null, nval);
          } else {
            var G__107418 = nval;
            var G__107419 = n + 1;
            val = G__107418;
            n = G__107419;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var array_reduce__3 = function(arr, f, val) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, arr[n]);
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__107420 = nval;
          var G__107421 = n + 1;
          val__$1 = G__107420;
          n = G__107421;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var array_reduce__4 = function(arr, f, val, idx) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, arr[n]);
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__107422 = nval;
          var G__107423 = n + 1;
          val__$1 = G__107422;
          n = G__107423;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  array_reduce = function(arr, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return array_reduce__2.call(this, arr, f);
      case 3:
        return array_reduce__3.call(this, arr, f, val);
      case 4:
        return array_reduce__4.call(this, arr, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_reduce.cljs$core$IFn$_invoke$arity$2 = array_reduce__2;
  array_reduce.cljs$core$IFn$_invoke$arity$3 = array_reduce__3;
  array_reduce.cljs$core$IFn$_invoke$arity$4 = array_reduce__4;
  return array_reduce;
}();
cljs.core.counted_QMARK_ = function counted_QMARK_(x) {
  var G__107425 = x;
  if (G__107425) {
    var bit__13480__auto__ = G__107425.cljs$lang$protocol_mask$partition0$ & 2;
    if (bit__13480__auto__ || G__107425.cljs$core$ICounted$) {
      return true;
    } else {
      if (!G__107425.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, G__107425);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, G__107425);
  }
};
cljs.core.indexed_QMARK_ = function indexed_QMARK_(x) {
  var G__107427 = x;
  if (G__107427) {
    var bit__13480__auto__ = G__107427.cljs$lang$protocol_mask$partition0$ & 16;
    if (bit__13480__auto__ || G__107427.cljs$core$IIndexed$) {
      return true;
    } else {
      if (!G__107427.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, G__107427);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, G__107427);
  }
};
cljs.core.IndexedSeq = function(arr, i) {
  this.arr = arr;
  this.i = i;
  this.cljs$lang$protocol_mask$partition0$ = 166199550;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.IndexedSeq.cljs$lang$type = true;
cljs.core.IndexedSeq.cljs$lang$ctorStr = "cljs.core/IndexedSeq";
cljs.core.IndexedSeq.cljs$lang$ctorPrWriter = function(this__13397__auto__, writer__13398__auto__, opt__13399__auto__) {
  return cljs.core._write.call(null, writer__13398__auto__, "cljs.core/IndexedSeq");
};
cljs.core.IndexedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$INext$_next$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var c = cljs.core._count.call(null, coll__$1);
  if (c > 0) {
    return new cljs.core.RSeq(coll__$1, c - 1, null);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, self__.arr[self__.i], self__.i + 1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, start, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.IndexedSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr.length - self__.i;
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr[self__.i];
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.IndexedSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.IndexedSeq(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return not_found;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.__GT_IndexedSeq = function __GT_IndexedSeq(arr, i) {
  return new cljs.core.IndexedSeq(arr, i);
};
cljs.core.prim_seq = function() {
  var prim_seq = null;
  var prim_seq__1 = function(prim) {
    return prim_seq.call(null, prim, 0);
  };
  var prim_seq__2 = function(prim, i) {
    if (i < prim.length) {
      return new cljs.core.IndexedSeq(prim, i);
    } else {
      return null;
    }
  };
  prim_seq = function(prim, i) {
    switch(arguments.length) {
      case 1:
        return prim_seq__1.call(this, prim);
      case 2:
        return prim_seq__2.call(this, prim, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  prim_seq.cljs$core$IFn$_invoke$arity$1 = prim_seq__1;
  prim_seq.cljs$core$IFn$_invoke$arity$2 = prim_seq__2;
  return prim_seq;
}();
cljs.core.array_seq = function() {
  var array_seq = null;
  var array_seq__1 = function(array) {
    return cljs.core.prim_seq.call(null, array, 0);
  };
  var array_seq__2 = function(array, i) {
    return cljs.core.prim_seq.call(null, array, i);
  };
  array_seq = function(array, i) {
    switch(arguments.length) {
      case 1:
        return array_seq__1.call(this, array);
      case 2:
        return array_seq__2.call(this, array, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_seq.cljs$core$IFn$_invoke$arity$1 = array_seq__1;
  array_seq.cljs$core$IFn$_invoke$arity$2 = array_seq__2;
  return array_seq;
}();
cljs.core.RSeq = function(ci, i, meta) {
  this.ci = ci;
  this.i = i;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374862;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.RSeq.cljs$lang$type = true;
cljs.core.RSeq.cljs$lang$ctorStr = "cljs.core/RSeq";
cljs.core.RSeq.cljs$lang$ctorPrWriter = function(this__13397__auto__, writer__13398__auto__, opt__13399__auto__) {
  return cljs.core._write.call(null, writer__13398__auto__, "cljs.core/RSeq");
};
cljs.core.RSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.RSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(col, f) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.call(null, f, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(col, f, start) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.RSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.i + 1;
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.ci, self__.i);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return null;
  }
};
cljs.core.RSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.RSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, new_meta);
};
cljs.core.RSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, self__.meta);
};
cljs.core.RSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.RSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_RSeq = function __GT_RSeq(ci, i, meta) {
  return new cljs.core.RSeq(ci, i, meta);
};
cljs.core.second = function second(coll) {
  return cljs.core.first.call(null, cljs.core.next.call(null, coll));
};
cljs.core.ffirst = function ffirst(coll) {
  return cljs.core.first.call(null, cljs.core.first.call(null, coll));
};
cljs.core.nfirst = function nfirst(coll) {
  return cljs.core.next.call(null, cljs.core.first.call(null, coll));
};
cljs.core.fnext = function fnext(coll) {
  return cljs.core.first.call(null, cljs.core.next.call(null, coll));
};
cljs.core.nnext = function nnext(coll) {
  return cljs.core.next.call(null, cljs.core.next.call(null, coll));
};
cljs.core.last = function last(s) {
  while (true) {
    var sn = cljs.core.next.call(null, s);
    if (!(sn == null)) {
      var G__107428 = sn;
      s = G__107428;
      continue;
    } else {
      return cljs.core.first.call(null, s);
    }
    break;
  }
};
cljs.core.IEquiv["_"] = true;
cljs.core._equiv["_"] = function(x, o) {
  return x === o;
};
cljs.core.conj = function() {
  var conj = null;
  var conj__2 = function(coll, x) {
    if (!(coll == null)) {
      return cljs.core._conj.call(null, coll, x);
    } else {
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x);
    }
  };
  var conj__3 = function() {
    var G__107429__delegate = function(coll, x, xs) {
      while (true) {
        if (cljs.core.truth_(xs)) {
          var G__107430 = conj.call(null, coll, x);
          var G__107431 = cljs.core.first.call(null, xs);
          var G__107432 = cljs.core.next.call(null, xs);
          coll = G__107430;
          x = G__107431;
          xs = G__107432;
          continue;
        } else {
          return conj.call(null, coll, x);
        }
        break;
      }
    };
    var G__107429 = function(coll, x, var_args) {
      var xs = null;
      if (arguments.length > 2) {
        xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__107429__delegate.call(this, coll, x, xs);
    };
    G__107429.cljs$lang$maxFixedArity = 2;
    G__107429.cljs$lang$applyTo = function(arglist__107433) {
      var coll = cljs.core.first(arglist__107433);
      arglist__107433 = cljs.core.next(arglist__107433);
      var x = cljs.core.first(arglist__107433);
      var xs = cljs.core.rest(arglist__107433);
      return G__107429__delegate(coll, x, xs);
    };
    G__107429.cljs$core$IFn$_invoke$arity$variadic = G__107429__delegate;
    return G__107429;
  }();
  conj = function(coll, x, var_args) {
    var xs = var_args;
    switch(arguments.length) {
      case 2:
        return conj__2.call(this, coll, x);
      default:
        return conj__3.cljs$core$IFn$_invoke$arity$variadic(coll, x, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj.cljs$lang$maxFixedArity = 2;
  conj.cljs$lang$applyTo = conj__3.cljs$lang$applyTo;
  conj.cljs$core$IFn$_invoke$arity$2 = conj__2;
  conj.cljs$core$IFn$_invoke$arity$variadic = conj__3.cljs$core$IFn$_invoke$arity$variadic;
  return conj;
}();
cljs.core.empty = function empty(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._empty.call(null, coll);
  }
};
cljs.core.accumulating_seq_count = function accumulating_seq_count(coll) {
  var s = cljs.core.seq.call(null, coll);
  var acc = 0;
  while (true) {
    if (cljs.core.counted_QMARK_.call(null, s)) {
      return acc + cljs.core._count.call(null, s);
    } else {
      var G__107434 = cljs.core.next.call(null, s);
      var G__107435 = acc + 1;
      s = G__107434;
      acc = G__107435;
      continue;
    }
    break;
  }
};
cljs.core.count = function count(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__107437 = coll;
      if (G__107437) {
        var bit__13473__auto__ = G__107437.cljs$lang$protocol_mask$partition0$ & 2;
        if (bit__13473__auto__ || G__107437.cljs$core$ICounted$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._count.call(null, coll);
    } else {
      if (coll instanceof Array) {
        return coll.length;
      } else {
        if (typeof coll === "string") {
          return coll.length;
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, coll)) {
            return cljs.core._count.call(null, coll);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.accumulating_seq_count.call(null, coll);
            } else {
              return null;
            }
          }
        }
      }
    }
  } else {
    return 0;
  }
};
cljs.core.linear_traversal_nth = function() {
  var linear_traversal_nth = null;
  var linear_traversal_nth__2 = function(coll, n) {
    while (true) {
      if (coll == null) {
        throw new Error("Index out of bounds");
      } else {
        if (n === 0) {
          if (cljs.core.seq.call(null, coll)) {
            return cljs.core.first.call(null, coll);
          } else {
            throw new Error("Index out of bounds");
          }
        } else {
          if (cljs.core.indexed_QMARK_.call(null, coll)) {
            return cljs.core._nth.call(null, coll, n);
          } else {
            if (cljs.core.seq.call(null, coll)) {
              var G__107438 = cljs.core.next.call(null, coll);
              var G__107439 = n - 1;
              coll = G__107438;
              n = G__107439;
              continue;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                throw new Error("Index out of bounds");
              } else {
                return null;
              }
            }
          }
        }
      }
      break;
    }
  };
  var linear_traversal_nth__3 = function(coll, n, not_found) {
    while (true) {
      if (coll == null) {
        return not_found;
      } else {
        if (n === 0) {
          if (cljs.core.seq.call(null, coll)) {
            return cljs.core.first.call(null, coll);
          } else {
            return not_found;
          }
        } else {
          if (cljs.core.indexed_QMARK_.call(null, coll)) {
            return cljs.core._nth.call(null, coll, n, not_found);
          } else {
            if (cljs.core.seq.call(null, coll)) {
              var G__107440 = cljs.core.next.call(null, coll);
              var G__107441 = n - 1;
              var G__107442 = not_found;
              coll = G__107440;
              n = G__107441;
              not_found = G__107442;
              continue;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return not_found;
              } else {
                return null;
              }
            }
          }
        }
      }
      break;
    }
  };
  linear_traversal_nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return linear_traversal_nth__2.call(this, coll, n);
      case 3:
        return linear_traversal_nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$2 = linear_traversal_nth__2;
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$3 = linear_traversal_nth__3;
  return linear_traversal_nth;
}();
cljs.core.nth = function() {
  var nth = null;
  var nth__2 = function(coll, n) {
    if (coll == null) {
      return null;
    } else {
      if (function() {
        var G__107447 = coll;
        if (G__107447) {
          var bit__13473__auto__ = G__107447.cljs$lang$protocol_mask$partition0$ & 16;
          if (bit__13473__auto__ || G__107447.cljs$core$IIndexed$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._nth.call(null, coll, n);
      } else {
        if (coll instanceof Array) {
          if (n < coll.length) {
            return coll[n];
          } else {
            return null;
          }
        } else {
          if (typeof coll === "string") {
            if (n < coll.length) {
              return coll[n];
            } else {
              return null;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, coll)) {
              return cljs.core._nth.call(null, coll, n);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                if (function() {
                  var G__107448 = coll;
                  if (G__107448) {
                    var bit__13480__auto__ = G__107448.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__13480__auto__ || G__107448.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__107448.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__107448);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__107448);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.call(null, coll, n);
                } else {
                  throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str.call(null, cljs.core.type.call(null, coll)))].join(""));
                }
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  };
  var nth__3 = function(coll, n, not_found) {
    if (!(coll == null)) {
      if (function() {
        var G__107449 = coll;
        if (G__107449) {
          var bit__13473__auto__ = G__107449.cljs$lang$protocol_mask$partition0$ & 16;
          if (bit__13473__auto__ || G__107449.cljs$core$IIndexed$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._nth.call(null, coll, n, not_found);
      } else {
        if (coll instanceof Array) {
          if (n < coll.length) {
            return coll[n];
          } else {
            return not_found;
          }
        } else {
          if (typeof coll === "string") {
            if (n < coll.length) {
              return coll[n];
            } else {
              return not_found;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, coll)) {
              return cljs.core._nth.call(null, coll, n);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                if (function() {
                  var G__107450 = coll;
                  if (G__107450) {
                    var bit__13480__auto__ = G__107450.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__13480__auto__ || G__107450.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__107450.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__107450);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__107450);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.call(null, coll, n, not_found);
                } else {
                  throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str.call(null, cljs.core.type.call(null, coll)))].join(""));
                }
              } else {
                return null;
              }
            }
          }
        }
      }
    } else {
      return not_found;
    }
  };
  nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return nth__2.call(this, coll, n);
      case 3:
        return nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  nth.cljs$core$IFn$_invoke$arity$2 = nth__2;
  nth.cljs$core$IFn$_invoke$arity$3 = nth__3;
  return nth;
}();
cljs.core.get = function() {
  var get = null;
  var get__2 = function(o, k) {
    if (o == null) {
      return null;
    } else {
      if (function() {
        var G__107453 = o;
        if (G__107453) {
          var bit__13473__auto__ = G__107453.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__13473__auto__ || G__107453.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._lookup.call(null, o, k);
      } else {
        if (o instanceof Array) {
          if (k < o.length) {
            return o[k];
          } else {
            return null;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return null;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, o)) {
              return cljs.core._lookup.call(null, o, k);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return null;
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  };
  var get__3 = function(o, k, not_found) {
    if (!(o == null)) {
      if (function() {
        var G__107454 = o;
        if (G__107454) {
          var bit__13473__auto__ = G__107454.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__13473__auto__ || G__107454.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._lookup.call(null, o, k, not_found);
      } else {
        if (o instanceof Array) {
          if (k < o.length) {
            return o[k];
          } else {
            return not_found;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return not_found;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, o)) {
              return cljs.core._lookup.call(null, o, k, not_found);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return not_found;
              } else {
                return null;
              }
            }
          }
        }
      }
    } else {
      return not_found;
    }
  };
  get = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return get__2.call(this, o, k);
      case 3:
        return get__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get.cljs$core$IFn$_invoke$arity$2 = get__2;
  get.cljs$core$IFn$_invoke$arity$3 = get__3;
  return get;
}();
cljs.core.assoc = function() {
  var assoc = null;
  var assoc__3 = function(coll, k, v) {
    if (!(coll == null)) {
      return cljs.core._assoc.call(null, coll, k, v);
    } else {
      return cljs.core.PersistentHashMap.fromArrays.call(null, [k], [v]);
    }
  };
  var assoc__4 = function() {
    var G__107455__delegate = function(coll, k, v, kvs) {
      while (true) {
        var ret = assoc.call(null, coll, k, v);
        if (cljs.core.truth_(kvs)) {
          var G__107456 = ret;
          var G__107457 = cljs.core.first.call(null, kvs);
          var G__107458 = cljs.core.second.call(null, kvs);
          var G__107459 = cljs.core.nnext.call(null, kvs);
          coll = G__107456;
          k = G__107457;
          v = G__107458;
          kvs = G__107459;
          continue;
        } else {
          return ret;
        }
        break;
      }
    };
    var G__107455 = function(coll, k, v, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__107455__delegate.call(this, coll, k, v, kvs);
    };
    G__107455.cljs$lang$maxFixedArity = 3;
    G__107455.cljs$lang$applyTo = function(arglist__107460) {
      var coll = cljs.core.first(arglist__107460);
      arglist__107460 = cljs.core.next(arglist__107460);
      var k = cljs.core.first(arglist__107460);
      arglist__107460 = cljs.core.next(arglist__107460);
      var v = cljs.core.first(arglist__107460);
      var kvs = cljs.core.rest(arglist__107460);
      return G__107455__delegate(coll, k, v, kvs);
    };
    G__107455.cljs$core$IFn$_invoke$arity$variadic = G__107455__delegate;
    return G__107455;
  }();
  assoc = function(coll, k, v, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return assoc__3.call(this, coll, k, v);
      default:
        return assoc__4.cljs$core$IFn$_invoke$arity$variadic(coll, k, v, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  assoc.cljs$lang$maxFixedArity = 3;
  assoc.cljs$lang$applyTo = assoc__4.cljs$lang$applyTo;
  assoc.cljs$core$IFn$_invoke$arity$3 = assoc__3;
  assoc.cljs$core$IFn$_invoke$arity$variadic = assoc__4.cljs$core$IFn$_invoke$arity$variadic;
  return assoc;
}();
cljs.core.dissoc = function() {
  var dissoc = null;
  var dissoc__1 = function(coll) {
    return coll;
  };
  var dissoc__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._dissoc.call(null, coll, k);
    }
  };
  var dissoc__3 = function() {
    var G__107461__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = dissoc.call(null, coll, k);
          if (cljs.core.truth_(ks)) {
            var G__107462 = ret;
            var G__107463 = cljs.core.first.call(null, ks);
            var G__107464 = cljs.core.next.call(null, ks);
            coll = G__107462;
            k = G__107463;
            ks = G__107464;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__107461 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__107461__delegate.call(this, coll, k, ks);
    };
    G__107461.cljs$lang$maxFixedArity = 2;
    G__107461.cljs$lang$applyTo = function(arglist__107465) {
      var coll = cljs.core.first(arglist__107465);
      arglist__107465 = cljs.core.next(arglist__107465);
      var k = cljs.core.first(arglist__107465);
      var ks = cljs.core.rest(arglist__107465);
      return G__107461__delegate(coll, k, ks);
    };
    G__107461.cljs$core$IFn$_invoke$arity$variadic = G__107461__delegate;
    return G__107461;
  }();
  dissoc = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return dissoc__1.call(this, coll);
      case 2:
        return dissoc__2.call(this, coll, k);
      default:
        return dissoc__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dissoc.cljs$lang$maxFixedArity = 2;
  dissoc.cljs$lang$applyTo = dissoc__3.cljs$lang$applyTo;
  dissoc.cljs$core$IFn$_invoke$arity$1 = dissoc__1;
  dissoc.cljs$core$IFn$_invoke$arity$2 = dissoc__2;
  dissoc.cljs$core$IFn$_invoke$arity$variadic = dissoc__3.cljs$core$IFn$_invoke$arity$variadic;
  return dissoc;
}();
cljs.core.fn_QMARK_ = function fn_QMARK_(f) {
  var or__12830__auto__ = goog.isFunction(f);
  if (or__12830__auto__) {
    return or__12830__auto__;
  } else {
    var G__107469 = f;
    if (G__107469) {
      var bit__13480__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__12830__auto____$1 = bit__13480__auto__;
        if (cljs.core.truth_(or__12830__auto____$1)) {
          return or__12830__auto____$1;
        } else {
          return G__107469.cljs$core$Fn$;
        }
      }())) {
        return true;
      } else {
        if (!G__107469.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.Fn, G__107469);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.Fn, G__107469);
    }
  }
};
cljs.core.with_meta = function with_meta(o, meta) {
  if (cljs.core.fn_QMARK_.call(null, o) && !function() {
    var G__107477 = o;
    if (G__107477) {
      var bit__13480__auto__ = G__107477.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__13480__auto__ || G__107477.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__107477.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__107477);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__107477);
    }
  }()) {
    return with_meta.call(null, function() {
      if (typeof cljs.core.t107478 !== "undefined") {
      } else {
        cljs.core.t107478 = function(meta, o, with_meta, meta107479) {
          this.meta = meta;
          this.o = o;
          this.with_meta = with_meta;
          this.meta107479 = meta107479;
          this.cljs$lang$protocol_mask$partition1$ = 0;
          this.cljs$lang$protocol_mask$partition0$ = 393217;
        };
        cljs.core.t107478.cljs$lang$type = true;
        cljs.core.t107478.cljs$lang$ctorStr = "cljs.core/t107478";
        cljs.core.t107478.cljs$lang$ctorPrWriter = function(this__13397__auto__, writer__13398__auto__, opt__13399__auto__) {
          return cljs.core._write.call(null, writer__13398__auto__, "cljs.core/t107478");
        };
        cljs.core.t107478.prototype.call = function() {
          var G__107482__delegate = function(self__, args) {
            var self____$1 = this;
            var _ = self____$1;
            return cljs.core.apply.call(null, self__.o, args);
          };
          var G__107482 = function(self__, var_args) {
            var self__ = this;
            var args = null;
            if (arguments.length > 1) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
            }
            return G__107482__delegate.call(this, self__, args);
          };
          G__107482.cljs$lang$maxFixedArity = 1;
          G__107482.cljs$lang$applyTo = function(arglist__107483) {
            var self__ = cljs.core.first(arglist__107483);
            var args = cljs.core.rest(arglist__107483);
            return G__107482__delegate(self__, args);
          };
          G__107482.cljs$core$IFn$_invoke$arity$variadic = G__107482__delegate;
          return G__107482;
        }();
        cljs.core.t107478.prototype.apply = function(self__, args107481) {
          var self__ = this;
          var self____$1 = this;
          return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args107481)));
        };
        cljs.core.t107478.prototype.cljs$core$IFn$_invoke$arity$2 = function() {
          var G__107484__delegate = function(args) {
            var _ = this;
            return cljs.core.apply.call(null, self__.o, args);
          };
          var G__107484 = function(var_args) {
            var self__ = this;
            var args = null;
            if (arguments.length > 0) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
            }
            return G__107484__delegate.call(this, args);
          };
          G__107484.cljs$lang$maxFixedArity = 0;
          G__107484.cljs$lang$applyTo = function(arglist__107485) {
            var args = cljs.core.seq(arglist__107485);
            return G__107484__delegate(args);
          };
          G__107484.cljs$core$IFn$_invoke$arity$variadic = G__107484__delegate;
          return G__107484;
        }();
        cljs.core.t107478.prototype.cljs$core$Fn$ = true;
        cljs.core.t107478.prototype.cljs$core$IMeta$_meta$arity$1 = function(_107480) {
          var self__ = this;
          var _107480__$1 = this;
          return self__.meta107479;
        };
        cljs.core.t107478.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_107480, meta107479__$1) {
          var self__ = this;
          var _107480__$1 = this;
          return new cljs.core.t107478(self__.meta, self__.o, self__.with_meta, meta107479__$1);
        };
        cljs.core.__GT_t107478 = function __GT_t107478(meta__$1, o__$1, with_meta__$1, meta107479) {
          return new cljs.core.t107478(meta__$1, o__$1, with_meta__$1, meta107479);
        };
      }
      return new cljs.core.t107478(meta, o, with_meta, null);
    }(), meta);
  } else {
    if (o == null) {
      return null;
    } else {
      return cljs.core._with_meta.call(null, o, meta);
    }
  }
};
cljs.core.meta = function meta(o) {
  if (function() {
    var and__12818__auto__ = !(o == null);
    if (and__12818__auto__) {
      var G__107489 = o;
      if (G__107489) {
        var bit__13480__auto__ = G__107489.cljs$lang$protocol_mask$partition0$ & 131072;
        if (bit__13480__auto__ || G__107489.cljs$core$IMeta$) {
          return true;
        } else {
          if (!G__107489.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__107489);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__107489);
      }
    } else {
      return and__12818__auto__;
    }
  }()) {
    return cljs.core._meta.call(null, o);
  } else {
    return null;
  }
};
cljs.core.peek = function peek(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._peek.call(null, coll);
  }
};
cljs.core.pop = function pop(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._pop.call(null, coll);
  }
};
cljs.core.disj = function() {
  var disj = null;
  var disj__1 = function(coll) {
    return coll;
  };
  var disj__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._disjoin.call(null, coll, k);
    }
  };
  var disj__3 = function() {
    var G__107490__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = disj.call(null, coll, k);
          if (cljs.core.truth_(ks)) {
            var G__107491 = ret;
            var G__107492 = cljs.core.first.call(null, ks);
            var G__107493 = cljs.core.next.call(null, ks);
            coll = G__107491;
            k = G__107492;
            ks = G__107493;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__107490 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__107490__delegate.call(this, coll, k, ks);
    };
    G__107490.cljs$lang$maxFixedArity = 2;
    G__107490.cljs$lang$applyTo = function(arglist__107494) {
      var coll = cljs.core.first(arglist__107494);
      arglist__107494 = cljs.core.next(arglist__107494);
      var k = cljs.core.first(arglist__107494);
      var ks = cljs.core.rest(arglist__107494);
      return G__107490__delegate(coll, k, ks);
    };
    G__107490.cljs$core$IFn$_invoke$arity$variadic = G__107490__delegate;
    return G__107490;
  }();
  disj = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return disj__1.call(this, coll);
      case 2:
        return disj__2.call(this, coll, k);
      default:
        return disj__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  disj.cljs$lang$maxFixedArity = 2;
  disj.cljs$lang$applyTo = disj__3.cljs$lang$applyTo;
  disj.cljs$core$IFn$_invoke$arity$1 = disj__1;
  disj.cljs$core$IFn$_invoke$arity$2 = disj__2;
  disj.cljs$core$IFn$_invoke$arity$variadic = disj__3.cljs$core$IFn$_invoke$arity$variadic;
  return disj;
}();
cljs.core.string_hash_cache = function() {
  var obj107496 = {};
  return obj107496;
}();
cljs.core.string_hash_cache_count = 0;
cljs.core.add_to_string_hash_cache = function add_to_string_hash_cache(k) {
  var h = goog.string.hashCode(k);
  cljs.core.string_hash_cache[k] = h;
  cljs.core.string_hash_cache_count = cljs.core.string_hash_cache_count + 1;
  return h;
};
cljs.core.check_string_hash_cache = function check_string_hash_cache(k) {
  if (cljs.core.string_hash_cache_count > 255) {
    cljs.core.string_hash_cache = function() {
      var obj107500 = {};
      return obj107500;
    }();
    cljs.core.string_hash_cache_count = 0;
  } else {
  }
  var h = cljs.core.string_hash_cache[k];
  if (typeof h === "number") {
    return h;
  } else {
    return cljs.core.add_to_string_hash_cache.call(null, k);
  }
};
cljs.core.hash = function hash(o) {
  if (function() {
    var G__107502 = o;
    if (G__107502) {
      var bit__13473__auto__ = G__107502.cljs$lang$protocol_mask$partition0$ & 4194304;
      if (bit__13473__auto__ || G__107502.cljs$core$IHash$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._hash.call(null, o);
  } else {
    if (typeof o === "number") {
      return Math.floor(o) % 2147483647;
    } else {
      if (o === true) {
        return 1;
      } else {
        if (o === false) {
          return 0;
        } else {
          if (typeof o === "string") {
            return cljs.core.check_string_hash_cache.call(null, o);
          } else {
            if (o == null) {
              return 0;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return cljs.core._hash.call(null, o);
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.empty_QMARK_ = function empty_QMARK_(coll) {
  return coll == null || cljs.core.not.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.coll_QMARK_ = function coll_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__107504 = x;
    if (G__107504) {
      var bit__13480__auto__ = G__107504.cljs$lang$protocol_mask$partition0$ & 8;
      if (bit__13480__auto__ || G__107504.cljs$core$ICollection$) {
        return true;
      } else {
        if (!G__107504.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICollection, G__107504);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICollection, G__107504);
    }
  }
};
cljs.core.set_QMARK_ = function set_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__107506 = x;
    if (G__107506) {
      var bit__13480__auto__ = G__107506.cljs$lang$protocol_mask$partition0$ & 4096;
      if (bit__13480__auto__ || G__107506.cljs$core$ISet$) {
        return true;
      } else {
        if (!G__107506.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISet, G__107506);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISet, G__107506);
    }
  }
};
cljs.core.associative_QMARK_ = function associative_QMARK_(x) {
  var G__107508 = x;
  if (G__107508) {
    var bit__13480__auto__ = G__107508.cljs$lang$protocol_mask$partition0$ & 512;
    if (bit__13480__auto__ || G__107508.cljs$core$IAssociative$) {
      return true;
    } else {
      if (!G__107508.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAssociative, G__107508);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAssociative, G__107508);
  }
};
cljs.core.sequential_QMARK_ = function sequential_QMARK_(x) {
  var G__107510 = x;
  if (G__107510) {
    var bit__13480__auto__ = G__107510.cljs$lang$protocol_mask$partition0$ & 16777216;
    if (bit__13480__auto__ || G__107510.cljs$core$ISequential$) {
      return true;
    } else {
      if (!G__107510.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISequential, G__107510);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISequential, G__107510);
  }
};
cljs.core.sorted_QMARK_ = function sorted_QMARK_(x) {
  var G__107512 = x;
  if (G__107512) {
    var bit__13480__auto__ = G__107512.cljs$lang$protocol_mask$partition0$ & 268435456;
    if (bit__13480__auto__ || G__107512.cljs$core$ISorted$) {
      return true;
    } else {
      if (!G__107512.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISorted, G__107512);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISorted, G__107512);
  }
};
cljs.core.reduceable_QMARK_ = function reduceable_QMARK_(x) {
  var G__107514 = x;
  if (G__107514) {
    var bit__13480__auto__ = G__107514.cljs$lang$protocol_mask$partition0$ & 524288;
    if (bit__13480__auto__ || G__107514.cljs$core$IReduce$) {
      return true;
    } else {
      if (!G__107514.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, G__107514);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, G__107514);
  }
};
cljs.core.map_QMARK_ = function map_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__107516 = x;
    if (G__107516) {
      var bit__13480__auto__ = G__107516.cljs$lang$protocol_mask$partition0$ & 1024;
      if (bit__13480__auto__ || G__107516.cljs$core$IMap$) {
        return true;
      } else {
        if (!G__107516.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMap, G__107516);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMap, G__107516);
    }
  }
};
cljs.core.vector_QMARK_ = function vector_QMARK_(x) {
  var G__107518 = x;
  if (G__107518) {
    var bit__13480__auto__ = G__107518.cljs$lang$protocol_mask$partition0$ & 16384;
    if (bit__13480__auto__ || G__107518.cljs$core$IVector$) {
      return true;
    } else {
      if (!G__107518.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IVector, G__107518);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IVector, G__107518);
  }
};
cljs.core.chunked_seq_QMARK_ = function chunked_seq_QMARK_(x) {
  var G__107520 = x;
  if (G__107520) {
    var bit__13473__auto__ = G__107520.cljs$lang$protocol_mask$partition1$ & 512;
    if (bit__13473__auto__ || G__107520.cljs$core$IChunkedSeq$) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
};
cljs.core.js_obj = function() {
  var js_obj = null;
  var js_obj__0 = function() {
    var obj107524 = {};
    return obj107524;
  };
  var js_obj__1 = function() {
    var G__107525__delegate = function(keyvals) {
      return cljs.core.apply.call(null, goog.object.create, keyvals);
    };
    var G__107525 = function(var_args) {
      var keyvals = null;
      if (arguments.length > 0) {
        keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__107525__delegate.call(this, keyvals);
    };
    G__107525.cljs$lang$maxFixedArity = 0;
    G__107525.cljs$lang$applyTo = function(arglist__107526) {
      var keyvals = cljs.core.seq(arglist__107526);
      return G__107525__delegate(keyvals);
    };
    G__107525.cljs$core$IFn$_invoke$arity$variadic = G__107525__delegate;
    return G__107525;
  }();
  js_obj = function(var_args) {
    var keyvals = var_args;
    switch(arguments.length) {
      case 0:
        return js_obj__0.call(this);
      default:
        return js_obj__1.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(arguments, 0));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_obj.cljs$lang$maxFixedArity = 0;
  js_obj.cljs$lang$applyTo = js_obj__1.cljs$lang$applyTo;
  js_obj.cljs$core$IFn$_invoke$arity$0 = js_obj__0;
  js_obj.cljs$core$IFn$_invoke$arity$variadic = js_obj__1.cljs$core$IFn$_invoke$arity$variadic;
  return js_obj;
}();
cljs.core.js_keys = function js_keys(obj) {
  var keys = [];
  goog.object.forEach(obj, function(val, key, obj__$1) {
    return keys.push(key);
  });
  return keys;
};
cljs.core.js_delete = function js_delete(obj, key) {
  return delete obj[key];
};
cljs.core.array_copy = function array_copy(from, i, to, j, len) {
  var i__$1 = i;
  var j__$1 = j;
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__107527 = i__$1 + 1;
      var G__107528 = j__$1 + 1;
      var G__107529 = len__$1 - 1;
      i__$1 = G__107527;
      j__$1 = G__107528;
      len__$1 = G__107529;
      continue;
    }
    break;
  }
};
cljs.core.array_copy_downward = function array_copy_downward(from, i, to, j, len) {
  var i__$1 = i + (len - 1);
  var j__$1 = j + (len - 1);
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__107530 = i__$1 - 1;
      var G__107531 = j__$1 - 1;
      var G__107532 = len__$1 - 1;
      i__$1 = G__107530;
      j__$1 = G__107531;
      len__$1 = G__107532;
      continue;
    }
    break;
  }
};
cljs.core.lookup_sentinel = function() {
  var obj107534 = {};
  return obj107534;
}();
cljs.core.false_QMARK_ = function false_QMARK_(x) {
  return x === false;
};
cljs.core.true_QMARK_ = function true_QMARK_(x) {
  return x === true;
};
cljs.core.undefined_QMARK_ = function undefined_QMARK_(x) {
  return void 0 === x;
};
cljs.core.seq_QMARK_ = function seq_QMARK_(s) {
  if (s == null) {
    return false;
  } else {
    var G__107536 = s;
    if (G__107536) {
      var bit__13480__auto__ = G__107536.cljs$lang$protocol_mask$partition0$ & 64;
      if (bit__13480__auto__ || G__107536.cljs$core$ISeq$) {
        return true;
      } else {
        if (!G__107536.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__107536);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__107536);
    }
  }
};
cljs.core.seqable_QMARK_ = function seqable_QMARK_(s) {
  var G__107538 = s;
  if (G__107538) {
    var bit__13480__auto__ = G__107538.cljs$lang$protocol_mask$partition0$ & 8388608;
    if (bit__13480__auto__ || G__107538.cljs$core$ISeqable$) {
      return true;
    } else {
      if (!G__107538.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__107538);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__107538);
  }
};
cljs.core.boolean$ = function boolean$(x) {
  if (cljs.core.truth_(x)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ifn_QMARK_ = function ifn_QMARK_(f) {
  var or__12830__auto__ = cljs.core.fn_QMARK_.call(null, f);
  if (or__12830__auto__) {
    return or__12830__auto__;
  } else {
    var G__107542 = f;
    if (G__107542) {
      var bit__13480__auto__ = G__107542.cljs$lang$protocol_mask$partition0$ & 1;
      if (bit__13480__auto__ || G__107542.cljs$core$IFn$) {
        return true;
      } else {
        if (!G__107542.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IFn, G__107542);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IFn, G__107542);
    }
  }
};
cljs.core.integer_QMARK_ = function integer_QMARK_(n) {
  return typeof n === "number" && (!isNaN(n) && (!(n === Infinity) && parseFloat(n) === parseInt(n, 10)));
};
cljs.core.contains_QMARK_ = function contains_QMARK_(coll, v) {
  if (cljs.core.get.call(null, coll, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return false;
  } else {
    return true;
  }
};
cljs.core.find = function find(coll, k) {
  if (!(coll == null) && (cljs.core.associative_QMARK_.call(null, coll) && cljs.core.contains_QMARK_.call(null, coll, k))) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.get.call(null, coll, k)], null);
  } else {
    return null;
  }
};
cljs.core.distinct_QMARK_ = function() {
  var distinct_QMARK_ = null;
  var distinct_QMARK___1 = function(x) {
    return true;
  };
  var distinct_QMARK___2 = function(x, y) {
    return!cljs.core._EQ_.call(null, x, y);
  };
  var distinct_QMARK___3 = function() {
    var G__107543__delegate = function(x, y, more) {
      if (!cljs.core._EQ_.call(null, x, y)) {
        var s = cljs.core.PersistentHashSet.fromArray([y, x], true);
        var xs = more;
        while (true) {
          var x__$1 = cljs.core.first.call(null, xs);
          var etc = cljs.core.next.call(null, xs);
          if (cljs.core.truth_(xs)) {
            if (cljs.core.contains_QMARK_.call(null, s, x__$1)) {
              return false;
            } else {
              var G__107544 = cljs.core.conj.call(null, s, x__$1);
              var G__107545 = etc;
              s = G__107544;
              xs = G__107545;
              continue;
            }
          } else {
            return true;
          }
          break;
        }
      } else {
        return false;
      }
    };
    var G__107543 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__107543__delegate.call(this, x, y, more);
    };
    G__107543.cljs$lang$maxFixedArity = 2;
    G__107543.cljs$lang$applyTo = function(arglist__107546) {
      var x = cljs.core.first(arglist__107546);
      arglist__107546 = cljs.core.next(arglist__107546);
      var y = cljs.core.first(arglist__107546);
      var more = cljs.core.rest(arglist__107546);
      return G__107543__delegate(x, y, more);
    };
    G__107543.cljs$core$IFn$_invoke$arity$variadic = G__107543__delegate;
    return G__107543;
  }();
  distinct_QMARK_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return distinct_QMARK___1.call(this, x);
      case 2:
        return distinct_QMARK___2.call(this, x, y);
      default:
        return distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  distinct_QMARK_.cljs$lang$maxFixedArity = 2;
  distinct_QMARK_.cljs$lang$applyTo = distinct_QMARK___3.cljs$lang$applyTo;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$1 = distinct_QMARK___1;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$2 = distinct_QMARK___2;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic = distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic;
  return distinct_QMARK_;
}();
cljs.core.sequence = function sequence(coll) {
  if (cljs.core.seq_QMARK_.call(null, coll)) {
    return coll;
  } else {
    var or__12830__auto__ = cljs.core.seq.call(null, coll);
    if (or__12830__auto__) {
      return or__12830__auto__;
    } else {
      return cljs.core.List.EMPTY;
    }
  }
};
cljs.core.compare = function compare(x, y) {
  if (x === y) {
    return 0;
  } else {
    if (x == null) {
      return-1;
    } else {
      if (y == null) {
        return 1;
      } else {
        if (cljs.core.type.call(null, x) === cljs.core.type.call(null, y)) {
          if (function() {
            var G__107548 = x;
            if (G__107548) {
              var bit__13473__auto__ = G__107548.cljs$lang$protocol_mask$partition1$ & 2048;
              if (bit__13473__auto__ || G__107548.cljs$core$IComparable$) {
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          }()) {
            return cljs.core._compare.call(null, x, y);
          } else {
            return goog.array.defaultCompare(x, y);
          }
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            throw new Error("compare on non-nil objects of different types");
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.compare_indexed = function() {
  var compare_indexed = null;
  var compare_indexed__2 = function(xs, ys) {
    var xl = cljs.core.count.call(null, xs);
    var yl = cljs.core.count.call(null, ys);
    if (xl < yl) {
      return-1;
    } else {
      if (xl > yl) {
        return 1;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return compare_indexed.call(null, xs, ys, xl, 0);
        } else {
          return null;
        }
      }
    }
  };
  var compare_indexed__4 = function(xs, ys, len, n) {
    while (true) {
      var d = cljs.core.compare.call(null, cljs.core.nth.call(null, xs, n), cljs.core.nth.call(null, ys, n));
      if (d === 0 && n + 1 < len) {
        var G__107549 = xs;
        var G__107550 = ys;
        var G__107551 = len;
        var G__107552 = n + 1;
        xs = G__107549;
        ys = G__107550;
        len = G__107551;
        n = G__107552;
        continue;
      } else {
        return d;
      }
      break;
    }
  };
  compare_indexed = function(xs, ys, len, n) {
    switch(arguments.length) {
      case 2:
        return compare_indexed__2.call(this, xs, ys);
      case 4:
        return compare_indexed__4.call(this, xs, ys, len, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  compare_indexed.cljs$core$IFn$_invoke$arity$2 = compare_indexed__2;
  compare_indexed.cljs$core$IFn$_invoke$arity$4 = compare_indexed__4;
  return compare_indexed;
}();
cljs.core.fn__GT_comparator = function fn__GT_comparator(f) {
  if (cljs.core._EQ_.call(null, f, cljs.core.compare)) {
    return cljs.core.compare;
  } else {
    return function(x, y) {
      var r = f.call(null, x, y);
      if (typeof r === "number") {
        return r;
      } else {
        if (cljs.core.truth_(r)) {
          return-1;
        } else {
          if (cljs.core.truth_(f.call(null, y, x))) {
            return 1;
          } else {
            return 0;
          }
        }
      }
    };
  }
};
cljs.core.sort = function() {
  var sort = null;
  var sort__1 = function(coll) {
    return sort.call(null, cljs.core.compare, coll);
  };
  var sort__2 = function(comp, coll) {
    if (cljs.core.seq.call(null, coll)) {
      var a = cljs.core.to_array.call(null, coll);
      goog.array.stableSort(a, cljs.core.fn__GT_comparator.call(null, comp));
      return cljs.core.seq.call(null, a);
    } else {
      return cljs.core.List.EMPTY;
    }
  };
  sort = function(comp, coll) {
    switch(arguments.length) {
      case 1:
        return sort__1.call(this, comp);
      case 2:
        return sort__2.call(this, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort.cljs$core$IFn$_invoke$arity$1 = sort__1;
  sort.cljs$core$IFn$_invoke$arity$2 = sort__2;
  return sort;
}();
cljs.core.sort_by = function() {
  var sort_by = null;
  var sort_by__2 = function(keyfn, coll) {
    return sort_by.call(null, keyfn, cljs.core.compare, coll);
  };
  var sort_by__3 = function(keyfn, comp, coll) {
    return cljs.core.sort.call(null, function(x, y) {
      return cljs.core.fn__GT_comparator.call(null, comp).call(null, keyfn.call(null, x), keyfn.call(null, y));
    }, coll);
  };
  sort_by = function(keyfn, comp, coll) {
    switch(arguments.length) {
      case 2:
        return sort_by__2.call(this, keyfn, comp);
      case 3:
        return sort_by__3.call(this, keyfn, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort_by.cljs$core$IFn$_invoke$arity$2 = sort_by__2;
  sort_by.cljs$core$IFn$_invoke$arity$3 = sort_by__3;
  return sort_by;
}();
cljs.core.seq_reduce = function() {
  var seq_reduce = null;
  var seq_reduce__2 = function(f, coll) {
    var temp__4090__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4090__auto__) {
      var s = temp__4090__auto__;
      return cljs.core.reduce.call(null, f, cljs.core.first.call(null, s), cljs.core.next.call(null, s));
    } else {
      return f.call(null);
    }
  };
  var seq_reduce__3 = function(f, val, coll) {
    var val__$1 = val;
    var coll__$1 = cljs.core.seq.call(null, coll);
    while (true) {
      if (coll__$1) {
        var nval = f.call(null, val__$1, cljs.core.first.call(null, coll__$1));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__107553 = nval;
          var G__107554 = cljs.core.next.call(null, coll__$1);
          val__$1 = G__107553;
          coll__$1 = G__107554;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  seq_reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return seq_reduce__2.call(this, f, val);
      case 3:
        return seq_reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  seq_reduce.cljs$core$IFn$_invoke$arity$2 = seq_reduce__2;
  seq_reduce.cljs$core$IFn$_invoke$arity$3 = seq_reduce__3;
  return seq_reduce;
}();
cljs.core.shuffle = function shuffle(coll) {
  var a = cljs.core.to_array.call(null, coll);
  goog.array.shuffle(a);
  return cljs.core.vec.call(null, a);
};
cljs.core.reduce = function() {
  var reduce = null;
  var reduce__2 = function(f, coll) {
    if (function() {
      var G__107557 = coll;
      if (G__107557) {
        var bit__13473__auto__ = G__107557.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__13473__auto__ || G__107557.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._reduce.call(null, coll, f);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_reduce.call(null, coll, f);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.call(null, coll, f);
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, coll)) {
            return cljs.core._reduce.call(null, coll, f);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.seq_reduce.call(null, f, coll);
            } else {
              return null;
            }
          }
        }
      }
    }
  };
  var reduce__3 = function(f, val, coll) {
    if (function() {
      var G__107558 = coll;
      if (G__107558) {
        var bit__13473__auto__ = G__107558.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__13473__auto__ || G__107558.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._reduce.call(null, coll, f, val);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_reduce.call(null, coll, f, val);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.call(null, coll, f, val);
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, coll)) {
            return cljs.core._reduce.call(null, coll, f, val);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.seq_reduce.call(null, f, val, coll);
            } else {
              return null;
            }
          }
        }
      }
    }
  };
  reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return reduce__2.call(this, f, val);
      case 3:
        return reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reduce.cljs$core$IFn$_invoke$arity$2 = reduce__2;
  reduce.cljs$core$IFn$_invoke$arity$3 = reduce__3;
  return reduce;
}();
cljs.core.reduce_kv = function reduce_kv(f, init, coll) {
  if (!(coll == null)) {
    return cljs.core._kv_reduce.call(null, coll, f, init);
  } else {
    return init;
  }
};
cljs.core._PLUS_ = function() {
  var _PLUS_ = null;
  var _PLUS___0 = function() {
    return 0;
  };
  var _PLUS___1 = function(x) {
    return x;
  };
  var _PLUS___2 = function(x, y) {
    return x + y;
  };
  var _PLUS___3 = function() {
    var G__107559__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _PLUS_, x + y, more);
    };
    var G__107559 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__107559__delegate.call(this, x, y, more);
    };
    G__107559.cljs$lang$maxFixedArity = 2;
    G__107559.cljs$lang$applyTo = function(arglist__107560) {
      var x = cljs.core.first(arglist__107560);
      arglist__107560 = cljs.core.next(arglist__107560);
      var y = cljs.core.first(arglist__107560);
      var more = cljs.core.rest(arglist__107560);
      return G__107559__delegate(x, y, more);
    };
    G__107559.cljs$core$IFn$_invoke$arity$variadic = G__107559__delegate;
    return G__107559;
  }();
  _PLUS_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _PLUS___0.call(this);
      case 1:
        return _PLUS___1.call(this, x);
      case 2:
        return _PLUS___2.call(this, x, y);
      default:
        return _PLUS___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _PLUS_.cljs$lang$maxFixedArity = 2;
  _PLUS_.cljs$lang$applyTo = _PLUS___3.cljs$lang$applyTo;
  _PLUS_.cljs$core$IFn$_invoke$arity$0 = _PLUS___0;
  _PLUS_.cljs$core$IFn$_invoke$arity$1 = _PLUS___1;
  _PLUS_.cljs$core$IFn$_invoke$arity$2 = _PLUS___2;
  _PLUS_.cljs$core$IFn$_invoke$arity$variadic = _PLUS___3.cljs$core$IFn$_invoke$arity$variadic;
  return _PLUS_;
}();
cljs.core._ = function() {
  var _ = null;
  var ___1 = function(x) {
    return-x;
  };
  var ___2 = function(x, y) {
    return x - y;
  };
  var ___3 = function() {
    var G__107561__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _, x - y, more);
    };
    var G__107561 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__107561__delegate.call(this, x, y, more);
    };
    G__107561.cljs$lang$maxFixedArity = 2;
    G__107561.cljs$lang$applyTo = function(arglist__107562) {
      var x = cljs.core.first(arglist__107562);
      arglist__107562 = cljs.core.next(arglist__107562);
      var y = cljs.core.first(arglist__107562);
      var more = cljs.core.rest(arglist__107562);
      return G__107561__delegate(x, y, more);
    };
    G__107561.cljs$core$IFn$_invoke$arity$variadic = G__107561__delegate;
    return G__107561;
  }();
  _ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return ___1.call(this, x);
      case 2:
        return ___2.call(this, x, y);
      default:
        return ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _.cljs$lang$maxFixedArity = 2;
  _.cljs$lang$applyTo = ___3.cljs$lang$applyTo;
  _.cljs$core$IFn$_invoke$arity$1 = ___1;
  _.cljs$core$IFn$_invoke$arity$2 = ___2;
  _.cljs$core$IFn$_invoke$arity$variadic = ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _;
}();
cljs.core._STAR_ = function() {
  var _STAR_ = null;
  var _STAR___0 = function() {
    return 1;
  };
  var _STAR___1 = function(x) {
    return x;
  };
  var _STAR___2 = function(x, y) {
    return x * y;
  };
  var _STAR___3 = function() {
    var G__107563__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _STAR_, x * y, more);
    };
    var G__107563 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__107563__delegate.call(this, x, y, more);
    };
    G__107563.cljs$lang$maxFixedArity = 2;
    G__107563.cljs$lang$applyTo = function(arglist__107564) {
      var x = cljs.core.first(arglist__107564);
      arglist__107564 = cljs.core.next(arglist__107564);
      var y = cljs.core.first(arglist__107564);
      var more = cljs.core.rest(arglist__107564);
      return G__107563__delegate(x, y, more);
    };
    G__107563.cljs$core$IFn$_invoke$arity$variadic = G__107563__delegate;
    return G__107563;
  }();
  _STAR_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _STAR___0.call(this);
      case 1:
        return _STAR___1.call(this, x);
      case 2:
        return _STAR___2.call(this, x, y);
      default:
        return _STAR___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _STAR_.cljs$lang$maxFixedArity = 2;
  _STAR_.cljs$lang$applyTo = _STAR___3.cljs$lang$applyTo;
  _STAR_.cljs$core$IFn$_invoke$arity$0 = _STAR___0;
  _STAR_.cljs$core$IFn$_invoke$arity$1 = _STAR___1;
  _STAR_.cljs$core$IFn$_invoke$arity$2 = _STAR___2;
  _STAR_.cljs$core$IFn$_invoke$arity$variadic = _STAR___3.cljs$core$IFn$_invoke$arity$variadic;
  return _STAR_;
}();
cljs.core._SLASH_ = function() {
  var _SLASH_ = null;
  var _SLASH___1 = function(x) {
    return _SLASH_.call(null, 1, x);
  };
  var _SLASH___2 = function(x, y) {
    return x / y;
  };
  var _SLASH___3 = function() {
    var G__107565__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _SLASH_, _SLASH_.call(null, x, y), more);
    };
    var G__107565 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__107565__delegate.call(this, x, y, more);
    };
    G__107565.cljs$lang$maxFixedArity = 2;
    G__107565.cljs$lang$applyTo = function(arglist__107566) {
      var x = cljs.core.first(arglist__107566);
      arglist__107566 = cljs.core.next(arglist__107566);
      var y = cljs.core.first(arglist__107566);
      var more = cljs.core.rest(arglist__107566);
      return G__107565__delegate(x, y, more);
    };
    G__107565.cljs$core$IFn$_invoke$arity$variadic = G__107565__delegate;
    return G__107565;
  }();
  _SLASH_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _SLASH___1.call(this, x);
      case 2:
        return _SLASH___2.call(this, x, y);
      default:
        return _SLASH___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _SLASH_.cljs$lang$maxFixedArity = 2;
  _SLASH_.cljs$lang$applyTo = _SLASH___3.cljs$lang$applyTo;
  _SLASH_.cljs$core$IFn$_invoke$arity$1 = _SLASH___1;
  _SLASH_.cljs$core$IFn$_invoke$arity$2 = _SLASH___2;
  _SLASH_.cljs$core$IFn$_invoke$arity$variadic = _SLASH___3.cljs$core$IFn$_invoke$arity$variadic;
  return _SLASH_;
}();
cljs.core._LT_ = function() {
  var _LT_ = null;
  var _LT___1 = function(x) {
    return true;
  };
  var _LT___2 = function(x, y) {
    return x < y;
  };
  var _LT___3 = function() {
    var G__107567__delegate = function(x, y, more) {
      while (true) {
        if (x < y) {
          if (cljs.core.next.call(null, more)) {
            var G__107568 = y;
            var G__107569 = cljs.core.first.call(null, more);
            var G__107570 = cljs.core.next.call(null, more);
            x = G__107568;
            y = G__107569;
            more = G__107570;
            continue;
          } else {
            return y < cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__107567 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__107567__delegate.call(this, x, y, more);
    };
    G__107567.cljs$lang$maxFixedArity = 2;
    G__107567.cljs$lang$applyTo = function(arglist__107571) {
      var x = cljs.core.first(arglist__107571);
      arglist__107571 = cljs.core.next(arglist__107571);
      var y = cljs.core.first(arglist__107571);
      var more = cljs.core.rest(arglist__107571);
      return G__107567__delegate(x, y, more);
    };
    G__107567.cljs$core$IFn$_invoke$arity$variadic = G__107567__delegate;
    return G__107567;
  }();
  _LT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT___1.call(this, x);
      case 2:
        return _LT___2.call(this, x, y);
      default:
        return _LT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT_.cljs$lang$maxFixedArity = 2;
  _LT_.cljs$lang$applyTo = _LT___3.cljs$lang$applyTo;
  _LT_.cljs$core$IFn$_invoke$arity$1 = _LT___1;
  _LT_.cljs$core$IFn$_invoke$arity$2 = _LT___2;
  _LT_.cljs$core$IFn$_invoke$arity$variadic = _LT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT_;
}();
cljs.core._LT__EQ_ = function() {
  var _LT__EQ_ = null;
  var _LT__EQ___1 = function(x) {
    return true;
  };
  var _LT__EQ___2 = function(x, y) {
    return x <= y;
  };
  var _LT__EQ___3 = function() {
    var G__107572__delegate = function(x, y, more) {
      while (true) {
        if (x <= y) {
          if (cljs.core.next.call(null, more)) {
            var G__107573 = y;
            var G__107574 = cljs.core.first.call(null, more);
            var G__107575 = cljs.core.next.call(null, more);
            x = G__107573;
            y = G__107574;
            more = G__107575;
            continue;
          } else {
            return y <= cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__107572 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__107572__delegate.call(this, x, y, more);
    };
    G__107572.cljs$lang$maxFixedArity = 2;
    G__107572.cljs$lang$applyTo = function(arglist__107576) {
      var x = cljs.core.first(arglist__107576);
      arglist__107576 = cljs.core.next(arglist__107576);
      var y = cljs.core.first(arglist__107576);
      var more = cljs.core.rest(arglist__107576);
      return G__107572__delegate(x, y, more);
    };
    G__107572.cljs$core$IFn$_invoke$arity$variadic = G__107572__delegate;
    return G__107572;
  }();
  _LT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT__EQ___1.call(this, x);
      case 2:
        return _LT__EQ___2.call(this, x, y);
      default:
        return _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT__EQ_.cljs$lang$maxFixedArity = 2;
  _LT__EQ_.cljs$lang$applyTo = _LT__EQ___3.cljs$lang$applyTo;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$1 = _LT__EQ___1;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$2 = _LT__EQ___2;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT__EQ_;
}();
cljs.core._GT_ = function() {
  var _GT_ = null;
  var _GT___1 = function(x) {
    return true;
  };
  var _GT___2 = function(x, y) {
    return x > y;
  };
  var _GT___3 = function() {
    var G__107577__delegate = function(x, y, more) {
      while (true) {
        if (x > y) {
          if (cljs.core.next.call(null, more)) {
            var G__107578 = y;
            var G__107579 = cljs.core.first.call(null, more);
            var G__107580 = cljs.core.next.call(null, more);
            x = G__107578;
            y = G__107579;
            more = G__107580;
            continue;
          } else {
            return y > cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__107577 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__107577__delegate.call(this, x, y, more);
    };
    G__107577.cljs$lang$maxFixedArity = 2;
    G__107577.cljs$lang$applyTo = function(arglist__107581) {
      var x = cljs.core.first(arglist__107581);
      arglist__107581 = cljs.core.next(arglist__107581);
      var y = cljs.core.first(arglist__107581);
      var more = cljs.core.rest(arglist__107581);
      return G__107577__delegate(x, y, more);
    };
    G__107577.cljs$core$IFn$_invoke$arity$variadic = G__107577__delegate;
    return G__107577;
  }();
  _GT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT___1.call(this, x);
      case 2:
        return _GT___2.call(this, x, y);
      default:
        return _GT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT_.cljs$lang$maxFixedArity = 2;
  _GT_.cljs$lang$applyTo = _GT___3.cljs$lang$applyTo;
  _GT_.cljs$core$IFn$_invoke$arity$1 = _GT___1;
  _GT_.cljs$core$IFn$_invoke$arity$2 = _GT___2;
  _GT_.cljs$core$IFn$_invoke$arity$variadic = _GT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT_;
}();
cljs.core._GT__EQ_ = function() {
  var _GT__EQ_ = null;
  var _GT__EQ___1 = function(x) {
    return true;
  };
  var _GT__EQ___2 = function(x, y) {
    return x >= y;
  };
  var _GT__EQ___3 = function() {
    var G__107582__delegate = function(x, y, more) {
      while (true) {
        if (x >= y) {
          if (cljs.core.next.call(null, more)) {
            var G__107583 = y;
            var G__107584 = cljs.core.first.call(null, more);
            var G__107585 = cljs.core.next.call(null, more);
            x = G__107583;
            y = G__107584;
            more = G__107585;
            continue;
          } else {
            return y >= cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__107582 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__107582__delegate.call(this, x, y, more);
    };
    G__107582.cljs$lang$maxFixedArity = 2;
    G__107582.cljs$lang$applyTo = function(arglist__107586) {
      var x = cljs.core.first(arglist__107586);
      arglist__107586 = cljs.core.next(arglist__107586);
      var y = cljs.core.first(arglist__107586);
      var more = cljs.core.rest(arglist__107586);
      return G__107582__delegate(x, y, more);
    };
    G__107582.cljs$core$IFn$_invoke$arity$variadic = G__107582__delegate;
    return G__107582;
  }();
  _GT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT__EQ___1.call(this, x);
      case 2:
        return _GT__EQ___2.call(this, x, y);
      default:
        return _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT__EQ_.cljs$lang$maxFixedArity = 2;
  _GT__EQ_.cljs$lang$applyTo = _GT__EQ___3.cljs$lang$applyTo;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$1 = _GT__EQ___1;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$2 = _GT__EQ___2;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT__EQ_;
}();
cljs.core.dec = function dec(x) {
  return x - 1;
};
cljs.core.max = function() {
  var max = null;
  var max__1 = function(x) {
    return x;
  };
  var max__2 = function(x, y) {
    var x__13137__auto__ = x;
    var y__13138__auto__ = y;
    return x__13137__auto__ > y__13138__auto__ ? x__13137__auto__ : y__13138__auto__;
  };
  var max__3 = function() {
    var G__107587__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, max, function() {
        var x__13137__auto__ = x;
        var y__13138__auto__ = y;
        return x__13137__auto__ > y__13138__auto__ ? x__13137__auto__ : y__13138__auto__;
      }(), more);
    };
    var G__107587 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__107587__delegate.call(this, x, y, more);
    };
    G__107587.cljs$lang$maxFixedArity = 2;
    G__107587.cljs$lang$applyTo = function(arglist__107588) {
      var x = cljs.core.first(arglist__107588);
      arglist__107588 = cljs.core.next(arglist__107588);
      var y = cljs.core.first(arglist__107588);
      var more = cljs.core.rest(arglist__107588);
      return G__107587__delegate(x, y, more);
    };
    G__107587.cljs$core$IFn$_invoke$arity$variadic = G__107587__delegate;
    return G__107587;
  }();
  max = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return max__1.call(this, x);
      case 2:
        return max__2.call(this, x, y);
      default:
        return max__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max.cljs$lang$maxFixedArity = 2;
  max.cljs$lang$applyTo = max__3.cljs$lang$applyTo;
  max.cljs$core$IFn$_invoke$arity$1 = max__1;
  max.cljs$core$IFn$_invoke$arity$2 = max__2;
  max.cljs$core$IFn$_invoke$arity$variadic = max__3.cljs$core$IFn$_invoke$arity$variadic;
  return max;
}();
cljs.core.min = function() {
  var min = null;
  var min__1 = function(x) {
    return x;
  };
  var min__2 = function(x, y) {
    var x__13144__auto__ = x;
    var y__13145__auto__ = y;
    return x__13144__auto__ < y__13145__auto__ ? x__13144__auto__ : y__13145__auto__;
  };
  var min__3 = function() {
    var G__107589__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, min, function() {
        var x__13144__auto__ = x;
        var y__13145__auto__ = y;
        return x__13144__auto__ < y__13145__auto__ ? x__13144__auto__ : y__13145__auto__;
      }(), more);
    };
    var G__107589 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__107589__delegate.call(this, x, y, more);
    };
    G__107589.cljs$lang$maxFixedArity = 2;
    G__107589.cljs$lang$applyTo = function(arglist__107590) {
      var x = cljs.core.first(arglist__107590);
      arglist__107590 = cljs.core.next(arglist__107590);
      var y = cljs.core.first(arglist__107590);
      var more = cljs.core.rest(arglist__107590);
      return G__107589__delegate(x, y, more);
    };
    G__107589.cljs$core$IFn$_invoke$arity$variadic = G__107589__delegate;
    return G__107589;
  }();
  min = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return min__1.call(this, x);
      case 2:
        return min__2.call(this, x, y);
      default:
        return min__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min.cljs$lang$maxFixedArity = 2;
  min.cljs$lang$applyTo = min__3.cljs$lang$applyTo;
  min.cljs$core$IFn$_invoke$arity$1 = min__1;
  min.cljs$core$IFn$_invoke$arity$2 = min__2;
  min.cljs$core$IFn$_invoke$arity$variadic = min__3.cljs$core$IFn$_invoke$arity$variadic;
  return min;
}();
cljs.core.byte$ = function byte$(x) {
  return x;
};
cljs.core.char$ = function char$(x) {
  if (typeof x === "number") {
    return String.fromCharCode(x);
  } else {
    if (typeof x === "string" && x.length === 1) {
      return x;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw new Error("Argument to char must be a character or number");
      } else {
        return null;
      }
    }
  }
};
cljs.core.short$ = function short$(x) {
  return x;
};
cljs.core.float$ = function float$(x) {
  return x;
};
cljs.core.double$ = function double$(x) {
  return x;
};
cljs.core.unchecked_byte = function unchecked_byte(x) {
  return x;
};
cljs.core.unchecked_char = function unchecked_char(x) {
  return x;
};
cljs.core.unchecked_short = function unchecked_short(x) {
  return x;
};
cljs.core.unchecked_float = function unchecked_float(x) {
  return x;
};
cljs.core.unchecked_double = function unchecked_double(x) {
  return x;
};
cljs.core.unchecked_add = function() {
  var unchecked_add = null;
  var unchecked_add__0 = function() {
    return 0;
  };
  var unchecked_add__1 = function(x) {
    return x;
  };
  var unchecked_add__2 = function(x, y) {
    return x + y;
  };
  var unchecked_add__3 = function() {
    var G__107591__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_add, x + y, more);
    };
    var G__107591 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__107591__delegate.call(this, x, y, more);
    };
    G__107591.cljs$lang$maxFixedArity = 2;
    G__107591.cljs$lang$applyTo = function(arglist__107592) {
      var x = cljs.core.first(arglist__107592);
      arglist__107592 = cljs.core.next(arglist__107592);
      var y = cljs.core.first(arglist__107592);
      var more = cljs.core.rest(arglist__107592);
      return G__107591__delegate(x, y, more);
    };
    G__107591.cljs$core$IFn$_invoke$arity$variadic = G__107591__delegate;
    return G__107591;
  }();
  unchecked_add = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add__0.call(this);
      case 1:
        return unchecked_add__1.call(this, x);
      case 2:
        return unchecked_add__2.call(this, x, y);
      default:
        return unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add.cljs$lang$maxFixedArity = 2;
  unchecked_add.cljs$lang$applyTo = unchecked_add__3.cljs$lang$applyTo;
  unchecked_add.cljs$core$IFn$_invoke$arity$0 = unchecked_add__0;
  unchecked_add.cljs$core$IFn$_invoke$arity$1 = unchecked_add__1;
  unchecked_add.cljs$core$IFn$_invoke$arity$2 = unchecked_add__2;
  unchecked_add.cljs$core$IFn$_invoke$arity$variadic = unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add;
}();
cljs.core.unchecked_add_int = function() {
  var unchecked_add_int = null;
  var unchecked_add_int__0 = function() {
    return 0;
  };
  var unchecked_add_int__1 = function(x) {
    return x;
  };
  var unchecked_add_int__2 = function(x, y) {
    return x + y;
  };
  var unchecked_add_int__3 = function() {
    var G__107593__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_add_int, x + y, more);
    };
    var G__107593 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__107593__delegate.call(this, x, y, more);
    };
    G__107593.cljs$lang$maxFixedArity = 2;
    G__107593.cljs$lang$applyTo = function(arglist__107594) {
      var x = cljs.core.first(arglist__107594);
      arglist__107594 = cljs.core.next(arglist__107594);
      var y = cljs.core.first(arglist__107594);
      var more = cljs.core.rest(arglist__107594);
      return G__107593__delegate(x, y, more);
    };
    G__107593.cljs$core$IFn$_invoke$arity$variadic = G__107593__delegate;
    return G__107593;
  }();
  unchecked_add_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add_int__0.call(this);
      case 1:
        return unchecked_add_int__1.call(this, x);
      case 2:
        return unchecked_add_int__2.call(this, x, y);
      default:
        return unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add_int.cljs$lang$maxFixedArity = 2;
  unchecked_add_int.cljs$lang$applyTo = unchecked_add_int__3.cljs$lang$applyTo;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$0 = unchecked_add_int__0;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$1 = unchecked_add_int__1;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$2 = unchecked_add_int__2;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add_int;
}();
cljs.core.unchecked_dec = function unchecked_dec(x) {
  return x - 1;
};
cljs.core.unchecked_dec_int = function unchecked_dec_int(x) {
  return x - 1;
};
cljs.core.unchecked_divide_int = function() {
  var unchecked_divide_int = null;
  var unchecked_divide_int__1 = function(x) {
    return unchecked_divide_int.call(null, 1, x);
  };
  var unchecked_divide_int__2 = function(x, y) {
    return x / y;
  };
  var unchecked_divide_int__3 = function() {
    var G__107595__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_divide_int, unchecked_divide_int.call(null, x, y), more);
    };
    var G__107595 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__107595__delegate.call(this, x, y, more);
    };
    G__107595.cljs$lang$maxFixedArity = 2;
    G__107595.cljs$lang$applyTo = function(arglist__107596) {
      var x = cljs.core.first(arglist__107596);
      arglist__107596 = cljs.core.next(arglist__107596);
      var y = cljs.core.first(arglist__107596);
      var more = cljs.core.rest(arglist__107596);
      return G__107595__delegate(x, y, more);
    };
    G__107595.cljs$core$IFn$_invoke$arity$variadic = G__107595__delegate;
    return G__107595;
  }();
  unchecked_divide_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_divide_int__1.call(this, x);
      case 2:
        return unchecked_divide_int__2.call(this, x, y);
      default:
        return unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_divide_int.cljs$lang$maxFixedArity = 2;
  unchecked_divide_int.cljs$lang$applyTo = unchecked_divide_int__3.cljs$lang$applyTo;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$1 = unchecked_divide_int__1;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$2 = unchecked_divide_int__2;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_divide_int;
}();
cljs.core.unchecked_inc = function unchecked_inc(x) {
  return x + 1;
};
cljs.core.unchecked_inc_int = function unchecked_inc_int(x) {
  return x + 1;
};
cljs.core.unchecked_multiply = function() {
  var unchecked_multiply = null;
  var unchecked_multiply__0 = function() {
    return 1;
  };
  var unchecked_multiply__1 = function(x) {
    return x;
  };
  var unchecked_multiply__2 = function(x, y) {
    return x * y;
  };
  var unchecked_multiply__3 = function() {
    var G__107597__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_multiply, x * y, more);
    };
    var G__107597 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__107597__delegate.call(this, x, y, more);
    };
    G__107597.cljs$lang$maxFixedArity = 2;
    G__107597.cljs$lang$applyTo = function(arglist__107598) {
      var x = cljs.core.first(arglist__107598);
      arglist__107598 = cljs.core.next(arglist__107598);
      var y = cljs.core.first(arglist__107598);
      var more = cljs.core.rest(arglist__107598);
      return G__107597__delegate(x, y, more);
    };
    G__107597.cljs$core$IFn$_invoke$arity$variadic = G__107597__delegate;
    return G__107597;
  }();
  unchecked_multiply = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply__0.call(this);
      case 1:
        return unchecked_multiply__1.call(this, x);
      case 2:
        return unchecked_multiply__2.call(this, x, y);
      default:
        return unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply.cljs$lang$maxFixedArity = 2;
  unchecked_multiply.cljs$lang$applyTo = unchecked_multiply__3.cljs$lang$applyTo;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply__0;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply__1;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply__2;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply;
}();
cljs.core.unchecked_multiply_int = function() {
  var unchecked_multiply_int = null;
  var unchecked_multiply_int__0 = function() {
    return 1;
  };
  var unchecked_multiply_int__1 = function(x) {
    return x;
  };
  var unchecked_multiply_int__2 = function(x, y) {
    return x * y;
  };
  var unchecked_multiply_int__3 = function() {
    var G__107599__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_multiply_int, x * y, more);
    };
    var G__107599 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__107599__delegate.call(this, x, y, more);
    };
    G__107599.cljs$lang$maxFixedArity = 2;
    G__107599.cljs$lang$applyTo = function(arglist__107600) {
      var x = cljs.core.first(arglist__107600);
      arglist__107600 = cljs.core.next(arglist__107600);
      var y = cljs.core.first(arglist__107600);
      var more = cljs.core.rest(arglist__107600);
      return G__107599__delegate(x, y, more);
    };
    G__107599.cljs$core$IFn$_invoke$arity$variadic = G__107599__delegate;
    return G__107599;
  }();
  unchecked_multiply_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply_int__0.call(this);
      case 1:
        return unchecked_multiply_int__1.call(this, x);
      case 2:
        return unchecked_multiply_int__2.call(this, x, y);
      default:
        return unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply_int.cljs$lang$maxFixedArity = 2;
  unchecked_multiply_int.cljs$lang$applyTo = unchecked_multiply_int__3.cljs$lang$applyTo;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply_int__0;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply_int__1;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply_int__2;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply_int;
}();
cljs.core.unchecked_negate = function unchecked_negate(x) {
  return-x;
};
cljs.core.unchecked_negate_int = function unchecked_negate_int(x) {
  return-x;
};
cljs.core.unchecked_remainder_int = function unchecked_remainder_int(x, n) {
  return cljs.core.mod.call(null, x, n);
};
cljs.core.unchecked_substract = function() {
  var unchecked_substract = null;
  var unchecked_substract__1 = function(x) {
    return-x;
  };
  var unchecked_substract__2 = function(x, y) {
    return x - y;
  };
  var unchecked_substract__3 = function() {
    var G__107601__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_substract, x - y, more);
    };
    var G__107601 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__107601__delegate.call(this, x, y, more);
    };
    G__107601.cljs$lang$maxFixedArity = 2;
    G__107601.cljs$lang$applyTo = function(arglist__107602) {
      var x = cljs.core.first(arglist__107602);
      arglist__107602 = cljs.core.next(arglist__107602);
      var y = cljs.core.first(arglist__107602);
      var more = cljs.core.rest(arglist__107602);
      return G__107601__delegate(x, y, more);
    };
    G__107601.cljs$core$IFn$_invoke$arity$variadic = G__107601__delegate;
    return G__107601;
  }();
  unchecked_substract = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_substract__1.call(this, x);
      case 2:
        return unchecked_substract__2.call(this, x, y);
      default:
        return unchecked_substract__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_substract.cljs$lang$maxFixedArity = 2;
  unchecked_substract.cljs$lang$applyTo = unchecked_substract__3.cljs$lang$applyTo;
  unchecked_substract.cljs$core$IFn$_invoke$arity$1 = unchecked_substract__1;
  unchecked_substract.cljs$core$IFn$_invoke$arity$2 = unchecked_substract__2;
  unchecked_substract.cljs$core$IFn$_invoke$arity$variadic = unchecked_substract__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_substract;
}();
cljs.core.unchecked_substract_int = function() {
  var unchecked_substract_int = null;
  var unchecked_substract_int__1 = function(x) {
    return-x;
  };
  var unchecked_substract_int__2 = function(x, y) {
    return x - y;
  };
  var unchecked_substract_int__3 = function() {
    var G__107603__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_substract_int, x - y, more);
    };
    var G__107603 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__107603__delegate.call(this, x, y, more);
    };
    G__107603.cljs$lang$maxFixedArity = 2;
    G__107603.cljs$lang$applyTo = function(arglist__107604) {
      var x = cljs.core.first(arglist__107604);
      arglist__107604 = cljs.core.next(arglist__107604);
      var y = cljs.core.first(arglist__107604);
      var more = cljs.core.rest(arglist__107604);
      return G__107603__delegate(x, y, more);
    };
    G__107603.cljs$core$IFn$_invoke$arity$variadic = G__107603__delegate;
    return G__107603;
  }();
  unchecked_substract_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_substract_int__1.call(this, x);
      case 2:
        return unchecked_substract_int__2.call(this, x, y);
      default:
        return unchecked_substract_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_substract_int.cljs$lang$maxFixedArity = 2;
  unchecked_substract_int.cljs$lang$applyTo = unchecked_substract_int__3.cljs$lang$applyTo;
  unchecked_substract_int.cljs$core$IFn$_invoke$arity$1 = unchecked_substract_int__1;
  unchecked_substract_int.cljs$core$IFn$_invoke$arity$2 = unchecked_substract_int__2;
  unchecked_substract_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_substract_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_substract_int;
}();
cljs.core.fix = function fix(q) {
  if (q >= 0) {
    return Math.floor.call(null, q);
  } else {
    return Math.ceil.call(null, q);
  }
};
cljs.core.int$ = function int$(x) {
  return x | 0;
};
cljs.core.unchecked_int = function unchecked_int(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.long$ = function long$(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.unchecked_long = function unchecked_long(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.booleans = function booleans(x) {
  return x;
};
cljs.core.bytes = function bytes(x) {
  return x;
};
cljs.core.chars = function chars(x) {
  return x;
};
cljs.core.shorts = function shorts(x) {
  return x;
};
cljs.core.ints = function ints(x) {
  return x;
};
cljs.core.floats = function floats(x) {
  return x;
};
cljs.core.doubles = function doubles(x) {
  return x;
};
cljs.core.longs = function longs(x) {
  return x;
};
cljs.core.js_mod = function js_mod(n, d) {
  return n % d;
};
cljs.core.mod = function mod(n, d) {
  return(n % d + d) % d;
};
cljs.core.quot = function quot(n, d) {
  var rem = n % d;
  return cljs.core.fix.call(null, (n - rem) / d);
};
cljs.core.rem = function rem(n, d) {
  var q = cljs.core.quot.call(null, n, d);
  return n - d * q;
};
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return Math.random.call(null);
  };
  var rand__1 = function(n) {
    return n * rand.call(null);
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$core$IFn$_invoke$arity$0 = rand__0;
  rand.cljs$core$IFn$_invoke$arity$1 = rand__1;
  return rand;
}();
cljs.core.rand_int = function rand_int(n) {
  return cljs.core.fix.call(null, cljs.core.rand.call(null, n));
};
cljs.core.bit_xor = function bit_xor(x, y) {
  return x ^ y;
};
cljs.core.bit_and = function bit_and(x, y) {
  return x & y;
};
cljs.core.bit_or = function bit_or(x, y) {
  return x | y;
};
cljs.core.bit_and_not = function bit_and_not(x, y) {
  return x & ~y;
};
cljs.core.bit_clear = function bit_clear(x, n) {
  return x & ~(1 << n);
};
cljs.core.bit_flip = function bit_flip(x, n) {
  return x ^ 1 << n;
};
cljs.core.bit_not = function bit_not(x) {
  return~x;
};
cljs.core.bit_set = function bit_set(x, n) {
  return x | 1 << n;
};
cljs.core.bit_test = function bit_test(x, n) {
  return(x & 1 << n) != 0;
};
cljs.core.bit_shift_left = function bit_shift_left(x, n) {
  return x << n;
};
cljs.core.bit_shift_right = function bit_shift_right(x, n) {
  return x >> n;
};
cljs.core.bit_shift_right_zero_fill = function bit_shift_right_zero_fill(x, n) {
  return x >>> n;
};
cljs.core.unsigned_bit_shift_right = function unsigned_bit_shift_right(x, n) {
  return x >>> n;
};
cljs.core.bit_count = function bit_count(v) {
  var v__$1 = v - (v >> 1 & 1431655765);
  var v__$2 = (v__$1 & 858993459) + (v__$1 >> 2 & 858993459);
  return(v__$2 + (v__$2 >> 4) & 252645135) * 16843009 >> 24;
};
cljs.core._EQ__EQ_ = function() {
  var _EQ__EQ_ = null;
  var _EQ__EQ___1 = function(x) {
    return true;
  };
  var _EQ__EQ___2 = function(x, y) {
    return cljs.core._equiv.call(null, x, y);
  };
  var _EQ__EQ___3 = function() {
    var G__107605__delegate = function(x, y, more) {
      while (true) {
        if (_EQ__EQ_.call(null, x, y)) {
          if (cljs.core.next.call(null, more)) {
            var G__107606 = y;
            var G__107607 = cljs.core.first.call(null, more);
            var G__107608 = cljs.core.next.call(null, more);
            x = G__107606;
            y = G__107607;
            more = G__107608;
            continue;
          } else {
            return _EQ__EQ_.call(null, y, cljs.core.first.call(null, more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__107605 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__107605__delegate.call(this, x, y, more);
    };
    G__107605.cljs$lang$maxFixedArity = 2;
    G__107605.cljs$lang$applyTo = function(arglist__107609) {
      var x = cljs.core.first(arglist__107609);
      arglist__107609 = cljs.core.next(arglist__107609);
      var y = cljs.core.first(arglist__107609);
      var more = cljs.core.rest(arglist__107609);
      return G__107605__delegate(x, y, more);
    };
    G__107605.cljs$core$IFn$_invoke$arity$variadic = G__107605__delegate;
    return G__107605;
  }();
  _EQ__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ__EQ___1.call(this, x);
      case 2:
        return _EQ__EQ___2.call(this, x, y);
      default:
        return _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ__EQ_.cljs$lang$maxFixedArity = 2;
  _EQ__EQ_.cljs$lang$applyTo = _EQ__EQ___3.cljs$lang$applyTo;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ__EQ___1;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ__EQ___2;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ__EQ_;
}();
cljs.core.pos_QMARK_ = function pos_QMARK_(n) {
  return n > 0;
};
cljs.core.zero_QMARK_ = function zero_QMARK_(n) {
  return n === 0;
};
cljs.core.neg_QMARK_ = function neg_QMARK_(x) {
  return x < 0;
};
cljs.core.nthnext = function nthnext(coll, n) {
  var n__$1 = n;
  var xs = cljs.core.seq.call(null, coll);
  while (true) {
    if (xs && n__$1 > 0) {
      var G__107610 = n__$1 - 1;
      var G__107611 = cljs.core.next.call(null, xs);
      n__$1 = G__107610;
      xs = G__107611;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.str = function() {
  var str = null;
  var str__0 = function() {
    return "";
  };
  var str__1 = function(x) {
    if (x == null) {
      return "";
    } else {
      return x.toString();
    }
  };
  var str__2 = function() {
    var G__107612__delegate = function(x, ys) {
      var sb = new goog.string.StringBuffer(str.call(null, x));
      var more = ys;
      while (true) {
        if (cljs.core.truth_(more)) {
          var G__107613 = sb.append(str.call(null, cljs.core.first.call(null, more)));
          var G__107614 = cljs.core.next.call(null, more);
          sb = G__107613;
          more = G__107614;
          continue;
        } else {
          return sb.toString();
        }
        break;
      }
    };
    var G__107612 = function(x, var_args) {
      var ys = null;
      if (arguments.length > 1) {
        ys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__107612__delegate.call(this, x, ys);
    };
    G__107612.cljs$lang$maxFixedArity = 1;
    G__107612.cljs$lang$applyTo = function(arglist__107615) {
      var x = cljs.core.first(arglist__107615);
      var ys = cljs.core.rest(arglist__107615);
      return G__107612__delegate(x, ys);
    };
    G__107612.cljs$core$IFn$_invoke$arity$variadic = G__107612__delegate;
    return G__107612;
  }();
  str = function(x, var_args) {
    var ys = var_args;
    switch(arguments.length) {
      case 0:
        return str__0.call(this);
      case 1:
        return str__1.call(this, x);
      default:
        return str__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  str.cljs$lang$maxFixedArity = 1;
  str.cljs$lang$applyTo = str__2.cljs$lang$applyTo;
  str.cljs$core$IFn$_invoke$arity$0 = str__0;
  str.cljs$core$IFn$_invoke$arity$1 = str__1;
  str.cljs$core$IFn$_invoke$arity$variadic = str__2.cljs$core$IFn$_invoke$arity$variadic;
  return str;
}();
cljs.core.subs = function() {
  var subs = null;
  var subs__2 = function(s, start) {
    return s.substring(start);
  };
  var subs__3 = function(s, start, end) {
    return s.substring(start, end);
  };
  subs = function(s, start, end) {
    switch(arguments.length) {
      case 2:
        return subs__2.call(this, s, start);
      case 3:
        return subs__3.call(this, s, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subs.cljs$core$IFn$_invoke$arity$2 = subs__2;
  subs.cljs$core$IFn$_invoke$arity$3 = subs__3;
  return subs;
}();
cljs.core.equiv_sequential = function equiv_sequential(x, y) {
  return cljs.core.boolean$.call(null, cljs.core.sequential_QMARK_.call(null, y) ? function() {
    var xs = cljs.core.seq.call(null, x);
    var ys = cljs.core.seq.call(null, y);
    while (true) {
      if (xs == null) {
        return ys == null;
      } else {
        if (ys == null) {
          return false;
        } else {
          if (cljs.core._EQ_.call(null, cljs.core.first.call(null, xs), cljs.core.first.call(null, ys))) {
            var G__107616 = cljs.core.next.call(null, xs);
            var G__107617 = cljs.core.next.call(null, ys);
            xs = G__107616;
            ys = G__107617;
            continue;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return false;
            } else {
              return null;
            }
          }
        }
      }
      break;
    }
  }() : null);
};
cljs.core.hash_combine = function hash_combine(seed, hash) {
  return seed ^ hash + 2654435769 + (seed << 6) + (seed >> 2);
};
cljs.core.hash_coll = function hash_coll(coll) {
  if (cljs.core.seq.call(null, coll)) {
    var res = cljs.core.hash.call(null, cljs.core.first.call(null, coll));
    var s = cljs.core.next.call(null, coll);
    while (true) {
      if (s == null) {
        return res;
      } else {
        var G__107618 = cljs.core.hash_combine.call(null, res, cljs.core.hash.call(null, cljs.core.first.call(null, s)));
        var G__107619 = cljs.core.next.call(null, s);
        res = G__107618;
        s = G__107619;
        continue;
      }
      break;
    }
  } else {
    return 0;
  }
};
cljs.core.hash_imap = function hash_imap(m) {
  var h = 0;
  var s = cljs.core.seq.call(null, m);
  while (true) {
    if (s) {
      var e = cljs.core.first.call(null, s);
      var G__107620 = (h + (cljs.core.hash.call(null, cljs.core.key.call(null, e)) ^ cljs.core.hash.call(null, cljs.core.val.call(null, e)))) % 4503599627370496;
      var G__107621 = cljs.core.next.call(null, s);
      h = G__107620;
      s = G__107621;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.hash_iset = function hash_iset(s) {
  var h = 0;
  var s__$1 = cljs.core.seq.call(null, s);
  while (true) {
    if (s__$1) {
      var e = cljs.core.first.call(null, s__$1);
      var G__107622 = (h + cljs.core.hash.call(null, e)) % 4503599627370496;
      var G__107623 = cljs.core.next.call(null, s__$1);
      h = G__107622;
      s__$1 = G__107623;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.extend_object_BANG_ = function extend_object_BANG_(obj, fn_map) {
  var seq__107630_107636 = cljs.core.seq.call(null, fn_map);
  var chunk__107631_107637 = null;
  var count__107632_107638 = 0;
  var i__107633_107639 = 0;
  while (true) {
    if (i__107633_107639 < count__107632_107638) {
      var vec__107634_107640 = cljs.core._nth.call(null, chunk__107631_107637, i__107633_107639);
      var key_name_107641 = cljs.core.nth.call(null, vec__107634_107640, 0, null);
      var f_107642 = cljs.core.nth.call(null, vec__107634_107640, 1, null);
      var str_name_107643 = cljs.core.name.call(null, key_name_107641);
      obj[str_name_107643] = f_107642;
      var G__107644 = seq__107630_107636;
      var G__107645 = chunk__107631_107637;
      var G__107646 = count__107632_107638;
      var G__107647 = i__107633_107639 + 1;
      seq__107630_107636 = G__107644;
      chunk__107631_107637 = G__107645;
      count__107632_107638 = G__107646;
      i__107633_107639 = G__107647;
      continue;
    } else {
      var temp__4092__auto___107648 = cljs.core.seq.call(null, seq__107630_107636);
      if (temp__4092__auto___107648) {
        var seq__107630_107649__$1 = temp__4092__auto___107648;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__107630_107649__$1)) {
          var c__13578__auto___107650 = cljs.core.chunk_first.call(null, seq__107630_107649__$1);
          var G__107651 = cljs.core.chunk_rest.call(null, seq__107630_107649__$1);
          var G__107652 = c__13578__auto___107650;
          var G__107653 = cljs.core.count.call(null, c__13578__auto___107650);
          var G__107654 = 0;
          seq__107630_107636 = G__107651;
          chunk__107631_107637 = G__107652;
          count__107632_107638 = G__107653;
          i__107633_107639 = G__107654;
          continue;
        } else {
          var vec__107635_107655 = cljs.core.first.call(null, seq__107630_107649__$1);
          var key_name_107656 = cljs.core.nth.call(null, vec__107635_107655, 0, null);
          var f_107657 = cljs.core.nth.call(null, vec__107635_107655, 1, null);
          var str_name_107658 = cljs.core.name.call(null, key_name_107656);
          obj[str_name_107658] = f_107657;
          var G__107659 = cljs.core.next.call(null, seq__107630_107649__$1);
          var G__107660 = null;
          var G__107661 = 0;
          var G__107662 = 0;
          seq__107630_107636 = G__107659;
          chunk__107631_107637 = G__107660;
          count__107632_107638 = G__107661;
          i__107633_107639 = G__107662;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return obj;
};
cljs.core.List = function(meta, first, rest, count, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.count = count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65937646;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.List.cljs$lang$type = true;
cljs.core.List.cljs$lang$ctorStr = "cljs.core/List";
cljs.core.List.cljs$lang$ctorPrWriter = function(this__13397__auto__, writer__13398__auto__, opt__13399__auto__) {
  return cljs.core._write.call(null, writer__13398__auto__, "cljs.core/List");
};
cljs.core.List.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__13241__auto__ = self__.__hash;
  if (!(h__13241__auto__ == null)) {
    return h__13241__auto__;
  } else {
    var h__13241__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__13241__auto____$1;
    return h__13241__auto____$1;
  }
};
cljs.core.List.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return null;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, coll__$1, self__.count + 1, null);
};
cljs.core.List.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.List.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.List.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.List.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._rest.call(null, coll__$1);
};
cljs.core.List.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.List.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(meta__$1, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.List(self__.meta, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.List.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.__GT_List = function __GT_List(meta, first, rest, count, __hash) {
  return new cljs.core.List(meta, first, rest, count, __hash);
};
cljs.core.EmptyList = function(meta) {
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 65937614;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.EmptyList.cljs$lang$type = true;
cljs.core.EmptyList.cljs$lang$ctorStr = "cljs.core/EmptyList";
cljs.core.EmptyList.cljs$lang$ctorPrWriter = function(this__13397__auto__, writer__13398__auto__, opt__13399__auto__) {
  return cljs.core._write.call(null, writer__13398__auto__, "cljs.core/EmptyList");
};
cljs.core.EmptyList.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, null, 1, null);
};
cljs.core.EmptyList.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  throw new Error("Can't pop empty list");
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.EmptyList.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.EmptyList.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.EmptyList(meta__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.EmptyList(self__.meta);
};
cljs.core.EmptyList.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.EmptyList.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.__GT_EmptyList = function __GT_EmptyList(meta) {
  return new cljs.core.EmptyList(meta);
};
cljs.core.List.EMPTY = new cljs.core.EmptyList(null);
cljs.core.reversible_QMARK_ = function reversible_QMARK_(coll) {
  var G__107664 = coll;
  if (G__107664) {
    var bit__13480__auto__ = G__107664.cljs$lang$protocol_mask$partition0$ & 134217728;
    if (bit__13480__auto__ || G__107664.cljs$core$IReversible$) {
      return true;
    } else {
      if (!G__107664.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReversible, G__107664);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReversible, G__107664);
  }
};
cljs.core.rseq = function rseq(coll) {
  return cljs.core._rseq.call(null, coll);
};
cljs.core.reverse = function reverse(coll) {
  if (cljs.core.reversible_QMARK_.call(null, coll)) {
    return cljs.core.rseq.call(null, coll);
  } else {
    return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
  }
};
cljs.core.list = function() {
  var list__delegate = function(xs) {
    var arr = xs instanceof cljs.core.IndexedSeq && xs.i === 0 ? xs.arr : function() {
      var arr = [];
      var xs__$1 = xs;
      while (true) {
        if (!(xs__$1 == null)) {
          arr.push(cljs.core._first.call(null, xs__$1));
          var G__107665 = cljs.core._next.call(null, xs__$1);
          xs__$1 = G__107665;
          continue;
        } else {
          return arr;
        }
        break;
      }
    }();
    var i = arr.length;
    var r = cljs.core.List.EMPTY;
    while (true) {
      if (i > 0) {
        var G__107666 = i - 1;
        var G__107667 = cljs.core._conj.call(null, r, arr[i - 1]);
        i = G__107666;
        r = G__107667;
        continue;
      } else {
        return r;
      }
      break;
    }
  };
  var list = function(var_args) {
    var xs = null;
    if (arguments.length > 0) {
      xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return list__delegate.call(this, xs);
  };
  list.cljs$lang$maxFixedArity = 0;
  list.cljs$lang$applyTo = function(arglist__107668) {
    var xs = cljs.core.seq(arglist__107668);
    return list__delegate(xs);
  };
  list.cljs$core$IFn$_invoke$arity$variadic = list__delegate;
  return list;
}();
cljs.core.Cons = function(meta, first, rest, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65929452;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Cons.cljs$lang$type = true;
cljs.core.Cons.cljs$lang$ctorStr = "cljs.core/Cons";
cljs.core.Cons.cljs$lang$ctorPrWriter = function(this__13397__auto__, writer__13398__auto__, opt__13399__auto__) {
  return cljs.core._write.call(null, writer__13398__auto__, "cljs.core/Cons");
};
cljs.core.Cons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__13241__auto__ = self__.__hash;
  if (!(h__13241__auto__ == null)) {
    return h__13241__auto__;
  } else {
    var h__13241__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__13241__auto____$1;
    return h__13241__auto____$1;
  }
};
cljs.core.Cons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core.seq.call(null, self__.rest);
  }
};
cljs.core.Cons.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(null, o, coll__$1, self__.__hash);
};
cljs.core.Cons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.Cons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.Cons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.Cons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.Cons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(meta__$1, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Cons(self__.meta, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Cons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_Cons = function __GT_Cons(meta, first, rest, __hash) {
  return new cljs.core.Cons(meta, first, rest, __hash);
};
cljs.core.cons = function cons(x, coll) {
  if (function() {
    var or__12830__auto__ = coll == null;
    if (or__12830__auto__) {
      return or__12830__auto__;
    } else {
      var G__107672 = coll;
      if (G__107672) {
        var bit__13473__auto__ = G__107672.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__13473__auto__ || G__107672.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }
  }()) {
    return new cljs.core.Cons(null, x, coll, null);
  } else {
    return new cljs.core.Cons(null, x, cljs.core.seq.call(null, coll), null);
  }
};
cljs.core.list_QMARK_ = function list_QMARK_(x) {
  var G__107674 = x;
  if (G__107674) {
    var bit__13480__auto__ = G__107674.cljs$lang$protocol_mask$partition0$ & 33554432;
    if (bit__13480__auto__ || G__107674.cljs$core$IList$) {
      return true;
    } else {
      if (!G__107674.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IList, G__107674);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IList, G__107674);
  }
};
cljs.core.Keyword = function(ns, name, fqn, _hash) {
  this.ns = ns;
  this.name = name;
  this.fqn = fqn;
  this._hash = _hash;
  this.cljs$lang$protocol_mask$partition0$ = 2153775105;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Keyword.cljs$lang$type = true;
cljs.core.Keyword.cljs$lang$ctorStr = "cljs.core/Keyword";
cljs.core.Keyword.cljs$lang$ctorPrWriter = function(this__13397__auto__, writer__13398__auto__, opt__13399__auto__) {
  return cljs.core._write.call(null, writer__13398__auto__, "cljs.core/Keyword");
};
cljs.core.Keyword.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write.call(null, writer, [cljs.core.str(":"), cljs.core.str(self__.fqn)].join(""));
};
cljs.core.Keyword.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Keyword.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Keyword.prototype.cljs$core$IHash$_hash$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__._hash == null) {
    self__._hash = cljs.core.hash_combine.call(null, cljs.core.hash.call(null, self__.ns), cljs.core.hash.call(null, self__.name)) + 2654435769;
    return self__._hash;
  } else {
    return self__._hash;
  }
};
cljs.core.Keyword.prototype.call = function() {
  var G__107676 = null;
  var G__107676__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.call(null, coll, kw);
  };
  var G__107676__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.call(null, coll, kw, not_found);
  };
  G__107676 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__107676__2.call(this, self__, coll);
      case 3:
        return G__107676__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__107676;
}();
cljs.core.Keyword.prototype.apply = function(self__, args107675) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args107675)));
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.call(null, coll, kw);
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.call(null, coll, kw, not_found);
};
cljs.core.Keyword.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Keyword) {
    return self__.fqn === other.fqn;
  } else {
    return false;
  }
};
cljs.core.Keyword.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return[cljs.core.str(":"), cljs.core.str(self__.fqn)].join("");
};
cljs.core.__GT_Keyword = function __GT_Keyword(ns, name, fqn, _hash) {
  return new cljs.core.Keyword(ns, name, fqn, _hash);
};
cljs.core.keyword_QMARK_ = function keyword_QMARK_(x) {
  return x instanceof cljs.core.Keyword;
};
cljs.core.keyword_identical_QMARK_ = function keyword_identical_QMARK_(x, y) {
  if (x === y) {
    return true;
  } else {
    if (x instanceof cljs.core.Keyword && y instanceof cljs.core.Keyword) {
      return x.fqn === y.fqn;
    } else {
      return false;
    }
  }
};
cljs.core.namespace = function namespace(x) {
  if (function() {
    var G__107678 = x;
    if (G__107678) {
      var bit__13473__auto__ = G__107678.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__13473__auto__ || G__107678.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._namespace.call(null, x);
  } else {
    throw new Error([cljs.core.str("Doesn't support namespace: "), cljs.core.str(x)].join(""));
  }
};
cljs.core.keyword = function() {
  var keyword = null;
  var keyword__1 = function(name) {
    if (name instanceof cljs.core.Keyword) {
      return name;
    } else {
      if (name instanceof cljs.core.Symbol) {
        return new cljs.core.Keyword(cljs.core.namespace.call(null, name), cljs.core.name.call(null, name), name.str, null);
      } else {
        if (typeof name === "string") {
          var parts = name.split("/");
          if (parts.length === 2) {
            return new cljs.core.Keyword(parts[0], parts[1], name, null);
          } else {
            return new cljs.core.Keyword(null, parts[0], name, null);
          }
        } else {
          return null;
        }
      }
    }
  };
  var keyword__2 = function(ns, name) {
    return new cljs.core.Keyword(ns, name, [cljs.core.str(cljs.core.truth_(ns) ? [cljs.core.str(ns), cljs.core.str("/")].join("") : null), cljs.core.str(name)].join(""), null);
  };
  keyword = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return keyword__1.call(this, ns);
      case 2:
        return keyword__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  keyword.cljs$core$IFn$_invoke$arity$1 = keyword__1;
  keyword.cljs$core$IFn$_invoke$arity$2 = keyword__2;
  return keyword;
}();
cljs.core.LazySeq = function(meta, fn, s, __hash) {
  this.meta = meta;
  this.fn = fn;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.LazySeq.cljs$lang$type = true;
cljs.core.LazySeq.cljs$lang$ctorStr = "cljs.core/LazySeq";
cljs.core.LazySeq.cljs$lang$ctorPrWriter = function(this__13397__auto__, writer__13398__auto__, opt__13399__auto__) {
  return cljs.core._write.call(null, writer__13398__auto__, "cljs.core/LazySeq");
};
cljs.core.LazySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__13241__auto__ = self__.__hash;
  if (!(h__13241__auto__ == null)) {
    return h__13241__auto__;
  } else {
    var h__13241__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__13241__auto____$1;
    return h__13241__auto____$1;
  }
};
cljs.core.LazySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.next.call(null, self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.LazySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.LazySeq.prototype.sval = function() {
  var self__ = this;
  var coll = this;
  if (self__.fn == null) {
    return self__.s;
  } else {
    self__.s = self__.fn.call(null);
    self__.fn = null;
    return self__.s;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  coll__$1.sval();
  if (self__.s == null) {
    return null;
  } else {
    var ls = self__.s;
    while (true) {
      if (ls instanceof cljs.core.LazySeq) {
        var G__107679 = ls.sval();
        ls = G__107679;
        continue;
      } else {
        self__.s = ls;
        return cljs.core.seq.call(null, self__.s);
      }
      break;
    }
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.first.call(null, self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (!(self__.s == null)) {
    return cljs.core.rest.call(null, self__.s);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.LazySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.LazySeq(meta__$1, self__.fn, self__.s, self__.__hash);
};
cljs.core.LazySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.LazySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_LazySeq = function __GT_LazySeq(meta, fn, s, __hash) {
  return new cljs.core.LazySeq(meta, fn, s, __hash);
};
cljs.core.ChunkBuffer = function(buf, end) {
  this.buf = buf;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.ChunkBuffer.cljs$lang$type = true;
cljs.core.ChunkBuffer.cljs$lang$ctorStr = "cljs.core/ChunkBuffer";
cljs.core.ChunkBuffer.cljs$lang$ctorPrWriter = function(this__13397__auto__, writer__13398__auto__, opt__13399__auto__) {
  return cljs.core._write.call(null, writer__13398__auto__, "cljs.core/ChunkBuffer");
};
cljs.core.ChunkBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end;
};
cljs.core.ChunkBuffer.prototype.add = function(o) {
  var self__ = this;
  var _ = this;
  self__.buf[self__.end] = o;
  return self__.end = self__.end + 1;
};
cljs.core.ChunkBuffer.prototype.chunk = function(o) {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.ArrayChunk(self__.buf, 0, self__.end);
  self__.buf = null;
  return ret;
};
cljs.core.__GT_ChunkBuffer = function __GT_ChunkBuffer(buf, end) {
  return new cljs.core.ChunkBuffer(buf, end);
};
cljs.core.chunk_buffer = function chunk_buffer(capacity) {
  return new cljs.core.ChunkBuffer(new Array(capacity), 0);
};
cljs.core.ArrayChunk = function(arr, off, end) {
  this.arr = arr;
  this.off = off;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 524306;
};
cljs.core.ArrayChunk.cljs$lang$type = true;
cljs.core.ArrayChunk.cljs$lang$ctorStr = "cljs.core/ArrayChunk";
cljs.core.ArrayChunk.cljs$lang$ctorPrWriter = function(this__13397__auto__, writer__13398__auto__, opt__13399__auto__) {
  return cljs.core._write.call(null, writer__13398__auto__, "cljs.core/ArrayChunk");
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, self__.arr[self__.off], self__.off + 1);
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, start, self__.off);
};
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$ = true;
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$_drop_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off === self__.end) {
    throw new Error("-drop-first of empty chunk");
  } else {
    return new cljs.core.ArrayChunk(self__.arr, self__.off + 1, self__.end);
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, i) {
  var self__ = this;
  var coll__$1 = this;
  return self__.arr[self__.off + i];
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, i, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (i >= 0 && i < self__.end - self__.off) {
    return self__.arr[self__.off + i];
  } else {
    return not_found;
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end - self__.off;
};
cljs.core.__GT_ArrayChunk = function __GT_ArrayChunk(arr, off, end) {
  return new cljs.core.ArrayChunk(arr, off, end);
};
cljs.core.array_chunk = function() {
  var array_chunk = null;
  var array_chunk__1 = function(arr) {
    return new cljs.core.ArrayChunk(arr, 0, arr.length);
  };
  var array_chunk__2 = function(arr, off) {
    return new cljs.core.ArrayChunk(arr, off, arr.length);
  };
  var array_chunk__3 = function(arr, off, end) {
    return new cljs.core.ArrayChunk(arr, off, end);
  };
  array_chunk = function(arr, off, end) {
    switch(arguments.length) {
      case 1:
        return array_chunk__1.call(this, arr);
      case 2:
        return array_chunk__2.call(this, arr, off);
      case 3:
        return array_chunk__3.call(this, arr, off, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_chunk.cljs$core$IFn$_invoke$arity$1 = array_chunk__1;
  array_chunk.cljs$core$IFn$_invoke$arity$2 = array_chunk__2;
  array_chunk.cljs$core$IFn$_invoke$arity$3 = array_chunk__3;
  return array_chunk;
}();
cljs.core.ChunkedCons = function(chunk, more, meta, __hash) {
  this.chunk = chunk;
  this.more = more;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31850732;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedCons.cljs$lang$type = true;
cljs.core.ChunkedCons.cljs$lang$ctorStr = "cljs.core/ChunkedCons";
cljs.core.ChunkedCons.cljs$lang$ctorPrWriter = function(this__13397__auto__, writer__13398__auto__, opt__13399__auto__) {
  return cljs.core._write.call(null, writer__13398__auto__, "cljs.core/ChunkedCons");
};
cljs.core.ChunkedCons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__13241__auto__ = self__.__hash;
  if (!(h__13241__auto__ == null)) {
    return h__13241__auto__;
  } else {
    var h__13241__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__13241__auto____$1;
    return h__13241__auto____$1;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count.call(null, self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first.call(null, self__.chunk), self__.more, self__.meta, null);
  } else {
    var more__$1 = cljs.core._seq.call(null, self__.more);
    if (more__$1 == null) {
      return null;
    } else {
      return more__$1;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons.call(null, o, this$__$1);
};
cljs.core.ChunkedCons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.chunk, 0);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count.call(null, self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first.call(null, self__.chunk), self__.more, self__.meta, null);
  } else {
    if (self__.more == null) {
      return cljs.core.List.EMPTY;
    } else {
      return self__.more;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return null;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ChunkedCons(self__.chunk, self__.more, m, self__.__hash);
};
cljs.core.ChunkedCons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedCons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.chunk;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.more;
  }
};
cljs.core.__GT_ChunkedCons = function __GT_ChunkedCons(chunk, more, meta, __hash) {
  return new cljs.core.ChunkedCons(chunk, more, meta, __hash);
};
cljs.core.chunk_cons = function chunk_cons(chunk, rest) {
  if (cljs.core._count.call(null, chunk) === 0) {
    return rest;
  } else {
    return new cljs.core.ChunkedCons(chunk, rest, null, null);
  }
};
cljs.core.chunk_append = function chunk_append(b, x) {
  return b.add(x);
};
cljs.core.chunk = function chunk(b) {
  return b.chunk();
};
cljs.core.chunk_first = function chunk_first(s) {
  return cljs.core._chunked_first.call(null, s);
};
cljs.core.chunk_rest = function chunk_rest(s) {
  return cljs.core._chunked_rest.call(null, s);
};
cljs.core.chunk_next = function chunk_next(s) {
  if (function() {
    var G__107681 = s;
    if (G__107681) {
      var bit__13473__auto__ = G__107681.cljs$lang$protocol_mask$partition1$ & 1024;
      if (bit__13473__auto__ || G__107681.cljs$core$IChunkedNext$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._chunked_next.call(null, s);
  } else {
    return cljs.core.seq.call(null, cljs.core._chunked_rest.call(null, s));
  }
};
cljs.core.to_array = function to_array(s) {
  var ary = [];
  var s__$1 = s;
  while (true) {
    if (cljs.core.seq.call(null, s__$1)) {
      ary.push(cljs.core.first.call(null, s__$1));
      var G__107682 = cljs.core.next.call(null, s__$1);
      s__$1 = G__107682;
      continue;
    } else {
      return ary;
    }
    break;
  }
};
cljs.core.to_array_2d = function to_array_2d(coll) {
  var ret = new Array(cljs.core.count.call(null, coll));
  var i_107683 = 0;
  var xs_107684 = cljs.core.seq.call(null, coll);
  while (true) {
    if (xs_107684) {
      ret[i_107683] = cljs.core.to_array.call(null, cljs.core.first.call(null, xs_107684));
      var G__107685 = i_107683 + 1;
      var G__107686 = cljs.core.next.call(null, xs_107684);
      i_107683 = G__107685;
      xs_107684 = G__107686;
      continue;
    } else {
    }
    break;
  }
  return ret;
};
cljs.core.int_array = function() {
  var int_array = null;
  var int_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return int_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var int_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__107687 = i + 1;
          var G__107688 = cljs.core.next.call(null, s__$1);
          i = G__107687;
          s__$1 = G__107688;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__13678__auto___107689 = size;
      var i_107690 = 0;
      while (true) {
        if (i_107690 < n__13678__auto___107689) {
          a[i_107690] = init_val_or_seq;
          var G__107691 = i_107690 + 1;
          i_107690 = G__107691;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  int_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return int_array__1.call(this, size);
      case 2:
        return int_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  int_array.cljs$core$IFn$_invoke$arity$1 = int_array__1;
  int_array.cljs$core$IFn$_invoke$arity$2 = int_array__2;
  return int_array;
}();
cljs.core.long_array = function() {
  var long_array = null;
  var long_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return long_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var long_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__107692 = i + 1;
          var G__107693 = cljs.core.next.call(null, s__$1);
          i = G__107692;
          s__$1 = G__107693;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__13678__auto___107694 = size;
      var i_107695 = 0;
      while (true) {
        if (i_107695 < n__13678__auto___107694) {
          a[i_107695] = init_val_or_seq;
          var G__107696 = i_107695 + 1;
          i_107695 = G__107696;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  long_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return long_array__1.call(this, size);
      case 2:
        return long_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  long_array.cljs$core$IFn$_invoke$arity$1 = long_array__1;
  long_array.cljs$core$IFn$_invoke$arity$2 = long_array__2;
  return long_array;
}();
cljs.core.double_array = function() {
  var double_array = null;
  var double_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return double_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var double_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__107697 = i + 1;
          var G__107698 = cljs.core.next.call(null, s__$1);
          i = G__107697;
          s__$1 = G__107698;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__13678__auto___107699 = size;
      var i_107700 = 0;
      while (true) {
        if (i_107700 < n__13678__auto___107699) {
          a[i_107700] = init_val_or_seq;
          var G__107701 = i_107700 + 1;
          i_107700 = G__107701;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  double_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return double_array__1.call(this, size);
      case 2:
        return double_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  double_array.cljs$core$IFn$_invoke$arity$1 = double_array__1;
  double_array.cljs$core$IFn$_invoke$arity$2 = double_array__2;
  return double_array;
}();
cljs.core.object_array = function() {
  var object_array = null;
  var object_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return object_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var object_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__107702 = i + 1;
          var G__107703 = cljs.core.next.call(null, s__$1);
          i = G__107702;
          s__$1 = G__107703;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__13678__auto___107704 = size;
      var i_107705 = 0;
      while (true) {
        if (i_107705 < n__13678__auto___107704) {
          a[i_107705] = init_val_or_seq;
          var G__107706 = i_107705 + 1;
          i_107705 = G__107706;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  object_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return object_array__1.call(this, size);
      case 2:
        return object_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  object_array.cljs$core$IFn$_invoke$arity$1 = object_array__1;
  object_array.cljs$core$IFn$_invoke$arity$2 = object_array__2;
  return object_array;
}();
cljs.core.bounded_count = function bounded_count(s, n) {
  if (cljs.core.counted_QMARK_.call(null, s)) {
    return cljs.core.count.call(null, s);
  } else {
    var s__$1 = s;
    var i = n;
    var sum = 0;
    while (true) {
      if (i > 0 && cljs.core.seq.call(null, s__$1)) {
        var G__107707 = cljs.core.next.call(null, s__$1);
        var G__107708 = i - 1;
        var G__107709 = sum + 1;
        s__$1 = G__107707;
        i = G__107708;
        sum = G__107709;
        continue;
      } else {
        return sum;
      }
      break;
    }
  }
};
cljs.core.spread = function spread(arglist) {
  if (arglist == null) {
    return null;
  } else {
    if (cljs.core.next.call(null, arglist) == null) {
      return cljs.core.seq.call(null, cljs.core.first.call(null, arglist));
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, arglist), spread.call(null, cljs.core.next.call(null, arglist)));
      } else {
        return null;
      }
    }
  }
};
cljs.core.concat = function() {
  var concat = null;
  var concat__0 = function() {
    return new cljs.core.LazySeq(null, function() {
      return null;
    }, null, null);
  };
  var concat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return x;
    }, null, null);
  };
  var concat__2 = function(x, y) {
    return new cljs.core.LazySeq(null, function() {
      var s = cljs.core.seq.call(null, x);
      if (s) {
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          return cljs.core.chunk_cons.call(null, cljs.core.chunk_first.call(null, s), concat.call(null, cljs.core.chunk_rest.call(null, s), y));
        } else {
          return cljs.core.cons.call(null, cljs.core.first.call(null, s), concat.call(null, cljs.core.rest.call(null, s), y));
        }
      } else {
        return y;
      }
    }, null, null);
  };
  var concat__3 = function() {
    var G__107710__delegate = function(x, y, zs) {
      var cat = function cat(xys, zs__$1) {
        return new cljs.core.LazySeq(null, function() {
          var xys__$1 = cljs.core.seq.call(null, xys);
          if (xys__$1) {
            if (cljs.core.chunked_seq_QMARK_.call(null, xys__$1)) {
              return cljs.core.chunk_cons.call(null, cljs.core.chunk_first.call(null, xys__$1), cat.call(null, cljs.core.chunk_rest.call(null, xys__$1), zs__$1));
            } else {
              return cljs.core.cons.call(null, cljs.core.first.call(null, xys__$1), cat.call(null, cljs.core.rest.call(null, xys__$1), zs__$1));
            }
          } else {
            if (cljs.core.truth_(zs__$1)) {
              return cat.call(null, cljs.core.first.call(null, zs__$1), cljs.core.next.call(null, zs__$1));
            } else {
              return null;
            }
          }
        }, null, null);
      };
      return cat.call(null, concat.call(null, x, y), zs);
    };
    var G__107710 = function(x, y, var_args) {
      var zs = null;
      if (arguments.length > 2) {
        zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__107710__delegate.call(this, x, y, zs);
    };
    G__107710.cljs$lang$maxFixedArity = 2;
    G__107710.cljs$lang$applyTo = function(arglist__107711) {
      var x = cljs.core.first(arglist__107711);
      arglist__107711 = cljs.core.next(arglist__107711);
      var y = cljs.core.first(arglist__107711);
      var zs = cljs.core.rest(arglist__107711);
      return G__107710__delegate(x, y, zs);
    };
    G__107710.cljs$core$IFn$_invoke$arity$variadic = G__107710__delegate;
    return G__107710;
  }();
  concat = function(x, y, var_args) {
    var zs = var_args;
    switch(arguments.length) {
      case 0:
        return concat__0.call(this);
      case 1:
        return concat__1.call(this, x);
      case 2:
        return concat__2.call(this, x, y);
      default:
        return concat__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  concat.cljs$lang$maxFixedArity = 2;
  concat.cljs$lang$applyTo = concat__3.cljs$lang$applyTo;
  concat.cljs$core$IFn$_invoke$arity$0 = concat__0;
  concat.cljs$core$IFn$_invoke$arity$1 = concat__1;
  concat.cljs$core$IFn$_invoke$arity$2 = concat__2;
  concat.cljs$core$IFn$_invoke$arity$variadic = concat__3.cljs$core$IFn$_invoke$arity$variadic;
  return concat;
}();
cljs.core.list_STAR_ = function() {
  var list_STAR_ = null;
  var list_STAR___1 = function(args) {
    return cljs.core.seq.call(null, args);
  };
  var list_STAR___2 = function(a, args) {
    return cljs.core.cons.call(null, a, args);
  };
  var list_STAR___3 = function(a, b, args) {
    return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, args));
  };
  var list_STAR___4 = function(a, b, c, args) {
    return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, args)));
  };
  var list_STAR___5 = function() {
    var G__107712__delegate = function(a, b, c, d, more) {
      return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, cljs.core.cons.call(null, d, cljs.core.spread.call(null, more)))));
    };
    var G__107712 = function(a, b, c, d, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__107712__delegate.call(this, a, b, c, d, more);
    };
    G__107712.cljs$lang$maxFixedArity = 4;
    G__107712.cljs$lang$applyTo = function(arglist__107713) {
      var a = cljs.core.first(arglist__107713);
      arglist__107713 = cljs.core.next(arglist__107713);
      var b = cljs.core.first(arglist__107713);
      arglist__107713 = cljs.core.next(arglist__107713);
      var c = cljs.core.first(arglist__107713);
      arglist__107713 = cljs.core.next(arglist__107713);
      var d = cljs.core.first(arglist__107713);
      var more = cljs.core.rest(arglist__107713);
      return G__107712__delegate(a, b, c, d, more);
    };
    G__107712.cljs$core$IFn$_invoke$arity$variadic = G__107712__delegate;
    return G__107712;
  }();
  list_STAR_ = function(a, b, c, d, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return list_STAR___1.call(this, a);
      case 2:
        return list_STAR___2.call(this, a, b);
      case 3:
        return list_STAR___3.call(this, a, b, c);
      case 4:
        return list_STAR___4.call(this, a, b, c, d);
      default:
        return list_STAR___5.cljs$core$IFn$_invoke$arity$variadic(a, b, c, d, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  list_STAR_.cljs$lang$maxFixedArity = 4;
  list_STAR_.cljs$lang$applyTo = list_STAR___5.cljs$lang$applyTo;
  list_STAR_.cljs$core$IFn$_invoke$arity$1 = list_STAR___1;
  list_STAR_.cljs$core$IFn$_invoke$arity$2 = list_STAR___2;
  list_STAR_.cljs$core$IFn$_invoke$arity$3 = list_STAR___3;
  list_STAR_.cljs$core$IFn$_invoke$arity$4 = list_STAR___4;
  list_STAR_.cljs$core$IFn$_invoke$arity$variadic = list_STAR___5.cljs$core$IFn$_invoke$arity$variadic;
  return list_STAR_;
}();
cljs.core.transient$ = function transient$(coll) {
  return cljs.core._as_transient.call(null, coll);
};
cljs.core.persistent_BANG_ = function persistent_BANG_(tcoll) {
  return cljs.core._persistent_BANG_.call(null, tcoll);
};
cljs.core.conj_BANG_ = function() {
  var conj_BANG_ = null;
  var conj_BANG___2 = function(tcoll, val) {
    return cljs.core._conj_BANG_.call(null, tcoll, val);
  };
  var conj_BANG___3 = function() {
    var G__107714__delegate = function(tcoll, val, vals) {
      while (true) {
        var ntcoll = cljs.core._conj_BANG_.call(null, tcoll, val);
        if (cljs.core.truth_(vals)) {
          var G__107715 = ntcoll;
          var G__107716 = cljs.core.first.call(null, vals);
          var G__107717 = cljs.core.next.call(null, vals);
          tcoll = G__107715;
          val = G__107716;
          vals = G__107717;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__107714 = function(tcoll, val, var_args) {
      var vals = null;
      if (arguments.length > 2) {
        vals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__107714__delegate.call(this, tcoll, val, vals);
    };
    G__107714.cljs$lang$maxFixedArity = 2;
    G__107714.cljs$lang$applyTo = function(arglist__107718) {
      var tcoll = cljs.core.first(arglist__107718);
      arglist__107718 = cljs.core.next(arglist__107718);
      var val = cljs.core.first(arglist__107718);
      var vals = cljs.core.rest(arglist__107718);
      return G__107714__delegate(tcoll, val, vals);
    };
    G__107714.cljs$core$IFn$_invoke$arity$variadic = G__107714__delegate;
    return G__107714;
  }();
  conj_BANG_ = function(tcoll, val, var_args) {
    var vals = var_args;
    switch(arguments.length) {
      case 2:
        return conj_BANG___2.call(this, tcoll, val);
      default:
        return conj_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, val, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj_BANG_.cljs$lang$maxFixedArity = 2;
  conj_BANG_.cljs$lang$applyTo = conj_BANG___3.cljs$lang$applyTo;
  conj_BANG_.cljs$core$IFn$_invoke$arity$2 = conj_BANG___2;
  conj_BANG_.cljs$core$IFn$_invoke$arity$variadic = conj_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return conj_BANG_;
}();
cljs.core.assoc_BANG_ = function() {
  var assoc_BANG_ = null;
  var assoc_BANG___3 = function(tcoll, key, val) {
    return cljs.core._assoc_BANG_.call(null, tcoll, key, val);
  };
  var assoc_BANG___4 = function() {
    var G__107719__delegate = function(tcoll, key, val, kvs) {
      while (true) {
        var ntcoll = cljs.core._assoc_BANG_.call(null, tcoll, key, val);
        if (cljs.core.truth_(kvs)) {
          var G__107720 = ntcoll;
          var G__107721 = cljs.core.first.call(null, kvs);
          var G__107722 = cljs.core.second.call(null, kvs);
          var G__107723 = cljs.core.nnext.call(null, kvs);
          tcoll = G__107720;
          key = G__107721;
          val = G__107722;
          kvs = G__107723;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__107719 = function(tcoll, key, val, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__107719__delegate.call(this, tcoll, key, val, kvs);
    };
    G__107719.cljs$lang$maxFixedArity = 3;
    G__107719.cljs$lang$applyTo = function(arglist__107724) {
      var tcoll = cljs.core.first(arglist__107724);
      arglist__107724 = cljs.core.next(arglist__107724);
      var key = cljs.core.first(arglist__107724);
      arglist__107724 = cljs.core.next(arglist__107724);
      var val = cljs.core.first(arglist__107724);
      var kvs = cljs.core.rest(arglist__107724);
      return G__107719__delegate(tcoll, key, val, kvs);
    };
    G__107719.cljs$core$IFn$_invoke$arity$variadic = G__107719__delegate;
    return G__107719;
  }();
  assoc_BANG_ = function(tcoll, key, val, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return assoc_BANG___3.call(this, tcoll, key, val);
      default:
        return assoc_BANG___4.cljs$core$IFn$_invoke$arity$variadic(tcoll, key, val, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  assoc_BANG_.cljs$lang$maxFixedArity = 3;
  assoc_BANG_.cljs$lang$applyTo = assoc_BANG___4.cljs$lang$applyTo;
  assoc_BANG_.cljs$core$IFn$_invoke$arity$3 = assoc_BANG___3;
  assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = assoc_BANG___4.cljs$core$IFn$_invoke$arity$variadic;
  return assoc_BANG_;
}();
cljs.core.dissoc_BANG_ = function() {
  var dissoc_BANG_ = null;
  var dissoc_BANG___2 = function(tcoll, key) {
    return cljs.core._dissoc_BANG_.call(null, tcoll, key);
  };
  var dissoc_BANG___3 = function() {
    var G__107725__delegate = function(tcoll, key, ks) {
      while (true) {
        var ntcoll = cljs.core._dissoc_BANG_.call(null, tcoll, key);
        if (cljs.core.truth_(ks)) {
          var G__107726 = ntcoll;
          var G__107727 = cljs.core.first.call(null, ks);
          var G__107728 = cljs.core.next.call(null, ks);
          tcoll = G__107726;
          key = G__107727;
          ks = G__107728;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__107725 = function(tcoll, key, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__107725__delegate.call(this, tcoll, key, ks);
    };
    G__107725.cljs$lang$maxFixedArity = 2;
    G__107725.cljs$lang$applyTo = function(arglist__107729) {
      var tcoll = cljs.core.first(arglist__107729);
      arglist__107729 = cljs.core.next(arglist__107729);
      var key = cljs.core.first(arglist__107729);
      var ks = cljs.core.rest(arglist__107729);
      return G__107725__delegate(tcoll, key, ks);
    };
    G__107725.cljs$core$IFn$_invoke$arity$variadic = G__107725__delegate;
    return G__107725;
  }();
  dissoc_BANG_ = function(tcoll, key, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 2:
        return dissoc_BANG___2.call(this, tcoll, key);
      default:
        return dissoc_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, key, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dissoc_BANG_.cljs$lang$maxFixedArity = 2;
  dissoc_BANG_.cljs$lang$applyTo = dissoc_BANG___3.cljs$lang$applyTo;
  dissoc_BANG_.cljs$core$IFn$_invoke$arity$2 = dissoc_BANG___2;
  dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = dissoc_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return dissoc_BANG_;
}();
cljs.core.pop_BANG_ = function pop_BANG_(tcoll) {
  return cljs.core._pop_BANG_.call(null, tcoll);
};
cljs.core.disj_BANG_ = function() {
  var disj_BANG_ = null;
  var disj_BANG___2 = function(tcoll, val) {
    return cljs.core._disjoin_BANG_.call(null, tcoll, val);
  };
  var disj_BANG___3 = function() {
    var G__107730__delegate = function(tcoll, val, vals) {
      while (true) {
        var ntcoll = cljs.core._disjoin_BANG_.call(null, tcoll, val);
        if (cljs.core.truth_(vals)) {
          var G__107731 = ntcoll;
          var G__107732 = cljs.core.first.call(null, vals);
          var G__107733 = cljs.core.next.call(null, vals);
          tcoll = G__107731;
          val = G__107732;
          vals = G__107733;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__107730 = function(tcoll, val, var_args) {
      var vals = null;
      if (arguments.length > 2) {
        vals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__107730__delegate.call(this, tcoll, val, vals);
    };
    G__107730.cljs$lang$maxFixedArity = 2;
    G__107730.cljs$lang$applyTo = function(arglist__107734) {
      var tcoll = cljs.core.first(arglist__107734);
      arglist__107734 = cljs.core.next(arglist__107734);
      var val = cljs.core.first(arglist__107734);
      var vals = cljs.core.rest(arglist__107734);
      return G__107730__delegate(tcoll, val, vals);
    };
    G__107730.cljs$core$IFn$_invoke$arity$variadic = G__107730__delegate;
    return G__107730;
  }();
  disj_BANG_ = function(tcoll, val, var_args) {
    var vals = var_args;
    switch(arguments.length) {
      case 2:
        return disj_BANG___2.call(this, tcoll, val);
      default:
        return disj_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, val, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  disj_BANG_.cljs$lang$maxFixedArity = 2;
  disj_BANG_.cljs$lang$applyTo = disj_BANG___3.cljs$lang$applyTo;
  disj_BANG_.cljs$core$IFn$_invoke$arity$2 = disj_BANG___2;
  disj_BANG_.cljs$core$IFn$_invoke$arity$variadic = disj_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return disj_BANG_;
}();
cljs.core.apply_to = function apply_to(f, argc, args) {
  var args__$1 = cljs.core.seq.call(null, args);
  if (argc === 0) {
    return f.call(null);
  } else {
    var a = cljs.core._first.call(null, args__$1);
    var args__$2 = cljs.core._rest.call(null, args__$1);
    if (argc === 1) {
      if (f.cljs$core$IFn$_invoke$arity$1) {
        return f.cljs$core$IFn$_invoke$arity$1(a);
      } else {
        return f.call(null, a);
      }
    } else {
      var b = cljs.core._first.call(null, args__$2);
      var args__$3 = cljs.core._rest.call(null, args__$2);
      if (argc === 2) {
        if (f.cljs$core$IFn$_invoke$arity$2) {
          return f.cljs$core$IFn$_invoke$arity$2(a, b);
        } else {
          return f.call(null, a, b);
        }
      } else {
        var c = cljs.core._first.call(null, args__$3);
        var args__$4 = cljs.core._rest.call(null, args__$3);
        if (argc === 3) {
          if (f.cljs$core$IFn$_invoke$arity$3) {
            return f.cljs$core$IFn$_invoke$arity$3(a, b, c);
          } else {
            return f.call(null, a, b, c);
          }
        } else {
          var d = cljs.core._first.call(null, args__$4);
          var args__$5 = cljs.core._rest.call(null, args__$4);
          if (argc === 4) {
            if (f.cljs$core$IFn$_invoke$arity$4) {
              return f.cljs$core$IFn$_invoke$arity$4(a, b, c, d);
            } else {
              return f.call(null, a, b, c, d);
            }
          } else {
            var e = cljs.core._first.call(null, args__$5);
            var args__$6 = cljs.core._rest.call(null, args__$5);
            if (argc === 5) {
              if (f.cljs$core$IFn$_invoke$arity$5) {
                return f.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e);
              } else {
                return f.call(null, a, b, c, d, e);
              }
            } else {
              var f__$1 = cljs.core._first.call(null, args__$6);
              var args__$7 = cljs.core._rest.call(null, args__$6);
              if (argc === 6) {
                if (f__$1.cljs$core$IFn$_invoke$arity$6) {
                  return f__$1.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f__$1);
                } else {
                  return f__$1.call(null, a, b, c, d, e, f__$1);
                }
              } else {
                var g = cljs.core._first.call(null, args__$7);
                var args__$8 = cljs.core._rest.call(null, args__$7);
                if (argc === 7) {
                  if (f__$1.cljs$core$IFn$_invoke$arity$7) {
                    return f__$1.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f__$1, g);
                  } else {
                    return f__$1.call(null, a, b, c, d, e, f__$1, g);
                  }
                } else {
                  var h = cljs.core._first.call(null, args__$8);
                  var args__$9 = cljs.core._rest.call(null, args__$8);
                  if (argc === 8) {
                    if (f__$1.cljs$core$IFn$_invoke$arity$8) {
                      return f__$1.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f__$1, g, h);
                    } else {
                      return f__$1.call(null, a, b, c, d, e, f__$1, g, h);
                    }
                  } else {
                    var i = cljs.core._first.call(null, args__$9);
                    var args__$10 = cljs.core._rest.call(null, args__$9);
                    if (argc === 9) {
                      if (f__$1.cljs$core$IFn$_invoke$arity$9) {
                        return f__$1.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f__$1, g, h, i);
                      } else {
                        return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i);
                      }
                    } else {
                      var j = cljs.core._first.call(null, args__$10);
                      var args__$11 = cljs.core._rest.call(null, args__$10);
                      if (argc === 10) {
                        if (f__$1.cljs$core$IFn$_invoke$arity$10) {
                          return f__$1.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f__$1, g, h, i, j);
                        } else {
                          return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j);
                        }
                      } else {
                        var k = cljs.core._first.call(null, args__$11);
                        var args__$12 = cljs.core._rest.call(null, args__$11);
                        if (argc === 11) {
                          if (f__$1.cljs$core$IFn$_invoke$arity$11) {
                            return f__$1.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f__$1, g, h, i, j, k);
                          } else {
                            return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k);
                          }
                        } else {
                          var l = cljs.core._first.call(null, args__$12);
                          var args__$13 = cljs.core._rest.call(null, args__$12);
                          if (argc === 12) {
                            if (f__$1.cljs$core$IFn$_invoke$arity$12) {
                              return f__$1.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f__$1, g, h, i, j, k, l);
                            } else {
                              return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l);
                            }
                          } else {
                            var m = cljs.core._first.call(null, args__$13);
                            var args__$14 = cljs.core._rest.call(null, args__$13);
                            if (argc === 13) {
                              if (f__$1.cljs$core$IFn$_invoke$arity$13) {
                                return f__$1.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f__$1, g, h, i, j, k, l, m);
                              } else {
                                return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m);
                              }
                            } else {
                              var n = cljs.core._first.call(null, args__$14);
                              var args__$15 = cljs.core._rest.call(null, args__$14);
                              if (argc === 14) {
                                if (f__$1.cljs$core$IFn$_invoke$arity$14) {
                                  return f__$1.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n);
                                } else {
                                  return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n);
                                }
                              } else {
                                var o = cljs.core._first.call(null, args__$15);
                                var args__$16 = cljs.core._rest.call(null, args__$15);
                                if (argc === 15) {
                                  if (f__$1.cljs$core$IFn$_invoke$arity$15) {
                                    return f__$1.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o);
                                  } else {
                                    return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o);
                                  }
                                } else {
                                  var p = cljs.core._first.call(null, args__$16);
                                  var args__$17 = cljs.core._rest.call(null, args__$16);
                                  if (argc === 16) {
                                    if (f__$1.cljs$core$IFn$_invoke$arity$16) {
                                      return f__$1.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p);
                                    } else {
                                      return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p);
                                    }
                                  } else {
                                    var q = cljs.core._first.call(null, args__$17);
                                    var args__$18 = cljs.core._rest.call(null, args__$17);
                                    if (argc === 17) {
                                      if (f__$1.cljs$core$IFn$_invoke$arity$17) {
                                        return f__$1.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q);
                                      } else {
                                        return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q);
                                      }
                                    } else {
                                      var r = cljs.core._first.call(null, args__$18);
                                      var args__$19 = cljs.core._rest.call(null, args__$18);
                                      if (argc === 18) {
                                        if (f__$1.cljs$core$IFn$_invoke$arity$18) {
                                          return f__$1.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r);
                                        } else {
                                          return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r);
                                        }
                                      } else {
                                        var s = cljs.core._first.call(null, args__$19);
                                        var args__$20 = cljs.core._rest.call(null, args__$19);
                                        if (argc === 19) {
                                          if (f__$1.cljs$core$IFn$_invoke$arity$19) {
                                            return f__$1.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s);
                                          } else {
                                            return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s);
                                          }
                                        } else {
                                          var t = cljs.core._first.call(null, args__$20);
                                          var args__$21 = cljs.core._rest.call(null, args__$20);
                                          if (argc === 20) {
                                            if (f__$1.cljs$core$IFn$_invoke$arity$20) {
                                              return f__$1.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
                                            } else {
                                              return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
                                            }
                                          } else {
                                            throw new Error("Only up to 20 arguments supported on functions");
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.apply = function() {
  var apply = null;
  var apply__2 = function(f, args) {
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, args, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, args);
      } else {
        return f.cljs$lang$applyTo(args);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, args));
    }
  };
  var apply__3 = function(f, x, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__4 = function(f, x, y, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, y, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__5 = function(f, x, y, z, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, y, z, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__6 = function() {
    var G__107735__delegate = function(f, a, b, c, d, args) {
      var arglist = cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, cljs.core.cons.call(null, d, cljs.core.spread.call(null, args)))));
      var fixed_arity = f.cljs$lang$maxFixedArity;
      if (f.cljs$lang$applyTo) {
        var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
        if (bc <= fixed_arity) {
          return cljs.core.apply_to.call(null, f, bc, arglist);
        } else {
          return f.cljs$lang$applyTo(arglist);
        }
      } else {
        return f.apply(f, cljs.core.to_array.call(null, arglist));
      }
    };
    var G__107735 = function(f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 5) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 5), 0);
      }
      return G__107735__delegate.call(this, f, a, b, c, d, args);
    };
    G__107735.cljs$lang$maxFixedArity = 5;
    G__107735.cljs$lang$applyTo = function(arglist__107736) {
      var f = cljs.core.first(arglist__107736);
      arglist__107736 = cljs.core.next(arglist__107736);
      var a = cljs.core.first(arglist__107736);
      arglist__107736 = cljs.core.next(arglist__107736);
      var b = cljs.core.first(arglist__107736);
      arglist__107736 = cljs.core.next(arglist__107736);
      var c = cljs.core.first(arglist__107736);
      arglist__107736 = cljs.core.next(arglist__107736);
      var d = cljs.core.first(arglist__107736);
      var args = cljs.core.rest(arglist__107736);
      return G__107735__delegate(f, a, b, c, d, args);
    };
    G__107735.cljs$core$IFn$_invoke$arity$variadic = G__107735__delegate;
    return G__107735;
  }();
  apply = function(f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return apply__2.call(this, f, a);
      case 3:
        return apply__3.call(this, f, a, b);
      case 4:
        return apply__4.call(this, f, a, b, c);
      case 5:
        return apply__5.call(this, f, a, b, c, d);
      default:
        return apply__6.cljs$core$IFn$_invoke$arity$variadic(f, a, b, c, d, cljs.core.array_seq(arguments, 5));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  apply.cljs$lang$maxFixedArity = 5;
  apply.cljs$lang$applyTo = apply__6.cljs$lang$applyTo;
  apply.cljs$core$IFn$_invoke$arity$2 = apply__2;
  apply.cljs$core$IFn$_invoke$arity$3 = apply__3;
  apply.cljs$core$IFn$_invoke$arity$4 = apply__4;
  apply.cljs$core$IFn$_invoke$arity$5 = apply__5;
  apply.cljs$core$IFn$_invoke$arity$variadic = apply__6.cljs$core$IFn$_invoke$arity$variadic;
  return apply;
}();
cljs.core.vary_meta = function() {
  var vary_meta = null;
  var vary_meta__2 = function(obj, f) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj)));
  };
  var vary_meta__3 = function(obj, f, a) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a));
  };
  var vary_meta__4 = function(obj, f, a, b) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b));
  };
  var vary_meta__5 = function(obj, f, a, b, c) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b, c));
  };
  var vary_meta__6 = function(obj, f, a, b, c, d) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b, c, d));
  };
  var vary_meta__7 = function() {
    var G__107737__delegate = function(obj, f, a, b, c, d, args) {
      return cljs.core.with_meta.call(null, obj, cljs.core.apply.call(null, f, cljs.core.meta.call(null, obj), a, b, c, d, args));
    };
    var G__107737 = function(obj, f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 6) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 6), 0);
      }
      return G__107737__delegate.call(this, obj, f, a, b, c, d, args);
    };
    G__107737.cljs$lang$maxFixedArity = 6;
    G__107737.cljs$lang$applyTo = function(arglist__107738) {
      var obj = cljs.core.first(arglist__107738);
      arglist__107738 = cljs.core.next(arglist__107738);
      var f = cljs.core.first(arglist__107738);
      arglist__107738 = cljs.core.next(arglist__107738);
      var a = cljs.core.first(arglist__107738);
      arglist__107738 = cljs.core.next(arglist__107738);
      var b = cljs.core.first(arglist__107738);
      arglist__107738 = cljs.core.next(arglist__107738);
      var c = cljs.core.first(arglist__107738);
      arglist__107738 = cljs.core.next(arglist__107738);
      var d = cljs.core.first(arglist__107738);
      var args = cljs.core.rest(arglist__107738);
      return G__107737__delegate(obj, f, a, b, c, d, args);
    };
    G__107737.cljs$core$IFn$_invoke$arity$variadic = G__107737__delegate;
    return G__107737;
  }();
  vary_meta = function(obj, f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return vary_meta__2.call(this, obj, f);
      case 3:
        return vary_meta__3.call(this, obj, f, a);
      case 4:
        return vary_meta__4.call(this, obj, f, a, b);
      case 5:
        return vary_meta__5.call(this, obj, f, a, b, c);
      case 6:
        return vary_meta__6.call(this, obj, f, a, b, c, d);
      default:
        return vary_meta__7.cljs$core$IFn$_invoke$arity$variadic(obj, f, a, b, c, d, cljs.core.array_seq(arguments, 6));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  vary_meta.cljs$lang$maxFixedArity = 6;
  vary_meta.cljs$lang$applyTo = vary_meta__7.cljs$lang$applyTo;
  vary_meta.cljs$core$IFn$_invoke$arity$2 = vary_meta__2;
  vary_meta.cljs$core$IFn$_invoke$arity$3 = vary_meta__3;
  vary_meta.cljs$core$IFn$_invoke$arity$4 = vary_meta__4;
  vary_meta.cljs$core$IFn$_invoke$arity$5 = vary_meta__5;
  vary_meta.cljs$core$IFn$_invoke$arity$6 = vary_meta__6;
  vary_meta.cljs$core$IFn$_invoke$arity$variadic = vary_meta__7.cljs$core$IFn$_invoke$arity$variadic;
  return vary_meta;
}();
cljs.core.not_EQ_ = function() {
  var not_EQ_ = null;
  var not_EQ___1 = function(x) {
    return false;
  };
  var not_EQ___2 = function(x, y) {
    return!cljs.core._EQ_.call(null, x, y);
  };
  var not_EQ___3 = function() {
    var G__107739__delegate = function(x, y, more) {
      return cljs.core.not.call(null, cljs.core.apply.call(null, cljs.core._EQ_, x, y, more));
    };
    var G__107739 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__107739__delegate.call(this, x, y, more);
    };
    G__107739.cljs$lang$maxFixedArity = 2;
    G__107739.cljs$lang$applyTo = function(arglist__107740) {
      var x = cljs.core.first(arglist__107740);
      arglist__107740 = cljs.core.next(arglist__107740);
      var y = cljs.core.first(arglist__107740);
      var more = cljs.core.rest(arglist__107740);
      return G__107739__delegate(x, y, more);
    };
    G__107739.cljs$core$IFn$_invoke$arity$variadic = G__107739__delegate;
    return G__107739;
  }();
  not_EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return not_EQ___1.call(this, x);
      case 2:
        return not_EQ___2.call(this, x, y);
      default:
        return not_EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  not_EQ_.cljs$lang$maxFixedArity = 2;
  not_EQ_.cljs$lang$applyTo = not_EQ___3.cljs$lang$applyTo;
  not_EQ_.cljs$core$IFn$_invoke$arity$1 = not_EQ___1;
  not_EQ_.cljs$core$IFn$_invoke$arity$2 = not_EQ___2;
  not_EQ_.cljs$core$IFn$_invoke$arity$variadic = not_EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return not_EQ_;
}();
cljs.core.not_empty = function not_empty(coll) {
  if (cljs.core.seq.call(null, coll)) {
    return coll;
  } else {
    return null;
  }
};
cljs.core.every_QMARK_ = function every_QMARK_(pred, coll) {
  while (true) {
    if (cljs.core.seq.call(null, coll) == null) {
      return true;
    } else {
      if (cljs.core.truth_(pred.call(null, cljs.core.first.call(null, coll)))) {
        var G__107741 = pred;
        var G__107742 = cljs.core.next.call(null, coll);
        pred = G__107741;
        coll = G__107742;
        continue;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return false;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.not_every_QMARK_ = function not_every_QMARK_(pred, coll) {
  return!cljs.core.every_QMARK_.call(null, pred, coll);
};
cljs.core.some = function some(pred, coll) {
  while (true) {
    if (cljs.core.seq.call(null, coll)) {
      var or__12830__auto__ = pred.call(null, cljs.core.first.call(null, coll));
      if (cljs.core.truth_(or__12830__auto__)) {
        return or__12830__auto__;
      } else {
        var G__107743 = pred;
        var G__107744 = cljs.core.next.call(null, coll);
        pred = G__107743;
        coll = G__107744;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.not_any_QMARK_ = function not_any_QMARK_(pred, coll) {
  return cljs.core.not.call(null, cljs.core.some.call(null, pred, coll));
};
cljs.core.even_QMARK_ = function even_QMARK_(n) {
  if (cljs.core.integer_QMARK_.call(null, n)) {
    return(n & 1) === 0;
  } else {
    throw new Error([cljs.core.str("Argument must be an integer: "), cljs.core.str(n)].join(""));
  }
};
cljs.core.odd_QMARK_ = function odd_QMARK_(n) {
  return!cljs.core.even_QMARK_.call(null, n);
};
cljs.core.identity = function identity(x) {
  return x;
};
cljs.core.complement = function complement(f) {
  return function() {
    var G__107745 = null;
    var G__107745__0 = function() {
      return cljs.core.not.call(null, f.call(null));
    };
    var G__107745__1 = function(x) {
      return cljs.core.not.call(null, f.call(null, x));
    };
    var G__107745__2 = function(x, y) {
      return cljs.core.not.call(null, f.call(null, x, y));
    };
    var G__107745__3 = function() {
      var G__107746__delegate = function(x, y, zs) {
        return cljs.core.not.call(null, cljs.core.apply.call(null, f, x, y, zs));
      };
      var G__107746 = function(x, y, var_args) {
        var zs = null;
        if (arguments.length > 2) {
          zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
        }
        return G__107746__delegate.call(this, x, y, zs);
      };
      G__107746.cljs$lang$maxFixedArity = 2;
      G__107746.cljs$lang$applyTo = function(arglist__107747) {
        var x = cljs.core.first(arglist__107747);
        arglist__107747 = cljs.core.next(arglist__107747);
        var y = cljs.core.first(arglist__107747);
        var zs = cljs.core.rest(arglist__107747);
        return G__107746__delegate(x, y, zs);
      };
      G__107746.cljs$core$IFn$_invoke$arity$variadic = G__107746__delegate;
      return G__107746;
    }();
    G__107745 = function(x, y, var_args) {
      var zs = var_args;
      switch(arguments.length) {
        case 0:
          return G__107745__0.call(this);
        case 1:
          return G__107745__1.call(this, x);
        case 2:
          return G__107745__2.call(this, x, y);
        default:
          return G__107745__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__107745.cljs$lang$maxFixedArity = 2;
    G__107745.cljs$lang$applyTo = G__107745__3.cljs$lang$applyTo;
    return G__107745;
  }();
};
cljs.core.constantly = function constantly(x) {
  return function() {
    var G__107748__delegate = function(args) {
      return x;
    };
    var G__107748 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__107748__delegate.call(this, args);
    };
    G__107748.cljs$lang$maxFixedArity = 0;
    G__107748.cljs$lang$applyTo = function(arglist__107749) {
      var args = cljs.core.seq(arglist__107749);
      return G__107748__delegate(args);
    };
    G__107748.cljs$core$IFn$_invoke$arity$variadic = G__107748__delegate;
    return G__107748;
  }();
};
cljs.core.comp = function() {
  var comp = null;
  var comp__0 = function() {
    return cljs.core.identity;
  };
  var comp__1 = function(f) {
    return f;
  };
  var comp__2 = function(f, g) {
    return function() {
      var G__107750 = null;
      var G__107750__0 = function() {
        return f.call(null, g.call(null));
      };
      var G__107750__1 = function(x) {
        return f.call(null, g.call(null, x));
      };
      var G__107750__2 = function(x, y) {
        return f.call(null, g.call(null, x, y));
      };
      var G__107750__3 = function(x, y, z) {
        return f.call(null, g.call(null, x, y, z));
      };
      var G__107750__4 = function() {
        var G__107751__delegate = function(x, y, z, args) {
          return f.call(null, cljs.core.apply.call(null, g, x, y, z, args));
        };
        var G__107751 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__107751__delegate.call(this, x, y, z, args);
        };
        G__107751.cljs$lang$maxFixedArity = 3;
        G__107751.cljs$lang$applyTo = function(arglist__107752) {
          var x = cljs.core.first(arglist__107752);
          arglist__107752 = cljs.core.next(arglist__107752);
          var y = cljs.core.first(arglist__107752);
          arglist__107752 = cljs.core.next(arglist__107752);
          var z = cljs.core.first(arglist__107752);
          var args = cljs.core.rest(arglist__107752);
          return G__107751__delegate(x, y, z, args);
        };
        G__107751.cljs$core$IFn$_invoke$arity$variadic = G__107751__delegate;
        return G__107751;
      }();
      G__107750 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__107750__0.call(this);
          case 1:
            return G__107750__1.call(this, x);
          case 2:
            return G__107750__2.call(this, x, y);
          case 3:
            return G__107750__3.call(this, x, y, z);
          default:
            return G__107750__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__107750.cljs$lang$maxFixedArity = 3;
      G__107750.cljs$lang$applyTo = G__107750__4.cljs$lang$applyTo;
      return G__107750;
    }();
  };
  var comp__3 = function(f, g, h) {
    return function() {
      var G__107753 = null;
      var G__107753__0 = function() {
        return f.call(null, g.call(null, h.call(null)));
      };
      var G__107753__1 = function(x) {
        return f.call(null, g.call(null, h.call(null, x)));
      };
      var G__107753__2 = function(x, y) {
        return f.call(null, g.call(null, h.call(null, x, y)));
      };
      var G__107753__3 = function(x, y, z) {
        return f.call(null, g.call(null, h.call(null, x, y, z)));
      };
      var G__107753__4 = function() {
        var G__107754__delegate = function(x, y, z, args) {
          return f.call(null, g.call(null, cljs.core.apply.call(null, h, x, y, z, args)));
        };
        var G__107754 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__107754__delegate.call(this, x, y, z, args);
        };
        G__107754.cljs$lang$maxFixedArity = 3;
        G__107754.cljs$lang$applyTo = function(arglist__107755) {
          var x = cljs.core.first(arglist__107755);
          arglist__107755 = cljs.core.next(arglist__107755);
          var y = cljs.core.first(arglist__107755);
          arglist__107755 = cljs.core.next(arglist__107755);
          var z = cljs.core.first(arglist__107755);
          var args = cljs.core.rest(arglist__107755);
          return G__107754__delegate(x, y, z, args);
        };
        G__107754.cljs$core$IFn$_invoke$arity$variadic = G__107754__delegate;
        return G__107754;
      }();
      G__107753 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__107753__0.call(this);
          case 1:
            return G__107753__1.call(this, x);
          case 2:
            return G__107753__2.call(this, x, y);
          case 3:
            return G__107753__3.call(this, x, y, z);
          default:
            return G__107753__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__107753.cljs$lang$maxFixedArity = 3;
      G__107753.cljs$lang$applyTo = G__107753__4.cljs$lang$applyTo;
      return G__107753;
    }();
  };
  var comp__4 = function() {
    var G__107756__delegate = function(f1, f2, f3, fs) {
      var fs__$1 = cljs.core.reverse.call(null, cljs.core.list_STAR_.call(null, f1, f2, f3, fs));
      return function() {
        var G__107757__delegate = function(args) {
          var ret = cljs.core.apply.call(null, cljs.core.first.call(null, fs__$1), args);
          var fs__$2 = cljs.core.next.call(null, fs__$1);
          while (true) {
            if (fs__$2) {
              var G__107758 = cljs.core.first.call(null, fs__$2).call(null, ret);
              var G__107759 = cljs.core.next.call(null, fs__$2);
              ret = G__107758;
              fs__$2 = G__107759;
              continue;
            } else {
              return ret;
            }
            break;
          }
        };
        var G__107757 = function(var_args) {
          var args = null;
          if (arguments.length > 0) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
          }
          return G__107757__delegate.call(this, args);
        };
        G__107757.cljs$lang$maxFixedArity = 0;
        G__107757.cljs$lang$applyTo = function(arglist__107760) {
          var args = cljs.core.seq(arglist__107760);
          return G__107757__delegate(args);
        };
        G__107757.cljs$core$IFn$_invoke$arity$variadic = G__107757__delegate;
        return G__107757;
      }();
    };
    var G__107756 = function(f1, f2, f3, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__107756__delegate.call(this, f1, f2, f3, fs);
    };
    G__107756.cljs$lang$maxFixedArity = 3;
    G__107756.cljs$lang$applyTo = function(arglist__107761) {
      var f1 = cljs.core.first(arglist__107761);
      arglist__107761 = cljs.core.next(arglist__107761);
      var f2 = cljs.core.first(arglist__107761);
      arglist__107761 = cljs.core.next(arglist__107761);
      var f3 = cljs.core.first(arglist__107761);
      var fs = cljs.core.rest(arglist__107761);
      return G__107756__delegate(f1, f2, f3, fs);
    };
    G__107756.cljs$core$IFn$_invoke$arity$variadic = G__107756__delegate;
    return G__107756;
  }();
  comp = function(f1, f2, f3, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 0:
        return comp__0.call(this);
      case 1:
        return comp__1.call(this, f1);
      case 2:
        return comp__2.call(this, f1, f2);
      case 3:
        return comp__3.call(this, f1, f2, f3);
      default:
        return comp__4.cljs$core$IFn$_invoke$arity$variadic(f1, f2, f3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  comp.cljs$lang$maxFixedArity = 3;
  comp.cljs$lang$applyTo = comp__4.cljs$lang$applyTo;
  comp.cljs$core$IFn$_invoke$arity$0 = comp__0;
  comp.cljs$core$IFn$_invoke$arity$1 = comp__1;
  comp.cljs$core$IFn$_invoke$arity$2 = comp__2;
  comp.cljs$core$IFn$_invoke$arity$3 = comp__3;
  comp.cljs$core$IFn$_invoke$arity$variadic = comp__4.cljs$core$IFn$_invoke$arity$variadic;
  return comp;
}();
cljs.core.partial = function() {
  var partial = null;
  var partial__1 = function(f) {
    return f;
  };
  var partial__2 = function(f, arg1) {
    return function() {
      var G__107762__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, args);
      };
      var G__107762 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__107762__delegate.call(this, args);
      };
      G__107762.cljs$lang$maxFixedArity = 0;
      G__107762.cljs$lang$applyTo = function(arglist__107763) {
        var args = cljs.core.seq(arglist__107763);
        return G__107762__delegate(args);
      };
      G__107762.cljs$core$IFn$_invoke$arity$variadic = G__107762__delegate;
      return G__107762;
    }();
  };
  var partial__3 = function(f, arg1, arg2) {
    return function() {
      var G__107764__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, arg2, args);
      };
      var G__107764 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__107764__delegate.call(this, args);
      };
      G__107764.cljs$lang$maxFixedArity = 0;
      G__107764.cljs$lang$applyTo = function(arglist__107765) {
        var args = cljs.core.seq(arglist__107765);
        return G__107764__delegate(args);
      };
      G__107764.cljs$core$IFn$_invoke$arity$variadic = G__107764__delegate;
      return G__107764;
    }();
  };
  var partial__4 = function(f, arg1, arg2, arg3) {
    return function() {
      var G__107766__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, arg2, arg3, args);
      };
      var G__107766 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__107766__delegate.call(this, args);
      };
      G__107766.cljs$lang$maxFixedArity = 0;
      G__107766.cljs$lang$applyTo = function(arglist__107767) {
        var args = cljs.core.seq(arglist__107767);
        return G__107766__delegate(args);
      };
      G__107766.cljs$core$IFn$_invoke$arity$variadic = G__107766__delegate;
      return G__107766;
    }();
  };
  var partial__5 = function() {
    var G__107768__delegate = function(f, arg1, arg2, arg3, more) {
      return function() {
        var G__107769__delegate = function(args) {
          return cljs.core.apply.call(null, f, arg1, arg2, arg3, cljs.core.concat.call(null, more, args));
        };
        var G__107769 = function(var_args) {
          var args = null;
          if (arguments.length > 0) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
          }
          return G__107769__delegate.call(this, args);
        };
        G__107769.cljs$lang$maxFixedArity = 0;
        G__107769.cljs$lang$applyTo = function(arglist__107770) {
          var args = cljs.core.seq(arglist__107770);
          return G__107769__delegate(args);
        };
        G__107769.cljs$core$IFn$_invoke$arity$variadic = G__107769__delegate;
        return G__107769;
      }();
    };
    var G__107768 = function(f, arg1, arg2, arg3, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__107768__delegate.call(this, f, arg1, arg2, arg3, more);
    };
    G__107768.cljs$lang$maxFixedArity = 4;
    G__107768.cljs$lang$applyTo = function(arglist__107771) {
      var f = cljs.core.first(arglist__107771);
      arglist__107771 = cljs.core.next(arglist__107771);
      var arg1 = cljs.core.first(arglist__107771);
      arglist__107771 = cljs.core.next(arglist__107771);
      var arg2 = cljs.core.first(arglist__107771);
      arglist__107771 = cljs.core.next(arglist__107771);
      var arg3 = cljs.core.first(arglist__107771);
      var more = cljs.core.rest(arglist__107771);
      return G__107768__delegate(f, arg1, arg2, arg3, more);
    };
    G__107768.cljs$core$IFn$_invoke$arity$variadic = G__107768__delegate;
    return G__107768;
  }();
  partial = function(f, arg1, arg2, arg3, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return partial__1.call(this, f);
      case 2:
        return partial__2.call(this, f, arg1);
      case 3:
        return partial__3.call(this, f, arg1, arg2);
      case 4:
        return partial__4.call(this, f, arg1, arg2, arg3);
      default:
        return partial__5.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, arg3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partial.cljs$lang$maxFixedArity = 4;
  partial.cljs$lang$applyTo = partial__5.cljs$lang$applyTo;
  partial.cljs$core$IFn$_invoke$arity$1 = partial__1;
  partial.cljs$core$IFn$_invoke$arity$2 = partial__2;
  partial.cljs$core$IFn$_invoke$arity$3 = partial__3;
  partial.cljs$core$IFn$_invoke$arity$4 = partial__4;
  partial.cljs$core$IFn$_invoke$arity$variadic = partial__5.cljs$core$IFn$_invoke$arity$variadic;
  return partial;
}();
cljs.core.fnil = function() {
  var fnil = null;
  var fnil__2 = function(f, x) {
    return function() {
      var G__107772 = null;
      var G__107772__1 = function(a) {
        return f.call(null, a == null ? x : a);
      };
      var G__107772__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b);
      };
      var G__107772__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b, c);
      };
      var G__107772__4 = function() {
        var G__107773__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b, c, ds);
        };
        var G__107773 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__107773__delegate.call(this, a, b, c, ds);
        };
        G__107773.cljs$lang$maxFixedArity = 3;
        G__107773.cljs$lang$applyTo = function(arglist__107774) {
          var a = cljs.core.first(arglist__107774);
          arglist__107774 = cljs.core.next(arglist__107774);
          var b = cljs.core.first(arglist__107774);
          arglist__107774 = cljs.core.next(arglist__107774);
          var c = cljs.core.first(arglist__107774);
          var ds = cljs.core.rest(arglist__107774);
          return G__107773__delegate(a, b, c, ds);
        };
        G__107773.cljs$core$IFn$_invoke$arity$variadic = G__107773__delegate;
        return G__107773;
      }();
      G__107772 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 1:
            return G__107772__1.call(this, a);
          case 2:
            return G__107772__2.call(this, a, b);
          case 3:
            return G__107772__3.call(this, a, b, c);
          default:
            return G__107772__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__107772.cljs$lang$maxFixedArity = 3;
      G__107772.cljs$lang$applyTo = G__107772__4.cljs$lang$applyTo;
      return G__107772;
    }();
  };
  var fnil__3 = function(f, x, y) {
    return function() {
      var G__107775 = null;
      var G__107775__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b == null ? y : b);
      };
      var G__107775__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b == null ? y : b, c);
      };
      var G__107775__4 = function() {
        var G__107776__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b == null ? y : b, c, ds);
        };
        var G__107776 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__107776__delegate.call(this, a, b, c, ds);
        };
        G__107776.cljs$lang$maxFixedArity = 3;
        G__107776.cljs$lang$applyTo = function(arglist__107777) {
          var a = cljs.core.first(arglist__107777);
          arglist__107777 = cljs.core.next(arglist__107777);
          var b = cljs.core.first(arglist__107777);
          arglist__107777 = cljs.core.next(arglist__107777);
          var c = cljs.core.first(arglist__107777);
          var ds = cljs.core.rest(arglist__107777);
          return G__107776__delegate(a, b, c, ds);
        };
        G__107776.cljs$core$IFn$_invoke$arity$variadic = G__107776__delegate;
        return G__107776;
      }();
      G__107775 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__107775__2.call(this, a, b);
          case 3:
            return G__107775__3.call(this, a, b, c);
          default:
            return G__107775__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__107775.cljs$lang$maxFixedArity = 3;
      G__107775.cljs$lang$applyTo = G__107775__4.cljs$lang$applyTo;
      return G__107775;
    }();
  };
  var fnil__4 = function(f, x, y, z) {
    return function() {
      var G__107778 = null;
      var G__107778__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b == null ? y : b);
      };
      var G__107778__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b == null ? y : b, c == null ? z : c);
      };
      var G__107778__4 = function() {
        var G__107779__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b == null ? y : b, c == null ? z : c, ds);
        };
        var G__107779 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__107779__delegate.call(this, a, b, c, ds);
        };
        G__107779.cljs$lang$maxFixedArity = 3;
        G__107779.cljs$lang$applyTo = function(arglist__107780) {
          var a = cljs.core.first(arglist__107780);
          arglist__107780 = cljs.core.next(arglist__107780);
          var b = cljs.core.first(arglist__107780);
          arglist__107780 = cljs.core.next(arglist__107780);
          var c = cljs.core.first(arglist__107780);
          var ds = cljs.core.rest(arglist__107780);
          return G__107779__delegate(a, b, c, ds);
        };
        G__107779.cljs$core$IFn$_invoke$arity$variadic = G__107779__delegate;
        return G__107779;
      }();
      G__107778 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__107778__2.call(this, a, b);
          case 3:
            return G__107778__3.call(this, a, b, c);
          default:
            return G__107778__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__107778.cljs$lang$maxFixedArity = 3;
      G__107778.cljs$lang$applyTo = G__107778__4.cljs$lang$applyTo;
      return G__107778;
    }();
  };
  fnil = function(f, x, y, z) {
    switch(arguments.length) {
      case 2:
        return fnil__2.call(this, f, x);
      case 3:
        return fnil__3.call(this, f, x, y);
      case 4:
        return fnil__4.call(this, f, x, y, z);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  fnil.cljs$core$IFn$_invoke$arity$2 = fnil__2;
  fnil.cljs$core$IFn$_invoke$arity$3 = fnil__3;
  fnil.cljs$core$IFn$_invoke$arity$4 = fnil__4;
  return fnil;
}();
cljs.core.map_indexed = function map_indexed(f, coll) {
  var mapi = function mapi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll__$1);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__13678__auto___107781 = size;
          var i_107782 = 0;
          while (true) {
            if (i_107782 < n__13678__auto___107781) {
              cljs.core.chunk_append.call(null, b, f.call(null, idx + i_107782, cljs.core._nth.call(null, c, i_107782)));
              var G__107783 = i_107782 + 1;
              i_107782 = G__107783;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), mapi.call(null, idx + size, cljs.core.chunk_rest.call(null, s)));
        } else {
          return cljs.core.cons.call(null, f.call(null, idx, cljs.core.first.call(null, s)), mapi.call(null, idx + 1, cljs.core.rest.call(null, s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return mapi.call(null, 0, coll);
};
cljs.core.keep = function keep(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
        var c = cljs.core.chunk_first.call(null, s);
        var size = cljs.core.count.call(null, c);
        var b = cljs.core.chunk_buffer.call(null, size);
        var n__13678__auto___107784 = size;
        var i_107785 = 0;
        while (true) {
          if (i_107785 < n__13678__auto___107784) {
            var x_107786 = f.call(null, cljs.core._nth.call(null, c, i_107785));
            if (x_107786 == null) {
            } else {
              cljs.core.chunk_append.call(null, b, x_107786);
            }
            var G__107787 = i_107785 + 1;
            i_107785 = G__107787;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), keep.call(null, f, cljs.core.chunk_rest.call(null, s)));
      } else {
        var x = f.call(null, cljs.core.first.call(null, s));
        if (x == null) {
          return keep.call(null, f, cljs.core.rest.call(null, s));
        } else {
          return cljs.core.cons.call(null, x, keep.call(null, f, cljs.core.rest.call(null, s)));
        }
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.keep_indexed = function keep_indexed(f, coll) {
  var keepi = function keepi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll__$1);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__13678__auto___107788 = size;
          var i_107789 = 0;
          while (true) {
            if (i_107789 < n__13678__auto___107788) {
              var x_107790 = f.call(null, idx + i_107789, cljs.core._nth.call(null, c, i_107789));
              if (x_107790 == null) {
              } else {
                cljs.core.chunk_append.call(null, b, x_107790);
              }
              var G__107791 = i_107789 + 1;
              i_107789 = G__107791;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), keepi.call(null, idx + size, cljs.core.chunk_rest.call(null, s)));
        } else {
          var x = f.call(null, idx, cljs.core.first.call(null, s));
          if (x == null) {
            return keepi.call(null, idx + 1, cljs.core.rest.call(null, s));
          } else {
            return cljs.core.cons.call(null, x, keepi.call(null, idx + 1, cljs.core.rest.call(null, s)));
          }
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return keepi.call(null, 0, coll);
};
cljs.core.every_pred = function() {
  var every_pred = null;
  var every_pred__1 = function(p) {
    return function() {
      var ep1 = null;
      var ep1__0 = function() {
        return true;
      };
      var ep1__1 = function(x) {
        return cljs.core.boolean$.call(null, p.call(null, x));
      };
      var ep1__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__12818__auto__ = p.call(null, x);
          if (cljs.core.truth_(and__12818__auto__)) {
            return p.call(null, y);
          } else {
            return and__12818__auto__;
          }
        }());
      };
      var ep1__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__12818__auto__ = p.call(null, x);
          if (cljs.core.truth_(and__12818__auto__)) {
            var and__12818__auto____$1 = p.call(null, y);
            if (cljs.core.truth_(and__12818__auto____$1)) {
              return p.call(null, z);
            } else {
              return and__12818__auto____$1;
            }
          } else {
            return and__12818__auto__;
          }
        }());
      };
      var ep1__4 = function() {
        var G__107798__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep1.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, p, args));
        };
        var G__107798 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__107798__delegate.call(this, x, y, z, args);
        };
        G__107798.cljs$lang$maxFixedArity = 3;
        G__107798.cljs$lang$applyTo = function(arglist__107799) {
          var x = cljs.core.first(arglist__107799);
          arglist__107799 = cljs.core.next(arglist__107799);
          var y = cljs.core.first(arglist__107799);
          arglist__107799 = cljs.core.next(arglist__107799);
          var z = cljs.core.first(arglist__107799);
          var args = cljs.core.rest(arglist__107799);
          return G__107798__delegate(x, y, z, args);
        };
        G__107798.cljs$core$IFn$_invoke$arity$variadic = G__107798__delegate;
        return G__107798;
      }();
      ep1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep1__0.call(this);
          case 1:
            return ep1__1.call(this, x);
          case 2:
            return ep1__2.call(this, x, y);
          case 3:
            return ep1__3.call(this, x, y, z);
          default:
            return ep1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep1.cljs$lang$maxFixedArity = 3;
      ep1.cljs$lang$applyTo = ep1__4.cljs$lang$applyTo;
      ep1.cljs$core$IFn$_invoke$arity$0 = ep1__0;
      ep1.cljs$core$IFn$_invoke$arity$1 = ep1__1;
      ep1.cljs$core$IFn$_invoke$arity$2 = ep1__2;
      ep1.cljs$core$IFn$_invoke$arity$3 = ep1__3;
      ep1.cljs$core$IFn$_invoke$arity$variadic = ep1__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep1;
    }();
  };
  var every_pred__2 = function(p1, p2) {
    return function() {
      var ep2 = null;
      var ep2__0 = function() {
        return true;
      };
      var ep2__1 = function(x) {
        return cljs.core.boolean$.call(null, function() {
          var and__12818__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__12818__auto__)) {
            return p2.call(null, x);
          } else {
            return and__12818__auto__;
          }
        }());
      };
      var ep2__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__12818__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__12818__auto__)) {
            var and__12818__auto____$1 = p1.call(null, y);
            if (cljs.core.truth_(and__12818__auto____$1)) {
              var and__12818__auto____$2 = p2.call(null, x);
              if (cljs.core.truth_(and__12818__auto____$2)) {
                return p2.call(null, y);
              } else {
                return and__12818__auto____$2;
              }
            } else {
              return and__12818__auto____$1;
            }
          } else {
            return and__12818__auto__;
          }
        }());
      };
      var ep2__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__12818__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__12818__auto__)) {
            var and__12818__auto____$1 = p1.call(null, y);
            if (cljs.core.truth_(and__12818__auto____$1)) {
              var and__12818__auto____$2 = p1.call(null, z);
              if (cljs.core.truth_(and__12818__auto____$2)) {
                var and__12818__auto____$3 = p2.call(null, x);
                if (cljs.core.truth_(and__12818__auto____$3)) {
                  var and__12818__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__12818__auto____$4)) {
                    return p2.call(null, z);
                  } else {
                    return and__12818__auto____$4;
                  }
                } else {
                  return and__12818__auto____$3;
                }
              } else {
                return and__12818__auto____$2;
              }
            } else {
              return and__12818__auto____$1;
            }
          } else {
            return and__12818__auto__;
          }
        }());
      };
      var ep2__4 = function() {
        var G__107800__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep2.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__107792_SHARP_) {
            var and__12818__auto__ = p1.call(null, p1__107792_SHARP_);
            if (cljs.core.truth_(and__12818__auto__)) {
              return p2.call(null, p1__107792_SHARP_);
            } else {
              return and__12818__auto__;
            }
          }, args));
        };
        var G__107800 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__107800__delegate.call(this, x, y, z, args);
        };
        G__107800.cljs$lang$maxFixedArity = 3;
        G__107800.cljs$lang$applyTo = function(arglist__107801) {
          var x = cljs.core.first(arglist__107801);
          arglist__107801 = cljs.core.next(arglist__107801);
          var y = cljs.core.first(arglist__107801);
          arglist__107801 = cljs.core.next(arglist__107801);
          var z = cljs.core.first(arglist__107801);
          var args = cljs.core.rest(arglist__107801);
          return G__107800__delegate(x, y, z, args);
        };
        G__107800.cljs$core$IFn$_invoke$arity$variadic = G__107800__delegate;
        return G__107800;
      }();
      ep2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep2__0.call(this);
          case 1:
            return ep2__1.call(this, x);
          case 2:
            return ep2__2.call(this, x, y);
          case 3:
            return ep2__3.call(this, x, y, z);
          default:
            return ep2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep2.cljs$lang$maxFixedArity = 3;
      ep2.cljs$lang$applyTo = ep2__4.cljs$lang$applyTo;
      ep2.cljs$core$IFn$_invoke$arity$0 = ep2__0;
      ep2.cljs$core$IFn$_invoke$arity$1 = ep2__1;
      ep2.cljs$core$IFn$_invoke$arity$2 = ep2__2;
      ep2.cljs$core$IFn$_invoke$arity$3 = ep2__3;
      ep2.cljs$core$IFn$_invoke$arity$variadic = ep2__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep2;
    }();
  };
  var every_pred__3 = function(p1, p2, p3) {
    return function() {
      var ep3 = null;
      var ep3__0 = function() {
        return true;
      };
      var ep3__1 = function(x) {
        return cljs.core.boolean$.call(null, function() {
          var and__12818__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__12818__auto__)) {
            var and__12818__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__12818__auto____$1)) {
              return p3.call(null, x);
            } else {
              return and__12818__auto____$1;
            }
          } else {
            return and__12818__auto__;
          }
        }());
      };
      var ep3__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__12818__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__12818__auto__)) {
            var and__12818__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__12818__auto____$1)) {
              var and__12818__auto____$2 = p3.call(null, x);
              if (cljs.core.truth_(and__12818__auto____$2)) {
                var and__12818__auto____$3 = p1.call(null, y);
                if (cljs.core.truth_(and__12818__auto____$3)) {
                  var and__12818__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__12818__auto____$4)) {
                    return p3.call(null, y);
                  } else {
                    return and__12818__auto____$4;
                  }
                } else {
                  return and__12818__auto____$3;
                }
              } else {
                return and__12818__auto____$2;
              }
            } else {
              return and__12818__auto____$1;
            }
          } else {
            return and__12818__auto__;
          }
        }());
      };
      var ep3__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__12818__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__12818__auto__)) {
            var and__12818__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__12818__auto____$1)) {
              var and__12818__auto____$2 = p3.call(null, x);
              if (cljs.core.truth_(and__12818__auto____$2)) {
                var and__12818__auto____$3 = p1.call(null, y);
                if (cljs.core.truth_(and__12818__auto____$3)) {
                  var and__12818__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__12818__auto____$4)) {
                    var and__12818__auto____$5 = p3.call(null, y);
                    if (cljs.core.truth_(and__12818__auto____$5)) {
                      var and__12818__auto____$6 = p1.call(null, z);
                      if (cljs.core.truth_(and__12818__auto____$6)) {
                        var and__12818__auto____$7 = p2.call(null, z);
                        if (cljs.core.truth_(and__12818__auto____$7)) {
                          return p3.call(null, z);
                        } else {
                          return and__12818__auto____$7;
                        }
                      } else {
                        return and__12818__auto____$6;
                      }
                    } else {
                      return and__12818__auto____$5;
                    }
                  } else {
                    return and__12818__auto____$4;
                  }
                } else {
                  return and__12818__auto____$3;
                }
              } else {
                return and__12818__auto____$2;
              }
            } else {
              return and__12818__auto____$1;
            }
          } else {
            return and__12818__auto__;
          }
        }());
      };
      var ep3__4 = function() {
        var G__107802__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep3.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__107793_SHARP_) {
            var and__12818__auto__ = p1.call(null, p1__107793_SHARP_);
            if (cljs.core.truth_(and__12818__auto__)) {
              var and__12818__auto____$1 = p2.call(null, p1__107793_SHARP_);
              if (cljs.core.truth_(and__12818__auto____$1)) {
                return p3.call(null, p1__107793_SHARP_);
              } else {
                return and__12818__auto____$1;
              }
            } else {
              return and__12818__auto__;
            }
          }, args));
        };
        var G__107802 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__107802__delegate.call(this, x, y, z, args);
        };
        G__107802.cljs$lang$maxFixedArity = 3;
        G__107802.cljs$lang$applyTo = function(arglist__107803) {
          var x = cljs.core.first(arglist__107803);
          arglist__107803 = cljs.core.next(arglist__107803);
          var y = cljs.core.first(arglist__107803);
          arglist__107803 = cljs.core.next(arglist__107803);
          var z = cljs.core.first(arglist__107803);
          var args = cljs.core.rest(arglist__107803);
          return G__107802__delegate(x, y, z, args);
        };
        G__107802.cljs$core$IFn$_invoke$arity$variadic = G__107802__delegate;
        return G__107802;
      }();
      ep3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep3__0.call(this);
          case 1:
            return ep3__1.call(this, x);
          case 2:
            return ep3__2.call(this, x, y);
          case 3:
            return ep3__3.call(this, x, y, z);
          default:
            return ep3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep3.cljs$lang$maxFixedArity = 3;
      ep3.cljs$lang$applyTo = ep3__4.cljs$lang$applyTo;
      ep3.cljs$core$IFn$_invoke$arity$0 = ep3__0;
      ep3.cljs$core$IFn$_invoke$arity$1 = ep3__1;
      ep3.cljs$core$IFn$_invoke$arity$2 = ep3__2;
      ep3.cljs$core$IFn$_invoke$arity$3 = ep3__3;
      ep3.cljs$core$IFn$_invoke$arity$variadic = ep3__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep3;
    }();
  };
  var every_pred__4 = function() {
    var G__107804__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.call(null, p1, p2, p3, ps);
      return function() {
        var epn = null;
        var epn__0 = function() {
          return true;
        };
        var epn__1 = function(x) {
          return cljs.core.every_QMARK_.call(null, function(p1__107794_SHARP_) {
            return p1__107794_SHARP_.call(null, x);
          }, ps__$1);
        };
        var epn__2 = function(x, y) {
          return cljs.core.every_QMARK_.call(null, function(p1__107795_SHARP_) {
            var and__12818__auto__ = p1__107795_SHARP_.call(null, x);
            if (cljs.core.truth_(and__12818__auto__)) {
              return p1__107795_SHARP_.call(null, y);
            } else {
              return and__12818__auto__;
            }
          }, ps__$1);
        };
        var epn__3 = function(x, y, z) {
          return cljs.core.every_QMARK_.call(null, function(p1__107796_SHARP_) {
            var and__12818__auto__ = p1__107796_SHARP_.call(null, x);
            if (cljs.core.truth_(and__12818__auto__)) {
              var and__12818__auto____$1 = p1__107796_SHARP_.call(null, y);
              if (cljs.core.truth_(and__12818__auto____$1)) {
                return p1__107796_SHARP_.call(null, z);
              } else {
                return and__12818__auto____$1;
              }
            } else {
              return and__12818__auto__;
            }
          }, ps__$1);
        };
        var epn__4 = function() {
          var G__107805__delegate = function(x, y, z, args) {
            return cljs.core.boolean$.call(null, epn.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__107797_SHARP_) {
              return cljs.core.every_QMARK_.call(null, p1__107797_SHARP_, args);
            }, ps__$1));
          };
          var G__107805 = function(x, y, z, var_args) {
            var args = null;
            if (arguments.length > 3) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
            }
            return G__107805__delegate.call(this, x, y, z, args);
          };
          G__107805.cljs$lang$maxFixedArity = 3;
          G__107805.cljs$lang$applyTo = function(arglist__107806) {
            var x = cljs.core.first(arglist__107806);
            arglist__107806 = cljs.core.next(arglist__107806);
            var y = cljs.core.first(arglist__107806);
            arglist__107806 = cljs.core.next(arglist__107806);
            var z = cljs.core.first(arglist__107806);
            var args = cljs.core.rest(arglist__107806);
            return G__107805__delegate(x, y, z, args);
          };
          G__107805.cljs$core$IFn$_invoke$arity$variadic = G__107805__delegate;
          return G__107805;
        }();
        epn = function(x, y, z, var_args) {
          var args = var_args;
          switch(arguments.length) {
            case 0:
              return epn__0.call(this);
            case 1:
              return epn__1.call(this, x);
            case 2:
              return epn__2.call(this, x, y);
            case 3:
              return epn__3.call(this, x, y, z);
            default:
              return epn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        epn.cljs$lang$maxFixedArity = 3;
        epn.cljs$lang$applyTo = epn__4.cljs$lang$applyTo;
        epn.cljs$core$IFn$_invoke$arity$0 = epn__0;
        epn.cljs$core$IFn$_invoke$arity$1 = epn__1;
        epn.cljs$core$IFn$_invoke$arity$2 = epn__2;
        epn.cljs$core$IFn$_invoke$arity$3 = epn__3;
        epn.cljs$core$IFn$_invoke$arity$variadic = epn__4.cljs$core$IFn$_invoke$arity$variadic;
        return epn;
      }();
    };
    var G__107804 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__107804__delegate.call(this, p1, p2, p3, ps);
    };
    G__107804.cljs$lang$maxFixedArity = 3;
    G__107804.cljs$lang$applyTo = function(arglist__107807) {
      var p1 = cljs.core.first(arglist__107807);
      arglist__107807 = cljs.core.next(arglist__107807);
      var p2 = cljs.core.first(arglist__107807);
      arglist__107807 = cljs.core.next(arglist__107807);
      var p3 = cljs.core.first(arglist__107807);
      var ps = cljs.core.rest(arglist__107807);
      return G__107804__delegate(p1, p2, p3, ps);
    };
    G__107804.cljs$core$IFn$_invoke$arity$variadic = G__107804__delegate;
    return G__107804;
  }();
  every_pred = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return every_pred__1.call(this, p1);
      case 2:
        return every_pred__2.call(this, p1, p2);
      case 3:
        return every_pred__3.call(this, p1, p2, p3);
      default:
        return every_pred__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  every_pred.cljs$lang$maxFixedArity = 3;
  every_pred.cljs$lang$applyTo = every_pred__4.cljs$lang$applyTo;
  every_pred.cljs$core$IFn$_invoke$arity$1 = every_pred__1;
  every_pred.cljs$core$IFn$_invoke$arity$2 = every_pred__2;
  every_pred.cljs$core$IFn$_invoke$arity$3 = every_pred__3;
  every_pred.cljs$core$IFn$_invoke$arity$variadic = every_pred__4.cljs$core$IFn$_invoke$arity$variadic;
  return every_pred;
}();
cljs.core.some_fn = function() {
  var some_fn = null;
  var some_fn__1 = function(p) {
    return function() {
      var sp1 = null;
      var sp1__0 = function() {
        return null;
      };
      var sp1__1 = function(x) {
        return p.call(null, x);
      };
      var sp1__2 = function(x, y) {
        var or__12830__auto__ = p.call(null, x);
        if (cljs.core.truth_(or__12830__auto__)) {
          return or__12830__auto__;
        } else {
          return p.call(null, y);
        }
      };
      var sp1__3 = function(x, y, z) {
        var or__12830__auto__ = p.call(null, x);
        if (cljs.core.truth_(or__12830__auto__)) {
          return or__12830__auto__;
        } else {
          var or__12830__auto____$1 = p.call(null, y);
          if (cljs.core.truth_(or__12830__auto____$1)) {
            return or__12830__auto____$1;
          } else {
            return p.call(null, z);
          }
        }
      };
      var sp1__4 = function() {
        var G__107814__delegate = function(x, y, z, args) {
          var or__12830__auto__ = sp1.call(null, x, y, z);
          if (cljs.core.truth_(or__12830__auto__)) {
            return or__12830__auto__;
          } else {
            return cljs.core.some.call(null, p, args);
          }
        };
        var G__107814 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__107814__delegate.call(this, x, y, z, args);
        };
        G__107814.cljs$lang$maxFixedArity = 3;
        G__107814.cljs$lang$applyTo = function(arglist__107815) {
          var x = cljs.core.first(arglist__107815);
          arglist__107815 = cljs.core.next(arglist__107815);
          var y = cljs.core.first(arglist__107815);
          arglist__107815 = cljs.core.next(arglist__107815);
          var z = cljs.core.first(arglist__107815);
          var args = cljs.core.rest(arglist__107815);
          return G__107814__delegate(x, y, z, args);
        };
        G__107814.cljs$core$IFn$_invoke$arity$variadic = G__107814__delegate;
        return G__107814;
      }();
      sp1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp1__0.call(this);
          case 1:
            return sp1__1.call(this, x);
          case 2:
            return sp1__2.call(this, x, y);
          case 3:
            return sp1__3.call(this, x, y, z);
          default:
            return sp1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp1.cljs$lang$maxFixedArity = 3;
      sp1.cljs$lang$applyTo = sp1__4.cljs$lang$applyTo;
      sp1.cljs$core$IFn$_invoke$arity$0 = sp1__0;
      sp1.cljs$core$IFn$_invoke$arity$1 = sp1__1;
      sp1.cljs$core$IFn$_invoke$arity$2 = sp1__2;
      sp1.cljs$core$IFn$_invoke$arity$3 = sp1__3;
      sp1.cljs$core$IFn$_invoke$arity$variadic = sp1__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp1;
    }();
  };
  var some_fn__2 = function(p1, p2) {
    return function() {
      var sp2 = null;
      var sp2__0 = function() {
        return null;
      };
      var sp2__1 = function(x) {
        var or__12830__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__12830__auto__)) {
          return or__12830__auto__;
        } else {
          return p2.call(null, x);
        }
      };
      var sp2__2 = function(x, y) {
        var or__12830__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__12830__auto__)) {
          return or__12830__auto__;
        } else {
          var or__12830__auto____$1 = p1.call(null, y);
          if (cljs.core.truth_(or__12830__auto____$1)) {
            return or__12830__auto____$1;
          } else {
            var or__12830__auto____$2 = p2.call(null, x);
            if (cljs.core.truth_(or__12830__auto____$2)) {
              return or__12830__auto____$2;
            } else {
              return p2.call(null, y);
            }
          }
        }
      };
      var sp2__3 = function(x, y, z) {
        var or__12830__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__12830__auto__)) {
          return or__12830__auto__;
        } else {
          var or__12830__auto____$1 = p1.call(null, y);
          if (cljs.core.truth_(or__12830__auto____$1)) {
            return or__12830__auto____$1;
          } else {
            var or__12830__auto____$2 = p1.call(null, z);
            if (cljs.core.truth_(or__12830__auto____$2)) {
              return or__12830__auto____$2;
            } else {
              var or__12830__auto____$3 = p2.call(null, x);
              if (cljs.core.truth_(or__12830__auto____$3)) {
                return or__12830__auto____$3;
              } else {
                var or__12830__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__12830__auto____$4)) {
                  return or__12830__auto____$4;
                } else {
                  return p2.call(null, z);
                }
              }
            }
          }
        }
      };
      var sp2__4 = function() {
        var G__107816__delegate = function(x, y, z, args) {
          var or__12830__auto__ = sp2.call(null, x, y, z);
          if (cljs.core.truth_(or__12830__auto__)) {
            return or__12830__auto__;
          } else {
            return cljs.core.some.call(null, function(p1__107808_SHARP_) {
              var or__12830__auto____$1 = p1.call(null, p1__107808_SHARP_);
              if (cljs.core.truth_(or__12830__auto____$1)) {
                return or__12830__auto____$1;
              } else {
                return p2.call(null, p1__107808_SHARP_);
              }
            }, args);
          }
        };
        var G__107816 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__107816__delegate.call(this, x, y, z, args);
        };
        G__107816.cljs$lang$maxFixedArity = 3;
        G__107816.cljs$lang$applyTo = function(arglist__107817) {
          var x = cljs.core.first(arglist__107817);
          arglist__107817 = cljs.core.next(arglist__107817);
          var y = cljs.core.first(arglist__107817);
          arglist__107817 = cljs.core.next(arglist__107817);
          var z = cljs.core.first(arglist__107817);
          var args = cljs.core.rest(arglist__107817);
          return G__107816__delegate(x, y, z, args);
        };
        G__107816.cljs$core$IFn$_invoke$arity$variadic = G__107816__delegate;
        return G__107816;
      }();
      sp2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp2__0.call(this);
          case 1:
            return sp2__1.call(this, x);
          case 2:
            return sp2__2.call(this, x, y);
          case 3:
            return sp2__3.call(this, x, y, z);
          default:
            return sp2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp2.cljs$lang$maxFixedArity = 3;
      sp2.cljs$lang$applyTo = sp2__4.cljs$lang$applyTo;
      sp2.cljs$core$IFn$_invoke$arity$0 = sp2__0;
      sp2.cljs$core$IFn$_invoke$arity$1 = sp2__1;
      sp2.cljs$core$IFn$_invoke$arity$2 = sp2__2;
      sp2.cljs$core$IFn$_invoke$arity$3 = sp2__3;
      sp2.cljs$core$IFn$_invoke$arity$variadic = sp2__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp2;
    }();
  };
  var some_fn__3 = function(p1, p2, p3) {
    return function() {
      var sp3 = null;
      var sp3__0 = function() {
        return null;
      };
      var sp3__1 = function(x) {
        var or__12830__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__12830__auto__)) {
          return or__12830__auto__;
        } else {
          var or__12830__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__12830__auto____$1)) {
            return or__12830__auto____$1;
          } else {
            return p3.call(null, x);
          }
        }
      };
      var sp3__2 = function(x, y) {
        var or__12830__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__12830__auto__)) {
          return or__12830__auto__;
        } else {
          var or__12830__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__12830__auto____$1)) {
            return or__12830__auto____$1;
          } else {
            var or__12830__auto____$2 = p3.call(null, x);
            if (cljs.core.truth_(or__12830__auto____$2)) {
              return or__12830__auto____$2;
            } else {
              var or__12830__auto____$3 = p1.call(null, y);
              if (cljs.core.truth_(or__12830__auto____$3)) {
                return or__12830__auto____$3;
              } else {
                var or__12830__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__12830__auto____$4)) {
                  return or__12830__auto____$4;
                } else {
                  return p3.call(null, y);
                }
              }
            }
          }
        }
      };
      var sp3__3 = function(x, y, z) {
        var or__12830__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__12830__auto__)) {
          return or__12830__auto__;
        } else {
          var or__12830__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__12830__auto____$1)) {
            return or__12830__auto____$1;
          } else {
            var or__12830__auto____$2 = p3.call(null, x);
            if (cljs.core.truth_(or__12830__auto____$2)) {
              return or__12830__auto____$2;
            } else {
              var or__12830__auto____$3 = p1.call(null, y);
              if (cljs.core.truth_(or__12830__auto____$3)) {
                return or__12830__auto____$3;
              } else {
                var or__12830__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__12830__auto____$4)) {
                  return or__12830__auto____$4;
                } else {
                  var or__12830__auto____$5 = p3.call(null, y);
                  if (cljs.core.truth_(or__12830__auto____$5)) {
                    return or__12830__auto____$5;
                  } else {
                    var or__12830__auto____$6 = p1.call(null, z);
                    if (cljs.core.truth_(or__12830__auto____$6)) {
                      return or__12830__auto____$6;
                    } else {
                      var or__12830__auto____$7 = p2.call(null, z);
                      if (cljs.core.truth_(or__12830__auto____$7)) {
                        return or__12830__auto____$7;
                      } else {
                        return p3.call(null, z);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      var sp3__4 = function() {
        var G__107818__delegate = function(x, y, z, args) {
          var or__12830__auto__ = sp3.call(null, x, y, z);
          if (cljs.core.truth_(or__12830__auto__)) {
            return or__12830__auto__;
          } else {
            return cljs.core.some.call(null, function(p1__107809_SHARP_) {
              var or__12830__auto____$1 = p1.call(null, p1__107809_SHARP_);
              if (cljs.core.truth_(or__12830__auto____$1)) {
                return or__12830__auto____$1;
              } else {
                var or__12830__auto____$2 = p2.call(null, p1__107809_SHARP_);
                if (cljs.core.truth_(or__12830__auto____$2)) {
                  return or__12830__auto____$2;
                } else {
                  return p3.call(null, p1__107809_SHARP_);
                }
              }
            }, args);
          }
        };
        var G__107818 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__107818__delegate.call(this, x, y, z, args);
        };
        G__107818.cljs$lang$maxFixedArity = 3;
        G__107818.cljs$lang$applyTo = function(arglist__107819) {
          var x = cljs.core.first(arglist__107819);
          arglist__107819 = cljs.core.next(arglist__107819);
          var y = cljs.core.first(arglist__107819);
          arglist__107819 = cljs.core.next(arglist__107819);
          var z = cljs.core.first(arglist__107819);
          var args = cljs.core.rest(arglist__107819);
          return G__107818__delegate(x, y, z, args);
        };
        G__107818.cljs$core$IFn$_invoke$arity$variadic = G__107818__delegate;
        return G__107818;
      }();
      sp3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp3__0.call(this);
          case 1:
            return sp3__1.call(this, x);
          case 2:
            return sp3__2.call(this, x, y);
          case 3:
            return sp3__3.call(this, x, y, z);
          default:
            return sp3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp3.cljs$lang$maxFixedArity = 3;
      sp3.cljs$lang$applyTo = sp3__4.cljs$lang$applyTo;
      sp3.cljs$core$IFn$_invoke$arity$0 = sp3__0;
      sp3.cljs$core$IFn$_invoke$arity$1 = sp3__1;
      sp3.cljs$core$IFn$_invoke$arity$2 = sp3__2;
      sp3.cljs$core$IFn$_invoke$arity$3 = sp3__3;
      sp3.cljs$core$IFn$_invoke$arity$variadic = sp3__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp3;
    }();
  };
  var some_fn__4 = function() {
    var G__107820__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.call(null, p1, p2, p3, ps);
      return function() {
        var spn = null;
        var spn__0 = function() {
          return null;
        };
        var spn__1 = function(x) {
          return cljs.core.some.call(null, function(p1__107810_SHARP_) {
            return p1__107810_SHARP_.call(null, x);
          }, ps__$1);
        };
        var spn__2 = function(x, y) {
          return cljs.core.some.call(null, function(p1__107811_SHARP_) {
            var or__12830__auto__ = p1__107811_SHARP_.call(null, x);
            if (cljs.core.truth_(or__12830__auto__)) {
              return or__12830__auto__;
            } else {
              return p1__107811_SHARP_.call(null, y);
            }
          }, ps__$1);
        };
        var spn__3 = function(x, y, z) {
          return cljs.core.some.call(null, function(p1__107812_SHARP_) {
            var or__12830__auto__ = p1__107812_SHARP_.call(null, x);
            if (cljs.core.truth_(or__12830__auto__)) {
              return or__12830__auto__;
            } else {
              var or__12830__auto____$1 = p1__107812_SHARP_.call(null, y);
              if (cljs.core.truth_(or__12830__auto____$1)) {
                return or__12830__auto____$1;
              } else {
                return p1__107812_SHARP_.call(null, z);
              }
            }
          }, ps__$1);
        };
        var spn__4 = function() {
          var G__107821__delegate = function(x, y, z, args) {
            var or__12830__auto__ = spn.call(null, x, y, z);
            if (cljs.core.truth_(or__12830__auto__)) {
              return or__12830__auto__;
            } else {
              return cljs.core.some.call(null, function(p1__107813_SHARP_) {
                return cljs.core.some.call(null, p1__107813_SHARP_, args);
              }, ps__$1);
            }
          };
          var G__107821 = function(x, y, z, var_args) {
            var args = null;
            if (arguments.length > 3) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
            }
            return G__107821__delegate.call(this, x, y, z, args);
          };
          G__107821.cljs$lang$maxFixedArity = 3;
          G__107821.cljs$lang$applyTo = function(arglist__107822) {
            var x = cljs.core.first(arglist__107822);
            arglist__107822 = cljs.core.next(arglist__107822);
            var y = cljs.core.first(arglist__107822);
            arglist__107822 = cljs.core.next(arglist__107822);
            var z = cljs.core.first(arglist__107822);
            var args = cljs.core.rest(arglist__107822);
            return G__107821__delegate(x, y, z, args);
          };
          G__107821.cljs$core$IFn$_invoke$arity$variadic = G__107821__delegate;
          return G__107821;
        }();
        spn = function(x, y, z, var_args) {
          var args = var_args;
          switch(arguments.length) {
            case 0:
              return spn__0.call(this);
            case 1:
              return spn__1.call(this, x);
            case 2:
              return spn__2.call(this, x, y);
            case 3:
              return spn__3.call(this, x, y, z);
            default:
              return spn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        spn.cljs$lang$maxFixedArity = 3;
        spn.cljs$lang$applyTo = spn__4.cljs$lang$applyTo;
        spn.cljs$core$IFn$_invoke$arity$0 = spn__0;
        spn.cljs$core$IFn$_invoke$arity$1 = spn__1;
        spn.cljs$core$IFn$_invoke$arity$2 = spn__2;
        spn.cljs$core$IFn$_invoke$arity$3 = spn__3;
        spn.cljs$core$IFn$_invoke$arity$variadic = spn__4.cljs$core$IFn$_invoke$arity$variadic;
        return spn;
      }();
    };
    var G__107820 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__107820__delegate.call(this, p1, p2, p3, ps);
    };
    G__107820.cljs$lang$maxFixedArity = 3;
    G__107820.cljs$lang$applyTo = function(arglist__107823) {
      var p1 = cljs.core.first(arglist__107823);
      arglist__107823 = cljs.core.next(arglist__107823);
      var p2 = cljs.core.first(arglist__107823);
      arglist__107823 = cljs.core.next(arglist__107823);
      var p3 = cljs.core.first(arglist__107823);
      var ps = cljs.core.rest(arglist__107823);
      return G__107820__delegate(p1, p2, p3, ps);
    };
    G__107820.cljs$core$IFn$_invoke$arity$variadic = G__107820__delegate;
    return G__107820;
  }();
  some_fn = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return some_fn__1.call(this, p1);
      case 2:
        return some_fn__2.call(this, p1, p2);
      case 3:
        return some_fn__3.call(this, p1, p2, p3);
      default:
        return some_fn__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  some_fn.cljs$lang$maxFixedArity = 3;
  some_fn.cljs$lang$applyTo = some_fn__4.cljs$lang$applyTo;
  some_fn.cljs$core$IFn$_invoke$arity$1 = some_fn__1;
  some_fn.cljs$core$IFn$_invoke$arity$2 = some_fn__2;
  some_fn.cljs$core$IFn$_invoke$arity$3 = some_fn__3;
  some_fn.cljs$core$IFn$_invoke$arity$variadic = some_fn__4.cljs$core$IFn$_invoke$arity$variadic;
  return some_fn;
}();
cljs.core.map = function() {
  var map = null;
  var map__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__13678__auto___107825 = size;
          var i_107826 = 0;
          while (true) {
            if (i_107826 < n__13678__auto___107825) {
              cljs.core.chunk_append.call(null, b, f.call(null, cljs.core._nth.call(null, c, i_107826)));
              var G__107827 = i_107826 + 1;
              i_107826 = G__107827;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), map.call(null, f, cljs.core.chunk_rest.call(null, s)));
        } else {
          return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s)), map.call(null, f, cljs.core.rest.call(null, s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var map__3 = function(f, c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if (s1 && s2) {
        return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s1), cljs.core.first.call(null, s2)), map.call(null, f, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2)));
      } else {
        return null;
      }
    }, null, null);
  };
  var map__4 = function(f, c1, c2, c3) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      var s3 = cljs.core.seq.call(null, c3);
      if (s1 && (s2 && s3)) {
        return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s1), cljs.core.first.call(null, s2), cljs.core.first.call(null, s3)), map.call(null, f, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2), cljs.core.rest.call(null, s3)));
      } else {
        return null;
      }
    }, null, null);
  };
  var map__5 = function() {
    var G__107828__delegate = function(f, c1, c2, c3, colls) {
      var step = function step(cs) {
        return new cljs.core.LazySeq(null, function() {
          var ss = map.call(null, cljs.core.seq, cs);
          if (cljs.core.every_QMARK_.call(null, cljs.core.identity, ss)) {
            return cljs.core.cons.call(null, map.call(null, cljs.core.first, ss), step.call(null, map.call(null, cljs.core.rest, ss)));
          } else {
            return null;
          }
        }, null, null);
      };
      return map.call(null, function(p1__107824_SHARP_) {
        return cljs.core.apply.call(null, f, p1__107824_SHARP_);
      }, step.call(null, cljs.core.conj.call(null, colls, c3, c2, c1)));
    };
    var G__107828 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__107828__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__107828.cljs$lang$maxFixedArity = 4;
    G__107828.cljs$lang$applyTo = function(arglist__107829) {
      var f = cljs.core.first(arglist__107829);
      arglist__107829 = cljs.core.next(arglist__107829);
      var c1 = cljs.core.first(arglist__107829);
      arglist__107829 = cljs.core.next(arglist__107829);
      var c2 = cljs.core.first(arglist__107829);
      arglist__107829 = cljs.core.next(arglist__107829);
      var c3 = cljs.core.first(arglist__107829);
      var colls = cljs.core.rest(arglist__107829);
      return G__107828__delegate(f, c1, c2, c3, colls);
    };
    G__107828.cljs$core$IFn$_invoke$arity$variadic = G__107828__delegate;
    return G__107828;
  }();
  map = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return map__2.call(this, f, c1);
      case 3:
        return map__3.call(this, f, c1, c2);
      case 4:
        return map__4.call(this, f, c1, c2, c3);
      default:
        return map__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  map.cljs$lang$maxFixedArity = 4;
  map.cljs$lang$applyTo = map__5.cljs$lang$applyTo;
  map.cljs$core$IFn$_invoke$arity$2 = map__2;
  map.cljs$core$IFn$_invoke$arity$3 = map__3;
  map.cljs$core$IFn$_invoke$arity$4 = map__4;
  map.cljs$core$IFn$_invoke$arity$variadic = map__5.cljs$core$IFn$_invoke$arity$variadic;
  return map;
}();
cljs.core.take = function take(n, coll) {
  return new cljs.core.LazySeq(null, function() {
    if (n > 0) {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        return cljs.core.cons.call(null, cljs.core.first.call(null, s), take.call(null, n - 1, cljs.core.rest.call(null, s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.drop = function drop(n, coll) {
  var step = function(n__$1, coll__$1) {
    while (true) {
      var s = cljs.core.seq.call(null, coll__$1);
      if (n__$1 > 0 && s) {
        var G__107830 = n__$1 - 1;
        var G__107831 = cljs.core.rest.call(null, s);
        n__$1 = G__107830;
        coll__$1 = G__107831;
        continue;
      } else {
        return s;
      }
      break;
    }
  };
  return new cljs.core.LazySeq(null, function() {
    return step.call(null, n, coll);
  }, null, null);
};
cljs.core.drop_last = function() {
  var drop_last = null;
  var drop_last__1 = function(s) {
    return drop_last.call(null, 1, s);
  };
  var drop_last__2 = function(n, s) {
    return cljs.core.map.call(null, function(x, _) {
      return x;
    }, s, cljs.core.drop.call(null, n, s));
  };
  drop_last = function(n, s) {
    switch(arguments.length) {
      case 1:
        return drop_last__1.call(this, n);
      case 2:
        return drop_last__2.call(this, n, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  drop_last.cljs$core$IFn$_invoke$arity$1 = drop_last__1;
  drop_last.cljs$core$IFn$_invoke$arity$2 = drop_last__2;
  return drop_last;
}();
cljs.core.take_last = function take_last(n, coll) {
  var s = cljs.core.seq.call(null, coll);
  var lead = cljs.core.seq.call(null, cljs.core.drop.call(null, n, coll));
  while (true) {
    if (lead) {
      var G__107832 = cljs.core.next.call(null, s);
      var G__107833 = cljs.core.next.call(null, lead);
      s = G__107832;
      lead = G__107833;
      continue;
    } else {
      return s;
    }
    break;
  }
};
cljs.core.drop_while = function drop_while(pred, coll) {
  var step = function(pred__$1, coll__$1) {
    while (true) {
      var s = cljs.core.seq.call(null, coll__$1);
      if (cljs.core.truth_(function() {
        var and__12818__auto__ = s;
        if (and__12818__auto__) {
          return pred__$1.call(null, cljs.core.first.call(null, s));
        } else {
          return and__12818__auto__;
        }
      }())) {
        var G__107834 = pred__$1;
        var G__107835 = cljs.core.rest.call(null, s);
        pred__$1 = G__107834;
        coll__$1 = G__107835;
        continue;
      } else {
        return s;
      }
      break;
    }
  };
  return new cljs.core.LazySeq(null, function() {
    return step.call(null, pred, coll);
  }, null, null);
};
cljs.core.cycle = function cycle(coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      return cljs.core.concat.call(null, s, cycle.call(null, s));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.split_at = function split_at(n, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take.call(null, n, coll), cljs.core.drop.call(null, n, coll)], null);
};
cljs.core.repeat = function() {
  var repeat = null;
  var repeat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, x, repeat.call(null, x));
    }, null, null);
  };
  var repeat__2 = function(n, x) {
    return cljs.core.take.call(null, n, repeat.call(null, x));
  };
  repeat = function(n, x) {
    switch(arguments.length) {
      case 1:
        return repeat__1.call(this, n);
      case 2:
        return repeat__2.call(this, n, x);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeat.cljs$core$IFn$_invoke$arity$1 = repeat__1;
  repeat.cljs$core$IFn$_invoke$arity$2 = repeat__2;
  return repeat;
}();
cljs.core.replicate = function replicate(n, x) {
  return cljs.core.take.call(null, n, cljs.core.repeat.call(null, x));
};
cljs.core.repeatedly = function() {
  var repeatedly = null;
  var repeatedly__1 = function(f) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, f.call(null), repeatedly.call(null, f));
    }, null, null);
  };
  var repeatedly__2 = function(n, f) {
    return cljs.core.take.call(null, n, repeatedly.call(null, f));
  };
  repeatedly = function(n, f) {
    switch(arguments.length) {
      case 1:
        return repeatedly__1.call(this, n);
      case 2:
        return repeatedly__2.call(this, n, f);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeatedly.cljs$core$IFn$_invoke$arity$1 = repeatedly__1;
  repeatedly.cljs$core$IFn$_invoke$arity$2 = repeatedly__2;
  return repeatedly;
}();
cljs.core.iterate = function iterate(f, x) {
  return cljs.core.cons.call(null, x, new cljs.core.LazySeq(null, function() {
    return iterate.call(null, f, f.call(null, x));
  }, null, null));
};
cljs.core.interleave = function() {
  var interleave = null;
  var interleave__2 = function(c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if (s1 && s2) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, s1), cljs.core.cons.call(null, cljs.core.first.call(null, s2), interleave.call(null, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2))));
      } else {
        return null;
      }
    }, null, null);
  };
  var interleave__3 = function() {
    var G__107836__delegate = function(c1, c2, colls) {
      return new cljs.core.LazySeq(null, function() {
        var ss = cljs.core.map.call(null, cljs.core.seq, cljs.core.conj.call(null, colls, c2, c1));
        if (cljs.core.every_QMARK_.call(null, cljs.core.identity, ss)) {
          return cljs.core.concat.call(null, cljs.core.map.call(null, cljs.core.first, ss), cljs.core.apply.call(null, interleave, cljs.core.map.call(null, cljs.core.rest, ss)));
        } else {
          return null;
        }
      }, null, null);
    };
    var G__107836 = function(c1, c2, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__107836__delegate.call(this, c1, c2, colls);
    };
    G__107836.cljs$lang$maxFixedArity = 2;
    G__107836.cljs$lang$applyTo = function(arglist__107837) {
      var c1 = cljs.core.first(arglist__107837);
      arglist__107837 = cljs.core.next(arglist__107837);
      var c2 = cljs.core.first(arglist__107837);
      var colls = cljs.core.rest(arglist__107837);
      return G__107836__delegate(c1, c2, colls);
    };
    G__107836.cljs$core$IFn$_invoke$arity$variadic = G__107836__delegate;
    return G__107836;
  }();
  interleave = function(c1, c2, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return interleave__2.call(this, c1, c2);
      default:
        return interleave__3.cljs$core$IFn$_invoke$arity$variadic(c1, c2, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  interleave.cljs$lang$maxFixedArity = 2;
  interleave.cljs$lang$applyTo = interleave__3.cljs$lang$applyTo;
  interleave.cljs$core$IFn$_invoke$arity$2 = interleave__2;
  interleave.cljs$core$IFn$_invoke$arity$variadic = interleave__3.cljs$core$IFn$_invoke$arity$variadic;
  return interleave;
}();
cljs.core.interpose = function interpose(sep, coll) {
  return cljs.core.drop.call(null, 1, cljs.core.interleave.call(null, cljs.core.repeat.call(null, sep), coll));
};
cljs.core.flatten1 = function flatten1(colls) {
  var cat = function cat(coll, colls__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4090__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4090__auto__) {
        var coll__$1 = temp__4090__auto__;
        return cljs.core.cons.call(null, cljs.core.first.call(null, coll__$1), cat.call(null, cljs.core.rest.call(null, coll__$1), colls__$1));
      } else {
        if (cljs.core.seq.call(null, colls__$1)) {
          return cat.call(null, cljs.core.first.call(null, colls__$1), cljs.core.rest.call(null, colls__$1));
        } else {
          return null;
        }
      }
    }, null, null);
  };
  return cat.call(null, null, colls);
};
cljs.core.mapcat = function() {
  var mapcat = null;
  var mapcat__2 = function(f, coll) {
    return cljs.core.flatten1.call(null, cljs.core.map.call(null, f, coll));
  };
  var mapcat__3 = function() {
    var G__107838__delegate = function(f, coll, colls) {
      return cljs.core.flatten1.call(null, cljs.core.apply.call(null, cljs.core.map, f, coll, colls));
    };
    var G__107838 = function(f, coll, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__107838__delegate.call(this, f, coll, colls);
    };
    G__107838.cljs$lang$maxFixedArity = 2;
    G__107838.cljs$lang$applyTo = function(arglist__107839) {
      var f = cljs.core.first(arglist__107839);
      arglist__107839 = cljs.core.next(arglist__107839);
      var coll = cljs.core.first(arglist__107839);
      var colls = cljs.core.rest(arglist__107839);
      return G__107838__delegate(f, coll, colls);
    };
    G__107838.cljs$core$IFn$_invoke$arity$variadic = G__107838__delegate;
    return G__107838;
  }();
  mapcat = function(f, coll, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return mapcat__2.call(this, f, coll);
      default:
        return mapcat__3.cljs$core$IFn$_invoke$arity$variadic(f, coll, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat.cljs$lang$maxFixedArity = 2;
  mapcat.cljs$lang$applyTo = mapcat__3.cljs$lang$applyTo;
  mapcat.cljs$core$IFn$_invoke$arity$2 = mapcat__2;
  mapcat.cljs$core$IFn$_invoke$arity$variadic = mapcat__3.cljs$core$IFn$_invoke$arity$variadic;
  return mapcat;
}();
cljs.core.filter = function filter(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
        var c = cljs.core.chunk_first.call(null, s);
        var size = cljs.core.count.call(null, c);
        var b = cljs.core.chunk_buffer.call(null, size);
        var n__13678__auto___107840 = size;
        var i_107841 = 0;
        while (true) {
          if (i_107841 < n__13678__auto___107840) {
            if (cljs.core.truth_(pred.call(null, cljs.core._nth.call(null, c, i_107841)))) {
              cljs.core.chunk_append.call(null, b, cljs.core._nth.call(null, c, i_107841));
            } else {
            }
            var G__107842 = i_107841 + 1;
            i_107841 = G__107842;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), filter.call(null, pred, cljs.core.chunk_rest.call(null, s)));
      } else {
        var f = cljs.core.first.call(null, s);
        var r = cljs.core.rest.call(null, s);
        if (cljs.core.truth_(pred.call(null, f))) {
          return cljs.core.cons.call(null, f, filter.call(null, pred, r));
        } else {
          return filter.call(null, pred, r);
        }
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.remove = function remove(pred, coll) {
  return cljs.core.filter.call(null, cljs.core.complement.call(null, pred), coll);
};
cljs.core.tree_seq = function tree_seq(branch_QMARK_, children, root) {
  var walk = function walk(node) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, node, cljs.core.truth_(branch_QMARK_.call(null, node)) ? cljs.core.mapcat.call(null, walk, children.call(null, node)) : null);
    }, null, null);
  };
  return walk.call(null, root);
};
cljs.core.flatten = function flatten(x) {
  return cljs.core.filter.call(null, function(p1__107843_SHARP_) {
    return!cljs.core.sequential_QMARK_.call(null, p1__107843_SHARP_);
  }, cljs.core.rest.call(null, cljs.core.tree_seq.call(null, cljs.core.sequential_QMARK_, cljs.core.seq, x)));
};
cljs.core.into = function into(to, from) {
  if (!(to == null)) {
    if (function() {
      var G__107845 = to;
      if (G__107845) {
        var bit__13473__auto__ = G__107845.cljs$lang$protocol_mask$partition1$ & 4;
        if (bit__13473__auto__ || G__107845.cljs$core$IEditableCollection$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, cljs.core._conj_BANG_, cljs.core.transient$.call(null, to), from));
    } else {
      return cljs.core.reduce.call(null, cljs.core._conj, to, from);
    }
  } else {
    return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, from);
  }
};
cljs.core.mapv = function() {
  var mapv = null;
  var mapv__2 = function(f, coll) {
    return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(v, o) {
      return cljs.core.conj_BANG_.call(null, v, f.call(null, o));
    }, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), coll));
  };
  var mapv__3 = function(f, c1, c2) {
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, f, c1, c2));
  };
  var mapv__4 = function(f, c1, c2, c3) {
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, f, c1, c2, c3));
  };
  var mapv__5 = function() {
    var G__107846__delegate = function(f, c1, c2, c3, colls) {
      return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.apply.call(null, cljs.core.map, f, c1, c2, c3, colls));
    };
    var G__107846 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__107846__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__107846.cljs$lang$maxFixedArity = 4;
    G__107846.cljs$lang$applyTo = function(arglist__107847) {
      var f = cljs.core.first(arglist__107847);
      arglist__107847 = cljs.core.next(arglist__107847);
      var c1 = cljs.core.first(arglist__107847);
      arglist__107847 = cljs.core.next(arglist__107847);
      var c2 = cljs.core.first(arglist__107847);
      arglist__107847 = cljs.core.next(arglist__107847);
      var c3 = cljs.core.first(arglist__107847);
      var colls = cljs.core.rest(arglist__107847);
      return G__107846__delegate(f, c1, c2, c3, colls);
    };
    G__107846.cljs$core$IFn$_invoke$arity$variadic = G__107846__delegate;
    return G__107846;
  }();
  mapv = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return mapv__2.call(this, f, c1);
      case 3:
        return mapv__3.call(this, f, c1, c2);
      case 4:
        return mapv__4.call(this, f, c1, c2, c3);
      default:
        return mapv__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapv.cljs$lang$maxFixedArity = 4;
  mapv.cljs$lang$applyTo = mapv__5.cljs$lang$applyTo;
  mapv.cljs$core$IFn$_invoke$arity$2 = mapv__2;
  mapv.cljs$core$IFn$_invoke$arity$3 = mapv__3;
  mapv.cljs$core$IFn$_invoke$arity$4 = mapv__4;
  mapv.cljs$core$IFn$_invoke$arity$variadic = mapv__5.cljs$core$IFn$_invoke$arity$variadic;
  return mapv;
}();
cljs.core.filterv = function filterv(pred, coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(v, o) {
    if (cljs.core.truth_(pred.call(null, o))) {
      return cljs.core.conj_BANG_.call(null, v, o);
    } else {
      return v;
    }
  }, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.partition = function() {
  var partition = null;
  var partition__2 = function(n, coll) {
    return partition.call(null, n, n, coll);
  };
  var partition__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        var p = cljs.core.take.call(null, n, s);
        if (n === cljs.core.count.call(null, p)) {
          return cljs.core.cons.call(null, p, partition.call(null, n, step, cljs.core.drop.call(null, step, s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var partition__4 = function(n, step, pad, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        var p = cljs.core.take.call(null, n, s);
        if (n === cljs.core.count.call(null, p)) {
          return cljs.core.cons.call(null, p, partition.call(null, n, step, pad, cljs.core.drop.call(null, step, s)));
        } else {
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.take.call(null, n, cljs.core.concat.call(null, p, pad)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  partition = function(n, step, pad, coll) {
    switch(arguments.length) {
      case 2:
        return partition__2.call(this, n, step);
      case 3:
        return partition__3.call(this, n, step, pad);
      case 4:
        return partition__4.call(this, n, step, pad, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition.cljs$core$IFn$_invoke$arity$2 = partition__2;
  partition.cljs$core$IFn$_invoke$arity$3 = partition__3;
  partition.cljs$core$IFn$_invoke$arity$4 = partition__4;
  return partition;
}();
cljs.core.get_in = function() {
  var get_in = null;
  var get_in__2 = function(m, ks) {
    return get_in.call(null, m, ks, null);
  };
  var get_in__3 = function(m, ks, not_found) {
    var sentinel = cljs.core.lookup_sentinel;
    var m__$1 = m;
    var ks__$1 = cljs.core.seq.call(null, ks);
    while (true) {
      if (ks__$1) {
        if (!function() {
          var G__107849 = m__$1;
          if (G__107849) {
            var bit__13480__auto__ = G__107849.cljs$lang$protocol_mask$partition0$ & 256;
            if (bit__13480__auto__ || G__107849.cljs$core$ILookup$) {
              return true;
            } else {
              if (!G__107849.cljs$lang$protocol_mask$partition0$) {
                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, G__107849);
              } else {
                return false;
              }
            }
          } else {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, G__107849);
          }
        }()) {
          return not_found;
        } else {
          var m__$2 = cljs.core.get.call(null, m__$1, cljs.core.first.call(null, ks__$1), sentinel);
          if (sentinel === m__$2) {
            return not_found;
          } else {
            var G__107850 = sentinel;
            var G__107851 = m__$2;
            var G__107852 = cljs.core.next.call(null, ks__$1);
            sentinel = G__107850;
            m__$1 = G__107851;
            ks__$1 = G__107852;
            continue;
          }
        }
      } else {
        return m__$1;
      }
      break;
    }
  };
  get_in = function(m, ks, not_found) {
    switch(arguments.length) {
      case 2:
        return get_in__2.call(this, m, ks);
      case 3:
        return get_in__3.call(this, m, ks, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_in.cljs$core$IFn$_invoke$arity$2 = get_in__2;
  get_in.cljs$core$IFn$_invoke$arity$3 = get_in__3;
  return get_in;
}();
cljs.core.assoc_in = function assoc_in(m, p__107853, v) {
  var vec__107855 = p__107853;
  var k = cljs.core.nth.call(null, vec__107855, 0, null);
  var ks = cljs.core.nthnext.call(null, vec__107855, 1);
  if (ks) {
    return cljs.core.assoc.call(null, m, k, assoc_in.call(null, cljs.core.get.call(null, m, k), ks, v));
  } else {
    return cljs.core.assoc.call(null, m, k, v);
  }
};
cljs.core.update_in = function() {
  var update_in = null;
  var update_in__3 = function(m, p__107856, f) {
    var vec__107866 = p__107856;
    var k = cljs.core.nth.call(null, vec__107866, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__107866, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k)));
    }
  };
  var update_in__4 = function(m, p__107857, f, a) {
    var vec__107867 = p__107857;
    var k = cljs.core.nth.call(null, vec__107867, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__107867, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a));
    }
  };
  var update_in__5 = function(m, p__107858, f, a, b) {
    var vec__107868 = p__107858;
    var k = cljs.core.nth.call(null, vec__107868, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__107868, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a, b));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a, b));
    }
  };
  var update_in__6 = function(m, p__107859, f, a, b, c) {
    var vec__107869 = p__107859;
    var k = cljs.core.nth.call(null, vec__107869, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__107869, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a, b, c));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a, b, c));
    }
  };
  var update_in__7 = function() {
    var G__107871__delegate = function(m, p__107860, f, a, b, c, args) {
      var vec__107870 = p__107860;
      var k = cljs.core.nth.call(null, vec__107870, 0, null);
      var ks = cljs.core.nthnext.call(null, vec__107870, 1);
      if (ks) {
        return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, update_in, cljs.core.get.call(null, m, k), ks, f, a, b, c, args));
      } else {
        return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, f, cljs.core.get.call(null, m, k), a, b, c, args));
      }
    };
    var G__107871 = function(m, p__107860, f, a, b, c, var_args) {
      var args = null;
      if (arguments.length > 6) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 6), 0);
      }
      return G__107871__delegate.call(this, m, p__107860, f, a, b, c, args);
    };
    G__107871.cljs$lang$maxFixedArity = 6;
    G__107871.cljs$lang$applyTo = function(arglist__107872) {
      var m = cljs.core.first(arglist__107872);
      arglist__107872 = cljs.core.next(arglist__107872);
      var p__107860 = cljs.core.first(arglist__107872);
      arglist__107872 = cljs.core.next(arglist__107872);
      var f = cljs.core.first(arglist__107872);
      arglist__107872 = cljs.core.next(arglist__107872);
      var a = cljs.core.first(arglist__107872);
      arglist__107872 = cljs.core.next(arglist__107872);
      var b = cljs.core.first(arglist__107872);
      arglist__107872 = cljs.core.next(arglist__107872);
      var c = cljs.core.first(arglist__107872);
      var args = cljs.core.rest(arglist__107872);
      return G__107871__delegate(m, p__107860, f, a, b, c, args);
    };
    G__107871.cljs$core$IFn$_invoke$arity$variadic = G__107871__delegate;
    return G__107871;
  }();
  update_in = function(m, p__107860, f, a, b, c, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 3:
        return update_in__3.call(this, m, p__107860, f);
      case 4:
        return update_in__4.call(this, m, p__107860, f, a);
      case 5:
        return update_in__5.call(this, m, p__107860, f, a, b);
      case 6:
        return update_in__6.call(this, m, p__107860, f, a, b, c);
      default:
        return update_in__7.cljs$core$IFn$_invoke$arity$variadic(m, p__107860, f, a, b, c, cljs.core.array_seq(arguments, 6));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  update_in.cljs$lang$maxFixedArity = 6;
  update_in.cljs$lang$applyTo = update_in__7.cljs$lang$applyTo;
  update_in.cljs$core$IFn$_invoke$arity$3 = update_in__3;
  update_in.cljs$core$IFn$_invoke$arity$4 = update_in__4;
  update_in.cljs$core$IFn$_invoke$arity$5 = update_in__5;
  update_in.cljs$core$IFn$_invoke$arity$6 = update_in__6;
  update_in.cljs$core$IFn$_invoke$arity$variadic = update_in__7.cljs$core$IFn$_invoke$arity$variadic;
  return update_in;
}();
cljs.core.VectorNode = function(edit, arr) {
  this.edit = edit;
  this.arr = arr;
};
cljs.core.VectorNode.cljs$lang$type = true;
cljs.core.VectorNode.cljs$lang$ctorStr = "cljs.core/VectorNode";
cljs.core.VectorNode.cljs$lang$ctorPrWriter = function(this__13400__auto__, writer__13401__auto__, opts__13402__auto__) {
  return cljs.core._write.call(null, writer__13401__auto__, "cljs.core/VectorNode");
};
cljs.core.__GT_VectorNode = function __GT_VectorNode(edit, arr) {
  return new cljs.core.VectorNode(edit, arr);
};
cljs.core.pv_fresh_node = function pv_fresh_node(edit) {
  return new cljs.core.VectorNode(edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
};
cljs.core.pv_aget = function pv_aget(node, idx) {
  return node.arr[idx];
};
cljs.core.pv_aset = function pv_aset(node, idx, val) {
  return node.arr[idx] = val;
};
cljs.core.pv_clone_node = function pv_clone_node(node) {
  return new cljs.core.VectorNode(node.edit, cljs.core.aclone.call(null, node.arr));
};
cljs.core.tail_off = function tail_off(pv) {
  var cnt = pv.cnt;
  if (cnt < 32) {
    return 0;
  } else {
    return cnt - 1 >>> 5 << 5;
  }
};
cljs.core.new_path = function new_path(edit, level, node) {
  var ll = level;
  var ret = node;
  while (true) {
    if (ll === 0) {
      return ret;
    } else {
      var embed = ret;
      var r = cljs.core.pv_fresh_node.call(null, edit);
      var _ = cljs.core.pv_aset.call(null, r, 0, embed);
      var G__107873 = ll - 5;
      var G__107874 = r;
      ll = G__107873;
      ret = G__107874;
      continue;
    }
    break;
  }
};
cljs.core.push_tail = function push_tail(pv, level, parent, tailnode) {
  var ret = cljs.core.pv_clone_node.call(null, parent);
  var subidx = pv.cnt - 1 >>> level & 31;
  if (5 === level) {
    cljs.core.pv_aset.call(null, ret, subidx, tailnode);
    return ret;
  } else {
    var child = cljs.core.pv_aget.call(null, parent, subidx);
    if (!(child == null)) {
      var node_to_insert = push_tail.call(null, pv, level - 5, child, tailnode);
      cljs.core.pv_aset.call(null, ret, subidx, node_to_insert);
      return ret;
    } else {
      var node_to_insert = cljs.core.new_path.call(null, null, level - 5, tailnode);
      cljs.core.pv_aset.call(null, ret, subidx, node_to_insert);
      return ret;
    }
  }
};
cljs.core.vector_index_out_of_bounds = function vector_index_out_of_bounds(i, cnt) {
  throw new Error([cljs.core.str("No item "), cljs.core.str(i), cljs.core.str(" in vector of length "), cljs.core.str(cnt)].join(""));
};
cljs.core.array_for = function array_for(pv, i) {
  if (0 <= i && i < pv.cnt) {
    if (i >= cljs.core.tail_off.call(null, pv)) {
      return pv.tail;
    } else {
      var node = pv.root;
      var level = pv.shift;
      while (true) {
        if (level > 0) {
          var G__107875 = cljs.core.pv_aget.call(null, node, i >>> level & 31);
          var G__107876 = level - 5;
          node = G__107875;
          level = G__107876;
          continue;
        } else {
          return node.arr;
        }
        break;
      }
    }
  } else {
    return cljs.core.vector_index_out_of_bounds.call(null, i, pv.cnt);
  }
};
cljs.core.do_assoc = function do_assoc(pv, level, node, i, val) {
  var ret = cljs.core.pv_clone_node.call(null, node);
  if (level === 0) {
    cljs.core.pv_aset.call(null, ret, i & 31, val);
    return ret;
  } else {
    var subidx = i >>> level & 31;
    cljs.core.pv_aset.call(null, ret, subidx, do_assoc.call(null, pv, level - 5, cljs.core.pv_aget.call(null, node, subidx), i, val));
    return ret;
  }
};
cljs.core.pop_tail = function pop_tail(pv, level, node) {
  var subidx = pv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = pop_tail.call(null, pv, level - 5, cljs.core.pv_aget.call(null, node, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node.call(null, node);
      cljs.core.pv_aset.call(null, ret, subidx, new_child);
      return ret;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var ret = cljs.core.pv_clone_node.call(null, node);
        cljs.core.pv_aset.call(null, ret, subidx, null);
        return ret;
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentVector = function(meta, cnt, shift, root, tail, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
  this.cljs$lang$protocol_mask$partition0$ = 167668511;
};
cljs.core.PersistentVector.cljs$lang$type = true;
cljs.core.PersistentVector.cljs$lang$ctorStr = "cljs.core/PersistentVector";
cljs.core.PersistentVector.cljs$lang$ctorPrWriter = function(this__13397__auto__, writer__13398__auto__, opt__13399__auto__) {
  return cljs.core._write.call(null, writer__13398__auto__, "cljs.core/PersistentVector");
};
cljs.core.PersistentVector.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientVector(self__.cnt, self__.shift, cljs.core.tv_editable_root.call(null, self__.root), cljs.core.tv_editable_tail.call(null, self__.tail));
};
cljs.core.PersistentVector.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__13241__auto__ = self__.__hash;
  if (!(h__13241__auto__ == null)) {
    return h__13241__auto__;
  } else {
    var h__13241__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__13241__auto____$1;
    return h__13241__auto____$1;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, null);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, not_found);
};
cljs.core.PersistentVector.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._assoc_n.call(null, coll__$1, k, v);
  } else {
    throw new Error("Vector's key for assoc must be a number.");
  }
};
cljs.core.PersistentVector.prototype.call = function() {
  var G__107878 = null;
  var G__107878__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__107878__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__107878 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__107878__2.call(this, self__, k);
      case 3:
        return G__107878__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__107878;
}();
cljs.core.PersistentVector.prototype.apply = function(self__, args107877) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args107877)));
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.PersistentVector.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var step_init = [0, init];
  var i = 0;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.array_for.call(null, v__$1, i);
      var len = arr.length;
      var init__$1 = function() {
        var j = 0;
        var init__$1 = step_init[1];
        while (true) {
          if (j < len) {
            var init__$2 = f.call(null, init__$1, j + i, arr[j]);
            if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
              return init__$2;
            } else {
              var G__107879 = j + 1;
              var G__107880 = init__$2;
              j = G__107879;
              init__$1 = G__107880;
              continue;
            }
          } else {
            step_init[0] = len;
            step_init[1] = init__$1;
            return init__$1;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
        return cljs.core.deref.call(null, init__$1);
      } else {
        var G__107881 = i + step_init[0];
        i = G__107881;
        continue;
      }
    } else {
      return step_init[1];
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt - cljs.core.tail_off.call(null, coll__$1) < 32) {
    var len = self__.tail.length;
    var new_tail = new Array(len + 1);
    var n__13678__auto___107882 = len;
    var i_107883 = 0;
    while (true) {
      if (i_107883 < n__13678__auto___107882) {
        new_tail[i_107883] = self__.tail[i_107883];
        var G__107884 = i_107883 + 1;
        i_107883 = G__107884;
        continue;
      } else {
      }
      break;
    }
    new_tail[len] = o;
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, self__.shift, self__.root, new_tail, null);
  } else {
    var root_overflow_QMARK_ = self__.cnt >>> 5 > 1 << self__.shift;
    var new_shift = root_overflow_QMARK_ ? self__.shift + 5 : self__.shift;
    var new_root = root_overflow_QMARK_ ? function() {
      var n_r = cljs.core.pv_fresh_node.call(null, null);
      cljs.core.pv_aset.call(null, n_r, 0, self__.root);
      cljs.core.pv_aset.call(null, n_r, 1, cljs.core.new_path.call(null, null, self__.shift, new cljs.core.VectorNode(null, self__.tail)));
      return n_r;
    }() : cljs.core.push_tail.call(null, coll__$1, self__.shift, self__.root, new cljs.core.VectorNode(null, self__.tail));
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, new_shift, new_root, [o], null);
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return new cljs.core.RSeq(coll__$1, self__.cnt - 1, null);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_key$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, 0);
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_val$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, 1);
};
cljs.core.PersistentVector.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$2 = function(v, f) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.call(null, v__$1, f);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$3 = function(v, f, start) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.call(null, v__$1, f, start);
};
cljs.core.PersistentVector.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    return null;
  } else {
    if (self__.cnt < 32) {
      return cljs.core.array_seq.call(null, self__.tail);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core.chunked_seq.call(null, coll__$1, 0, 0);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core._nth.call(null, coll__$1, self__.cnt - 1);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    throw new Error("Can't pop empty vector");
  } else {
    if (1 === self__.cnt) {
      return cljs.core._with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
    } else {
      if (1 < self__.cnt - cljs.core.tail_off.call(null, coll__$1)) {
        return new cljs.core.PersistentVector(self__.meta, self__.cnt - 1, self__.shift, self__.root, self__.tail.slice(0, -1), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var new_tail = cljs.core.array_for.call(null, coll__$1, self__.cnt - 2);
          var nr = cljs.core.pop_tail.call(null, coll__$1, self__.shift, self__.root);
          var new_root = nr == null ? cljs.core.PersistentVector.EMPTY_NODE : nr;
          var cnt_1 = self__.cnt - 1;
          if (5 < self__.shift && cljs.core.pv_aget.call(null, new_root, 1) == null) {
            return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift - 5, cljs.core.pv_aget.call(null, new_root, 0), new_tail, null);
          } else {
            return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift, new_root, new_tail, null);
          }
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    if (cljs.core.tail_off.call(null, coll__$1) <= n) {
      var new_tail = cljs.core.aclone.call(null, self__.tail);
      new_tail[n & 31] = val;
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, new_tail, null);
    } else {
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, cljs.core.do_assoc.call(null, coll__$1, self__.shift, self__.root, n, val), self__.tail, null);
    }
  } else {
    if (n === self__.cnt) {
      return cljs.core._conj.call(null, coll__$1, val);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw new Error([cljs.core.str("Index "), cljs.core.str(n), cljs.core.str(" out of bounds  [0,"), cljs.core.str(self__.cnt), cljs.core.str("]")].join(""));
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentVector.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(meta__$1, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_for.call(null, coll__$1, n)[n & 31];
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core._nth.call(null, coll__$1, n);
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentVector = function __GT_PersistentVector(meta, cnt, shift, root, tail, __hash) {
  return new cljs.core.PersistentVector(meta, cnt, shift, root, tail, __hash);
};
cljs.core.PersistentVector.EMPTY_NODE = new cljs.core.VectorNode(null, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
cljs.core.PersistentVector.EMPTY = new cljs.core.PersistentVector(null, 0, 5, cljs.core.PersistentVector.EMPTY_NODE, [], 0);
cljs.core.PersistentVector.fromArray = function(xs, no_clone) {
  var l = xs.length;
  var xs__$1 = no_clone ? xs : cljs.core.aclone.call(null, xs);
  if (l < 32) {
    return new cljs.core.PersistentVector(null, l, 5, cljs.core.PersistentVector.EMPTY_NODE, xs__$1, null);
  } else {
    var node = xs__$1.slice(0, 32);
    var v = new cljs.core.PersistentVector(null, 32, 5, cljs.core.PersistentVector.EMPTY_NODE, node, null);
    var i = 32;
    var out = cljs.core._as_transient.call(null, v);
    while (true) {
      if (i < l) {
        var G__107885 = i + 1;
        var G__107886 = cljs.core.conj_BANG_.call(null, out, xs__$1[i]);
        i = G__107885;
        out = G__107886;
        continue;
      } else {
        return cljs.core.persistent_BANG_.call(null, out);
      }
      break;
    }
  }
};
cljs.core.vec = function vec(coll) {
  return cljs.core._persistent_BANG_.call(null, cljs.core.reduce.call(null, cljs.core._conj_BANG_, cljs.core._as_transient.call(null, cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.vector = function() {
  var vector__delegate = function(args) {
    if (args instanceof cljs.core.IndexedSeq && args.i === 0) {
      return cljs.core.PersistentVector.fromArray.call(null, args.arr, true);
    } else {
      return cljs.core.vec.call(null, args);
    }
  };
  var vector = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return vector__delegate.call(this, args);
  };
  vector.cljs$lang$maxFixedArity = 0;
  vector.cljs$lang$applyTo = function(arglist__107887) {
    var args = cljs.core.seq(arglist__107887);
    return vector__delegate(args);
  };
  vector.cljs$core$IFn$_invoke$arity$variadic = vector__delegate;
  return vector;
}();
cljs.core.ChunkedSeq = function(vec, node, i, off, meta, __hash) {
  this.vec = vec;
  this.node = node;
  this.i = i;
  this.off = off;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32243948;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedSeq.cljs$lang$type = true;
cljs.core.ChunkedSeq.cljs$lang$ctorStr = "cljs.core/ChunkedSeq";
cljs.core.ChunkedSeq.cljs$lang$ctorPrWriter = function(this__13397__auto__, writer__13398__auto__, opt__13399__auto__) {
  return cljs.core._write.call(null, writer__13398__auto__, "cljs.core/ChunkedSeq");
};
cljs.core.ChunkedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__13241__auto__ = self__.__hash;
  if (!(h__13241__auto__ == null)) {
    return h__13241__auto__;
  } else {
    var h__13241__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__13241__auto____$1;
    return h__13241__auto____$1;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if (s == null) {
      return null;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_next.call(null, coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.ChunkedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, cljs.core.subvec.call(null, self__.vec, self__.i + self__.off, cljs.core.count.call(null, self__.vec)), f);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, cljs.core.subvec.call(null, self__.vec, self__.i + self__.off, cljs.core.count.call(null, self__.vec)), f, start);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.node[self__.off];
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if (s == null) {
      return cljs.core.List.EMPTY;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_rest.call(null, coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var l = self__.node.length;
  var s = self__.i + l < cljs.core._count.call(null, self__.vec) ? cljs.core.chunked_seq.call(null, self__.vec, self__.i + l, 0) : null;
  if (s == null) {
    return null;
  } else {
    return s;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off, m);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_chunk.call(null, self__.node, self__.off);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var l = self__.node.length;
  var s = self__.i + l < cljs.core._count.call(null, self__.vec) ? cljs.core.chunked_seq.call(null, self__.vec, self__.i + l, 0) : null;
  if (s == null) {
    return cljs.core.List.EMPTY;
  } else {
    return s;
  }
};
cljs.core.__GT_ChunkedSeq = function __GT_ChunkedSeq(vec, node, i, off, meta, __hash) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, meta, __hash);
};
cljs.core.chunked_seq = function() {
  var chunked_seq = null;
  var chunked_seq__3 = function(vec, i, off) {
    return new cljs.core.ChunkedSeq(vec, cljs.core.array_for.call(null, vec, i), i, off, null, null);
  };
  var chunked_seq__4 = function(vec, node, i, off) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, null, null);
  };
  var chunked_seq__5 = function(vec, node, i, off, meta) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, meta, null);
  };
  chunked_seq = function(vec, node, i, off, meta) {
    switch(arguments.length) {
      case 3:
        return chunked_seq__3.call(this, vec, node, i);
      case 4:
        return chunked_seq__4.call(this, vec, node, i, off);
      case 5:
        return chunked_seq__5.call(this, vec, node, i, off, meta);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chunked_seq.cljs$core$IFn$_invoke$arity$3 = chunked_seq__3;
  chunked_seq.cljs$core$IFn$_invoke$arity$4 = chunked_seq__4;
  chunked_seq.cljs$core$IFn$_invoke$arity$5 = chunked_seq__5;
  return chunked_seq;
}();
cljs.core.Subvec = function(meta, v, start, end, __hash) {
  this.meta = meta;
  this.v = v;
  this.start = start;
  this.end = end;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 166617887;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Subvec.cljs$lang$type = true;
cljs.core.Subvec.cljs$lang$ctorStr = "cljs.core/Subvec";
cljs.core.Subvec.cljs$lang$ctorPrWriter = function(this__13397__auto__, writer__13398__auto__, opt__13399__auto__) {
  return cljs.core._write.call(null, writer__13398__auto__, "cljs.core/Subvec");
};
cljs.core.Subvec.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__13241__auto__ = self__.__hash;
  if (!(h__13241__auto__ == null)) {
    return h__13241__auto__;
  } else {
    var h__13241__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__13241__auto____$1;
    return h__13241__auto____$1;
  }
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, null);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, not_found);
};
cljs.core.Subvec.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, key, val) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n.call(null, coll__$1, key, val);
  } else {
    throw new Error("Subvec's key for assoc must be a number.");
  }
};
cljs.core.Subvec.prototype.call = function() {
  var G__107889 = null;
  var G__107889__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__107889__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__107889 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__107889__2.call(this, self__, k);
      case 3:
        return G__107889__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__107889;
}();
cljs.core.Subvec.prototype.apply = function(self__, args107888) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args107888)));
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.Subvec.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec.call(null, self__.meta, cljs.core._assoc_n.call(null, self__.v, self__.end, o), self__.start, self__.end + 1, null);
};
cljs.core.Subvec.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.start === self__.end)) {
    return new cljs.core.RSeq(coll__$1, self__.end - self__.start - 1, null);
  } else {
    return null;
  }
};
cljs.core.Subvec.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, coll__$1, f);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, coll__$1, f, start__$1);
};
cljs.core.Subvec.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var subvec_seq = function subvec_seq(i) {
    if (i === self__.end) {
      return null;
    } else {
      return cljs.core.cons.call(null, cljs.core._nth.call(null, self__.v, i), new cljs.core.LazySeq(null, function() {
        return subvec_seq.call(null, i + 1);
      }, null, null));
    }
  };
  return subvec_seq.call(null, self__.start);
};
cljs.core.Subvec.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.end - self__.start;
};
cljs.core.Subvec.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.v, self__.end - 1);
};
cljs.core.Subvec.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.start === self__.end) {
    throw new Error("Can't pop empty vector");
  } else {
    return cljs.core.build_subvec.call(null, self__.meta, self__.v, self__.start, self__.end - 1, null);
  }
};
cljs.core.Subvec.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  var v_pos = self__.start + n;
  return cljs.core.build_subvec.call(null, self__.meta, cljs.core.assoc.call(null, self__.v, v_pos, val), self__.start, function() {
    var x__13137__auto__ = self__.end;
    var y__13138__auto__ = v_pos + 1;
    return x__13137__auto__ > y__13138__auto__ ? x__13137__auto__ : y__13138__auto__;
  }(), null);
};
cljs.core.Subvec.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.Subvec.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec.call(null, meta__$1, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Subvec(self__.meta, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return cljs.core.vector_index_out_of_bounds.call(null, n, self__.end - self__.start);
  } else {
    return cljs.core._nth.call(null, self__.v, self__.start + n);
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return not_found;
  } else {
    return cljs.core._nth.call(null, self__.v, self__.start + n, not_found);
  }
};
cljs.core.Subvec.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.__GT_Subvec = function __GT_Subvec(meta, v, start, end, __hash) {
  return new cljs.core.Subvec(meta, v, start, end, __hash);
};
cljs.core.build_subvec = function build_subvec(meta, v, start, end, __hash) {
  while (true) {
    if (v instanceof cljs.core.Subvec) {
      var G__107890 = meta;
      var G__107891 = v.v;
      var G__107892 = v.start + start;
      var G__107893 = v.start + end;
      var G__107894 = __hash;
      meta = G__107890;
      v = G__107891;
      start = G__107892;
      end = G__107893;
      __hash = G__107894;
      continue;
    } else {
      var c = cljs.core.count.call(null, v);
      if (start < 0 || (end < 0 || (start > c || end > c))) {
        throw new Error("Index out of bounds");
      } else {
      }
      return new cljs.core.Subvec(meta, v, start, end, __hash);
    }
    break;
  }
};
cljs.core.subvec = function() {
  var subvec = null;
  var subvec__2 = function(v, start) {
    return subvec.call(null, v, start, cljs.core.count.call(null, v));
  };
  var subvec__3 = function(v, start, end) {
    return cljs.core.build_subvec.call(null, null, v, start, end, null);
  };
  subvec = function(v, start, end) {
    switch(arguments.length) {
      case 2:
        return subvec__2.call(this, v, start);
      case 3:
        return subvec__3.call(this, v, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subvec.cljs$core$IFn$_invoke$arity$2 = subvec__2;
  subvec.cljs$core$IFn$_invoke$arity$3 = subvec__3;
  return subvec;
}();
cljs.core.tv_ensure_editable = function tv_ensure_editable(edit, node) {
  if (edit === node.edit) {
    return node;
  } else {
    return new cljs.core.VectorNode(edit, cljs.core.aclone.call(null, node.arr));
  }
};
cljs.core.tv_editable_root = function tv_editable_root(node) {
  return new cljs.core.VectorNode(function() {
    var obj107898 = {};
    return obj107898;
  }(), cljs.core.aclone.call(null, node.arr));
};
cljs.core.tv_editable_tail = function tv_editable_tail(tl) {
  var ret = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
  cljs.core.array_copy.call(null, tl, 0, ret, 0, tl.length);
  return ret;
};
cljs.core.tv_push_tail = function tv_push_tail(tv, level, parent, tail_node) {
  var ret = cljs.core.tv_ensure_editable.call(null, tv.root.edit, parent);
  var subidx = tv.cnt - 1 >>> level & 31;
  cljs.core.pv_aset.call(null, ret, subidx, level === 5 ? tail_node : function() {
    var child = cljs.core.pv_aget.call(null, ret, subidx);
    if (!(child == null)) {
      return tv_push_tail.call(null, tv, level - 5, child, tail_node);
    } else {
      return cljs.core.new_path.call(null, tv.root.edit, level - 5, tail_node);
    }
  }());
  return ret;
};
cljs.core.tv_pop_tail = function tv_pop_tail(tv, level, node) {
  var node__$1 = cljs.core.tv_ensure_editable.call(null, tv.root.edit, node);
  var subidx = tv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = tv_pop_tail.call(null, tv, level - 5, cljs.core.pv_aget.call(null, node__$1, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset.call(null, node__$1, subidx, new_child);
      return node__$1;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        cljs.core.pv_aset.call(null, node__$1, subidx, null);
        return node__$1;
      } else {
        return null;
      }
    }
  }
};
cljs.core.editable_array_for = function editable_array_for(tv, i) {
  if (0 <= i && i < tv.cnt) {
    if (i >= cljs.core.tail_off.call(null, tv)) {
      return tv.tail;
    } else {
      var root = tv.root;
      var node = root;
      var level = tv.shift;
      while (true) {
        if (level > 0) {
          var G__107899 = cljs.core.tv_ensure_editable.call(null, root.edit, cljs.core.pv_aget.call(null, node, i >>> level & 31));
          var G__107900 = level - 5;
          node = G__107899;
          level = G__107900;
          continue;
        } else {
          return node.arr;
        }
        break;
      }
    }
  } else {
    throw new Error([cljs.core.str("No item "), cljs.core.str(i), cljs.core.str(" in transient vector of length "), cljs.core.str(tv.cnt)].join(""));
  }
};
cljs.core.TransientVector = function(cnt, shift, root, tail) {
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.cljs$lang$protocol_mask$partition0$ = 275;
  this.cljs$lang$protocol_mask$partition1$ = 88;
};
cljs.core.TransientVector.cljs$lang$type = true;
cljs.core.TransientVector.cljs$lang$ctorStr = "cljs.core/TransientVector";
cljs.core.TransientVector.cljs$lang$ctorPrWriter = function(this__13397__auto__, writer__13398__auto__, opt__13399__auto__) {
  return cljs.core._write.call(null, writer__13398__auto__, "cljs.core/TransientVector");
};
cljs.core.TransientVector.prototype.call = function() {
  var G__107902 = null;
  var G__107902__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__107902__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__107902 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__107902__2.call(this, self__, k);
      case 3:
        return G__107902__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__107902;
}();
cljs.core.TransientVector.prototype.apply = function(self__, args107901) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args107901)));
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, null);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, not_found);
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return cljs.core.array_for.call(null, coll__$1, n)[n & 31];
  } else {
    throw new Error("nth after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core._nth.call(null, coll__$1, n);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return self__.cnt;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3 = function(tcoll, n, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (0 <= n && n < self__.cnt) {
      if (cljs.core.tail_off.call(null, tcoll__$1) <= n) {
        self__.tail[n & 31] = val;
        return tcoll__$1;
      } else {
        var new_root = function go(level, node) {
          var node__$1 = cljs.core.tv_ensure_editable.call(null, self__.root.edit, node);
          if (level === 0) {
            cljs.core.pv_aset.call(null, node__$1, n & 31, val);
            return node__$1;
          } else {
            var subidx = n >>> level & 31;
            cljs.core.pv_aset.call(null, node__$1, subidx, go.call(null, level - 5, cljs.core.pv_aget.call(null, node__$1, subidx)));
            return node__$1;
          }
        }.call(null, self__.shift, self__.root);
        self__.root = new_root;
        return tcoll__$1;
      }
    } else {
      if (n === self__.cnt) {
        return cljs.core._conj_BANG_.call(null, tcoll__$1, val);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw new Error([cljs.core.str("Index "), cljs.core.str(n), cljs.core.str(" out of bounds for TransientVector of length"), cljs.core.str(self__.cnt)].join(""));
        } else {
          return null;
        }
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_pop_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt === 0) {
      throw new Error("Can't pop empty vector");
    } else {
      if (1 === self__.cnt) {
        self__.cnt = 0;
        return tcoll__$1;
      } else {
        if ((self__.cnt - 1 & 31) > 0) {
          self__.cnt = self__.cnt - 1;
          return tcoll__$1;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var new_tail = cljs.core.editable_array_for.call(null, tcoll__$1, self__.cnt - 2);
            var new_root = function() {
              var nr = cljs.core.tv_pop_tail.call(null, tcoll__$1, self__.shift, self__.root);
              if (!(nr == null)) {
                return nr;
              } else {
                return new cljs.core.VectorNode(self__.root.edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
              }
            }();
            if (5 < self__.shift && cljs.core.pv_aget.call(null, new_root, 1) == null) {
              var new_root__$1 = cljs.core.tv_ensure_editable.call(null, self__.root.edit, cljs.core.pv_aget.call(null, new_root, 0));
              self__.root = new_root__$1;
              self__.shift = self__.shift - 5;
              self__.cnt = self__.cnt - 1;
              self__.tail = new_tail;
              return tcoll__$1;
            } else {
              self__.root = new_root;
              self__.cnt = self__.cnt - 1;
              self__.tail = new_tail;
              return tcoll__$1;
            }
          } else {
            return null;
          }
        }
      }
    }
  } else {
    throw new Error("pop! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._assoc_n_BANG_.call(null, tcoll__$1, key, val);
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt - cljs.core.tail_off.call(null, tcoll__$1) < 32) {
      self__.tail[self__.cnt & 31] = o;
      self__.cnt = self__.cnt + 1;
      return tcoll__$1;
    } else {
      var tail_node = new cljs.core.VectorNode(self__.root.edit, self__.tail);
      var new_tail = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      new_tail[0] = o;
      self__.tail = new_tail;
      if (self__.cnt >>> 5 > 1 << self__.shift) {
        var new_root_array = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var new_shift = self__.shift + 5;
        new_root_array[0] = self__.root;
        new_root_array[1] = cljs.core.new_path.call(null, self__.root.edit, self__.shift, tail_node);
        self__.root = new cljs.core.VectorNode(self__.root.edit, new_root_array);
        self__.shift = new_shift;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      } else {
        var new_root = cljs.core.tv_push_tail.call(null, tcoll__$1, self__.shift, self__.root, tail_node);
        self__.root = new_root;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    self__.root.edit = null;
    var len = self__.cnt - cljs.core.tail_off.call(null, tcoll__$1);
    var trimmed_tail = new Array(len);
    cljs.core.array_copy.call(null, self__.tail, 0, trimmed_tail, 0, len);
    return new cljs.core.PersistentVector(null, self__.cnt, self__.shift, self__.root, trimmed_tail, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.__GT_TransientVector = function __GT_TransientVector(cnt, shift, root, tail) {
  return new cljs.core.TransientVector(cnt, shift, root, tail);
};
cljs.core.PersistentQueueSeq = function(meta, front, rear, __hash) {
  this.meta = meta;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31850572;
};
cljs.core.PersistentQueueSeq.cljs$lang$type = true;
cljs.core.PersistentQueueSeq.cljs$lang$ctorStr = "cljs.core/PersistentQueueSeq";
cljs.core.PersistentQueueSeq.cljs$lang$ctorPrWriter = function(this__13397__auto__, writer__13398__auto__, opt__13399__auto__) {
  return cljs.core._write.call(null, writer__13398__auto__, "cljs.core/PersistentQueueSeq");
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__13241__auto__ = self__.__hash;
  if (!(h__13241__auto__ == null)) {
    return h__13241__auto__;
  } else {
    var h__13241__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__13241__auto____$1;
    return h__13241__auto____$1;
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.PersistentQueueSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var temp__4090__auto__ = cljs.core.next.call(null, self__.front);
  if (temp__4090__auto__) {
    var f1 = temp__4090__auto__;
    return new cljs.core.PersistentQueueSeq(self__.meta, f1, self__.rear, null);
  } else {
    if (self__.rear == null) {
      return cljs.core._empty.call(null, coll__$1);
    } else {
      return new cljs.core.PersistentQueueSeq(self__.meta, self__.rear, null, null);
    }
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueueSeq(meta__$1, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentQueueSeq = function __GT_PersistentQueueSeq(meta, front, rear, __hash) {
  return new cljs.core.PersistentQueueSeq(meta, front, rear, __hash);
};
cljs.core.PersistentQueue = function(meta, count, front, rear, __hash) {
  this.meta = meta;
  this.count = count;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31858766;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentQueue.cljs$lang$type = true;
cljs.core.PersistentQueue.cljs$lang$ctorStr = "cljs.core/PersistentQueue";
cljs.core.PersistentQueue.cljs$lang$ctorPrWriter = function(this__13397__auto__, writer__13398__auto__, opt__13399__auto__) {
  return cljs.core._write.call(null, writer__13398__auto__, "cljs.core/PersistentQueue");
};
cljs.core.PersistentQueue.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__13241__auto__ = self__.__hash;
  if (!(h__13241__auto__ == null)) {
    return h__13241__auto__;
  } else {
    var h__13241__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__13241__auto____$1;
    return h__13241__auto____$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, self__.front, cljs.core.conj.call(null, function() {
      var or__12830__auto__ = self__.rear;
      if (cljs.core.truth_(or__12830__auto__)) {
        return or__12830__auto__;
      } else {
        return cljs.core.PersistentVector.EMPTY;
      }
    }(), o), null);
  } else {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, cljs.core.conj.call(null, self__.front, o), cljs.core.PersistentVector.EMPTY, null);
  }
};
cljs.core.PersistentQueue.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var rear__$1 = cljs.core.seq.call(null, self__.rear);
  if (cljs.core.truth_(function() {
    var or__12830__auto__ = self__.front;
    if (cljs.core.truth_(or__12830__auto__)) {
      return or__12830__auto__;
    } else {
      return rear__$1;
    }
  }())) {
    return new cljs.core.PersistentQueueSeq(null, self__.front, cljs.core.seq.call(null, rear__$1), null);
  } else {
    return null;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    var temp__4090__auto__ = cljs.core.next.call(null, self__.front);
    if (temp__4090__auto__) {
      var f1 = temp__4090__auto__;
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, f1, self__.rear, null);
    } else {
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, cljs.core.seq.call(null, self__.rear), cljs.core.PersistentVector.EMPTY, null);
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.rest.call(null, cljs.core.seq.call(null, coll__$1));
};
cljs.core.PersistentQueue.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(meta__$1, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICloneable$_clone$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(self__.meta, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueue.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.PersistentQueue.EMPTY;
};
cljs.core.__GT_PersistentQueue = function __GT_PersistentQueue(meta, count, front, rear, __hash) {
  return new cljs.core.PersistentQueue(meta, count, front, rear, __hash);
};
cljs.core.PersistentQueue.EMPTY = new cljs.core.PersistentQueue(null, 0, null, cljs.core.PersistentVector.EMPTY, 0);
cljs.core.NeverEquiv = function() {
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2097152;
};
cljs.core.NeverEquiv.cljs$lang$type = true;
cljs.core.NeverEquiv.cljs$lang$ctorStr = "cljs.core/NeverEquiv";
cljs.core.NeverEquiv.cljs$lang$ctorPrWriter = function(this__13397__auto__, writer__13398__auto__, opt__13399__auto__) {
  return cljs.core._write.call(null, writer__13398__auto__, "cljs.core/NeverEquiv");
};
cljs.core.NeverEquiv.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return false;
};
cljs.core.__GT_NeverEquiv = function __GT_NeverEquiv() {
  return new cljs.core.NeverEquiv;
};
cljs.core.never_equiv = new cljs.core.NeverEquiv;
cljs.core.equiv_map = function equiv_map(x, y) {
  return cljs.core.boolean$.call(null, cljs.core.map_QMARK_.call(null, y) ? cljs.core.count.call(null, x) === cljs.core.count.call(null, y) ? cljs.core.every_QMARK_.call(null, cljs.core.identity, cljs.core.map.call(null, function(xkv) {
    return cljs.core._EQ_.call(null, cljs.core.get.call(null, y, cljs.core.first.call(null, xkv), cljs.core.never_equiv), cljs.core.second.call(null, xkv));
  }, x)) : null : null);
};
cljs.core.scan_array = function scan_array(incr, k, array) {
  var len = array.length;
  var i = 0;
  while (true) {
    if (i < len) {
      if (k === array[i]) {
        return i;
      } else {
        var G__107903 = i + incr;
        i = G__107903;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.obj_map_compare_keys = function obj_map_compare_keys(a, b) {
  var a__$1 = cljs.core.hash.call(null, a);
  var b__$1 = cljs.core.hash.call(null, b);
  if (a__$1 < b__$1) {
    return-1;
  } else {
    if (a__$1 > b__$1) {
      return 1;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return 0;
      } else {
        return null;
      }
    }
  }
};
cljs.core.obj_map__GT_hash_map = function obj_map__GT_hash_map(m, k, v) {
  var ks = m.keys;
  var len = ks.length;
  var so = m.strobj;
  var mm = cljs.core.meta.call(null, m);
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var k__$1 = ks[i];
      var G__107904 = i + 1;
      var G__107905 = cljs.core.assoc_BANG_.call(null, out, k__$1, so[k__$1]);
      i = G__107904;
      out = G__107905;
      continue;
    } else {
      return cljs.core.with_meta.call(null, cljs.core.persistent_BANG_.call(null, cljs.core.assoc_BANG_.call(null, out, k, v)), mm);
    }
    break;
  }
};
cljs.core.obj_clone = function obj_clone(obj, ks) {
  var new_obj = function() {
    var obj107909 = {};
    return obj107909;
  }();
  var l = ks.length;
  var i_107910 = 0;
  while (true) {
    if (i_107910 < l) {
      var k_107911 = ks[i_107910];
      new_obj[k_107911] = obj[k_107911];
      var G__107912 = i_107910 + 1;
      i_107910 = G__107912;
      continue;
    } else {
    }
    break;
  }
  return new_obj;
};
cljs.core.ObjMap = function(meta, keys, strobj, update_count, __hash) {
  this.meta = meta;
  this.keys = keys;
  this.strobj = strobj;
  this.update_count = update_count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 4;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
};
cljs.core.ObjMap.cljs$lang$type = true;
cljs.core.ObjMap.cljs$lang$ctorStr = "cljs.core/ObjMap";
cljs.core.ObjMap.cljs$lang$ctorPrWriter = function(this__13397__auto__, writer__13398__auto__, opt__13399__auto__) {
  return cljs.core._write.call(null, writer__13398__auto__, "cljs.core/ObjMap");
};
cljs.core.ObjMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.transient$.call(null, cljs.core.into.call(null, cljs.core.PersistentHashMap.EMPTY, coll__$1));
};
cljs.core.ObjMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__13241__auto__ = self__.__hash;
  if (!(h__13241__auto__ == null)) {
    return h__13241__auto__;
  } else {
    var h__13241__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__13241__auto____$1;
    return h__13241__auto____$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    return self__.strobj[k];
  } else {
    return not_found;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k)) {
    if (self__.update_count > cljs.core.ObjMap.HASHMAP_THRESHOLD || self__.keys.length >= cljs.core.ObjMap.HASHMAP_THRESHOLD) {
      return cljs.core.obj_map__GT_hash_map.call(null, coll__$1, k, v);
    } else {
      if (!(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
        var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
        new_strobj[k] = v;
        return new cljs.core.ObjMap(self__.meta, self__.keys, new_strobj, self__.update_count + 1, null);
      } else {
        var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
        var new_keys = cljs.core.aclone.call(null, self__.keys);
        new_strobj[k] = v;
        new_keys.push(k);
        return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
      }
    }
  } else {
    return cljs.core.obj_map__GT_hash_map.call(null, coll__$1, k, v);
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ObjMap.prototype.call = function() {
  var G__107915 = null;
  var G__107915__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__107915__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__107915 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__107915__2.call(this, self__, k);
      case 3:
        return G__107915__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__107915;
}();
cljs.core.ObjMap.prototype.apply = function(self__, args107914) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args107914)));
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.ObjMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.keys.length;
  var keys__$1 = self__.keys.sort(cljs.core.obj_map_compare_keys);
  var init__$1 = init;
  while (true) {
    if (cljs.core.seq.call(null, keys__$1)) {
      var k = cljs.core.first.call(null, keys__$1);
      var init__$2 = f.call(null, init__$1, k, self__.strobj[k]);
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__107916 = cljs.core.rest.call(null, keys__$1);
        var G__107917 = init__$2;
        keys__$1 = G__107916;
        init__$1 = G__107917;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.ObjMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ObjMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.keys.length > 0) {
    return cljs.core.map.call(null, function(p1__107913_SHARP_) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__107913_SHARP_, self__.strobj[p1__107913_SHARP_]], null);
    }, self__.keys.sort(cljs.core.obj_map_compare_keys));
  } else {
    return null;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.keys.length;
};
cljs.core.ObjMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.ObjMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ObjMap(meta__$1, self__.keys, self__.strobj, self__.update_count, self__.__hash);
};
cljs.core.ObjMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ObjMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.ObjMap.EMPTY, self__.meta);
};
cljs.core.ObjMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    var new_keys = cljs.core.aclone.call(null, self__.keys);
    var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
    new_keys.splice(cljs.core.scan_array.call(null, 1, k, new_keys), 1);
    delete new_strobj[k];
    return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
  } else {
    return coll__$1;
  }
};
cljs.core.__GT_ObjMap = function __GT_ObjMap(meta, keys, strobj, update_count, __hash) {
  return new cljs.core.ObjMap(meta, keys, strobj, update_count, __hash);
};
cljs.core.ObjMap.EMPTY = new cljs.core.ObjMap(null, [], function() {
  var obj107919 = {};
  return obj107919;
}(), 0, 0);
cljs.core.ObjMap.HASHMAP_THRESHOLD = 8;
cljs.core.ObjMap.fromObject = function(ks, obj) {
  return new cljs.core.ObjMap(null, ks, obj, 0, null);
};
cljs.core.array_map_index_of_nil_QMARK_ = function array_map_index_of_nil_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (arr[i] == null) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__107920 = i + 2;
          i = G__107920;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_keyword_QMARK_ = function array_map_index_of_keyword_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.fqn;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Keyword && kstr === k_SINGLEQUOTE_.fqn;
      }()) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__107921 = i + 2;
          i = G__107921;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_symbol_QMARK_ = function array_map_index_of_symbol_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.str;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Symbol && kstr === k_SINGLEQUOTE_.str;
      }()) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__107922 = i + 2;
          i = G__107922;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_identical_QMARK_ = function array_map_index_of_identical_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (k === arr[i]) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__107923 = i + 2;
          i = G__107923;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_equiv_QMARK_ = function array_map_index_of_equiv_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (cljs.core._EQ_.call(null, k, arr[i])) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__107924 = i + 2;
          i = G__107924;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of = function array_map_index_of(m, k) {
  var arr = m.arr;
  if (k instanceof cljs.core.Keyword) {
    return cljs.core.array_map_index_of_keyword_QMARK_.call(null, arr, m, k);
  } else {
    if (goog.isString(k) || typeof k === "number") {
      return cljs.core.array_map_index_of_identical_QMARK_.call(null, arr, m, k);
    } else {
      if (k instanceof cljs.core.Symbol) {
        return cljs.core.array_map_index_of_symbol_QMARK_.call(null, arr, m, k);
      } else {
        if (k == null) {
          return cljs.core.array_map_index_of_nil_QMARK_.call(null, arr, m, k);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            return cljs.core.array_map_index_of_equiv_QMARK_.call(null, arr, m, k);
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.array_map_extend_kv = function array_map_extend_kv(m, k, v) {
  var arr = m.arr;
  var l = arr.length;
  var narr = new Array(l + 2);
  var i_107925 = 0;
  while (true) {
    if (i_107925 < l) {
      narr[i_107925] = arr[i_107925];
      var G__107926 = i_107925 + 1;
      i_107925 = G__107926;
      continue;
    } else {
    }
    break;
  }
  narr[l] = k;
  narr[l + 1] = v;
  return narr;
};
cljs.core.PersistentArrayMapSeq = function(arr, i, _meta) {
  this.arr = arr;
  this.i = i;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
};
cljs.core.PersistentArrayMapSeq.cljs$lang$type = true;
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapSeq";
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorPrWriter = function(this__13397__auto__, writer__13398__auto__, opt__13399__auto__) {
  return cljs.core._write.call(null, writer__13398__auto__, "cljs.core/PersistentArrayMapSeq");
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return(self__.arr.length - self__.i) / 2;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i, new_meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.__GT_PersistentArrayMapSeq = function __GT_PersistentArrayMapSeq(arr, i, _meta) {
  return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
};
cljs.core.persistent_array_map_seq = function persistent_array_map_seq(arr, i, _meta) {
  if (i <= arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMap = function(meta, cnt, arr, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.arr = arr;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
};
cljs.core.PersistentArrayMap.cljs$lang$type = true;
cljs.core.PersistentArrayMap.cljs$lang$ctorStr = "cljs.core/PersistentArrayMap";
cljs.core.PersistentArrayMap.cljs$lang$ctorPrWriter = function(this__13397__auto__, writer__13398__auto__, opt__13399__auto__) {
  return cljs.core._write.call(null, writer__13398__auto__, "cljs.core/PersistentArrayMap");
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientArrayMap(function() {
    var obj107929 = {};
    return obj107929;
  }(), self__.arr.length, cljs.core.aclone.call(null, self__.arr));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__13241__auto__ = self__.__hash;
  if (!(h__13241__auto__ == null)) {
    return h__13241__auto__;
  } else {
    var h__13241__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__13241__auto____$1;
    return h__13241__auto____$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx === -1) {
    return not_found;
  } else {
    return self__.arr[idx + 1];
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx === -1) {
    if (self__.cnt < cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
      var arr__$1 = cljs.core.array_map_extend_kv.call(null, coll__$1, k, v);
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt + 1, arr__$1, null);
    } else {
      return cljs.core._with_meta.call(null, cljs.core._assoc.call(null, cljs.core.into.call(null, cljs.core.PersistentHashMap.EMPTY, coll__$1), k, v), self__.meta);
    }
  } else {
    if (v === self__.arr[idx + 1]) {
      return coll__$1;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var arr__$1 = function() {
          var G__107930 = cljs.core.aclone.call(null, self__.arr);
          G__107930[idx + 1] = v;
          return G__107930;
        }();
        return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, arr__$1, null);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(cljs.core.array_map_index_of.call(null, coll__$1, k) === -1);
};
cljs.core.PersistentArrayMap.prototype.call = function() {
  var G__107931 = null;
  var G__107931__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__107931__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__107931 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__107931__2.call(this, self__, k);
      case 3:
        return G__107931__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__107931;
}();
cljs.core.PersistentArrayMap.prototype.apply = function(self__, args107927) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args107927)));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = f.call(null, init__$1, self__.arr[i], self__.arr[i + 1]);
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__107932 = i + 2;
        var G__107933 = init__$2;
        i = G__107932;
        init__$1 = G__107933;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.PersistentArrayMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.persistent_array_map_seq.call(null, self__.arr, 0, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMap(meta__$1, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta.call(null, cljs.core.PersistentArrayMap.EMPTY, self__.meta);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx >= 0) {
    var len = self__.arr.length;
    var new_len = len - 2;
    if (new_len === 0) {
      return cljs.core._empty.call(null, coll__$1);
    } else {
      var new_arr = new Array(new_len);
      var s = 0;
      var d = 0;
      while (true) {
        if (s >= len) {
          return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt - 1, new_arr, null);
        } else {
          if (cljs.core._EQ_.call(null, k, self__.arr[s])) {
            var G__107934 = s + 2;
            var G__107935 = d;
            s = G__107934;
            d = G__107935;
            continue;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              new_arr[d] = self__.arr[s];
              new_arr[d + 1] = self__.arr[s + 1];
              var G__107936 = s + 2;
              var G__107937 = d + 2;
              s = G__107936;
              d = G__107937;
              continue;
            } else {
              return null;
            }
          }
        }
        break;
      }
    }
  } else {
    return coll__$1;
  }
};
cljs.core.__GT_PersistentArrayMap = function __GT_PersistentArrayMap(meta, cnt, arr, __hash) {
  return new cljs.core.PersistentArrayMap(meta, cnt, arr, __hash);
};
cljs.core.PersistentArrayMap.EMPTY = new cljs.core.PersistentArrayMap(null, 0, [], null);
cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD = 8;
cljs.core.PersistentArrayMap.fromArray = function(arr, no_clone, no_check) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone.call(null, arr);
  if (no_check) {
    var cnt = arr__$1.length / 2;
    return new cljs.core.PersistentArrayMap(null, cnt, arr__$1, null);
  } else {
    var len = arr__$1.length;
    var i = 0;
    var ret = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__107938 = i + 2;
        var G__107939 = cljs.core._assoc_BANG_.call(null, ret, arr__$1[i], arr__$1[i + 1]);
        i = G__107938;
        ret = G__107939;
        continue;
      } else {
        return cljs.core._persistent_BANG_.call(null, ret);
      }
      break;
    }
  }
};
cljs.core.TransientArrayMap = function(editable_QMARK_, len, arr) {
  this.editable_QMARK_ = editable_QMARK_;
  this.len = len;
  this.arr = arr;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientArrayMap.cljs$lang$type = true;
cljs.core.TransientArrayMap.cljs$lang$ctorStr = "cljs.core/TransientArrayMap";
cljs.core.TransientArrayMap.cljs$lang$ctorPrWriter = function(this__13397__auto__, writer__13398__auto__, opt__13399__auto__) {
  return cljs.core._write.call(null, writer__13398__auto__, "cljs.core/TransientArrayMap");
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, key);
    if (idx >= 0) {
      self__.arr[idx] = self__.arr[self__.len - 2];
      self__.arr[idx + 1] = self__.arr[self__.len - 1];
      var G__107940_107942 = self__.arr;
      G__107940_107942.pop();
      G__107940_107942.pop();
      self__.len = self__.len - 2;
    } else {
    }
    return tcoll__$1;
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, key);
    if (idx === -1) {
      if (self__.len + 2 <= 2 * cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
        self__.len = self__.len + 2;
        self__.arr.push(key);
        self__.arr.push(val);
        return tcoll__$1;
      } else {
        return cljs.core.assoc_BANG_.call(null, cljs.core.array__GT_transient_hash_map.call(null, self__.len, self__.arr), key, val);
      }
    } else {
      if (val === self__.arr[idx + 1]) {
        return tcoll__$1;
      } else {
        self__.arr[idx + 1] = val;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    if (function() {
      var G__107941 = o;
      if (G__107941) {
        var bit__13480__auto__ = G__107941.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__13480__auto__ || G__107941.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__107941.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__107941);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__107941);
      }
    }()) {
      return cljs.core._assoc_BANG_.call(null, tcoll__$1, cljs.core.key.call(null, o), cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq.call(null, o);
      var tcoll__$2 = tcoll__$1;
      while (true) {
        var temp__4090__auto__ = cljs.core.first.call(null, es);
        if (cljs.core.truth_(temp__4090__auto__)) {
          var e = temp__4090__auto__;
          var G__107943 = cljs.core.next.call(null, es);
          var G__107944 = cljs.core._assoc_BANG_.call(null, tcoll__$2, cljs.core.key.call(null, e), cljs.core.val.call(null, e));
          es = G__107943;
          tcoll__$2 = G__107944;
          continue;
        } else {
          return tcoll__$2;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    self__.editable_QMARK_ = false;
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot.call(null, self__.len, 2), self__.arr, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.call(null, tcoll__$1, k, null);
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, k);
    if (idx === -1) {
      return not_found;
    } else {
      return self__.arr[idx + 1];
    }
  } else {
    throw new Error("lookup after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    return cljs.core.quot.call(null, self__.len, 2);
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.__GT_TransientArrayMap = function __GT_TransientArrayMap(editable_QMARK_, len, arr) {
  return new cljs.core.TransientArrayMap(editable_QMARK_, len, arr);
};
cljs.core.array__GT_transient_hash_map = function array__GT_transient_hash_map(len, arr) {
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  var i = 0;
  while (true) {
    if (i < len) {
      var G__107945 = cljs.core.assoc_BANG_.call(null, out, arr[i], arr[i + 1]);
      var G__107946 = i + 2;
      out = G__107945;
      i = G__107946;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.Box = function(val) {
  this.val = val;
};
cljs.core.Box.cljs$lang$type = true;
cljs.core.Box.cljs$lang$ctorStr = "cljs.core/Box";
cljs.core.Box.cljs$lang$ctorPrWriter = function(this__13400__auto__, writer__13401__auto__, opts__13402__auto__) {
  return cljs.core._write.call(null, writer__13401__auto__, "cljs.core/Box");
};
cljs.core.__GT_Box = function __GT_Box(val) {
  return new cljs.core.Box(val);
};
cljs.core.key_test = function key_test(key, other) {
  if (key === other) {
    return true;
  } else {
    if (cljs.core.keyword_identical_QMARK_.call(null, key, other)) {
      return true;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core._EQ_.call(null, key, other);
      } else {
        return null;
      }
    }
  }
};
cljs.core.mask = function mask(hash, shift) {
  return hash >>> shift & 31;
};
cljs.core.clone_and_set = function() {
  var clone_and_set = null;
  var clone_and_set__3 = function(arr, i, a) {
    var G__107949 = cljs.core.aclone.call(null, arr);
    G__107949[i] = a;
    return G__107949;
  };
  var clone_and_set__5 = function(arr, i, a, j, b) {
    var G__107950 = cljs.core.aclone.call(null, arr);
    G__107950[i] = a;
    G__107950[j] = b;
    return G__107950;
  };
  clone_and_set = function(arr, i, a, j, b) {
    switch(arguments.length) {
      case 3:
        return clone_and_set__3.call(this, arr, i, a);
      case 5:
        return clone_and_set__5.call(this, arr, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  clone_and_set.cljs$core$IFn$_invoke$arity$3 = clone_and_set__3;
  clone_and_set.cljs$core$IFn$_invoke$arity$5 = clone_and_set__5;
  return clone_and_set;
}();
cljs.core.remove_pair = function remove_pair(arr, i) {
  var new_arr = new Array(arr.length - 2);
  cljs.core.array_copy.call(null, arr, 0, new_arr, 0, 2 * i);
  cljs.core.array_copy.call(null, arr, 2 * (i + 1), new_arr, 2 * i, new_arr.length - 2 * i);
  return new_arr;
};
cljs.core.bitmap_indexed_node_index = function bitmap_indexed_node_index(bitmap, bit) {
  return cljs.core.bit_count.call(null, bitmap & bit - 1);
};
cljs.core.bitpos = function bitpos(hash, shift) {
  return 1 << (hash >>> shift & 31);
};
cljs.core.edit_and_set = function() {
  var edit_and_set = null;
  var edit_and_set__4 = function(inode, edit, i, a) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    return editable;
  };
  var edit_and_set__6 = function(inode, edit, i, a, j, b) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    editable.arr[j] = b;
    return editable;
  };
  edit_and_set = function(inode, edit, i, a, j, b) {
    switch(arguments.length) {
      case 4:
        return edit_and_set__4.call(this, inode, edit, i, a);
      case 6:
        return edit_and_set__6.call(this, inode, edit, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  edit_and_set.cljs$core$IFn$_invoke$arity$4 = edit_and_set__4;
  edit_and_set.cljs$core$IFn$_invoke$arity$6 = edit_and_set__6;
  return edit_and_set;
}();
cljs.core.inode_kv_reduce = function inode_kv_reduce(arr, f, init) {
  var len = arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var k = arr[i];
        if (!(k == null)) {
          return f.call(null, init__$1, k, arr[i + 1]);
        } else {
          var node = arr[i + 1];
          if (!(node == null)) {
            return node.kv_reduce(f, init__$1);
          } else {
            return init__$1;
          }
        }
      }();
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__107951 = i + 2;
        var G__107952 = init__$2;
        i = G__107951;
        init__$1 = G__107952;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.BitmapIndexedNode = function(edit, bitmap, arr) {
  this.edit = edit;
  this.bitmap = bitmap;
  this.arr = arr;
};
cljs.core.BitmapIndexedNode.cljs$lang$type = true;
cljs.core.BitmapIndexedNode.cljs$lang$ctorStr = "cljs.core/BitmapIndexedNode";
cljs.core.BitmapIndexedNode.cljs$lang$ctorPrWriter = function(this__13397__auto__, writer__13398__auto__, opt__13399__auto__) {
  return cljs.core._write.call(null, writer__13398__auto__, "cljs.core/BitmapIndexedNode");
};
cljs.core.BitmapIndexedNode.prototype.edit_and_remove_pair = function(e, bit, i) {
  var self__ = this;
  var inode = this;
  if (self__.bitmap === bit) {
    return null;
  } else {
    var editable = inode.ensure_editable(e);
    var earr = editable.arr;
    var len = earr.length;
    editable.bitmap = bit ^ editable.bitmap;
    cljs.core.array_copy.call(null, earr, 2 * (i + 1), earr, 2 * i, len - 2 * (i + 1));
    earr[len - 2] = null;
    earr[len - 1] = null;
    return editable;
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    if (2 * n < self__.arr.length) {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      added_leaf_QMARK_.val = true;
      cljs.core.array_copy_downward.call(null, earr, 2 * idx, earr, 2 * (idx + 1), 2 * (n - idx));
      earr[2 * idx] = key;
      earr[2 * idx + 1] = val;
      editable.bitmap = editable.bitmap | bit;
      return editable;
    } else {
      if (n >= 16) {
        var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var jdx = hash >>> shift & 31;
        nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
        var i_107953 = 0;
        var j_107954 = 0;
        while (true) {
          if (i_107953 < 32) {
            if ((self__.bitmap >>> i_107953 & 1) === 0) {
              var G__107955 = i_107953 + 1;
              var G__107956 = j_107954;
              i_107953 = G__107955;
              j_107954 = G__107956;
              continue;
            } else {
              nodes[i_107953] = !(self__.arr[j_107954] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, cljs.core.hash.call(null, self__.arr[j_107954]), self__.arr[j_107954], self__.arr[j_107954 + 1], added_leaf_QMARK_) : self__.arr[j_107954 + 1];
              var G__107957 = i_107953 + 1;
              var G__107958 = j_107954 + 2;
              i_107953 = G__107957;
              j_107954 = G__107958;
              continue;
            }
          } else {
          }
          break;
        }
        return new cljs.core.ArrayNode(edit__$1, n + 1, nodes);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var new_arr = new Array(2 * (n + 4));
          cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * idx);
          new_arr[2 * idx] = key;
          new_arr[2 * idx + 1] = val;
          cljs.core.array_copy.call(null, self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
          added_leaf_QMARK_.val = true;
          var editable = inode.ensure_editable(edit__$1);
          editable.arr = new_arr;
          editable.bitmap = editable.bitmap | bit;
          return editable;
        } else {
          return null;
        }
      }
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, n);
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, val);
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          added_leaf_QMARK_.val = true;
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.call(null, edit__$1, shift + 5, key_or_nil, val_or_node, hash, key, val));
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.BitmapIndexedNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, n);
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return inode.edit_and_remove_pair(edit__$1, bit, idx);
            } else {
              return null;
            }
          }
        }
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        removed_leaf_QMARK_[0] = true;
        return inode.edit_and_remove_pair(edit__$1, bit, idx);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return inode;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    var new_arr = new Array(n < 0 ? 4 : 2 * (n + 1));
    cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * n);
    return new cljs.core.BitmapIndexedNode(e, self__.bitmap, new_arr);
  }
};
cljs.core.BitmapIndexedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce.call(null, self__.arr, f, init);
};
cljs.core.BitmapIndexedNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_find(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key_or_nil, val_or_node], null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return not_found;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without(shift + 5, hash, key);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, n));
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair.call(null, self__.arr, idx));
            } else {
              return null;
            }
          }
        }
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair.call(null, self__.arr, idx));
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return inode;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    if (n >= 16) {
      var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      var jdx = hash >>> shift & 31;
      nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      var i_107959 = 0;
      var j_107960 = 0;
      while (true) {
        if (i_107959 < 32) {
          if ((self__.bitmap >>> i_107959 & 1) === 0) {
            var G__107961 = i_107959 + 1;
            var G__107962 = j_107960;
            i_107959 = G__107961;
            j_107960 = G__107962;
            continue;
          } else {
            nodes[i_107959] = !(self__.arr[j_107960] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, cljs.core.hash.call(null, self__.arr[j_107960]), self__.arr[j_107960], self__.arr[j_107960 + 1], added_leaf_QMARK_) : self__.arr[j_107960 + 1];
            var G__107963 = i_107959 + 1;
            var G__107964 = j_107960 + 2;
            i_107959 = G__107963;
            j_107960 = G__107964;
            continue;
          }
        } else {
        }
        break;
      }
      return new cljs.core.ArrayNode(null, n + 1, nodes);
    } else {
      var new_arr = new Array(2 * (n + 1));
      cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * idx);
      new_arr[2 * idx] = key;
      new_arr[2 * idx + 1] = val;
      cljs.core.array_copy.call(null, self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
      added_leaf_QMARK_.val = true;
      return new cljs.core.BitmapIndexedNode(null, self__.bitmap | bit, new_arr);
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, n));
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, val));
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          added_leaf_QMARK_.val = true;
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.call(null, shift + 5, key_or_nil, val_or_node, hash, key, val)));
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_lookup(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return val_or_node;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return not_found;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.__GT_BitmapIndexedNode = function __GT_BitmapIndexedNode(edit, bitmap, arr) {
  return new cljs.core.BitmapIndexedNode(edit, bitmap, arr);
};
cljs.core.BitmapIndexedNode.EMPTY = new cljs.core.BitmapIndexedNode(null, 0, []);
cljs.core.pack_array_node = function pack_array_node(array_node, edit, idx) {
  var arr = array_node.arr;
  var len = 2 * (array_node.cnt - 1);
  var new_arr = new Array(len);
  var i = 0;
  var j = 1;
  var bitmap = 0;
  while (true) {
    if (i < len) {
      if (!(i === idx) && !(arr[i] == null)) {
        new_arr[j] = arr[i];
        var G__107965 = i + 1;
        var G__107966 = j + 2;
        var G__107967 = bitmap | 1 << i;
        i = G__107965;
        j = G__107966;
        bitmap = G__107967;
        continue;
      } else {
        var G__107968 = i + 1;
        var G__107969 = j;
        var G__107970 = bitmap;
        i = G__107968;
        j = G__107969;
        bitmap = G__107970;
        continue;
      }
    } else {
      return new cljs.core.BitmapIndexedNode(edit, bitmap, new_arr);
    }
    break;
  }
};
cljs.core.ArrayNode = function(edit, cnt, arr) {
  this.edit = edit;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.ArrayNode.cljs$lang$type = true;
cljs.core.ArrayNode.cljs$lang$ctorStr = "cljs.core/ArrayNode";
cljs.core.ArrayNode.cljs$lang$ctorPrWriter = function(this__13397__auto__, writer__13398__auto__, opt__13399__auto__) {
  return cljs.core._write.call(null, writer__13398__auto__, "cljs.core/ArrayNode");
};
cljs.core.ArrayNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_));
    editable.cnt = editable.cnt + 1;
    return editable;
  } else {
    var n = node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
    }
  }
};
cljs.core.ArrayNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_array_node_seq.call(null, self__.arr);
};
cljs.core.ArrayNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return inode;
  } else {
    var n = node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node.call(null, inode, edit__$1, idx);
        } else {
          var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
          editable.cnt = editable.cnt - 1;
          return editable;
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.ArrayNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    return new cljs.core.ArrayNode(e, self__.cnt, cljs.core.aclone.call(null, self__.arr));
  }
};
cljs.core.ArrayNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var node = self__.arr[i];
      if (!(node == null)) {
        var init__$2 = node.kv_reduce(f, init__$1);
        if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
          return cljs.core.deref.call(null, init__$2);
        } else {
          var G__107971 = i + 1;
          var G__107972 = init__$2;
          i = G__107971;
          init__$1 = G__107972;
          continue;
        }
      } else {
        var G__107973 = i + 1;
        var G__107974 = init__$1;
        i = G__107973;
        init__$1 = G__107974;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ArrayNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_find(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    var n = node.inode_without(shift + 5, hash, key);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node.call(null, inode, null, idx);
        } else {
          return new cljs.core.ArrayNode(null, self__.cnt - 1, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
        } else {
          return null;
        }
      }
    }
  } else {
    return inode;
  }
};
cljs.core.ArrayNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return new cljs.core.ArrayNode(null, self__.cnt + 1, cljs.core.clone_and_set.call(null, self__.arr, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_)));
  } else {
    var n = node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
    }
  }
};
cljs.core.ArrayNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_lookup(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.__GT_ArrayNode = function __GT_ArrayNode(edit, cnt, arr) {
  return new cljs.core.ArrayNode(edit, cnt, arr);
};
cljs.core.hash_collision_node_find_index = function hash_collision_node_find_index(arr, cnt, key) {
  var lim = 2 * cnt;
  var i = 0;
  while (true) {
    if (i < lim) {
      if (cljs.core.key_test.call(null, key, arr[i])) {
        return i;
      } else {
        var G__107975 = i + 2;
        i = G__107975;
        continue;
      }
    } else {
      return-1;
    }
    break;
  }
};
cljs.core.HashCollisionNode = function(edit, collision_hash, cnt, arr) {
  this.edit = edit;
  this.collision_hash = collision_hash;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.HashCollisionNode.cljs$lang$type = true;
cljs.core.HashCollisionNode.cljs$lang$ctorStr = "cljs.core/HashCollisionNode";
cljs.core.HashCollisionNode.cljs$lang$ctorPrWriter = function(this__13397__auto__, writer__13398__auto__, opt__13399__auto__) {
  return cljs.core._write.call(null, writer__13398__auto__, "cljs.core/HashCollisionNode");
};
cljs.core.HashCollisionNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
    if (idx === -1) {
      if (self__.arr.length > 2 * self__.cnt) {
        var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * self__.cnt, key, 2 * self__.cnt + 1, val);
        added_leaf_QMARK_.val = true;
        editable.cnt = editable.cnt + 1;
        return editable;
      } else {
        var len = self__.arr.length;
        var new_arr = new Array(len + 2);
        cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, len);
        new_arr[len] = key;
        new_arr[len + 1] = val;
        added_leaf_QMARK_.val = true;
        return inode.ensure_editable_array(edit__$1, self__.cnt + 1, new_arr);
      }
    } else {
      if (self__.arr[idx + 1] === val) {
        return inode;
      } else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, idx + 1, val);
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(edit__$1, 1 << (self__.collision_hash >>> shift & 31), [null, inode, null, null])).inode_assoc_BANG_(edit__$1, shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.HashCollisionNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    removed_leaf_QMARK_[0] = true;
    if (self__.cnt === 1) {
      return null;
    } else {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      earr[idx] = earr[2 * self__.cnt - 2];
      earr[idx + 1] = earr[2 * self__.cnt - 1];
      earr[2 * self__.cnt - 1] = null;
      earr[2 * self__.cnt - 2] = null;
      editable.cnt = editable.cnt - 1;
      return editable;
    }
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var new_arr = new Array(2 * (self__.cnt + 1));
    cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * self__.cnt);
    return new cljs.core.HashCollisionNode(e, self__.collision_hash, self__.cnt, new_arr);
  }
};
cljs.core.HashCollisionNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce.call(null, self__.arr, f, init);
};
cljs.core.HashCollisionNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test.call(null, key, self__.arr[idx])) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[idx], self__.arr[idx + 1]], null);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    if (self__.cnt === 1) {
      return null;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt - 1, cljs.core.remove_pair.call(null, self__.arr, cljs.core.quot.call(null, idx, 2)));
      } else {
        return null;
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
    if (idx === -1) {
      var len = 2 * self__.cnt;
      var new_arr = new Array(len + 2);
      cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, len);
      new_arr[len] = key;
      new_arr[len + 1] = val;
      added_leaf_QMARK_.val = true;
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt + 1, new_arr);
    } else {
      if (cljs.core._EQ_.call(null, self__.arr[idx], val)) {
        return inode;
      } else {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx + 1, val));
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(null, 1 << (self__.collision_hash >>> shift & 31), [null, inode])).inode_assoc(shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test.call(null, key, self__.arr[idx])) {
      return self__.arr[idx + 1];
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable_array = function(e, count, array) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    self__.arr = array;
    self__.cnt = count;
    return inode;
  } else {
    return new cljs.core.HashCollisionNode(self__.edit, self__.collision_hash, count, array);
  }
};
cljs.core.__GT_HashCollisionNode = function __GT_HashCollisionNode(edit, collision_hash, cnt, arr) {
  return new cljs.core.HashCollisionNode(edit, collision_hash, cnt, arr);
};
cljs.core.create_node = function() {
  var create_node = null;
  var create_node__6 = function(shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash.call(null, key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc(shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  var create_node__7 = function(edit, shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash.call(null, key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit, shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc_BANG_(edit, shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  create_node = function(edit, shift, key1, val1, key2hash, key2, val2) {
    switch(arguments.length) {
      case 6:
        return create_node__6.call(this, edit, shift, key1, val1, key2hash, key2);
      case 7:
        return create_node__7.call(this, edit, shift, key1, val1, key2hash, key2, val2);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_node.cljs$core$IFn$_invoke$arity$6 = create_node__6;
  create_node.cljs$core$IFn$_invoke$arity$7 = create_node__7;
  return create_node;
}();
cljs.core.NodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.NodeSeq.cljs$lang$type = true;
cljs.core.NodeSeq.cljs$lang$ctorStr = "cljs.core/NodeSeq";
cljs.core.NodeSeq.cljs$lang$ctorPrWriter = function(this__13397__auto__, writer__13398__auto__, opt__13399__auto__) {
  return cljs.core._write.call(null, writer__13398__auto__, "cljs.core/NodeSeq");
};
cljs.core.NodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__13241__auto__ = self__.__hash;
  if (!(h__13241__auto__ == null)) {
    return h__13241__auto__;
  } else {
    var h__13241__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__13241__auto____$1;
    return h__13241__auto____$1;
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.NodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.nodes[self__.i], self__.nodes[self__.i + 1]], null);
  } else {
    return cljs.core.first.call(null, self__.s);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return cljs.core.create_inode_seq.call(null, self__.nodes, self__.i + 2, null);
  } else {
    return cljs.core.create_inode_seq.call(null, self__.nodes, self__.i, cljs.core.next.call(null, self__.s));
  }
};
cljs.core.NodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.NodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.NodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.NodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_NodeSeq = function __GT_NodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.NodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.create_inode_seq = function() {
  var create_inode_seq = null;
  var create_inode_seq__1 = function(nodes) {
    return create_inode_seq.call(null, nodes, 0, null);
  };
  var create_inode_seq__3 = function(nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          if (!(nodes[j] == null)) {
            return new cljs.core.NodeSeq(null, nodes, j, null, null);
          } else {
            var temp__4090__auto__ = nodes[j + 1];
            if (cljs.core.truth_(temp__4090__auto__)) {
              var node = temp__4090__auto__;
              var temp__4090__auto____$1 = node.inode_seq();
              if (cljs.core.truth_(temp__4090__auto____$1)) {
                var node_seq = temp__4090__auto____$1;
                return new cljs.core.NodeSeq(null, nodes, j + 2, node_seq, null);
              } else {
                var G__107976 = j + 2;
                j = G__107976;
                continue;
              }
            } else {
              var G__107977 = j + 2;
              j = G__107977;
              continue;
            }
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.NodeSeq(null, nodes, i, s, null);
    }
  };
  create_inode_seq = function(nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_inode_seq__1.call(this, nodes);
      case 3:
        return create_inode_seq__3.call(this, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_inode_seq.cljs$core$IFn$_invoke$arity$1 = create_inode_seq__1;
  create_inode_seq.cljs$core$IFn$_invoke$arity$3 = create_inode_seq__3;
  return create_inode_seq;
}();
cljs.core.ArrayNodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.ArrayNodeSeq.cljs$lang$type = true;
cljs.core.ArrayNodeSeq.cljs$lang$ctorStr = "cljs.core/ArrayNodeSeq";
cljs.core.ArrayNodeSeq.cljs$lang$ctorPrWriter = function(this__13397__auto__, writer__13398__auto__, opt__13399__auto__) {
  return cljs.core._write.call(null, writer__13398__auto__, "cljs.core/ArrayNodeSeq");
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__13241__auto__ = self__.__hash;
  if (!(h__13241__auto__ == null)) {
    return h__13241__auto__;
  } else {
    var h__13241__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__13241__auto____$1;
    return h__13241__auto____$1;
  }
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.s);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.create_array_node_seq.call(null, null, self__.nodes, self__.i, cljs.core.next.call(null, self__.s));
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ArrayNodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_ArrayNodeSeq = function __GT_ArrayNodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.create_array_node_seq = function() {
  var create_array_node_seq = null;
  var create_array_node_seq__1 = function(nodes) {
    return create_array_node_seq.call(null, null, nodes, 0, null);
  };
  var create_array_node_seq__4 = function(meta, nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          var temp__4090__auto__ = nodes[j];
          if (cljs.core.truth_(temp__4090__auto__)) {
            var nj = temp__4090__auto__;
            var temp__4090__auto____$1 = nj.inode_seq();
            if (cljs.core.truth_(temp__4090__auto____$1)) {
              var ns = temp__4090__auto____$1;
              return new cljs.core.ArrayNodeSeq(meta, nodes, j + 1, ns, null);
            } else {
              var G__107978 = j + 1;
              j = G__107978;
              continue;
            }
          } else {
            var G__107979 = j + 1;
            j = G__107979;
            continue;
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, null);
    }
  };
  create_array_node_seq = function(meta, nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_array_node_seq__1.call(this, meta);
      case 4:
        return create_array_node_seq__4.call(this, meta, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_array_node_seq.cljs$core$IFn$_invoke$arity$1 = create_array_node_seq__1;
  create_array_node_seq.cljs$core$IFn$_invoke$arity$4 = create_array_node_seq__4;
  return create_array_node_seq;
}();
cljs.core.PersistentHashMap = function(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.root = root;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
};
cljs.core.PersistentHashMap.cljs$lang$type = true;
cljs.core.PersistentHashMap.cljs$lang$ctorStr = "cljs.core/PersistentHashMap";
cljs.core.PersistentHashMap.cljs$lang$ctorPrWriter = function(this__13397__auto__, writer__13398__auto__, opt__13399__auto__) {
  return cljs.core._write.call(null, writer__13398__auto__, "cljs.core/PersistentHashMap");
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashMap(function() {
    var obj107982 = {};
    return obj107982;
  }(), self__.root, self__.cnt, self__.has_nil_QMARK_, self__.nil_val);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__13241__auto__ = self__.__hash;
  if (!(h__13241__auto__ == null)) {
    return h__13241__auto__;
  } else {
    var h__13241__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__13241__auto____$1;
    return h__13241__auto____$1;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, not_found);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_ && v === self__.nil_val) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, self__.has_nil_QMARK_ ? self__.cnt : self__.cnt + 1, self__.root, true, v, null);
    }
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    var new_root = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc(0, cljs.core.hash.call(null, k), k, v, added_leaf_QMARK_);
    if (new_root === self__.root) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, added_leaf_QMARK_.val ? self__.cnt + 1 : self__.cnt, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    return self__.has_nil_QMARK_;
  } else {
    if (self__.root == null) {
      return false;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return!(self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.call = function() {
  var G__107983 = null;
  var G__107983__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__107983__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__107983 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__107983__2.call(this, self__, k);
      case 3:
        return G__107983__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__107983;
}();
cljs.core.PersistentHashMap.prototype.apply = function(self__, args107980) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args107980)));
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var init__$1 = self__.has_nil_QMARK_ ? f.call(null, init, null, self__.nil_val) : init;
  if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
    return cljs.core.deref.call(null, init__$1);
  } else {
    if (!(self__.root == null)) {
      return self__.root.kv_reduce(f, init__$1);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return init__$1;
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.PersistentHashMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var s = !(self__.root == null) ? self__.root.inode_seq() : null;
    if (self__.has_nil_QMARK_) {
      return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, self__.nil_val], null), s);
    } else {
      return s;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashMap(meta__$1, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashMap(self__.meta, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta.call(null, cljs.core.PersistentHashMap.EMPTY, self__.meta);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, self__.root, false, null, null);
    } else {
      return coll__$1;
    }
  } else {
    if (self__.root == null) {
      return coll__$1;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var new_root = self__.root.inode_without(0, cljs.core.hash.call(null, k), k);
        if (new_root === self__.root) {
          return coll__$1;
        } else {
          return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.__GT_PersistentHashMap = function __GT_PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  return new cljs.core.PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash);
};
cljs.core.PersistentHashMap.EMPTY = new cljs.core.PersistentHashMap(null, 0, null, false, null, 0);
cljs.core.PersistentHashMap.fromArrays = function(ks, vs) {
  var len = ks.length;
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__107984 = i + 1;
      var G__107985 = cljs.core._assoc_BANG_.call(null, out, ks[i], vs[i]);
      i = G__107984;
      out = G__107985;
      continue;
    } else {
      return cljs.core.persistent_BANG_.call(null, out);
    }
    break;
  }
};
cljs.core.TransientHashMap = function(edit, root, count, has_nil_QMARK_, nil_val) {
  this.edit = edit;
  this.root = root;
  this.count = count;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientHashMap.cljs$lang$type = true;
cljs.core.TransientHashMap.cljs$lang$ctorStr = "cljs.core/TransientHashMap";
cljs.core.TransientHashMap.cljs$lang$ctorPrWriter = function(this__13397__auto__, writer__13398__auto__, opt__13399__auto__) {
  return cljs.core._write.call(null, writer__13398__auto__, "cljs.core/TransientHashMap");
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.without_BANG_(key);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.assoc_BANG_(key, val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.conj_BANG_(val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.persistent_BANG_();
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return null;
    }
  } else {
    if (self__.root == null) {
      return null;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, not_found);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.edit) {
    return self__.count;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.conj_BANG_ = function(o) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (function() {
      var G__107986 = o;
      if (G__107986) {
        var bit__13480__auto__ = G__107986.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__13480__auto__ || G__107986.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__107986.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__107986);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__107986);
      }
    }()) {
      return tcoll.assoc_BANG_(cljs.core.key.call(null, o), cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq.call(null, o);
      var tcoll__$1 = tcoll;
      while (true) {
        var temp__4090__auto__ = cljs.core.first.call(null, es);
        if (cljs.core.truth_(temp__4090__auto__)) {
          var e = temp__4090__auto__;
          var G__107987 = cljs.core.next.call(null, es);
          var G__107988 = tcoll__$1.assoc_BANG_(cljs.core.key.call(null, e), cljs.core.val.call(null, e));
          es = G__107987;
          tcoll__$1 = G__107988;
          continue;
        } else {
          return tcoll__$1;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent");
  }
};
cljs.core.TransientHashMap.prototype.assoc_BANG_ = function(k, v) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.nil_val === v) {
      } else {
        self__.nil_val = v;
      }
      if (self__.has_nil_QMARK_) {
      } else {
        self__.count = self__.count + 1;
        self__.has_nil_QMARK_ = true;
      }
      return tcoll;
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      var node = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc_BANG_(self__.edit, 0, cljs.core.hash.call(null, k), k, v, added_leaf_QMARK_);
      if (node === self__.root) {
      } else {
        self__.root = node;
      }
      if (added_leaf_QMARK_.val) {
        self__.count = self__.count + 1;
      } else {
      }
      return tcoll;
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.without_BANG_ = function(k) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.has_nil_QMARK_) {
        self__.has_nil_QMARK_ = false;
        self__.nil_val = null;
        self__.count = self__.count - 1;
        return tcoll;
      } else {
        return tcoll;
      }
    } else {
      if (self__.root == null) {
        return tcoll;
      } else {
        var removed_leaf_QMARK_ = new cljs.core.Box(false);
        var node = self__.root.inode_without_BANG_(self__.edit, 0, cljs.core.hash.call(null, k), k, removed_leaf_QMARK_);
        if (node === self__.root) {
        } else {
          self__.root = node;
        }
        if (cljs.core.truth_(removed_leaf_QMARK_[0])) {
          self__.count = self__.count - 1;
        } else {
        }
        return tcoll;
      }
    }
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.persistent_BANG_ = function() {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    self__.edit = null;
    return new cljs.core.PersistentHashMap(null, self__.count, self__.root, self__.has_nil_QMARK_, self__.nil_val, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.__GT_TransientHashMap = function __GT_TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val) {
  return new cljs.core.TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val);
};
cljs.core.tree_map_seq_push = function tree_map_seq_push(node, stack, ascending_QMARK_) {
  var t = node;
  var stack__$1 = stack;
  while (true) {
    if (!(t == null)) {
      var G__107989 = ascending_QMARK_ ? t.left : t.right;
      var G__107990 = cljs.core.conj.call(null, stack__$1, t);
      t = G__107989;
      stack__$1 = G__107990;
      continue;
    } else {
      return stack__$1;
    }
    break;
  }
};
cljs.core.PersistentTreeMapSeq = function(meta, stack, ascending_QMARK_, cnt, __hash) {
  this.meta = meta;
  this.stack = stack;
  this.ascending_QMARK_ = ascending_QMARK_;
  this.cnt = cnt;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374862;
};
cljs.core.PersistentTreeMapSeq.cljs$lang$type = true;
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentTreeMapSeq";
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorPrWriter = function(this__13397__auto__, writer__13398__auto__, opt__13399__auto__) {
  return cljs.core._write.call(null, writer__13398__auto__, "cljs.core/PersistentTreeMapSeq");
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__13241__auto__ = self__.__hash;
  if (!(h__13241__auto__ == null)) {
    return h__13241__auto__;
  } else {
    var h__13241__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__13241__auto____$1;
    return h__13241__auto____$1;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt < 0) {
    return cljs.core.count.call(null, cljs.core.next.call(null, coll__$1)) + 1;
  } else {
    return self__.cnt;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.peek.call(null, self__.stack);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var t = cljs.core.first.call(null, self__.stack);
  var next_stack = cljs.core.tree_map_seq_push.call(null, self__.ascending_QMARK_ ? t.right : t.left, cljs.core.next.call(null, self__.stack), self__.ascending_QMARK_);
  if (!(next_stack == null)) {
    return new cljs.core.PersistentTreeMapSeq(null, next_stack, self__.ascending_QMARK_, self__.cnt - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMapSeq(meta__$1, self__.stack, self__.ascending_QMARK_, self__.cnt, self__.__hash);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentTreeMapSeq = function __GT_PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash) {
  return new cljs.core.PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash);
};
cljs.core.create_tree_map_seq = function create_tree_map_seq(tree, ascending_QMARK_, cnt) {
  return new cljs.core.PersistentTreeMapSeq(null, cljs.core.tree_map_seq_push.call(null, tree, null, ascending_QMARK_), ascending_QMARK_, cnt, null);
};
cljs.core.balance_left = function balance_left(key, val, ins, right) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, ins.left.blacken(), new cljs.core.BlackNode(key, val, ins.right, right, null), null);
    } else {
      if (ins.right instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.right.key, ins.right.val, new cljs.core.BlackNode(ins.key, ins.val, ins.left, ins.right.left, null), new cljs.core.BlackNode(key, val, ins.right.right, right, null), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return new cljs.core.BlackNode(key, val, ins, right, null);
        } else {
          return null;
        }
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, ins, right, null);
  }
};
cljs.core.balance_right = function balance_right(key, val, left, ins) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, new cljs.core.BlackNode(key, val, left, ins.left, null), ins.right.blacken(), null);
    } else {
      if (ins.left instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.left.key, ins.left.val, new cljs.core.BlackNode(key, val, left, ins.left.left, null), new cljs.core.BlackNode(ins.key, ins.val, ins.left.right, ins.right, null), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return new cljs.core.BlackNode(key, val, left, ins, null);
        } else {
          return null;
        }
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, left, ins, null);
  }
};
cljs.core.balance_left_del = function balance_left_del(key, val, del, right) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, del.blacken(), right, null);
  } else {
    if (right instanceof cljs.core.BlackNode) {
      return cljs.core.balance_right.call(null, key, val, del, right.redden());
    } else {
      if (right instanceof cljs.core.RedNode && right.left instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(right.left.key, right.left.val, new cljs.core.BlackNode(key, val, del, right.left.left, null), cljs.core.balance_right.call(null, right.key, right.val, right.left.right, right.right.redden()), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw new Error("red-black tree invariant violation");
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.balance_right_del = function balance_right_del(key, val, left, del) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, left, del.blacken(), null);
  } else {
    if (left instanceof cljs.core.BlackNode) {
      return cljs.core.balance_left.call(null, key, val, left.redden(), del);
    } else {
      if (left instanceof cljs.core.RedNode && left.right instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(left.right.key, left.right.val, cljs.core.balance_left.call(null, left.key, left.val, left.left.redden(), left.right.left), new cljs.core.BlackNode(key, val, left.right.right, del, null), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw new Error("red-black tree invariant violation");
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_kv_reduce = function tree_map_kv_reduce(node, f, init) {
  var init__$1 = !(node.left == null) ? tree_map_kv_reduce.call(null, node.left, f, init) : init;
  if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
    return cljs.core.deref.call(null, init__$1);
  } else {
    var init__$2 = f.call(null, init__$1, node.key, node.val);
    if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
      return cljs.core.deref.call(null, init__$2);
    } else {
      var init__$3 = !(node.right == null) ? tree_map_kv_reduce.call(null, node.right, f, init__$2) : init__$2;
      if (cljs.core.reduced_QMARK_.call(null, init__$3)) {
        return cljs.core.deref.call(null, init__$3);
      } else {
        return init__$3;
      }
    }
  }
};
cljs.core.BlackNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.BlackNode.cljs$lang$type = true;
cljs.core.BlackNode.cljs$lang$ctorStr = "cljs.core/BlackNode";
cljs.core.BlackNode.cljs$lang$ctorPrWriter = function(this__13397__auto__, writer__13398__auto__, opt__13399__auto__) {
  return cljs.core._write.call(null, writer__13398__auto__, "cljs.core/BlackNode");
};
cljs.core.BlackNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__13241__auto__ = self__.__hash;
  if (!(h__13241__auto__ == null)) {
    return h__13241__auto__;
  } else {
    var h__13241__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__13241__auto____$1;
    return h__13241__auto____$1;
  }
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, null);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, not_found);
};
cljs.core.BlackNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.BlackNode.prototype.call = function() {
  var G__107992 = null;
  var G__107992__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__107992__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__107992 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__107992__2.call(this, self__, k);
      case 3:
        return G__107992__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__107992;
}();
cljs.core.BlackNode.prototype.apply = function(self__, args107991) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args107991)));
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.BlackNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_right(node);
};
cljs.core.BlackNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.BlackNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_right_del.call(null, self__.key, self__.val, self__.left, del);
};
cljs.core.BlackNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.BlackNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce.call(null, node, f, init);
};
cljs.core.BlackNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_left_del.call(null, self__.key, self__.val, del, self__.right);
};
cljs.core.BlackNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_left(node);
};
cljs.core.BlackNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
};
cljs.core.BlackNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
};
cljs.core.BlackNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return node;
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f);
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f, start);
};
cljs.core.BlackNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.BlackNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.BlackNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.BlackNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.BlackNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.BlackNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return null;
      } else {
        return null;
      }
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.__GT_BlackNode = function __GT_BlackNode(key, val, left, right, __hash) {
  return new cljs.core.BlackNode(key, val, left, right, __hash);
};
cljs.core.RedNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.RedNode.cljs$lang$type = true;
cljs.core.RedNode.cljs$lang$ctorStr = "cljs.core/RedNode";
cljs.core.RedNode.cljs$lang$ctorPrWriter = function(this__13397__auto__, writer__13398__auto__, opt__13399__auto__) {
  return cljs.core._write.call(null, writer__13398__auto__, "cljs.core/RedNode");
};
cljs.core.RedNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__13241__auto__ = self__.__hash;
  if (!(h__13241__auto__ == null)) {
    return h__13241__auto__;
  } else {
    var h__13241__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__13241__auto____$1;
    return h__13241__auto____$1;
  }
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, not_found);
};
cljs.core.RedNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.RedNode.prototype.call = function() {
  var G__107994 = null;
  var G__107994__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__107994__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__107994 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__107994__2.call(this, self__, k);
      case 3:
        return G__107994__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__107994;
}();
cljs.core.RedNode.prototype.apply = function(self__, args107993) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args107993)));
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.RedNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, ins, null);
};
cljs.core.RedNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  throw new Error("red-black tree invariant violation");
};
cljs.core.RedNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, del, null);
};
cljs.core.RedNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.RedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce.call(null, node, f, init);
};
cljs.core.RedNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, del, self__.right, null);
};
cljs.core.RedNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, ins, self__.right, null);
};
cljs.core.RedNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.left instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, self__.left.blacken(), new cljs.core.BlackNode(parent.key, parent.val, self__.right, parent.right, null), null);
  } else {
    if (self__.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.right.key, self__.right.val, new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right.left, null), new cljs.core.BlackNode(parent.key, parent.val, self__.right.right, parent.right, null), null);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.right instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left, null), self__.right.blacken(), null);
  } else {
    if (self__.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.left.key, self__.left.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left.left, null), new cljs.core.BlackNode(self__.key, self__.val, self__.left.right, self__.right, null), null);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f);
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f, start);
};
cljs.core.RedNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.RedNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.RedNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.RedNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.RedNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.RedNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return null;
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.__GT_RedNode = function __GT_RedNode(key, val, left, right, __hash) {
  return new cljs.core.RedNode(key, val, left, right, __hash);
};
cljs.core.tree_map_add = function tree_map_add(comp, tree, k, v, found) {
  if (tree == null) {
    return new cljs.core.RedNode(k, v, null, null, null);
  } else {
    var c = comp.call(null, k, tree.key);
    if (c === 0) {
      found[0] = tree;
      return null;
    } else {
      if (c < 0) {
        var ins = tree_map_add.call(null, comp, tree.left, k, v, found);
        if (!(ins == null)) {
          return tree.add_left(ins);
        } else {
          return null;
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var ins = tree_map_add.call(null, comp, tree.right, k, v, found);
          if (!(ins == null)) {
            return tree.add_right(ins);
          } else {
            return null;
          }
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_append = function tree_map_append(left, right) {
  if (left == null) {
    return right;
  } else {
    if (right == null) {
      return left;
    } else {
      if (left instanceof cljs.core.RedNode) {
        if (right instanceof cljs.core.RedNode) {
          var app = tree_map_append.call(null, left.right, right.left);
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.RedNode(left.key, left.val, left.left, app.left, null), new cljs.core.RedNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return new cljs.core.RedNode(left.key, left.val, left.left, new cljs.core.RedNode(right.key, right.val, app, right.right, null), null);
          }
        } else {
          return new cljs.core.RedNode(left.key, left.val, left.left, tree_map_append.call(null, left.right, right), null);
        }
      } else {
        if (right instanceof cljs.core.RedNode) {
          return new cljs.core.RedNode(right.key, right.val, tree_map_append.call(null, left, right.left), right.right, null);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var app = tree_map_append.call(null, left.right, right.left);
            if (app instanceof cljs.core.RedNode) {
              return new cljs.core.RedNode(app.key, app.val, new cljs.core.BlackNode(left.key, left.val, left.left, app.left, null), new cljs.core.BlackNode(right.key, right.val, app.right, right.right, null), null);
            } else {
              return cljs.core.balance_left_del.call(null, left.key, left.val, left.left, new cljs.core.BlackNode(right.key, right.val, app, right.right, null));
            }
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.tree_map_remove = function tree_map_remove(comp, tree, k, found) {
  if (!(tree == null)) {
    var c = comp.call(null, k, tree.key);
    if (c === 0) {
      found[0] = tree;
      return cljs.core.tree_map_append.call(null, tree.left, tree.right);
    } else {
      if (c < 0) {
        var del = tree_map_remove.call(null, comp, tree.left, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.left instanceof cljs.core.BlackNode) {
            return cljs.core.balance_left_del.call(null, tree.key, tree.val, del, tree.right);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, del, tree.right, null);
          }
        } else {
          return null;
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var del = tree_map_remove.call(null, comp, tree.right, k, found);
          if (!(del == null) || !(found[0] == null)) {
            if (tree.right instanceof cljs.core.BlackNode) {
              return cljs.core.balance_right_del.call(null, tree.key, tree.val, tree.left, del);
            } else {
              return new cljs.core.RedNode(tree.key, tree.val, tree.left, del, null);
            }
          } else {
            return null;
          }
        } else {
          return null;
        }
      }
    }
  } else {
    return null;
  }
};
cljs.core.tree_map_replace = function tree_map_replace(comp, tree, k, v) {
  var tk = tree.key;
  var c = comp.call(null, k, tk);
  if (c === 0) {
    return tree.replace(tk, v, tree.left, tree.right);
  } else {
    if (c < 0) {
      return tree.replace(tk, tree.val, tree_map_replace.call(null, comp, tree.left, k, v), tree.right);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return tree.replace(tk, tree.val, tree.left, tree_map_replace.call(null, comp, tree.right, k, v));
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentTreeMap = function(comp, tree, cnt, meta, __hash) {
  this.comp = comp;
  this.tree = tree;
  this.cnt = cnt;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 418776847;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeMap.cljs$lang$type = true;
cljs.core.PersistentTreeMap.cljs$lang$ctorStr = "cljs.core/PersistentTreeMap";
cljs.core.PersistentTreeMap.cljs$lang$ctorPrWriter = function(this__13397__auto__, writer__13398__auto__, opt__13399__auto__) {
  return cljs.core._write.call(null, writer__13398__auto__, "cljs.core/PersistentTreeMap");
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__13241__auto__ = self__.__hash;
  if (!(h__13241__auto__ == null)) {
    return h__13241__auto__;
  } else {
    var h__13241__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__13241__auto____$1;
    return h__13241__auto____$1;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = coll__$1.entry_at(k);
  if (!(n == null)) {
    return n.val;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_add.call(null, self__.comp, self__.tree, k, v, found);
  if (t == null) {
    var found_node = cljs.core.nth.call(null, found, 0);
    if (cljs.core._EQ_.call(null, v, found_node.val)) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, cljs.core.tree_map_replace.call(null, self__.comp, self__.tree, k, v), self__.cnt, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt + 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(coll__$1.entry_at(k) == null);
};
cljs.core.PersistentTreeMap.prototype.call = function() {
  var G__107996 = null;
  var G__107996__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__107996__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__107996 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__107996__2.call(this, self__, k);
      case 3:
        return G__107996__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__107996;
}();
cljs.core.PersistentTreeMap.prototype.apply = function(self__, args107995) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args107995)));
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.tree == null)) {
    return cljs.core.tree_map_kv_reduce.call(null, self__.tree, f, init);
  } else {
    return init;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, false, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeMap.prototype.entry_at = function(k) {
  var self__ = this;
  var coll = this;
  var t = self__.tree;
  while (true) {
    if (!(t == null)) {
      var c = self__.comp.call(null, k, t.key);
      if (c === 0) {
        return t;
      } else {
        if (c < 0) {
          var G__107997 = t.left;
          t = G__107997;
          continue;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var G__107998 = t.right;
            t = G__107998;
            continue;
          } else {
            return null;
          }
        }
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, ascending_QMARK_, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var stack = null;
    var t = self__.tree;
    while (true) {
      if (!(t == null)) {
        var c = self__.comp.call(null, k, t.key);
        if (c === 0) {
          return new cljs.core.PersistentTreeMapSeq(null, cljs.core.conj.call(null, stack, t), ascending_QMARK_, -1, null);
        } else {
          if (cljs.core.truth_(ascending_QMARK_)) {
            if (c < 0) {
              var G__107999 = cljs.core.conj.call(null, stack, t);
              var G__108000 = t.left;
              stack = G__107999;
              t = G__108000;
              continue;
            } else {
              var G__108001 = stack;
              var G__108002 = t.right;
              stack = G__108001;
              t = G__108002;
              continue;
            }
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              if (c > 0) {
                var G__108003 = cljs.core.conj.call(null, stack, t);
                var G__108004 = t.right;
                stack = G__108003;
                t = G__108004;
                continue;
              } else {
                var G__108005 = stack;
                var G__108006 = t.left;
                stack = G__108005;
                t = G__108006;
                continue;
              }
            } else {
              return null;
            }
          }
        }
      } else {
        if (stack == null) {
          return null;
        } else {
          return new cljs.core.PersistentTreeMapSeq(null, stack, ascending_QMARK_, -1, null);
        }
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.key.call(null, entry);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.comp;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, true, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, meta__$1, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, self__.meta, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentTreeMap.EMPTY, self__.meta);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_remove.call(null, self__.comp, self__.tree, k, found);
  if (t == null) {
    if (cljs.core.nth.call(null, found, 0) == null) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt - 1, self__.meta, null);
  }
};
cljs.core.__GT_PersistentTreeMap = function __GT_PersistentTreeMap(comp, tree, cnt, meta, __hash) {
  return new cljs.core.PersistentTreeMap(comp, tree, cnt, meta, __hash);
};
cljs.core.PersistentTreeMap.EMPTY = new cljs.core.PersistentTreeMap(cljs.core.compare, null, 0, null, 0);
cljs.core.hash_map = function() {
  var hash_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
    while (true) {
      if (in$) {
        var G__108007 = cljs.core.nnext.call(null, in$);
        var G__108008 = cljs.core.assoc_BANG_.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__108007;
        out = G__108008;
        continue;
      } else {
        return cljs.core.persistent_BANG_.call(null, out);
      }
      break;
    }
  };
  var hash_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return hash_map__delegate.call(this, keyvals);
  };
  hash_map.cljs$lang$maxFixedArity = 0;
  hash_map.cljs$lang$applyTo = function(arglist__108009) {
    var keyvals = cljs.core.seq(arglist__108009);
    return hash_map__delegate(keyvals);
  };
  hash_map.cljs$core$IFn$_invoke$arity$variadic = hash_map__delegate;
  return hash_map;
}();
cljs.core.array_map = function() {
  var array_map__delegate = function(keyvals) {
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot.call(null, cljs.core.count.call(null, keyvals), 2), cljs.core.apply.call(null, cljs.core.array, keyvals), null);
  };
  var array_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return array_map__delegate.call(this, keyvals);
  };
  array_map.cljs$lang$maxFixedArity = 0;
  array_map.cljs$lang$applyTo = function(arglist__108010) {
    var keyvals = cljs.core.seq(arglist__108010);
    return array_map__delegate(keyvals);
  };
  array_map.cljs$core$IFn$_invoke$arity$variadic = array_map__delegate;
  return array_map;
}();
cljs.core.obj_map = function() {
  var obj_map__delegate = function(keyvals) {
    var ks = [];
    var obj = function() {
      var obj108014 = {};
      return obj108014;
    }();
    var kvs = cljs.core.seq.call(null, keyvals);
    while (true) {
      if (kvs) {
        ks.push(cljs.core.first.call(null, kvs));
        obj[cljs.core.first.call(null, kvs)] = cljs.core.second.call(null, kvs);
        var G__108015 = cljs.core.nnext.call(null, kvs);
        kvs = G__108015;
        continue;
      } else {
        return cljs.core.ObjMap.fromObject.call(null, ks, obj);
      }
      break;
    }
  };
  var obj_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return obj_map__delegate.call(this, keyvals);
  };
  obj_map.cljs$lang$maxFixedArity = 0;
  obj_map.cljs$lang$applyTo = function(arglist__108016) {
    var keyvals = cljs.core.seq(arglist__108016);
    return obj_map__delegate(keyvals);
  };
  obj_map.cljs$core$IFn$_invoke$arity$variadic = obj_map__delegate;
  return obj_map;
}();
cljs.core.sorted_map = function() {
  var sorted_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = cljs.core.PersistentTreeMap.EMPTY;
    while (true) {
      if (in$) {
        var G__108017 = cljs.core.nnext.call(null, in$);
        var G__108018 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__108017;
        out = G__108018;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var sorted_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return sorted_map__delegate.call(this, keyvals);
  };
  sorted_map.cljs$lang$maxFixedArity = 0;
  sorted_map.cljs$lang$applyTo = function(arglist__108019) {
    var keyvals = cljs.core.seq(arglist__108019);
    return sorted_map__delegate(keyvals);
  };
  sorted_map.cljs$core$IFn$_invoke$arity$variadic = sorted_map__delegate;
  return sorted_map;
}();
cljs.core.sorted_map_by = function() {
  var sorted_map_by__delegate = function(comparator, keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = new cljs.core.PersistentTreeMap(cljs.core.fn__GT_comparator.call(null, comparator), null, 0, null, 0);
    while (true) {
      if (in$) {
        var G__108020 = cljs.core.nnext.call(null, in$);
        var G__108021 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__108020;
        out = G__108021;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var sorted_map_by = function(comparator, var_args) {
    var keyvals = null;
    if (arguments.length > 1) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return sorted_map_by__delegate.call(this, comparator, keyvals);
  };
  sorted_map_by.cljs$lang$maxFixedArity = 1;
  sorted_map_by.cljs$lang$applyTo = function(arglist__108022) {
    var comparator = cljs.core.first(arglist__108022);
    var keyvals = cljs.core.rest(arglist__108022);
    return sorted_map_by__delegate(comparator, keyvals);
  };
  sorted_map_by.cljs$core$IFn$_invoke$arity$variadic = sorted_map_by__delegate;
  return sorted_map_by;
}();
cljs.core.KeySeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.KeySeq.cljs$lang$type = true;
cljs.core.KeySeq.cljs$lang$ctorStr = "cljs.core/KeySeq";
cljs.core.KeySeq.cljs$lang$ctorPrWriter = function(this__13397__auto__, writer__13398__auto__, opt__13399__auto__) {
  return cljs.core._write.call(null, writer__13398__auto__, "cljs.core/KeySeq");
};
cljs.core.KeySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__108023 = self__.mseq;
    if (G__108023) {
      var bit__13480__auto__ = G__108023.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__13480__auto__ || G__108023.cljs$core$INext$) {
        return true;
      } else {
        if (!G__108023.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__108023);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__108023);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.KeySeq(nseq, self__._meta);
  }
};
cljs.core.KeySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.KeySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = cljs.core._first.call(null, self__.mseq);
  return cljs.core._key.call(null, me);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__108024 = self__.mseq;
    if (G__108024) {
      var bit__13480__auto__ = G__108024.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__13480__auto__ || G__108024.cljs$core$INext$) {
        return true;
      } else {
        if (!G__108024.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__108024);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__108024);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.KeySeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.KeySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.KeySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.KeySeq(self__.mseq, new_meta);
};
cljs.core.KeySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.KeySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.__GT_KeySeq = function __GT_KeySeq(mseq, _meta) {
  return new cljs.core.KeySeq(mseq, _meta);
};
cljs.core.keys = function keys(hash_map) {
  var temp__4092__auto__ = cljs.core.seq.call(null, hash_map);
  if (temp__4092__auto__) {
    var mseq = temp__4092__auto__;
    return new cljs.core.KeySeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.key = function key(map_entry) {
  return cljs.core._key.call(null, map_entry);
};
cljs.core.ValSeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.ValSeq.cljs$lang$type = true;
cljs.core.ValSeq.cljs$lang$ctorStr = "cljs.core/ValSeq";
cljs.core.ValSeq.cljs$lang$ctorPrWriter = function(this__13397__auto__, writer__13398__auto__, opt__13399__auto__) {
  return cljs.core._write.call(null, writer__13398__auto__, "cljs.core/ValSeq");
};
cljs.core.ValSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__108025 = self__.mseq;
    if (G__108025) {
      var bit__13480__auto__ = G__108025.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__13480__auto__ || G__108025.cljs$core$INext$) {
        return true;
      } else {
        if (!G__108025.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__108025);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__108025);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.ValSeq(nseq, self__._meta);
  }
};
cljs.core.ValSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.ValSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = cljs.core._first.call(null, self__.mseq);
  return cljs.core._val.call(null, me);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__108026 = self__.mseq;
    if (G__108026) {
      var bit__13480__auto__ = G__108026.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__13480__auto__ || G__108026.cljs$core$INext$) {
        return true;
      } else {
        if (!G__108026.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__108026);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__108026);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.ValSeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ValSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ValSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ValSeq(self__.mseq, new_meta);
};
cljs.core.ValSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.ValSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.__GT_ValSeq = function __GT_ValSeq(mseq, _meta) {
  return new cljs.core.ValSeq(mseq, _meta);
};
cljs.core.vals = function vals(hash_map) {
  var temp__4092__auto__ = cljs.core.seq.call(null, hash_map);
  if (temp__4092__auto__) {
    var mseq = temp__4092__auto__;
    return new cljs.core.ValSeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.val = function val(map_entry) {
  return cljs.core._val.call(null, map_entry);
};
cljs.core.merge = function() {
  var merge__delegate = function(maps) {
    if (cljs.core.truth_(cljs.core.some.call(null, cljs.core.identity, maps))) {
      return cljs.core.reduce.call(null, function(p1__108027_SHARP_, p2__108028_SHARP_) {
        return cljs.core.conj.call(null, function() {
          var or__12830__auto__ = p1__108027_SHARP_;
          if (cljs.core.truth_(or__12830__auto__)) {
            return or__12830__auto__;
          } else {
            return cljs.core.PersistentArrayMap.EMPTY;
          }
        }(), p2__108028_SHARP_);
      }, maps);
    } else {
      return null;
    }
  };
  var merge = function(var_args) {
    var maps = null;
    if (arguments.length > 0) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return merge__delegate.call(this, maps);
  };
  merge.cljs$lang$maxFixedArity = 0;
  merge.cljs$lang$applyTo = function(arglist__108029) {
    var maps = cljs.core.seq(arglist__108029);
    return merge__delegate(maps);
  };
  merge.cljs$core$IFn$_invoke$arity$variadic = merge__delegate;
  return merge;
}();
cljs.core.merge_with = function() {
  var merge_with__delegate = function(f, maps) {
    if (cljs.core.truth_(cljs.core.some.call(null, cljs.core.identity, maps))) {
      var merge_entry = function(m, e) {
        var k = cljs.core.first.call(null, e);
        var v = cljs.core.second.call(null, e);
        if (cljs.core.contains_QMARK_.call(null, m, k)) {
          return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), v));
        } else {
          return cljs.core.assoc.call(null, m, k, v);
        }
      };
      var merge2 = function(merge_entry) {
        return function(m1, m2) {
          return cljs.core.reduce.call(null, merge_entry, function() {
            var or__12830__auto__ = m1;
            if (cljs.core.truth_(or__12830__auto__)) {
              return or__12830__auto__;
            } else {
              return cljs.core.PersistentArrayMap.EMPTY;
            }
          }(), cljs.core.seq.call(null, m2));
        };
      }(merge_entry);
      return cljs.core.reduce.call(null, merge2, maps);
    } else {
      return null;
    }
  };
  var merge_with = function(f, var_args) {
    var maps = null;
    if (arguments.length > 1) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return merge_with__delegate.call(this, f, maps);
  };
  merge_with.cljs$lang$maxFixedArity = 1;
  merge_with.cljs$lang$applyTo = function(arglist__108030) {
    var f = cljs.core.first(arglist__108030);
    var maps = cljs.core.rest(arglist__108030);
    return merge_with__delegate(f, maps);
  };
  merge_with.cljs$core$IFn$_invoke$arity$variadic = merge_with__delegate;
  return merge_with;
}();
cljs.core.select_keys = function select_keys(map, keyseq) {
  var ret = cljs.core.PersistentArrayMap.EMPTY;
  var keys = cljs.core.seq.call(null, keyseq);
  while (true) {
    if (keys) {
      var key = cljs.core.first.call(null, keys);
      var entry = cljs.core.get.call(null, map, key, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", 4155500789));
      var G__108031 = cljs.core.not_EQ_.call(null, entry, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", 4155500789)) ? cljs.core.assoc.call(null, ret, key, entry) : ret;
      var G__108032 = cljs.core.next.call(null, keys);
      ret = G__108031;
      keys = G__108032;
      continue;
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.PersistentHashSet = function(meta, hash_map, __hash) {
  this.meta = meta;
  this.hash_map = hash_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
  this.cljs$lang$protocol_mask$partition0$ = 15077647;
};
cljs.core.PersistentHashSet.cljs$lang$type = true;
cljs.core.PersistentHashSet.cljs$lang$ctorStr = "cljs.core/PersistentHashSet";
cljs.core.PersistentHashSet.cljs$lang$ctorPrWriter = function(this__13397__auto__, writer__13398__auto__, opt__13399__auto__) {
  return cljs.core._write.call(null, writer__13398__auto__, "cljs.core/PersistentHashSet");
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashSet(cljs.core._as_transient.call(null, self__.hash_map));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__13241__auto__ = self__.__hash;
  if (!(h__13241__auto__ == null)) {
    return h__13241__auto__;
  } else {
    var h__13241__auto____$1 = cljs.core.hash_iset.call(null, coll__$1);
    self__.__hash = h__13241__auto____$1;
    return h__13241__auto____$1;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, v, null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._contains_key_QMARK_.call(null, self__.hash_map, v)) {
    return v;
  } else {
    return not_found;
  }
};
cljs.core.PersistentHashSet.prototype.call = function() {
  var G__108035 = null;
  var G__108035__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__108035__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__108035 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__108035__2.call(this, self__, k);
      case 3:
        return G__108035__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__108035;
}();
cljs.core.PersistentHashSet.prototype.apply = function(self__, args108034) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args108034)));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core.assoc.call(null, self__.hash_map, o, null), null);
};
cljs.core.PersistentHashSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys.call(null, self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core._dissoc.call(null, self__.hash_map, v), null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._count.call(null, self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_.call(null, other) && (cljs.core.count.call(null, coll__$1) === cljs.core.count.call(null, other) && cljs.core.every_QMARK_.call(null, function(p1__108033_SHARP_) {
    return cljs.core.contains_QMARK_.call(null, coll__$1, p1__108033_SHARP_);
  }, other));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(meta__$1, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentHashSet.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentHashSet = function __GT_PersistentHashSet(meta, hash_map, __hash) {
  return new cljs.core.PersistentHashSet(meta, hash_map, __hash);
};
cljs.core.PersistentHashSet.EMPTY = new cljs.core.PersistentHashSet(null, cljs.core.PersistentArrayMap.EMPTY, 0);
cljs.core.PersistentHashSet.fromArray = function(items, no_clone) {
  var len = items.length;
  if (len <= cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
    var arr = no_clone ? items : cljs.core.aclone.call(null, items);
    var i = 0;
    var out = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__108036 = i + 1;
        var G__108037 = cljs.core._assoc_BANG_.call(null, out, items[i], null);
        i = G__108036;
        out = G__108037;
        continue;
      } else {
        return new cljs.core.PersistentHashSet(null, cljs.core._persistent_BANG_.call(null, out), null);
      }
      break;
    }
  } else {
    var i = 0;
    var out = cljs.core.transient$.call(null, cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < len) {
        var G__108038 = i + 1;
        var G__108039 = cljs.core._conj_BANG_.call(null, out, items[i]);
        i = G__108038;
        out = G__108039;
        continue;
      } else {
        return cljs.core._persistent_BANG_.call(null, out);
      }
      break;
    }
  }
};
cljs.core.TransientHashSet = function(transient_map) {
  this.transient_map = transient_map;
  this.cljs$lang$protocol_mask$partition0$ = 259;
  this.cljs$lang$protocol_mask$partition1$ = 136;
};
cljs.core.TransientHashSet.cljs$lang$type = true;
cljs.core.TransientHashSet.cljs$lang$ctorStr = "cljs.core/TransientHashSet";
cljs.core.TransientHashSet.cljs$lang$ctorPrWriter = function(this__13397__auto__, writer__13398__auto__, opt__13399__auto__) {
  return cljs.core._write.call(null, writer__13398__auto__, "cljs.core/TransientHashSet");
};
cljs.core.TransientHashSet.prototype.call = function() {
  var G__108041 = null;
  var G__108041__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return null;
    } else {
      return k;
    }
  };
  var G__108041__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return not_found;
    } else {
      return k;
    }
  };
  G__108041 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__108041__2.call(this, self__, k);
      case 3:
        return G__108041__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__108041;
}();
cljs.core.TransientHashSet.prototype.apply = function(self__, args108040) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args108040)));
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return null;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.call(null, tcoll__$1, v, null);
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, v, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core._lookup.call(null, self__.transient_map, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return v;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core.count.call(null, self__.transient_map);
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientSet$_disjoin_BANG_$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.dissoc_BANG_.call(null, self__.transient_map, v);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.assoc_BANG_.call(null, self__.transient_map, o, null);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return new cljs.core.PersistentHashSet(null, cljs.core.persistent_BANG_.call(null, self__.transient_map), null);
};
cljs.core.__GT_TransientHashSet = function __GT_TransientHashSet(transient_map) {
  return new cljs.core.TransientHashSet(transient_map);
};
cljs.core.PersistentTreeSet = function(meta, tree_map, __hash) {
  this.meta = meta;
  this.tree_map = tree_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 417730831;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeSet.cljs$lang$type = true;
cljs.core.PersistentTreeSet.cljs$lang$ctorStr = "cljs.core/PersistentTreeSet";
cljs.core.PersistentTreeSet.cljs$lang$ctorPrWriter = function(this__13397__auto__, writer__13398__auto__, opt__13399__auto__) {
  return cljs.core._write.call(null, writer__13398__auto__, "cljs.core/PersistentTreeSet");
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__13241__auto__ = self__.__hash;
  if (!(h__13241__auto__ == null)) {
    return h__13241__auto__;
  } else {
    var h__13241__auto____$1 = cljs.core.hash_iset.call(null, coll__$1);
    self__.__hash = h__13241__auto____$1;
    return h__13241__auto____$1;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, v, null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = self__.tree_map.entry_at(v);
  if (!(n == null)) {
    return n.key;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeSet.prototype.call = function() {
  var G__108044 = null;
  var G__108044__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__108044__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__108044 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__108044__2.call(this, self__, k);
      case 3:
        return G__108044__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__108044;
}();
cljs.core.PersistentTreeSet.prototype.apply = function(self__, args108043) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args108043)));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.assoc.call(null, self__.tree_map, o, null), null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.count.call(null, self__.tree_map) > 0) {
    return cljs.core.map.call(null, cljs.core.key, cljs.core.rseq.call(null, self__.tree_map));
  } else {
    return null;
  }
};
cljs.core.PersistentTreeSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core._sorted_seq.call(null, self__.tree_map, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core._sorted_seq_from.call(null, self__.tree_map, k, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return entry;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._comparator.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.dissoc.call(null, self__.tree_map, v), null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.count.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_.call(null, other) && (cljs.core.count.call(null, coll__$1) === cljs.core.count.call(null, other) && cljs.core.every_QMARK_.call(null, function(p1__108042_SHARP_) {
    return cljs.core.contains_QMARK_.call(null, coll__$1, p1__108042_SHARP_);
  }, other));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(meta__$1, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentTreeSet.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentTreeSet = function __GT_PersistentTreeSet(meta, tree_map, __hash) {
  return new cljs.core.PersistentTreeSet(meta, tree_map, __hash);
};
cljs.core.PersistentTreeSet.EMPTY = new cljs.core.PersistentTreeSet(null, cljs.core.PersistentTreeMap.EMPTY, 0);
cljs.core.set_from_indexed_seq = function set_from_indexed_seq(iseq) {
  var arr = iseq.arr;
  var ret = function() {
    var a__13672__auto__ = arr;
    var i = 0;
    var res = cljs.core._as_transient.call(null, cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < a__13672__auto__.length) {
        var G__108045 = i + 1;
        var G__108046 = cljs.core._conj_BANG_.call(null, res, arr[i]);
        i = G__108045;
        res = G__108046;
        continue;
      } else {
        return res;
      }
      break;
    }
  }();
  return cljs.core._persistent_BANG_.call(null, ret);
};
cljs.core.set = function set(coll) {
  var in$ = cljs.core.seq.call(null, coll);
  if (in$ == null) {
    return cljs.core.PersistentHashSet.EMPTY;
  } else {
    if (in$ instanceof cljs.core.IndexedSeq && in$.i === 0) {
      return cljs.core.set_from_indexed_seq.call(null, in$);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var in$__$1 = in$;
        var out = cljs.core._as_transient.call(null, cljs.core.PersistentHashSet.EMPTY);
        while (true) {
          if (!(in$__$1 == null)) {
            var G__108047 = cljs.core._next.call(null, in$__$1);
            var G__108048 = cljs.core._conj_BANG_.call(null, out, cljs.core._first.call(null, in$__$1));
            in$__$1 = G__108047;
            out = G__108048;
            continue;
          } else {
            return cljs.core._persistent_BANG_.call(null, out);
          }
          break;
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.hash_set = function() {
  var hash_set = null;
  var hash_set__0 = function() {
    return cljs.core.PersistentHashSet.EMPTY;
  };
  var hash_set__1 = function() {
    var G__108049__delegate = function(keys) {
      return cljs.core.set.call(null, keys);
    };
    var G__108049 = function(var_args) {
      var keys = null;
      if (arguments.length > 0) {
        keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__108049__delegate.call(this, keys);
    };
    G__108049.cljs$lang$maxFixedArity = 0;
    G__108049.cljs$lang$applyTo = function(arglist__108050) {
      var keys = cljs.core.seq(arglist__108050);
      return G__108049__delegate(keys);
    };
    G__108049.cljs$core$IFn$_invoke$arity$variadic = G__108049__delegate;
    return G__108049;
  }();
  hash_set = function(var_args) {
    var keys = var_args;
    switch(arguments.length) {
      case 0:
        return hash_set__0.call(this);
      default:
        return hash_set__1.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(arguments, 0));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  hash_set.cljs$lang$maxFixedArity = 0;
  hash_set.cljs$lang$applyTo = hash_set__1.cljs$lang$applyTo;
  hash_set.cljs$core$IFn$_invoke$arity$0 = hash_set__0;
  hash_set.cljs$core$IFn$_invoke$arity$variadic = hash_set__1.cljs$core$IFn$_invoke$arity$variadic;
  return hash_set;
}();
cljs.core.sorted_set = function() {
  var sorted_set__delegate = function(keys) {
    return cljs.core.reduce.call(null, cljs.core._conj, cljs.core.PersistentTreeSet.EMPTY, keys);
  };
  var sorted_set = function(var_args) {
    var keys = null;
    if (arguments.length > 0) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return sorted_set__delegate.call(this, keys);
  };
  sorted_set.cljs$lang$maxFixedArity = 0;
  sorted_set.cljs$lang$applyTo = function(arglist__108051) {
    var keys = cljs.core.seq(arglist__108051);
    return sorted_set__delegate(keys);
  };
  sorted_set.cljs$core$IFn$_invoke$arity$variadic = sorted_set__delegate;
  return sorted_set;
}();
cljs.core.sorted_set_by = function() {
  var sorted_set_by__delegate = function(comparator, keys) {
    return cljs.core.reduce.call(null, cljs.core._conj, new cljs.core.PersistentTreeSet(null, cljs.core.sorted_map_by.call(null, comparator), 0), keys);
  };
  var sorted_set_by = function(comparator, var_args) {
    var keys = null;
    if (arguments.length > 1) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return sorted_set_by__delegate.call(this, comparator, keys);
  };
  sorted_set_by.cljs$lang$maxFixedArity = 1;
  sorted_set_by.cljs$lang$applyTo = function(arglist__108052) {
    var comparator = cljs.core.first(arglist__108052);
    var keys = cljs.core.rest(arglist__108052);
    return sorted_set_by__delegate(comparator, keys);
  };
  sorted_set_by.cljs$core$IFn$_invoke$arity$variadic = sorted_set_by__delegate;
  return sorted_set_by;
}();
cljs.core.replace = function replace(smap, coll) {
  if (cljs.core.vector_QMARK_.call(null, coll)) {
    var n = cljs.core.count.call(null, coll);
    return cljs.core.reduce.call(null, function(v, i) {
      var temp__4090__auto__ = cljs.core.find.call(null, smap, cljs.core.nth.call(null, v, i));
      if (cljs.core.truth_(temp__4090__auto__)) {
        var e = temp__4090__auto__;
        return cljs.core.assoc.call(null, v, i, cljs.core.second.call(null, e));
      } else {
        return v;
      }
    }, coll, cljs.core.take.call(null, n, cljs.core.iterate.call(null, cljs.core.inc, 0)));
  } else {
    return cljs.core.map.call(null, function(p1__108053_SHARP_) {
      var temp__4090__auto__ = cljs.core.find.call(null, smap, p1__108053_SHARP_);
      if (cljs.core.truth_(temp__4090__auto__)) {
        var e = temp__4090__auto__;
        return cljs.core.second.call(null, e);
      } else {
        return p1__108053_SHARP_;
      }
    }, coll);
  }
};
cljs.core.distinct = function distinct(coll) {
  var step = function step(xs, seen) {
    return new cljs.core.LazySeq(null, function() {
      return function(p__108060, seen__$1) {
        while (true) {
          var vec__108061 = p__108060;
          var f = cljs.core.nth.call(null, vec__108061, 0, null);
          var xs__$1 = vec__108061;
          var temp__4092__auto__ = cljs.core.seq.call(null, xs__$1);
          if (temp__4092__auto__) {
            var s = temp__4092__auto__;
            if (cljs.core.contains_QMARK_.call(null, seen__$1, f)) {
              var G__108062 = cljs.core.rest.call(null, s);
              var G__108063 = seen__$1;
              p__108060 = G__108062;
              seen__$1 = G__108063;
              continue;
            } else {
              return cljs.core.cons.call(null, f, step.call(null, cljs.core.rest.call(null, s), cljs.core.conj.call(null, seen__$1, f)));
            }
          } else {
            return null;
          }
          break;
        }
      }.call(null, xs, seen);
    }, null, null);
  };
  return step.call(null, coll, cljs.core.PersistentHashSet.EMPTY);
};
cljs.core.butlast = function butlast(s) {
  var ret = cljs.core.PersistentVector.EMPTY;
  var s__$1 = s;
  while (true) {
    if (cljs.core.next.call(null, s__$1)) {
      var G__108064 = cljs.core.conj.call(null, ret, cljs.core.first.call(null, s__$1));
      var G__108065 = cljs.core.next.call(null, s__$1);
      ret = G__108064;
      s__$1 = G__108065;
      continue;
    } else {
      return cljs.core.seq.call(null, ret);
    }
    break;
  }
};
cljs.core.name = function name(x) {
  if (function() {
    var G__108067 = x;
    if (G__108067) {
      var bit__13473__auto__ = G__108067.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__13473__auto__ || G__108067.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._name.call(null, x);
  } else {
    if (typeof x === "string") {
      return x;
    } else {
      throw new Error([cljs.core.str("Doesn't support name: "), cljs.core.str(x)].join(""));
    }
  }
};
cljs.core.zipmap = function zipmap(keys, vals) {
  var map = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var ks = cljs.core.seq.call(null, keys);
  var vs = cljs.core.seq.call(null, vals);
  while (true) {
    if (ks && vs) {
      var G__108068 = cljs.core.assoc_BANG_.call(null, map, cljs.core.first.call(null, ks), cljs.core.first.call(null, vs));
      var G__108069 = cljs.core.next.call(null, ks);
      var G__108070 = cljs.core.next.call(null, vs);
      map = G__108068;
      ks = G__108069;
      vs = G__108070;
      continue;
    } else {
      return cljs.core.persistent_BANG_.call(null, map);
    }
    break;
  }
};
cljs.core.max_key = function() {
  var max_key = null;
  var max_key__2 = function(k, x) {
    return x;
  };
  var max_key__3 = function(k, x, y) {
    if (k.call(null, x) > k.call(null, y)) {
      return x;
    } else {
      return y;
    }
  };
  var max_key__4 = function() {
    var G__108073__delegate = function(k, x, y, more) {
      return cljs.core.reduce.call(null, function(p1__108071_SHARP_, p2__108072_SHARP_) {
        return max_key.call(null, k, p1__108071_SHARP_, p2__108072_SHARP_);
      }, max_key.call(null, k, x, y), more);
    };
    var G__108073 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__108073__delegate.call(this, k, x, y, more);
    };
    G__108073.cljs$lang$maxFixedArity = 3;
    G__108073.cljs$lang$applyTo = function(arglist__108074) {
      var k = cljs.core.first(arglist__108074);
      arglist__108074 = cljs.core.next(arglist__108074);
      var x = cljs.core.first(arglist__108074);
      arglist__108074 = cljs.core.next(arglist__108074);
      var y = cljs.core.first(arglist__108074);
      var more = cljs.core.rest(arglist__108074);
      return G__108073__delegate(k, x, y, more);
    };
    G__108073.cljs$core$IFn$_invoke$arity$variadic = G__108073__delegate;
    return G__108073;
  }();
  max_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return max_key__2.call(this, k, x);
      case 3:
        return max_key__3.call(this, k, x, y);
      default:
        return max_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max_key.cljs$lang$maxFixedArity = 3;
  max_key.cljs$lang$applyTo = max_key__4.cljs$lang$applyTo;
  max_key.cljs$core$IFn$_invoke$arity$2 = max_key__2;
  max_key.cljs$core$IFn$_invoke$arity$3 = max_key__3;
  max_key.cljs$core$IFn$_invoke$arity$variadic = max_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return max_key;
}();
cljs.core.min_key = function() {
  var min_key = null;
  var min_key__2 = function(k, x) {
    return x;
  };
  var min_key__3 = function(k, x, y) {
    if (k.call(null, x) < k.call(null, y)) {
      return x;
    } else {
      return y;
    }
  };
  var min_key__4 = function() {
    var G__108077__delegate = function(k, x, y, more) {
      return cljs.core.reduce.call(null, function(p1__108075_SHARP_, p2__108076_SHARP_) {
        return min_key.call(null, k, p1__108075_SHARP_, p2__108076_SHARP_);
      }, min_key.call(null, k, x, y), more);
    };
    var G__108077 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__108077__delegate.call(this, k, x, y, more);
    };
    G__108077.cljs$lang$maxFixedArity = 3;
    G__108077.cljs$lang$applyTo = function(arglist__108078) {
      var k = cljs.core.first(arglist__108078);
      arglist__108078 = cljs.core.next(arglist__108078);
      var x = cljs.core.first(arglist__108078);
      arglist__108078 = cljs.core.next(arglist__108078);
      var y = cljs.core.first(arglist__108078);
      var more = cljs.core.rest(arglist__108078);
      return G__108077__delegate(k, x, y, more);
    };
    G__108077.cljs$core$IFn$_invoke$arity$variadic = G__108077__delegate;
    return G__108077;
  }();
  min_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return min_key__2.call(this, k, x);
      case 3:
        return min_key__3.call(this, k, x, y);
      default:
        return min_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min_key.cljs$lang$maxFixedArity = 3;
  min_key.cljs$lang$applyTo = min_key__4.cljs$lang$applyTo;
  min_key.cljs$core$IFn$_invoke$arity$2 = min_key__2;
  min_key.cljs$core$IFn$_invoke$arity$3 = min_key__3;
  min_key.cljs$core$IFn$_invoke$arity$variadic = min_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return min_key;
}();
cljs.core.partition_all = function() {
  var partition_all = null;
  var partition_all__2 = function(n, coll) {
    return partition_all.call(null, n, n, coll);
  };
  var partition_all__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        return cljs.core.cons.call(null, cljs.core.take.call(null, n, s), partition_all.call(null, n, step, cljs.core.drop.call(null, step, s)));
      } else {
        return null;
      }
    }, null, null);
  };
  partition_all = function(n, step, coll) {
    switch(arguments.length) {
      case 2:
        return partition_all__2.call(this, n, step);
      case 3:
        return partition_all__3.call(this, n, step, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition_all.cljs$core$IFn$_invoke$arity$2 = partition_all__2;
  partition_all.cljs$core$IFn$_invoke$arity$3 = partition_all__3;
  return partition_all;
}();
cljs.core.take_while = function take_while(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      if (cljs.core.truth_(pred.call(null, cljs.core.first.call(null, s)))) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, s), take_while.call(null, pred, cljs.core.rest.call(null, s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.mk_bound_fn = function mk_bound_fn(sc, test, key) {
  return function(e) {
    var comp = cljs.core._comparator.call(null, sc);
    return test.call(null, comp.call(null, cljs.core._entry_key.call(null, sc, e), key), 0);
  };
};
cljs.core.subseq = function() {
  var subseq = null;
  var subseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn.call(null, sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._GT_, cljs.core._GT__EQ_], true).call(null, test))) {
      var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, key, true);
      if (cljs.core.truth_(temp__4092__auto__)) {
        var vec__108081 = temp__4092__auto__;
        var e = cljs.core.nth.call(null, vec__108081, 0, null);
        var s = vec__108081;
        if (cljs.core.truth_(include.call(null, e))) {
          return s;
        } else {
          return cljs.core.next.call(null, s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.call(null, include, cljs.core._sorted_seq.call(null, sc, true));
    }
  };
  var subseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, start_key, true);
    if (cljs.core.truth_(temp__4092__auto__)) {
      var vec__108082 = temp__4092__auto__;
      var e = cljs.core.nth.call(null, vec__108082, 0, null);
      var s = vec__108082;
      return cljs.core.take_while.call(null, cljs.core.mk_bound_fn.call(null, sc, end_test, end_key), cljs.core.truth_(cljs.core.mk_bound_fn.call(null, sc, start_test, start_key).call(null, e)) ? s : cljs.core.next.call(null, s));
    } else {
      return null;
    }
  };
  subseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return subseq__3.call(this, sc, start_test, start_key);
      case 5:
        return subseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subseq.cljs$core$IFn$_invoke$arity$3 = subseq__3;
  subseq.cljs$core$IFn$_invoke$arity$5 = subseq__5;
  return subseq;
}();
cljs.core.rsubseq = function() {
  var rsubseq = null;
  var rsubseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn.call(null, sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._LT_, cljs.core._LT__EQ_], true).call(null, test))) {
      var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, key, false);
      if (cljs.core.truth_(temp__4092__auto__)) {
        var vec__108085 = temp__4092__auto__;
        var e = cljs.core.nth.call(null, vec__108085, 0, null);
        var s = vec__108085;
        if (cljs.core.truth_(include.call(null, e))) {
          return s;
        } else {
          return cljs.core.next.call(null, s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.call(null, include, cljs.core._sorted_seq.call(null, sc, false));
    }
  };
  var rsubseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, end_key, false);
    if (cljs.core.truth_(temp__4092__auto__)) {
      var vec__108086 = temp__4092__auto__;
      var e = cljs.core.nth.call(null, vec__108086, 0, null);
      var s = vec__108086;
      return cljs.core.take_while.call(null, cljs.core.mk_bound_fn.call(null, sc, start_test, start_key), cljs.core.truth_(cljs.core.mk_bound_fn.call(null, sc, end_test, end_key).call(null, e)) ? s : cljs.core.next.call(null, s));
    } else {
      return null;
    }
  };
  rsubseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return rsubseq__3.call(this, sc, start_test, start_key);
      case 5:
        return rsubseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rsubseq.cljs$core$IFn$_invoke$arity$3 = rsubseq__3;
  rsubseq.cljs$core$IFn$_invoke$arity$5 = rsubseq__5;
  return rsubseq;
}();
cljs.core.Range = function(meta, start, end, step, __hash) {
  this.meta = meta;
  this.start = start;
  this.end = end;
  this.step = step;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375006;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Range.cljs$lang$type = true;
cljs.core.Range.cljs$lang$ctorStr = "cljs.core/Range";
cljs.core.Range.cljs$lang$ctorPrWriter = function(this__13397__auto__, writer__13398__auto__, opt__13399__auto__) {
  return cljs.core._write.call(null, writer__13398__auto__, "cljs.core/Range");
};
cljs.core.Range.prototype.cljs$core$IHash$_hash$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  var h__13241__auto__ = self__.__hash;
  if (!(h__13241__auto__ == null)) {
    return h__13241__auto__;
  } else {
    var h__13241__auto____$1 = cljs.core.hash_coll.call(null, rng__$1);
    self__.__hash = h__13241__auto____$1;
    return h__13241__auto____$1;
  }
};
cljs.core.Range.prototype.cljs$core$INext$_next$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start + self__.step < self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  } else {
    if (self__.start + self__.step > self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICollection$_conj$arity$2 = function(rng, o) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.cons.call(null, o, rng__$1);
};
cljs.core.Range.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$2 = function(rng, f) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.call(null, rng__$1, f);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$3 = function(rng, f, s) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.call(null, rng__$1, f, s);
};
cljs.core.Range.prototype.cljs$core$ISeqable$_seq$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start < self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  } else {
    if (self__.start > self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICounted$_count$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core.not.call(null, cljs.core._seq.call(null, rng__$1))) {
    return 0;
  } else {
    return Math.ceil((self__.end - self__.start) / self__.step);
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_first$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core._seq.call(null, rng__$1) == null) {
    return null;
  } else {
    return self__.start;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_rest$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (!(cljs.core._seq.call(null, rng__$1) == null)) {
    return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.Range.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(rng, other) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.equiv_sequential.call(null, rng__$1, other);
};
cljs.core.Range.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(rng, meta__$1) {
  var self__ = this;
  var rng__$1 = this;
  return new cljs.core.Range(meta__$1, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Range(self__.meta, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$IMeta$_meta$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return self__.meta;
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$2 = function(rng, n) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count.call(null, rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      throw new Error("Index out of bounds");
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$3 = function(rng, n, not_found) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count.call(null, rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      return not_found;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_Range = function __GT_Range(meta, start, end, step, __hash) {
  return new cljs.core.Range(meta, start, end, step, __hash);
};
cljs.core.range = function() {
  var range = null;
  var range__0 = function() {
    return range.call(null, 0, Number.MAX_VALUE, 1);
  };
  var range__1 = function(end) {
    return range.call(null, 0, end, 1);
  };
  var range__2 = function(start, end) {
    return range.call(null, start, end, 1);
  };
  var range__3 = function(start, end, step) {
    return new cljs.core.Range(null, start, end, step, null);
  };
  range = function(start, end, step) {
    switch(arguments.length) {
      case 0:
        return range__0.call(this);
      case 1:
        return range__1.call(this, start);
      case 2:
        return range__2.call(this, start, end);
      case 3:
        return range__3.call(this, start, end, step);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  range.cljs$core$IFn$_invoke$arity$0 = range__0;
  range.cljs$core$IFn$_invoke$arity$1 = range__1;
  range.cljs$core$IFn$_invoke$arity$2 = range__2;
  range.cljs$core$IFn$_invoke$arity$3 = range__3;
  return range;
}();
cljs.core.take_nth = function take_nth(n, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      return cljs.core.cons.call(null, cljs.core.first.call(null, s), take_nth.call(null, n, cljs.core.drop.call(null, n, s)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.split_with = function split_with(pred, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take_while.call(null, pred, coll), cljs.core.drop_while.call(null, pred, coll)], null);
};
cljs.core.partition_by = function partition_by(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      var fst = cljs.core.first.call(null, s);
      var fv = f.call(null, fst);
      var run = cljs.core.cons.call(null, fst, cljs.core.take_while.call(null, function(fst, fv) {
        return function(p1__108087_SHARP_) {
          return cljs.core._EQ_.call(null, fv, f.call(null, p1__108087_SHARP_));
        };
      }(fst, fv), cljs.core.next.call(null, s)));
      return cljs.core.cons.call(null, run, partition_by.call(null, f, cljs.core.seq.call(null, cljs.core.drop.call(null, cljs.core.count.call(null, run), s))));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.frequencies = function frequencies(coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(counts, x) {
    return cljs.core.assoc_BANG_.call(null, counts, x, cljs.core.get.call(null, counts, x, 0) + 1);
  }, cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.reductions = function() {
  var reductions = null;
  var reductions__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4090__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4090__auto__) {
        var s = temp__4090__auto__;
        return reductions.call(null, f, cljs.core.first.call(null, s), cljs.core.rest.call(null, s));
      } else {
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, f.call(null));
      }
    }, null, null);
  };
  var reductions__3 = function(f, init, coll) {
    return cljs.core.cons.call(null, init, new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        return reductions.call(null, f, f.call(null, init, cljs.core.first.call(null, s)), cljs.core.rest.call(null, s));
      } else {
        return null;
      }
    }, null, null));
  };
  reductions = function(f, init, coll) {
    switch(arguments.length) {
      case 2:
        return reductions__2.call(this, f, init);
      case 3:
        return reductions__3.call(this, f, init, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reductions.cljs$core$IFn$_invoke$arity$2 = reductions__2;
  reductions.cljs$core$IFn$_invoke$arity$3 = reductions__3;
  return reductions;
}();
cljs.core.juxt = function() {
  var juxt = null;
  var juxt__1 = function(f) {
    return function() {
      var G__108098 = null;
      var G__108098__0 = function() {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null)], null);
      };
      var G__108098__1 = function(x) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x)], null);
      };
      var G__108098__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y)], null);
      };
      var G__108098__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z)], null);
      };
      var G__108098__4 = function() {
        var G__108099__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args)], null);
        };
        var G__108099 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__108099__delegate.call(this, x, y, z, args);
        };
        G__108099.cljs$lang$maxFixedArity = 3;
        G__108099.cljs$lang$applyTo = function(arglist__108100) {
          var x = cljs.core.first(arglist__108100);
          arglist__108100 = cljs.core.next(arglist__108100);
          var y = cljs.core.first(arglist__108100);
          arglist__108100 = cljs.core.next(arglist__108100);
          var z = cljs.core.first(arglist__108100);
          var args = cljs.core.rest(arglist__108100);
          return G__108099__delegate(x, y, z, args);
        };
        G__108099.cljs$core$IFn$_invoke$arity$variadic = G__108099__delegate;
        return G__108099;
      }();
      G__108098 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__108098__0.call(this);
          case 1:
            return G__108098__1.call(this, x);
          case 2:
            return G__108098__2.call(this, x, y);
          case 3:
            return G__108098__3.call(this, x, y, z);
          default:
            return G__108098__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__108098.cljs$lang$maxFixedArity = 3;
      G__108098.cljs$lang$applyTo = G__108098__4.cljs$lang$applyTo;
      return G__108098;
    }();
  };
  var juxt__2 = function(f, g) {
    return function() {
      var G__108101 = null;
      var G__108101__0 = function() {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null), g.call(null)], null);
      };
      var G__108101__1 = function(x) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x), g.call(null, x)], null);
      };
      var G__108101__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y), g.call(null, x, y)], null);
      };
      var G__108101__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z), g.call(null, x, y, z)], null);
      };
      var G__108101__4 = function() {
        var G__108102__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args), cljs.core.apply.call(null, g, x, y, z, args)], null);
        };
        var G__108102 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__108102__delegate.call(this, x, y, z, args);
        };
        G__108102.cljs$lang$maxFixedArity = 3;
        G__108102.cljs$lang$applyTo = function(arglist__108103) {
          var x = cljs.core.first(arglist__108103);
          arglist__108103 = cljs.core.next(arglist__108103);
          var y = cljs.core.first(arglist__108103);
          arglist__108103 = cljs.core.next(arglist__108103);
          var z = cljs.core.first(arglist__108103);
          var args = cljs.core.rest(arglist__108103);
          return G__108102__delegate(x, y, z, args);
        };
        G__108102.cljs$core$IFn$_invoke$arity$variadic = G__108102__delegate;
        return G__108102;
      }();
      G__108101 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__108101__0.call(this);
          case 1:
            return G__108101__1.call(this, x);
          case 2:
            return G__108101__2.call(this, x, y);
          case 3:
            return G__108101__3.call(this, x, y, z);
          default:
            return G__108101__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__108101.cljs$lang$maxFixedArity = 3;
      G__108101.cljs$lang$applyTo = G__108101__4.cljs$lang$applyTo;
      return G__108101;
    }();
  };
  var juxt__3 = function(f, g, h) {
    return function() {
      var G__108104 = null;
      var G__108104__0 = function() {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null), g.call(null), h.call(null)], null);
      };
      var G__108104__1 = function(x) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x), g.call(null, x), h.call(null, x)], null);
      };
      var G__108104__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y), g.call(null, x, y), h.call(null, x, y)], null);
      };
      var G__108104__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z), g.call(null, x, y, z), h.call(null, x, y, z)], null);
      };
      var G__108104__4 = function() {
        var G__108105__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args), cljs.core.apply.call(null, g, x, y, z, args), cljs.core.apply.call(null, h, x, y, z, args)], null);
        };
        var G__108105 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__108105__delegate.call(this, x, y, z, args);
        };
        G__108105.cljs$lang$maxFixedArity = 3;
        G__108105.cljs$lang$applyTo = function(arglist__108106) {
          var x = cljs.core.first(arglist__108106);
          arglist__108106 = cljs.core.next(arglist__108106);
          var y = cljs.core.first(arglist__108106);
          arglist__108106 = cljs.core.next(arglist__108106);
          var z = cljs.core.first(arglist__108106);
          var args = cljs.core.rest(arglist__108106);
          return G__108105__delegate(x, y, z, args);
        };
        G__108105.cljs$core$IFn$_invoke$arity$variadic = G__108105__delegate;
        return G__108105;
      }();
      G__108104 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__108104__0.call(this);
          case 1:
            return G__108104__1.call(this, x);
          case 2:
            return G__108104__2.call(this, x, y);
          case 3:
            return G__108104__3.call(this, x, y, z);
          default:
            return G__108104__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__108104.cljs$lang$maxFixedArity = 3;
      G__108104.cljs$lang$applyTo = G__108104__4.cljs$lang$applyTo;
      return G__108104;
    }();
  };
  var juxt__4 = function() {
    var G__108107__delegate = function(f, g, h, fs) {
      var fs__$1 = cljs.core.list_STAR_.call(null, f, g, h, fs);
      return function() {
        var G__108108 = null;
        var G__108108__0 = function() {
          return cljs.core.reduce.call(null, function(p1__108088_SHARP_, p2__108089_SHARP_) {
            return cljs.core.conj.call(null, p1__108088_SHARP_, p2__108089_SHARP_.call(null));
          }, cljs.core.PersistentVector.EMPTY, fs__$1);
        };
        var G__108108__1 = function(x) {
          return cljs.core.reduce.call(null, function(p1__108090_SHARP_, p2__108091_SHARP_) {
            return cljs.core.conj.call(null, p1__108090_SHARP_, p2__108091_SHARP_.call(null, x));
          }, cljs.core.PersistentVector.EMPTY, fs__$1);
        };
        var G__108108__2 = function(x, y) {
          return cljs.core.reduce.call(null, function(p1__108092_SHARP_, p2__108093_SHARP_) {
            return cljs.core.conj.call(null, p1__108092_SHARP_, p2__108093_SHARP_.call(null, x, y));
          }, cljs.core.PersistentVector.EMPTY, fs__$1);
        };
        var G__108108__3 = function(x, y, z) {
          return cljs.core.reduce.call(null, function(p1__108094_SHARP_, p2__108095_SHARP_) {
            return cljs.core.conj.call(null, p1__108094_SHARP_, p2__108095_SHARP_.call(null, x, y, z));
          }, cljs.core.PersistentVector.EMPTY, fs__$1);
        };
        var G__108108__4 = function() {
          var G__108109__delegate = function(x, y, z, args) {
            return cljs.core.reduce.call(null, function(p1__108096_SHARP_, p2__108097_SHARP_) {
              return cljs.core.conj.call(null, p1__108096_SHARP_, cljs.core.apply.call(null, p2__108097_SHARP_, x, y, z, args));
            }, cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__108109 = function(x, y, z, var_args) {
            var args = null;
            if (arguments.length > 3) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
            }
            return G__108109__delegate.call(this, x, y, z, args);
          };
          G__108109.cljs$lang$maxFixedArity = 3;
          G__108109.cljs$lang$applyTo = function(arglist__108110) {
            var x = cljs.core.first(arglist__108110);
            arglist__108110 = cljs.core.next(arglist__108110);
            var y = cljs.core.first(arglist__108110);
            arglist__108110 = cljs.core.next(arglist__108110);
            var z = cljs.core.first(arglist__108110);
            var args = cljs.core.rest(arglist__108110);
            return G__108109__delegate(x, y, z, args);
          };
          G__108109.cljs$core$IFn$_invoke$arity$variadic = G__108109__delegate;
          return G__108109;
        }();
        G__108108 = function(x, y, z, var_args) {
          var args = var_args;
          switch(arguments.length) {
            case 0:
              return G__108108__0.call(this);
            case 1:
              return G__108108__1.call(this, x);
            case 2:
              return G__108108__2.call(this, x, y);
            case 3:
              return G__108108__3.call(this, x, y, z);
            default:
              return G__108108__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__108108.cljs$lang$maxFixedArity = 3;
        G__108108.cljs$lang$applyTo = G__108108__4.cljs$lang$applyTo;
        return G__108108;
      }();
    };
    var G__108107 = function(f, g, h, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__108107__delegate.call(this, f, g, h, fs);
    };
    G__108107.cljs$lang$maxFixedArity = 3;
    G__108107.cljs$lang$applyTo = function(arglist__108111) {
      var f = cljs.core.first(arglist__108111);
      arglist__108111 = cljs.core.next(arglist__108111);
      var g = cljs.core.first(arglist__108111);
      arglist__108111 = cljs.core.next(arglist__108111);
      var h = cljs.core.first(arglist__108111);
      var fs = cljs.core.rest(arglist__108111);
      return G__108107__delegate(f, g, h, fs);
    };
    G__108107.cljs$core$IFn$_invoke$arity$variadic = G__108107__delegate;
    return G__108107;
  }();
  juxt = function(f, g, h, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 1:
        return juxt__1.call(this, f);
      case 2:
        return juxt__2.call(this, f, g);
      case 3:
        return juxt__3.call(this, f, g, h);
      default:
        return juxt__4.cljs$core$IFn$_invoke$arity$variadic(f, g, h, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  juxt.cljs$lang$maxFixedArity = 3;
  juxt.cljs$lang$applyTo = juxt__4.cljs$lang$applyTo;
  juxt.cljs$core$IFn$_invoke$arity$1 = juxt__1;
  juxt.cljs$core$IFn$_invoke$arity$2 = juxt__2;
  juxt.cljs$core$IFn$_invoke$arity$3 = juxt__3;
  juxt.cljs$core$IFn$_invoke$arity$variadic = juxt__4.cljs$core$IFn$_invoke$arity$variadic;
  return juxt;
}();
cljs.core.dorun = function() {
  var dorun = null;
  var dorun__1 = function(coll) {
    while (true) {
      if (cljs.core.seq.call(null, coll)) {
        var G__108112 = cljs.core.next.call(null, coll);
        coll = G__108112;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  var dorun__2 = function(n, coll) {
    while (true) {
      if (cljs.core.seq.call(null, coll) && n > 0) {
        var G__108113 = n - 1;
        var G__108114 = cljs.core.next.call(null, coll);
        n = G__108113;
        coll = G__108114;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  dorun = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return dorun__1.call(this, n);
      case 2:
        return dorun__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dorun.cljs$core$IFn$_invoke$arity$1 = dorun__1;
  dorun.cljs$core$IFn$_invoke$arity$2 = dorun__2;
  return dorun;
}();
cljs.core.doall = function() {
  var doall = null;
  var doall__1 = function(coll) {
    cljs.core.dorun.call(null, coll);
    return coll;
  };
  var doall__2 = function(n, coll) {
    cljs.core.dorun.call(null, n, coll);
    return coll;
  };
  doall = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return doall__1.call(this, n);
      case 2:
        return doall__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  doall.cljs$core$IFn$_invoke$arity$1 = doall__1;
  doall.cljs$core$IFn$_invoke$arity$2 = doall__2;
  return doall;
}();
cljs.core.regexp_QMARK_ = function regexp_QMARK_(o) {
  return o instanceof RegExp;
};
cljs.core.re_matches = function re_matches(re, s) {
  var matches = re.exec(s);
  if (cljs.core._EQ_.call(null, cljs.core.first.call(null, matches), s)) {
    if (cljs.core.count.call(null, matches) === 1) {
      return cljs.core.first.call(null, matches);
    } else {
      return cljs.core.vec.call(null, matches);
    }
  } else {
    return null;
  }
};
cljs.core.re_find = function re_find(re, s) {
  var matches = re.exec(s);
  if (matches == null) {
    return null;
  } else {
    if (cljs.core.count.call(null, matches) === 1) {
      return cljs.core.first.call(null, matches);
    } else {
      return cljs.core.vec.call(null, matches);
    }
  }
};
cljs.core.re_seq = function re_seq(re, s) {
  var match_data = cljs.core.re_find.call(null, re, s);
  var match_idx = s.search(re);
  var match_str = cljs.core.coll_QMARK_.call(null, match_data) ? cljs.core.first.call(null, match_data) : match_data;
  var post_match = cljs.core.subs.call(null, s, match_idx + cljs.core.count.call(null, match_str));
  if (cljs.core.truth_(match_data)) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, match_data, cljs.core.seq.call(null, post_match) ? re_seq.call(null, re, post_match) : null);
    }, null, null);
  } else {
    return null;
  }
};
cljs.core.re_pattern = function re_pattern(s) {
  var vec__108116 = cljs.core.re_find.call(null, /^(?:\(\?([idmsux]*)\))?(.*)/, s);
  var _ = cljs.core.nth.call(null, vec__108116, 0, null);
  var flags = cljs.core.nth.call(null, vec__108116, 1, null);
  var pattern = cljs.core.nth.call(null, vec__108116, 2, null);
  return new RegExp(pattern, flags);
};
cljs.core.pr_sequential_writer = function pr_sequential_writer(writer, print_one, begin, sep, end, opts, coll) {
  var _STAR_print_level_STAR_108118 = cljs.core._STAR_print_level_STAR_;
  try {
    cljs.core._STAR_print_level_STAR_ = cljs.core._STAR_print_level_STAR_ == null ? null : cljs.core._STAR_print_level_STAR_ - 1;
    if (!(cljs.core._STAR_print_level_STAR_ == null) && cljs.core._STAR_print_level_STAR_ < 0) {
      return cljs.core._write.call(null, writer, "#");
    } else {
      cljs.core._write.call(null, writer, begin);
      if (cljs.core.seq.call(null, coll)) {
        print_one.call(null, cljs.core.first.call(null, coll), writer, opts);
      } else {
      }
      var coll_108119__$1 = cljs.core.next.call(null, coll);
      var n_108120 = (new cljs.core.Keyword(null, "print-length", "print-length", 3960797560)).cljs$core$IFn$_invoke$arity$1(opts);
      while (true) {
        if (coll_108119__$1 && (n_108120 == null || !(n_108120 === 0))) {
          cljs.core._write.call(null, writer, sep);
          print_one.call(null, cljs.core.first.call(null, coll_108119__$1), writer, opts);
          var G__108121 = cljs.core.next.call(null, coll_108119__$1);
          var G__108122 = n_108120 - 1;
          coll_108119__$1 = G__108121;
          n_108120 = G__108122;
          continue;
        } else {
        }
        break;
      }
      if (cljs.core.truth_((new cljs.core.Keyword(null, "print-length", "print-length", 3960797560)).cljs$core$IFn$_invoke$arity$1(opts))) {
        cljs.core._write.call(null, writer, sep);
        print_one.call(null, "...", writer, opts);
      } else {
      }
      return cljs.core._write.call(null, writer, end);
    }
  } finally {
    cljs.core._STAR_print_level_STAR_ = _STAR_print_level_STAR_108118;
  }
};
cljs.core.write_all = function() {
  var write_all__delegate = function(writer, ss) {
    var seq__108127 = cljs.core.seq.call(null, ss);
    var chunk__108128 = null;
    var count__108129 = 0;
    var i__108130 = 0;
    while (true) {
      if (i__108130 < count__108129) {
        var s = cljs.core._nth.call(null, chunk__108128, i__108130);
        cljs.core._write.call(null, writer, s);
        var G__108131 = seq__108127;
        var G__108132 = chunk__108128;
        var G__108133 = count__108129;
        var G__108134 = i__108130 + 1;
        seq__108127 = G__108131;
        chunk__108128 = G__108132;
        count__108129 = G__108133;
        i__108130 = G__108134;
        continue;
      } else {
        var temp__4092__auto__ = cljs.core.seq.call(null, seq__108127);
        if (temp__4092__auto__) {
          var seq__108127__$1 = temp__4092__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__108127__$1)) {
            var c__13578__auto__ = cljs.core.chunk_first.call(null, seq__108127__$1);
            var G__108135 = cljs.core.chunk_rest.call(null, seq__108127__$1);
            var G__108136 = c__13578__auto__;
            var G__108137 = cljs.core.count.call(null, c__13578__auto__);
            var G__108138 = 0;
            seq__108127 = G__108135;
            chunk__108128 = G__108136;
            count__108129 = G__108137;
            i__108130 = G__108138;
            continue;
          } else {
            var s = cljs.core.first.call(null, seq__108127__$1);
            cljs.core._write.call(null, writer, s);
            var G__108139 = cljs.core.next.call(null, seq__108127__$1);
            var G__108140 = null;
            var G__108141 = 0;
            var G__108142 = 0;
            seq__108127 = G__108139;
            chunk__108128 = G__108140;
            count__108129 = G__108141;
            i__108130 = G__108142;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  };
  var write_all = function(writer, var_args) {
    var ss = null;
    if (arguments.length > 1) {
      ss = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return write_all__delegate.call(this, writer, ss);
  };
  write_all.cljs$lang$maxFixedArity = 1;
  write_all.cljs$lang$applyTo = function(arglist__108143) {
    var writer = cljs.core.first(arglist__108143);
    var ss = cljs.core.rest(arglist__108143);
    return write_all__delegate(writer, ss);
  };
  write_all.cljs$core$IFn$_invoke$arity$variadic = write_all__delegate;
  return write_all;
}();
cljs.core.string_print = function string_print(x) {
  cljs.core._STAR_print_fn_STAR_.call(null, x);
  return null;
};
cljs.core.flush = function flush() {
  return null;
};
cljs.core.char_escapes = function() {
  var obj108145 = {'"':'\\"', "\\":"\\\\", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t"};
  return obj108145;
}();
cljs.core.quote_string = function quote_string(s) {
  return[cljs.core.str('"'), cljs.core.str(s.replace(RegExp('[\\\\"\b\f\n\r\t]', "g"), function(match) {
    return cljs.core.char_escapes[match];
  })), cljs.core.str('"')].join("");
};
cljs.core.pr_writer = function pr_writer(obj, writer, opts) {
  if (obj == null) {
    return cljs.core._write.call(null, writer, "nil");
  } else {
    if (void 0 === obj) {
      return cljs.core._write.call(null, writer, "#\x3cundefined\x3e");
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        if (cljs.core.truth_(function() {
          var and__12818__auto__ = cljs.core.get.call(null, opts, new cljs.core.Keyword(null, "meta", "meta", 1017252215));
          if (cljs.core.truth_(and__12818__auto__)) {
            var and__12818__auto____$1 = function() {
              var G__108151 = obj;
              if (G__108151) {
                var bit__13480__auto__ = G__108151.cljs$lang$protocol_mask$partition0$ & 131072;
                if (bit__13480__auto__ || G__108151.cljs$core$IMeta$) {
                  return true;
                } else {
                  if (!G__108151.cljs$lang$protocol_mask$partition0$) {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__108151);
                  } else {
                    return false;
                  }
                }
              } else {
                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__108151);
              }
            }();
            if (and__12818__auto____$1) {
              return cljs.core.meta.call(null, obj);
            } else {
              return and__12818__auto____$1;
            }
          } else {
            return and__12818__auto__;
          }
        }())) {
          cljs.core._write.call(null, writer, "^");
          pr_writer.call(null, cljs.core.meta.call(null, obj), writer, opts);
          cljs.core._write.call(null, writer, " ");
        } else {
        }
        if (obj == null) {
          return cljs.core._write.call(null, writer, "nil");
        } else {
          if (obj.cljs$lang$type) {
            return obj.cljs$lang$ctorPrWriter(obj, writer, opts);
          } else {
            if (function() {
              var G__108152 = obj;
              if (G__108152) {
                var bit__13473__auto__ = G__108152.cljs$lang$protocol_mask$partition0$ & 2147483648;
                if (bit__13473__auto__ || G__108152.cljs$core$IPrintWithWriter$) {
                  return true;
                } else {
                  return false;
                }
              } else {
                return false;
              }
            }()) {
              return cljs.core._pr_writer.call(null, obj, writer, opts);
            } else {
              if (cljs.core.type.call(null, obj) === Boolean || typeof obj === "number") {
                return cljs.core._write.call(null, writer, [cljs.core.str(obj)].join(""));
              } else {
                if (cljs.core.object_QMARK_.call(null, obj)) {
                  cljs.core._write.call(null, writer, "#js ");
                  return cljs.core.print_map.call(null, cljs.core.map.call(null, function(k) {
                    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k), obj[k]], null);
                  }, cljs.core.js_keys.call(null, obj)), pr_writer, writer, opts);
                } else {
                  if (obj instanceof Array) {
                    return cljs.core.pr_sequential_writer.call(null, writer, pr_writer, "#js [", " ", "]", opts, obj);
                  } else {
                    if (goog.isString(obj)) {
                      if (cljs.core.truth_((new cljs.core.Keyword(null, "readably", "readably", 4441712502)).cljs$core$IFn$_invoke$arity$1(opts))) {
                        return cljs.core._write.call(null, writer, cljs.core.quote_string.call(null, obj));
                      } else {
                        return cljs.core._write.call(null, writer, obj);
                      }
                    } else {
                      if (cljs.core.fn_QMARK_.call(null, obj)) {
                        return cljs.core.write_all.call(null, writer, "#\x3c", [cljs.core.str(obj)].join(""), "\x3e");
                      } else {
                        if (obj instanceof Date) {
                          var normalize = function(n, len) {
                            var ns = [cljs.core.str(n)].join("");
                            while (true) {
                              if (cljs.core.count.call(null, ns) < len) {
                                var G__108154 = [cljs.core.str("0"), cljs.core.str(ns)].join("");
                                ns = G__108154;
                                continue;
                              } else {
                                return ns;
                              }
                              break;
                            }
                          };
                          return cljs.core.write_all.call(null, writer, '#inst "', [cljs.core.str(obj.getUTCFullYear())].join(""), "-", normalize.call(null, obj.getUTCMonth() + 1, 2), "-", normalize.call(null, obj.getUTCDate(), 2), "T", normalize.call(null, obj.getUTCHours(), 2), ":", normalize.call(null, obj.getUTCMinutes(), 2), ":", normalize.call(null, obj.getUTCSeconds(), 2), ".", normalize.call(null, obj.getUTCMilliseconds(), 3), "-", '00:00"');
                        } else {
                          if (cljs.core.regexp_QMARK_.call(null, obj)) {
                            return cljs.core.write_all.call(null, writer, '#"', obj.source, '"');
                          } else {
                            if (function() {
                              var G__108153 = obj;
                              if (G__108153) {
                                var bit__13480__auto__ = G__108153.cljs$lang$protocol_mask$partition0$ & 2147483648;
                                if (bit__13480__auto__ || G__108153.cljs$core$IPrintWithWriter$) {
                                  return true;
                                } else {
                                  if (!G__108153.cljs$lang$protocol_mask$partition0$) {
                                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IPrintWithWriter, G__108153);
                                  } else {
                                    return false;
                                  }
                                }
                              } else {
                                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IPrintWithWriter, G__108153);
                              }
                            }()) {
                              return cljs.core._pr_writer.call(null, obj, writer, opts);
                            } else {
                              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                                return cljs.core.write_all.call(null, writer, "#\x3c", [cljs.core.str(obj)].join(""), "\x3e");
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.pr_seq_writer = function pr_seq_writer(objs, writer, opts) {
  cljs.core.pr_writer.call(null, cljs.core.first.call(null, objs), writer, opts);
  var seq__108159 = cljs.core.seq.call(null, cljs.core.next.call(null, objs));
  var chunk__108160 = null;
  var count__108161 = 0;
  var i__108162 = 0;
  while (true) {
    if (i__108162 < count__108161) {
      var obj = cljs.core._nth.call(null, chunk__108160, i__108162);
      cljs.core._write.call(null, writer, " ");
      cljs.core.pr_writer.call(null, obj, writer, opts);
      var G__108163 = seq__108159;
      var G__108164 = chunk__108160;
      var G__108165 = count__108161;
      var G__108166 = i__108162 + 1;
      seq__108159 = G__108163;
      chunk__108160 = G__108164;
      count__108161 = G__108165;
      i__108162 = G__108166;
      continue;
    } else {
      var temp__4092__auto__ = cljs.core.seq.call(null, seq__108159);
      if (temp__4092__auto__) {
        var seq__108159__$1 = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__108159__$1)) {
          var c__13578__auto__ = cljs.core.chunk_first.call(null, seq__108159__$1);
          var G__108167 = cljs.core.chunk_rest.call(null, seq__108159__$1);
          var G__108168 = c__13578__auto__;
          var G__108169 = cljs.core.count.call(null, c__13578__auto__);
          var G__108170 = 0;
          seq__108159 = G__108167;
          chunk__108160 = G__108168;
          count__108161 = G__108169;
          i__108162 = G__108170;
          continue;
        } else {
          var obj = cljs.core.first.call(null, seq__108159__$1);
          cljs.core._write.call(null, writer, " ");
          cljs.core.pr_writer.call(null, obj, writer, opts);
          var G__108171 = cljs.core.next.call(null, seq__108159__$1);
          var G__108172 = null;
          var G__108173 = 0;
          var G__108174 = 0;
          seq__108159 = G__108171;
          chunk__108160 = G__108172;
          count__108161 = G__108173;
          i__108162 = G__108174;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.pr_sb_with_opts = function pr_sb_with_opts(objs, opts) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core.pr_seq_writer.call(null, objs, writer, opts);
  cljs.core._flush.call(null, writer);
  return sb;
};
cljs.core.pr_str_with_opts = function pr_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_.call(null, objs)) {
    return "";
  } else {
    return[cljs.core.str(cljs.core.pr_sb_with_opts.call(null, objs, opts))].join("");
  }
};
cljs.core.prn_str_with_opts = function prn_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_.call(null, objs)) {
    return "\n";
  } else {
    var sb = cljs.core.pr_sb_with_opts.call(null, objs, opts);
    sb.append("\n");
    return[cljs.core.str(sb)].join("");
  }
};
cljs.core.pr_with_opts = function pr_with_opts(objs, opts) {
  return cljs.core.string_print.call(null, cljs.core.pr_str_with_opts.call(null, objs, opts));
};
cljs.core.newline = function newline(opts) {
  cljs.core.string_print.call(null, "\n");
  if (cljs.core.truth_(cljs.core.get.call(null, opts, new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", 4338025857)))) {
    return cljs.core.flush.call(null);
  } else {
    return null;
  }
};
cljs.core.pr_str = function() {
  var pr_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var pr_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return pr_str__delegate.call(this, objs);
  };
  pr_str.cljs$lang$maxFixedArity = 0;
  pr_str.cljs$lang$applyTo = function(arglist__108175) {
    var objs = cljs.core.seq(arglist__108175);
    return pr_str__delegate(objs);
  };
  pr_str.cljs$core$IFn$_invoke$arity$variadic = pr_str__delegate;
  return pr_str;
}();
cljs.core.prn_str = function() {
  var prn_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var prn_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return prn_str__delegate.call(this, objs);
  };
  prn_str.cljs$lang$maxFixedArity = 0;
  prn_str.cljs$lang$applyTo = function(arglist__108176) {
    var objs = cljs.core.seq(arglist__108176);
    return prn_str__delegate(objs);
  };
  prn_str.cljs$core$IFn$_invoke$arity$variadic = prn_str__delegate;
  return prn_str;
}();
cljs.core.pr = function() {
  var pr__delegate = function(objs) {
    return cljs.core.pr_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var pr = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return pr__delegate.call(this, objs);
  };
  pr.cljs$lang$maxFixedArity = 0;
  pr.cljs$lang$applyTo = function(arglist__108177) {
    var objs = cljs.core.seq(arglist__108177);
    return pr__delegate(objs);
  };
  pr.cljs$core$IFn$_invoke$arity$variadic = pr__delegate;
  return pr;
}();
cljs.core.print = function() {
  var cljs_core_print__delegate = function(objs) {
    return cljs.core.pr_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
  };
  var cljs_core_print = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return cljs_core_print__delegate.call(this, objs);
  };
  cljs_core_print.cljs$lang$maxFixedArity = 0;
  cljs_core_print.cljs$lang$applyTo = function(arglist__108178) {
    var objs = cljs.core.seq(arglist__108178);
    return cljs_core_print__delegate(objs);
  };
  cljs_core_print.cljs$core$IFn$_invoke$arity$variadic = cljs_core_print__delegate;
  return cljs_core_print;
}();
cljs.core.print_str = function() {
  var print_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
  };
  var print_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return print_str__delegate.call(this, objs);
  };
  print_str.cljs$lang$maxFixedArity = 0;
  print_str.cljs$lang$applyTo = function(arglist__108179) {
    var objs = cljs.core.seq(arglist__108179);
    return print_str__delegate(objs);
  };
  print_str.cljs$core$IFn$_invoke$arity$variadic = print_str__delegate;
  return print_str;
}();
cljs.core.println = function() {
  var println__delegate = function(objs) {
    cljs.core.pr_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline.call(null, cljs.core.pr_opts.call(null));
    } else {
      return null;
    }
  };
  var println = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return println__delegate.call(this, objs);
  };
  println.cljs$lang$maxFixedArity = 0;
  println.cljs$lang$applyTo = function(arglist__108180) {
    var objs = cljs.core.seq(arglist__108180);
    return println__delegate(objs);
  };
  println.cljs$core$IFn$_invoke$arity$variadic = println__delegate;
  return println;
}();
cljs.core.println_str = function() {
  var println_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
  };
  var println_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return println_str__delegate.call(this, objs);
  };
  println_str.cljs$lang$maxFixedArity = 0;
  println_str.cljs$lang$applyTo = function(arglist__108181) {
    var objs = cljs.core.seq(arglist__108181);
    return println_str__delegate(objs);
  };
  println_str.cljs$core$IFn$_invoke$arity$variadic = println_str__delegate;
  return println_str;
}();
cljs.core.prn = function() {
  var prn__delegate = function(objs) {
    cljs.core.pr_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline.call(null, cljs.core.pr_opts.call(null));
    } else {
      return null;
    }
  };
  var prn = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return prn__delegate.call(this, objs);
  };
  prn.cljs$lang$maxFixedArity = 0;
  prn.cljs$lang$applyTo = function(arglist__108182) {
    var objs = cljs.core.seq(arglist__108182);
    return prn__delegate(objs);
  };
  prn.cljs$core$IFn$_invoke$arity$variadic = prn__delegate;
  return prn;
}();
cljs.core.print_map = function print_map(m, print_one, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, function(e, w, opts__$1) {
    print_one.call(null, cljs.core.key.call(null, e), w, opts__$1);
    cljs.core._write.call(null, w, " ");
    return print_one.call(null, cljs.core.val.call(null, e), w, opts__$1);
  }, "{", ", ", "}", opts, cljs.core.seq.call(null, m));
};
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#queue [", " ", "]", opts, cljs.core.seq.call(null, coll__$1));
};
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.List.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.List.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core._write.call(null, writer, "()");
};
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IComparable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.call(null, x__$1, y);
};
cljs.core.Subvec.prototype.cljs$core$IComparable$ = true;
cljs.core.Subvec.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.call(null, x__$1, y);
};
cljs.core.Keyword.prototype.cljs$core$IComparable$ = true;
cljs.core.Keyword.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols.call(null, x__$1, y);
};
cljs.core.Symbol.prototype.cljs$core$IComparable$ = true;
cljs.core.Symbol.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols.call(null, x__$1, y);
};
cljs.core.IAtom = function() {
  var obj108184 = {};
  return obj108184;
}();
cljs.core.IReset = function() {
  var obj108186 = {};
  return obj108186;
}();
cljs.core._reset_BANG_ = function _reset_BANG_(o, new_value) {
  if (function() {
    var and__12818__auto__ = o;
    if (and__12818__auto__) {
      return o.cljs$core$IReset$_reset_BANG_$arity$2;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return o.cljs$core$IReset$_reset_BANG_$arity$2(o, new_value);
  } else {
    var x__13457__auto__ = o == null ? null : o;
    return function() {
      var or__12830__auto__ = cljs.core._reset_BANG_[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = cljs.core._reset_BANG_["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IReset.-reset!", o);
        }
      }
    }().call(null, o, new_value);
  }
};
cljs.core.ISwap = function() {
  var obj108188 = {};
  return obj108188;
}();
cljs.core._swap_BANG_ = function() {
  var _swap_BANG_ = null;
  var _swap_BANG___2 = function(o, f) {
    if (function() {
      var and__12818__auto__ = o;
      if (and__12818__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$2;
      } else {
        return and__12818__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$2(o, f);
    } else {
      var x__13457__auto__ = o == null ? null : o;
      return function() {
        var or__12830__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__13457__auto__)];
        if (or__12830__auto__) {
          return or__12830__auto__;
        } else {
          var or__12830__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__12830__auto____$1) {
            return or__12830__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f);
    }
  };
  var _swap_BANG___3 = function(o, f, a) {
    if (function() {
      var and__12818__auto__ = o;
      if (and__12818__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$3;
      } else {
        return and__12818__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$3(o, f, a);
    } else {
      var x__13457__auto__ = o == null ? null : o;
      return function() {
        var or__12830__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__13457__auto__)];
        if (or__12830__auto__) {
          return or__12830__auto__;
        } else {
          var or__12830__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__12830__auto____$1) {
            return or__12830__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a);
    }
  };
  var _swap_BANG___4 = function(o, f, a, b) {
    if (function() {
      var and__12818__auto__ = o;
      if (and__12818__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$4;
      } else {
        return and__12818__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$4(o, f, a, b);
    } else {
      var x__13457__auto__ = o == null ? null : o;
      return function() {
        var or__12830__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__13457__auto__)];
        if (or__12830__auto__) {
          return or__12830__auto__;
        } else {
          var or__12830__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__12830__auto____$1) {
            return or__12830__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a, b);
    }
  };
  var _swap_BANG___5 = function(o, f, a, b, xs) {
    if (function() {
      var and__12818__auto__ = o;
      if (and__12818__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$5;
      } else {
        return and__12818__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$5(o, f, a, b, xs);
    } else {
      var x__13457__auto__ = o == null ? null : o;
      return function() {
        var or__12830__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__13457__auto__)];
        if (or__12830__auto__) {
          return or__12830__auto__;
        } else {
          var or__12830__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__12830__auto____$1) {
            return or__12830__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a, b, xs);
    }
  };
  _swap_BANG_ = function(o, f, a, b, xs) {
    switch(arguments.length) {
      case 2:
        return _swap_BANG___2.call(this, o, f);
      case 3:
        return _swap_BANG___3.call(this, o, f, a);
      case 4:
        return _swap_BANG___4.call(this, o, f, a, b);
      case 5:
        return _swap_BANG___5.call(this, o, f, a, b, xs);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _swap_BANG_.cljs$core$IFn$_invoke$arity$2 = _swap_BANG___2;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$3 = _swap_BANG___3;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$4 = _swap_BANG___4;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$5 = _swap_BANG___5;
  return _swap_BANG_;
}();
cljs.core.Atom = function(state, meta, validator, watches) {
  this.state = state;
  this.meta = meta;
  this.validator = validator;
  this.watches = watches;
  this.cljs$lang$protocol_mask$partition0$ = 2153938944;
  this.cljs$lang$protocol_mask$partition1$ = 16386;
};
cljs.core.Atom.cljs$lang$type = true;
cljs.core.Atom.cljs$lang$ctorStr = "cljs.core/Atom";
cljs.core.Atom.cljs$lang$ctorPrWriter = function(this__13397__auto__, writer__13398__auto__, opt__13399__auto__) {
  return cljs.core._write.call(null, writer__13398__auto__, "cljs.core/Atom");
};
cljs.core.Atom.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  var seq__108189 = cljs.core.seq.call(null, self__.watches);
  var chunk__108190 = null;
  var count__108191 = 0;
  var i__108192 = 0;
  while (true) {
    if (i__108192 < count__108191) {
      var vec__108193 = cljs.core._nth.call(null, chunk__108190, i__108192);
      var key = cljs.core.nth.call(null, vec__108193, 0, null);
      var f = cljs.core.nth.call(null, vec__108193, 1, null);
      f.call(null, key, this$__$1, oldval, newval);
      var G__108195 = seq__108189;
      var G__108196 = chunk__108190;
      var G__108197 = count__108191;
      var G__108198 = i__108192 + 1;
      seq__108189 = G__108195;
      chunk__108190 = G__108196;
      count__108191 = G__108197;
      i__108192 = G__108198;
      continue;
    } else {
      var temp__4092__auto__ = cljs.core.seq.call(null, seq__108189);
      if (temp__4092__auto__) {
        var seq__108189__$1 = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__108189__$1)) {
          var c__13578__auto__ = cljs.core.chunk_first.call(null, seq__108189__$1);
          var G__108199 = cljs.core.chunk_rest.call(null, seq__108189__$1);
          var G__108200 = c__13578__auto__;
          var G__108201 = cljs.core.count.call(null, c__13578__auto__);
          var G__108202 = 0;
          seq__108189 = G__108199;
          chunk__108190 = G__108200;
          count__108191 = G__108201;
          i__108192 = G__108202;
          continue;
        } else {
          var vec__108194 = cljs.core.first.call(null, seq__108189__$1);
          var key = cljs.core.nth.call(null, vec__108194, 0, null);
          var f = cljs.core.nth.call(null, vec__108194, 1, null);
          f.call(null, key, this$__$1, oldval, newval);
          var G__108203 = cljs.core.next.call(null, seq__108189__$1);
          var G__108204 = null;
          var G__108205 = 0;
          var G__108206 = 0;
          seq__108189 = G__108203;
          chunk__108190 = G__108204;
          count__108191 = G__108205;
          i__108192 = G__108206;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.assoc.call(null, self__.watches, key, f);
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.dissoc.call(null, self__.watches, key);
};
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var self__ = this;
  var a__$1 = this;
  cljs.core._write.call(null, writer, "#\x3cAtom: ");
  cljs.core.pr_writer.call(null, self__.state, writer, opts);
  return cljs.core._write.call(null, writer, "\x3e");
};
cljs.core.Atom.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.Atom.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Atom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other;
};
cljs.core.__GT_Atom = function __GT_Atom(state, meta, validator, watches) {
  return new cljs.core.Atom(state, meta, validator, watches);
};
cljs.core.atom = function() {
  var atom = null;
  var atom__1 = function(x) {
    return new cljs.core.Atom(x, null, null, null);
  };
  var atom__2 = function() {
    var G__108210__delegate = function(x, p__108207) {
      var map__108209 = p__108207;
      var map__108209__$1 = cljs.core.seq_QMARK_.call(null, map__108209) ? cljs.core.apply.call(null, cljs.core.hash_map, map__108209) : map__108209;
      var validator = cljs.core.get.call(null, map__108209__$1, new cljs.core.Keyword(null, "validator", "validator", 4199087812));
      var meta = cljs.core.get.call(null, map__108209__$1, new cljs.core.Keyword(null, "meta", "meta", 1017252215));
      return new cljs.core.Atom(x, meta, validator, null);
    };
    var G__108210 = function(x, var_args) {
      var p__108207 = null;
      if (arguments.length > 1) {
        p__108207 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__108210__delegate.call(this, x, p__108207);
    };
    G__108210.cljs$lang$maxFixedArity = 1;
    G__108210.cljs$lang$applyTo = function(arglist__108211) {
      var x = cljs.core.first(arglist__108211);
      var p__108207 = cljs.core.rest(arglist__108211);
      return G__108210__delegate(x, p__108207);
    };
    G__108210.cljs$core$IFn$_invoke$arity$variadic = G__108210__delegate;
    return G__108210;
  }();
  atom = function(x, var_args) {
    var p__108207 = var_args;
    switch(arguments.length) {
      case 1:
        return atom__1.call(this, x);
      default:
        return atom__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  atom.cljs$lang$maxFixedArity = 1;
  atom.cljs$lang$applyTo = atom__2.cljs$lang$applyTo;
  atom.cljs$core$IFn$_invoke$arity$1 = atom__1;
  atom.cljs$core$IFn$_invoke$arity$variadic = atom__2.cljs$core$IFn$_invoke$arity$variadic;
  return atom;
}();
cljs.core.reset_BANG_ = function reset_BANG_(a, new_value) {
  if (a instanceof cljs.core.Atom) {
    var validate = a.validator;
    if (validate == null) {
    } else {
      if (cljs.core.truth_(validate.call(null, new_value))) {
      } else {
        throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Validator rejected reference state"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "validate", "validate", 1233162959, null), new cljs.core.Symbol(null, "new-value", "new-value", 972165309, null))))].join(""));
      }
    }
    var old_value = a.state;
    a.state = new_value;
    if (a.watches == null) {
    } else {
      cljs.core._notify_watches.call(null, a, old_value, new_value);
    }
    return new_value;
  } else {
    return cljs.core._reset_BANG_.call(null, a, new_value);
  }
};
cljs.core.deref = function deref(o) {
  return cljs.core._deref.call(null, o);
};
cljs.core.swap_BANG_ = function() {
  var swap_BANG_ = null;
  var swap_BANG___2 = function(a, f) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state));
    } else {
      return cljs.core._swap_BANG_.call(null, a, f);
    }
  };
  var swap_BANG___3 = function(a, f, x) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x));
    } else {
      return cljs.core._swap_BANG_.call(null, a, f, x);
    }
  };
  var swap_BANG___4 = function(a, f, x, y) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x, y));
    } else {
      return cljs.core._swap_BANG_.call(null, a, f, x, y);
    }
  };
  var swap_BANG___5 = function() {
    var G__108212__delegate = function(a, f, x, y, more) {
      if (a instanceof cljs.core.Atom) {
        return cljs.core.reset_BANG_.call(null, a, cljs.core.apply.call(null, f, a.state, x, y, more));
      } else {
        return cljs.core._swap_BANG_.call(null, a, f, x, y, more);
      }
    };
    var G__108212 = function(a, f, x, y, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__108212__delegate.call(this, a, f, x, y, more);
    };
    G__108212.cljs$lang$maxFixedArity = 4;
    G__108212.cljs$lang$applyTo = function(arglist__108213) {
      var a = cljs.core.first(arglist__108213);
      arglist__108213 = cljs.core.next(arglist__108213);
      var f = cljs.core.first(arglist__108213);
      arglist__108213 = cljs.core.next(arglist__108213);
      var x = cljs.core.first(arglist__108213);
      arglist__108213 = cljs.core.next(arglist__108213);
      var y = cljs.core.first(arglist__108213);
      var more = cljs.core.rest(arglist__108213);
      return G__108212__delegate(a, f, x, y, more);
    };
    G__108212.cljs$core$IFn$_invoke$arity$variadic = G__108212__delegate;
    return G__108212;
  }();
  swap_BANG_ = function(a, f, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return swap_BANG___2.call(this, a, f);
      case 3:
        return swap_BANG___3.call(this, a, f, x);
      case 4:
        return swap_BANG___4.call(this, a, f, x, y);
      default:
        return swap_BANG___5.cljs$core$IFn$_invoke$arity$variadic(a, f, x, y, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  swap_BANG_.cljs$lang$maxFixedArity = 4;
  swap_BANG_.cljs$lang$applyTo = swap_BANG___5.cljs$lang$applyTo;
  swap_BANG_.cljs$core$IFn$_invoke$arity$2 = swap_BANG___2;
  swap_BANG_.cljs$core$IFn$_invoke$arity$3 = swap_BANG___3;
  swap_BANG_.cljs$core$IFn$_invoke$arity$4 = swap_BANG___4;
  swap_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_BANG___5.cljs$core$IFn$_invoke$arity$variadic;
  return swap_BANG_;
}();
cljs.core.compare_and_set_BANG_ = function compare_and_set_BANG_(a, oldval, newval) {
  if (cljs.core._EQ_.call(null, a.state, oldval)) {
    cljs.core.reset_BANG_.call(null, a, newval);
    return true;
  } else {
    return false;
  }
};
cljs.core.set_validator_BANG_ = function set_validator_BANG_(iref, val) {
  return iref.validator = val;
};
cljs.core.get_validator = function get_validator(iref) {
  return iref.validator;
};
cljs.core.alter_meta_BANG_ = function() {
  var alter_meta_BANG___delegate = function(iref, f, args) {
    return iref.meta = cljs.core.apply.call(null, f, iref.meta, args);
  };
  var alter_meta_BANG_ = function(iref, f, var_args) {
    var args = null;
    if (arguments.length > 2) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return alter_meta_BANG___delegate.call(this, iref, f, args);
  };
  alter_meta_BANG_.cljs$lang$maxFixedArity = 2;
  alter_meta_BANG_.cljs$lang$applyTo = function(arglist__108214) {
    var iref = cljs.core.first(arglist__108214);
    arglist__108214 = cljs.core.next(arglist__108214);
    var f = cljs.core.first(arglist__108214);
    var args = cljs.core.rest(arglist__108214);
    return alter_meta_BANG___delegate(iref, f, args);
  };
  alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic = alter_meta_BANG___delegate;
  return alter_meta_BANG_;
}();
cljs.core.reset_meta_BANG_ = function reset_meta_BANG_(iref, m) {
  return iref.meta = m;
};
cljs.core.add_watch = function add_watch(iref, key, f) {
  return cljs.core._add_watch.call(null, iref, key, f);
};
cljs.core.remove_watch = function remove_watch(iref, key) {
  return cljs.core._remove_watch.call(null, iref, key);
};
cljs.core.gensym_counter = null;
cljs.core.gensym = function() {
  var gensym = null;
  var gensym__0 = function() {
    return gensym.call(null, "G__");
  };
  var gensym__1 = function(prefix_string) {
    if (cljs.core.gensym_counter == null) {
      cljs.core.gensym_counter = cljs.core.atom.call(null, 0);
    } else {
    }
    return cljs.core.symbol.call(null, [cljs.core.str(prefix_string), cljs.core.str(cljs.core.swap_BANG_.call(null, cljs.core.gensym_counter, cljs.core.inc))].join(""));
  };
  gensym = function(prefix_string) {
    switch(arguments.length) {
      case 0:
        return gensym__0.call(this);
      case 1:
        return gensym__1.call(this, prefix_string);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  gensym.cljs$core$IFn$_invoke$arity$0 = gensym__0;
  gensym.cljs$core$IFn$_invoke$arity$1 = gensym__1;
  return gensym;
}();
cljs.core.fixture1 = 1;
cljs.core.fixture2 = 2;
cljs.core.Delay = function(state, f) {
  this.state = state;
  this.f = f;
  this.cljs$lang$protocol_mask$partition1$ = 1;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Delay.cljs$lang$type = true;
cljs.core.Delay.cljs$lang$ctorStr = "cljs.core/Delay";
cljs.core.Delay.cljs$lang$ctorPrWriter = function(this__13397__auto__, writer__13398__auto__, opt__13399__auto__) {
  return cljs.core._write.call(null, writer__13398__auto__, "cljs.core/Delay");
};
cljs.core.Delay.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = function(d) {
  var self__ = this;
  var d__$1 = this;
  return(new cljs.core.Keyword(null, "done", "done", 1016993524)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, self__.state));
};
cljs.core.Delay.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return(new cljs.core.Keyword(null, "value", "value", 1125876963)).cljs$core$IFn$_invoke$arity$1(cljs.core.swap_BANG_.call(null, self__.state, function(p__108215) {
    var map__108216 = p__108215;
    var map__108216__$1 = cljs.core.seq_QMARK_.call(null, map__108216) ? cljs.core.apply.call(null, cljs.core.hash_map, map__108216) : map__108216;
    var curr_state = map__108216__$1;
    var done = cljs.core.get.call(null, map__108216__$1, new cljs.core.Keyword(null, "done", "done", 1016993524));
    if (cljs.core.truth_(done)) {
      return curr_state;
    } else {
      return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "done", "done", 1016993524), true, new cljs.core.Keyword(null, "value", "value", 1125876963), self__.f.call(null)], null);
    }
  }));
};
cljs.core.__GT_Delay = function __GT_Delay(state, f) {
  return new cljs.core.Delay(state, f);
};
cljs.core.delay_QMARK_ = function delay_QMARK_(x) {
  return x instanceof cljs.core.Delay;
};
cljs.core.force = function force(x) {
  if (cljs.core.delay_QMARK_.call(null, x)) {
    return cljs.core.deref.call(null, x);
  } else {
    return x;
  }
};
cljs.core.realized_QMARK_ = function realized_QMARK_(d) {
  return cljs.core._realized_QMARK_.call(null, d);
};
cljs.core.IEncodeJS = function() {
  var obj108218 = {};
  return obj108218;
}();
cljs.core._clj__GT_js = function _clj__GT_js(x) {
  if (function() {
    var and__12818__auto__ = x;
    if (and__12818__auto__) {
      return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1(x);
  } else {
    var x__13457__auto__ = x == null ? null : x;
    return function() {
      var or__12830__auto__ = cljs.core._clj__GT_js[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = cljs.core._clj__GT_js["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeJS.-clj-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._key__GT_js = function _key__GT_js(x) {
  if (function() {
    var and__12818__auto__ = x;
    if (and__12818__auto__) {
      return x.cljs$core$IEncodeJS$_key__GT_js$arity$1;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_key__GT_js$arity$1(x);
  } else {
    var x__13457__auto__ = x == null ? null : x;
    return function() {
      var or__12830__auto__ = cljs.core._key__GT_js[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = cljs.core._key__GT_js["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeJS.-key-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.key__GT_js = function key__GT_js(k) {
  if (function() {
    var G__108220 = k;
    if (G__108220) {
      var bit__13480__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__12830__auto__ = bit__13480__auto__;
        if (cljs.core.truth_(or__12830__auto__)) {
          return or__12830__auto__;
        } else {
          return G__108220.cljs$core$IEncodeJS$;
        }
      }())) {
        return true;
      } else {
        if (!G__108220.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__108220);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__108220);
    }
  }()) {
    return cljs.core._clj__GT_js.call(null, k);
  } else {
    if (typeof k === "string" || (typeof k === "number" || (k instanceof cljs.core.Keyword || k instanceof cljs.core.Symbol))) {
      return cljs.core.clj__GT_js.call(null, k);
    } else {
      return cljs.core.pr_str.call(null, k);
    }
  }
};
cljs.core.clj__GT_js = function clj__GT_js(x) {
  if (x == null) {
    return null;
  } else {
    if (function() {
      var G__108234 = x;
      if (G__108234) {
        var bit__13480__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__12830__auto__ = bit__13480__auto__;
          if (cljs.core.truth_(or__12830__auto__)) {
            return or__12830__auto__;
          } else {
            return G__108234.cljs$core$IEncodeJS$;
          }
        }())) {
          return true;
        } else {
          if (!G__108234.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__108234);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__108234);
      }
    }()) {
      return cljs.core._clj__GT_js.call(null, x);
    } else {
      if (x instanceof cljs.core.Keyword) {
        return cljs.core.name.call(null, x);
      } else {
        if (x instanceof cljs.core.Symbol) {
          return[cljs.core.str(x)].join("");
        } else {
          if (cljs.core.map_QMARK_.call(null, x)) {
            var m = function() {
              var obj108236 = {};
              return obj108236;
            }();
            var seq__108237_108247 = cljs.core.seq.call(null, x);
            var chunk__108238_108248 = null;
            var count__108239_108249 = 0;
            var i__108240_108250 = 0;
            while (true) {
              if (i__108240_108250 < count__108239_108249) {
                var vec__108241_108251 = cljs.core._nth.call(null, chunk__108238_108248, i__108240_108250);
                var k_108252 = cljs.core.nth.call(null, vec__108241_108251, 0, null);
                var v_108253 = cljs.core.nth.call(null, vec__108241_108251, 1, null);
                m[cljs.core.key__GT_js.call(null, k_108252)] = clj__GT_js.call(null, v_108253);
                var G__108254 = seq__108237_108247;
                var G__108255 = chunk__108238_108248;
                var G__108256 = count__108239_108249;
                var G__108257 = i__108240_108250 + 1;
                seq__108237_108247 = G__108254;
                chunk__108238_108248 = G__108255;
                count__108239_108249 = G__108256;
                i__108240_108250 = G__108257;
                continue;
              } else {
                var temp__4092__auto___108258 = cljs.core.seq.call(null, seq__108237_108247);
                if (temp__4092__auto___108258) {
                  var seq__108237_108259__$1 = temp__4092__auto___108258;
                  if (cljs.core.chunked_seq_QMARK_.call(null, seq__108237_108259__$1)) {
                    var c__13578__auto___108260 = cljs.core.chunk_first.call(null, seq__108237_108259__$1);
                    var G__108261 = cljs.core.chunk_rest.call(null, seq__108237_108259__$1);
                    var G__108262 = c__13578__auto___108260;
                    var G__108263 = cljs.core.count.call(null, c__13578__auto___108260);
                    var G__108264 = 0;
                    seq__108237_108247 = G__108261;
                    chunk__108238_108248 = G__108262;
                    count__108239_108249 = G__108263;
                    i__108240_108250 = G__108264;
                    continue;
                  } else {
                    var vec__108242_108265 = cljs.core.first.call(null, seq__108237_108259__$1);
                    var k_108266 = cljs.core.nth.call(null, vec__108242_108265, 0, null);
                    var v_108267 = cljs.core.nth.call(null, vec__108242_108265, 1, null);
                    m[cljs.core.key__GT_js.call(null, k_108266)] = clj__GT_js.call(null, v_108267);
                    var G__108268 = cljs.core.next.call(null, seq__108237_108259__$1);
                    var G__108269 = null;
                    var G__108270 = 0;
                    var G__108271 = 0;
                    seq__108237_108247 = G__108268;
                    chunk__108238_108248 = G__108269;
                    count__108239_108249 = G__108270;
                    i__108240_108250 = G__108271;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            return m;
          } else {
            if (cljs.core.coll_QMARK_.call(null, x)) {
              var arr = [];
              var seq__108243_108272 = cljs.core.seq.call(null, cljs.core.map.call(null, clj__GT_js, x));
              var chunk__108244_108273 = null;
              var count__108245_108274 = 0;
              var i__108246_108275 = 0;
              while (true) {
                if (i__108246_108275 < count__108245_108274) {
                  var x_108276__$1 = cljs.core._nth.call(null, chunk__108244_108273, i__108246_108275);
                  arr.push(x_108276__$1);
                  var G__108277 = seq__108243_108272;
                  var G__108278 = chunk__108244_108273;
                  var G__108279 = count__108245_108274;
                  var G__108280 = i__108246_108275 + 1;
                  seq__108243_108272 = G__108277;
                  chunk__108244_108273 = G__108278;
                  count__108245_108274 = G__108279;
                  i__108246_108275 = G__108280;
                  continue;
                } else {
                  var temp__4092__auto___108281 = cljs.core.seq.call(null, seq__108243_108272);
                  if (temp__4092__auto___108281) {
                    var seq__108243_108282__$1 = temp__4092__auto___108281;
                    if (cljs.core.chunked_seq_QMARK_.call(null, seq__108243_108282__$1)) {
                      var c__13578__auto___108283 = cljs.core.chunk_first.call(null, seq__108243_108282__$1);
                      var G__108284 = cljs.core.chunk_rest.call(null, seq__108243_108282__$1);
                      var G__108285 = c__13578__auto___108283;
                      var G__108286 = cljs.core.count.call(null, c__13578__auto___108283);
                      var G__108287 = 0;
                      seq__108243_108272 = G__108284;
                      chunk__108244_108273 = G__108285;
                      count__108245_108274 = G__108286;
                      i__108246_108275 = G__108287;
                      continue;
                    } else {
                      var x_108288__$1 = cljs.core.first.call(null, seq__108243_108282__$1);
                      arr.push(x_108288__$1);
                      var G__108289 = cljs.core.next.call(null, seq__108243_108282__$1);
                      var G__108290 = null;
                      var G__108291 = 0;
                      var G__108292 = 0;
                      seq__108243_108272 = G__108289;
                      chunk__108244_108273 = G__108290;
                      count__108245_108274 = G__108291;
                      i__108246_108275 = G__108292;
                      continue;
                    }
                  } else {
                  }
                }
                break;
              }
              return arr;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return x;
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.IEncodeClojure = function() {
  var obj108294 = {};
  return obj108294;
}();
cljs.core._js__GT_clj = function _js__GT_clj(x, options) {
  if (function() {
    var and__12818__auto__ = x;
    if (and__12818__auto__) {
      return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2(x, options);
  } else {
    var x__13457__auto__ = x == null ? null : x;
    return function() {
      var or__12830__auto__ = cljs.core._js__GT_clj[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = cljs.core._js__GT_clj["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeClojure.-js-\x3eclj", x);
        }
      }
    }().call(null, x, options);
  }
};
cljs.core.js__GT_clj = function() {
  var js__GT_clj = null;
  var js__GT_clj__1 = function(x) {
    return js__GT_clj.call(null, x, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 4191781672), false], null));
  };
  var js__GT_clj__2 = function() {
    var G__108315__delegate = function(x, opts) {
      if (function() {
        var G__108305 = x;
        if (G__108305) {
          var bit__13480__auto__ = null;
          if (cljs.core.truth_(function() {
            var or__12830__auto__ = bit__13480__auto__;
            if (cljs.core.truth_(or__12830__auto__)) {
              return or__12830__auto__;
            } else {
              return G__108305.cljs$core$IEncodeClojure$;
            }
          }())) {
            return true;
          } else {
            if (!G__108305.cljs$lang$protocol_mask$partition$) {
              return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeClojure, G__108305);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeClojure, G__108305);
        }
      }()) {
        return cljs.core._js__GT_clj.call(null, x, cljs.core.apply.call(null, cljs.core.array_map, opts));
      } else {
        if (cljs.core.seq.call(null, opts)) {
          var map__108306 = opts;
          var map__108306__$1 = cljs.core.seq_QMARK_.call(null, map__108306) ? cljs.core.apply.call(null, cljs.core.hash_map, map__108306) : map__108306;
          var keywordize_keys = cljs.core.get.call(null, map__108306__$1, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 4191781672));
          var keyfn = cljs.core.truth_(keywordize_keys) ? cljs.core.keyword : cljs.core.str;
          var f = function(map__108306, map__108306__$1, keywordize_keys, keyfn) {
            return function thisfn(x__$1) {
              if (cljs.core.seq_QMARK_.call(null, x__$1)) {
                return cljs.core.doall.call(null, cljs.core.map.call(null, thisfn, x__$1));
              } else {
                if (cljs.core.coll_QMARK_.call(null, x__$1)) {
                  return cljs.core.into.call(null, cljs.core.empty.call(null, x__$1), cljs.core.map.call(null, thisfn, x__$1));
                } else {
                  if (x__$1 instanceof Array) {
                    return cljs.core.vec.call(null, cljs.core.map.call(null, thisfn, x__$1));
                  } else {
                    if (cljs.core.type.call(null, x__$1) === Object) {
                      return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
                        var iter__13547__auto__ = function(map__108306, map__108306__$1, keywordize_keys, keyfn) {
                          return function iter__108311(s__108312) {
                            return new cljs.core.LazySeq(null, function(map__108306, map__108306__$1, keywordize_keys, keyfn) {
                              return function() {
                                var s__108312__$1 = s__108312;
                                while (true) {
                                  var temp__4092__auto__ = cljs.core.seq.call(null, s__108312__$1);
                                  if (temp__4092__auto__) {
                                    var s__108312__$2 = temp__4092__auto__;
                                    if (cljs.core.chunked_seq_QMARK_.call(null, s__108312__$2)) {
                                      var c__13545__auto__ = cljs.core.chunk_first.call(null, s__108312__$2);
                                      var size__13546__auto__ = cljs.core.count.call(null, c__13545__auto__);
                                      var b__108314 = cljs.core.chunk_buffer.call(null, size__13546__auto__);
                                      if (function() {
                                        var i__108313 = 0;
                                        while (true) {
                                          if (i__108313 < size__13546__auto__) {
                                            var k = cljs.core._nth.call(null, c__13545__auto__, i__108313);
                                            cljs.core.chunk_append.call(null, b__108314, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.call(null, k), thisfn.call(null, x__$1[k])], null));
                                            var G__108316 = i__108313 + 1;
                                            i__108313 = G__108316;
                                            continue;
                                          } else {
                                            return true;
                                          }
                                          break;
                                        }
                                      }()) {
                                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__108314), iter__108311.call(null, cljs.core.chunk_rest.call(null, s__108312__$2)));
                                      } else {
                                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__108314), null);
                                      }
                                    } else {
                                      var k = cljs.core.first.call(null, s__108312__$2);
                                      return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.call(null, k), thisfn.call(null, x__$1[k])], null), iter__108311.call(null, cljs.core.rest.call(null, s__108312__$2)));
                                    }
                                  } else {
                                    return null;
                                  }
                                  break;
                                }
                              };
                            }(map__108306, map__108306__$1, keywordize_keys, keyfn), null, null);
                          };
                        }(map__108306, map__108306__$1, keywordize_keys, keyfn);
                        return iter__13547__auto__.call(null, cljs.core.js_keys.call(null, x__$1));
                      }());
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        return x__$1;
                      } else {
                        return null;
                      }
                    }
                  }
                }
              }
            };
          }(map__108306, map__108306__$1, keywordize_keys, keyfn);
          return f.call(null, x);
        } else {
          return null;
        }
      }
    };
    var G__108315 = function(x, var_args) {
      var opts = null;
      if (arguments.length > 1) {
        opts = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__108315__delegate.call(this, x, opts);
    };
    G__108315.cljs$lang$maxFixedArity = 1;
    G__108315.cljs$lang$applyTo = function(arglist__108317) {
      var x = cljs.core.first(arglist__108317);
      var opts = cljs.core.rest(arglist__108317);
      return G__108315__delegate(x, opts);
    };
    G__108315.cljs$core$IFn$_invoke$arity$variadic = G__108315__delegate;
    return G__108315;
  }();
  js__GT_clj = function(x, var_args) {
    var opts = var_args;
    switch(arguments.length) {
      case 1:
        return js__GT_clj__1.call(this, x);
      default:
        return js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js__GT_clj.cljs$lang$maxFixedArity = 1;
  js__GT_clj.cljs$lang$applyTo = js__GT_clj__2.cljs$lang$applyTo;
  js__GT_clj.cljs$core$IFn$_invoke$arity$1 = js__GT_clj__1;
  js__GT_clj.cljs$core$IFn$_invoke$arity$variadic = js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic;
  return js__GT_clj;
}();
cljs.core.memoize = function memoize(f) {
  var mem = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  return function() {
    var G__108318__delegate = function(args) {
      var temp__4090__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, mem), args);
      if (cljs.core.truth_(temp__4090__auto__)) {
        var v = temp__4090__auto__;
        return v;
      } else {
        var ret = cljs.core.apply.call(null, f, args);
        cljs.core.swap_BANG_.call(null, mem, cljs.core.assoc, args, ret);
        return ret;
      }
    };
    var G__108318 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__108318__delegate.call(this, args);
    };
    G__108318.cljs$lang$maxFixedArity = 0;
    G__108318.cljs$lang$applyTo = function(arglist__108319) {
      var args = cljs.core.seq(arglist__108319);
      return G__108318__delegate(args);
    };
    G__108318.cljs$core$IFn$_invoke$arity$variadic = G__108318__delegate;
    return G__108318;
  }();
};
cljs.core.trampoline = function() {
  var trampoline = null;
  var trampoline__1 = function(f) {
    while (true) {
      var ret = f.call(null);
      if (cljs.core.fn_QMARK_.call(null, ret)) {
        var G__108320 = ret;
        f = G__108320;
        continue;
      } else {
        return ret;
      }
      break;
    }
  };
  var trampoline__2 = function() {
    var G__108321__delegate = function(f, args) {
      return trampoline.call(null, function() {
        return cljs.core.apply.call(null, f, args);
      });
    };
    var G__108321 = function(f, var_args) {
      var args = null;
      if (arguments.length > 1) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__108321__delegate.call(this, f, args);
    };
    G__108321.cljs$lang$maxFixedArity = 1;
    G__108321.cljs$lang$applyTo = function(arglist__108322) {
      var f = cljs.core.first(arglist__108322);
      var args = cljs.core.rest(arglist__108322);
      return G__108321__delegate(f, args);
    };
    G__108321.cljs$core$IFn$_invoke$arity$variadic = G__108321__delegate;
    return G__108321;
  }();
  trampoline = function(f, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 1:
        return trampoline__1.call(this, f);
      default:
        return trampoline__2.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  trampoline.cljs$lang$maxFixedArity = 1;
  trampoline.cljs$lang$applyTo = trampoline__2.cljs$lang$applyTo;
  trampoline.cljs$core$IFn$_invoke$arity$1 = trampoline__1;
  trampoline.cljs$core$IFn$_invoke$arity$variadic = trampoline__2.cljs$core$IFn$_invoke$arity$variadic;
  return trampoline;
}();
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return rand.call(null, 1);
  };
  var rand__1 = function(n) {
    return Math.random.call(null) * n;
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$core$IFn$_invoke$arity$0 = rand__0;
  rand.cljs$core$IFn$_invoke$arity$1 = rand__1;
  return rand;
}();
cljs.core.rand_int = function rand_int(n) {
  return Math.floor.call(null, Math.random.call(null) * n);
};
cljs.core.rand_nth = function rand_nth(coll) {
  return cljs.core.nth.call(null, coll, cljs.core.rand_int.call(null, cljs.core.count.call(null, coll)));
};
cljs.core.group_by = function group_by(f, coll) {
  return cljs.core.reduce.call(null, function(ret, x) {
    var k = f.call(null, x);
    return cljs.core.assoc.call(null, ret, k, cljs.core.conj.call(null, cljs.core.get.call(null, ret, k, cljs.core.PersistentVector.EMPTY), x));
  }, cljs.core.PersistentArrayMap.EMPTY, coll);
};
cljs.core.make_hierarchy = function make_hierarchy() {
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", 4515496059), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "descendants", "descendants", 768214664), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442), cljs.core.PersistentArrayMap.EMPTY], null);
};
cljs.core._global_hierarchy = null;
cljs.core.get_global_hierarchy = function get_global_hierarchy() {
  if (cljs.core._global_hierarchy == null) {
    cljs.core._global_hierarchy = cljs.core.atom.call(null, cljs.core.make_hierarchy.call(null));
  } else {
  }
  return cljs.core._global_hierarchy;
};
cljs.core.swap_global_hierarchy_BANG_ = function() {
  var swap_global_hierarchy_BANG___delegate = function(f, args) {
    return cljs.core.apply.call(null, cljs.core.swap_BANG_, cljs.core.get_global_hierarchy.call(null), f, args);
  };
  var swap_global_hierarchy_BANG_ = function(f, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return swap_global_hierarchy_BANG___delegate.call(this, f, args);
  };
  swap_global_hierarchy_BANG_.cljs$lang$maxFixedArity = 1;
  swap_global_hierarchy_BANG_.cljs$lang$applyTo = function(arglist__108323) {
    var f = cljs.core.first(arglist__108323);
    var args = cljs.core.rest(arglist__108323);
    return swap_global_hierarchy_BANG___delegate(f, args);
  };
  swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_global_hierarchy_BANG___delegate;
  return swap_global_hierarchy_BANG_;
}();
cljs.core.isa_QMARK_ = function() {
  var isa_QMARK_ = null;
  var isa_QMARK___2 = function(child, parent) {
    return isa_QMARK_.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), child, parent);
  };
  var isa_QMARK___3 = function(h, child, parent) {
    var or__12830__auto__ = cljs.core._EQ_.call(null, child, parent);
    if (or__12830__auto__) {
      return or__12830__auto__;
    } else {
      var or__12830__auto____$1 = cljs.core.contains_QMARK_.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h).call(null, child), parent);
      if (or__12830__auto____$1) {
        return or__12830__auto____$1;
      } else {
        var and__12818__auto__ = cljs.core.vector_QMARK_.call(null, parent);
        if (and__12818__auto__) {
          var and__12818__auto____$1 = cljs.core.vector_QMARK_.call(null, child);
          if (and__12818__auto____$1) {
            var and__12818__auto____$2 = cljs.core.count.call(null, parent) === cljs.core.count.call(null, child);
            if (and__12818__auto____$2) {
              var ret = true;
              var i = 0;
              while (true) {
                if (!ret || i === cljs.core.count.call(null, parent)) {
                  return ret;
                } else {
                  var G__108324 = isa_QMARK_.call(null, h, child.call(null, i), parent.call(null, i));
                  var G__108325 = i + 1;
                  ret = G__108324;
                  i = G__108325;
                  continue;
                }
                break;
              }
            } else {
              return and__12818__auto____$2;
            }
          } else {
            return and__12818__auto____$1;
          }
        } else {
          return and__12818__auto__;
        }
      }
    }
  };
  isa_QMARK_ = function(h, child, parent) {
    switch(arguments.length) {
      case 2:
        return isa_QMARK___2.call(this, h, child);
      case 3:
        return isa_QMARK___3.call(this, h, child, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  isa_QMARK_.cljs$core$IFn$_invoke$arity$2 = isa_QMARK___2;
  isa_QMARK_.cljs$core$IFn$_invoke$arity$3 = isa_QMARK___3;
  return isa_QMARK_;
}();
cljs.core.parents = function() {
  var parents = null;
  var parents__1 = function(tag) {
    return parents.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var parents__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  parents = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return parents__1.call(this, h);
      case 2:
        return parents__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  parents.cljs$core$IFn$_invoke$arity$1 = parents__1;
  parents.cljs$core$IFn$_invoke$arity$2 = parents__2;
  return parents;
}();
cljs.core.ancestors = function() {
  var ancestors = null;
  var ancestors__1 = function(tag) {
    return ancestors.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var ancestors__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  ancestors = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return ancestors__1.call(this, h);
      case 2:
        return ancestors__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ancestors.cljs$core$IFn$_invoke$arity$1 = ancestors__1;
  ancestors.cljs$core$IFn$_invoke$arity$2 = ancestors__2;
  return ancestors;
}();
cljs.core.descendants = function() {
  var descendants = null;
  var descendants__1 = function(tag) {
    return descendants.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var descendants__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "descendants", "descendants", 768214664)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  descendants = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return descendants__1.call(this, h);
      case 2:
        return descendants__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  descendants.cljs$core$IFn$_invoke$arity$1 = descendants__1;
  descendants.cljs$core$IFn$_invoke$arity$2 = descendants__2;
  return descendants;
}();
cljs.core.derive = function() {
  var derive = null;
  var derive__2 = function(tag, parent) {
    if (cljs.core.truth_(cljs.core.namespace.call(null, parent))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "namespace", "namespace", -388313324, null), new cljs.core.Symbol(null, "parent", "parent", 1659011683, null))))].join(""));
    }
    cljs.core.swap_global_hierarchy_BANG_.call(null, derive, tag, parent);
    return null;
  };
  var derive__3 = function(h, tag, parent) {
    if (cljs.core.not_EQ_.call(null, tag, parent)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not\x3d", "not\x3d", -1637144189, null), new cljs.core.Symbol(null, "tag", "tag", -1640416941, null), new cljs.core.Symbol(null, "parent", "parent", 1659011683, null))))].join(""));
    }
    var tp = (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h);
    var td = (new cljs.core.Keyword(null, "descendants", "descendants", 768214664)).cljs$core$IFn$_invoke$arity$1(h);
    var ta = (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h);
    var tf = function(tp, td, ta) {
      return function(m, source, sources, target, targets) {
        return cljs.core.reduce.call(null, function(tp, td, ta) {
          return function(ret, k) {
            return cljs.core.assoc.call(null, ret, k, cljs.core.reduce.call(null, cljs.core.conj, cljs.core.get.call(null, targets, k, cljs.core.PersistentHashSet.EMPTY), cljs.core.cons.call(null, target, targets.call(null, target))));
          };
        }(tp, td, ta), m, cljs.core.cons.call(null, source, sources.call(null, source)));
      };
    }(tp, td, ta);
    var or__12830__auto__ = cljs.core.contains_QMARK_.call(null, tp.call(null, tag), parent) ? null : function() {
      if (cljs.core.contains_QMARK_.call(null, ta.call(null, tag), parent)) {
        throw new Error([cljs.core.str(tag), cljs.core.str("already has"), cljs.core.str(parent), cljs.core.str("as ancestor")].join(""));
      } else {
      }
      if (cljs.core.contains_QMARK_.call(null, ta.call(null, parent), tag)) {
        throw new Error([cljs.core.str("Cyclic derivation:"), cljs.core.str(parent), cljs.core.str("has"), cljs.core.str(tag), cljs.core.str("as ancestor")].join(""));
      } else {
      }
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", 4515496059), cljs.core.assoc.call(null, (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h), tag, cljs.core.conj.call(null, cljs.core.get.call(null, tp, tag, cljs.core.PersistentHashSet.EMPTY), parent)), new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442), tf.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h), 
      tag, td, parent, ta), new cljs.core.Keyword(null, "descendants", "descendants", 768214664), tf.call(null, (new cljs.core.Keyword(null, "descendants", "descendants", 768214664)).cljs$core$IFn$_invoke$arity$1(h), parent, ta, tag, td)], null);
    }();
    if (cljs.core.truth_(or__12830__auto__)) {
      return or__12830__auto__;
    } else {
      return h;
    }
  };
  derive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return derive__2.call(this, h, tag);
      case 3:
        return derive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  derive.cljs$core$IFn$_invoke$arity$2 = derive__2;
  derive.cljs$core$IFn$_invoke$arity$3 = derive__3;
  return derive;
}();
cljs.core.underive = function() {
  var underive = null;
  var underive__2 = function(tag, parent) {
    cljs.core.swap_global_hierarchy_BANG_.call(null, underive, tag, parent);
    return null;
  };
  var underive__3 = function(h, tag, parent) {
    var parentMap = (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h);
    var childsParents = cljs.core.truth_(parentMap.call(null, tag)) ? cljs.core.disj.call(null, parentMap.call(null, tag), parent) : cljs.core.PersistentHashSet.EMPTY;
    var newParents = cljs.core.truth_(cljs.core.not_empty.call(null, childsParents)) ? cljs.core.assoc.call(null, parentMap, tag, childsParents) : cljs.core.dissoc.call(null, parentMap, tag);
    var deriv_seq = cljs.core.flatten.call(null, cljs.core.map.call(null, function(parentMap, childsParents, newParents) {
      return function(p1__108326_SHARP_) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, p1__108326_SHARP_), cljs.core.interpose.call(null, cljs.core.first.call(null, p1__108326_SHARP_), cljs.core.second.call(null, p1__108326_SHARP_)));
      };
    }(parentMap, childsParents, newParents), cljs.core.seq.call(null, newParents)));
    if (cljs.core.contains_QMARK_.call(null, parentMap.call(null, tag), parent)) {
      return cljs.core.reduce.call(null, function(p1__108327_SHARP_, p2__108328_SHARP_) {
        return cljs.core.apply.call(null, cljs.core.derive, p1__108327_SHARP_, p2__108328_SHARP_);
      }, cljs.core.make_hierarchy.call(null), cljs.core.partition.call(null, 2, deriv_seq));
    } else {
      return h;
    }
  };
  underive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return underive__2.call(this, h, tag);
      case 3:
        return underive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  underive.cljs$core$IFn$_invoke$arity$2 = underive__2;
  underive.cljs$core$IFn$_invoke$arity$3 = underive__3;
  return underive;
}();
cljs.core.reset_cache = function reset_cache(method_cache, method_table, cached_hierarchy, hierarchy) {
  cljs.core.swap_BANG_.call(null, method_cache, function(_) {
    return cljs.core.deref.call(null, method_table);
  });
  return cljs.core.swap_BANG_.call(null, cached_hierarchy, function(_) {
    return cljs.core.deref.call(null, hierarchy);
  });
};
cljs.core.prefers_STAR_ = function prefers_STAR_(x, y, prefer_table) {
  var xprefs = cljs.core.deref.call(null, prefer_table).call(null, x);
  var or__12830__auto__ = cljs.core.truth_(function() {
    var and__12818__auto__ = xprefs;
    if (cljs.core.truth_(and__12818__auto__)) {
      return xprefs.call(null, y);
    } else {
      return and__12818__auto__;
    }
  }()) ? true : null;
  if (cljs.core.truth_(or__12830__auto__)) {
    return or__12830__auto__;
  } else {
    var or__12830__auto____$1 = function() {
      var ps = cljs.core.parents.call(null, y);
      while (true) {
        if (cljs.core.count.call(null, ps) > 0) {
          if (cljs.core.truth_(prefers_STAR_.call(null, x, cljs.core.first.call(null, ps), prefer_table))) {
          } else {
          }
          var G__108329 = cljs.core.rest.call(null, ps);
          ps = G__108329;
          continue;
        } else {
          return null;
        }
        break;
      }
    }();
    if (cljs.core.truth_(or__12830__auto____$1)) {
      return or__12830__auto____$1;
    } else {
      var or__12830__auto____$2 = function() {
        var ps = cljs.core.parents.call(null, x);
        while (true) {
          if (cljs.core.count.call(null, ps) > 0) {
            if (cljs.core.truth_(prefers_STAR_.call(null, cljs.core.first.call(null, ps), y, prefer_table))) {
            } else {
            }
            var G__108330 = cljs.core.rest.call(null, ps);
            ps = G__108330;
            continue;
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(or__12830__auto____$2)) {
        return or__12830__auto____$2;
      } else {
        return false;
      }
    }
  }
};
cljs.core.dominates = function dominates(x, y, prefer_table) {
  var or__12830__auto__ = cljs.core.prefers_STAR_.call(null, x, y, prefer_table);
  if (cljs.core.truth_(or__12830__auto__)) {
    return or__12830__auto__;
  } else {
    return cljs.core.isa_QMARK_.call(null, x, y);
  }
};
cljs.core.find_and_cache_best_method = function find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  var best_entry = cljs.core.reduce.call(null, function(be, p__108333) {
    var vec__108334 = p__108333;
    var k = cljs.core.nth.call(null, vec__108334, 0, null);
    var _ = cljs.core.nth.call(null, vec__108334, 1, null);
    var e = vec__108334;
    if (cljs.core.isa_QMARK_.call(null, cljs.core.deref.call(null, hierarchy), dispatch_val, k)) {
      var be2 = cljs.core.truth_(function() {
        var or__12830__auto__ = be == null;
        if (or__12830__auto__) {
          return or__12830__auto__;
        } else {
          return cljs.core.dominates.call(null, k, cljs.core.first.call(null, be), prefer_table);
        }
      }()) ? e : be;
      if (cljs.core.truth_(cljs.core.dominates.call(null, cljs.core.first.call(null, be2), k, prefer_table))) {
      } else {
        throw new Error([cljs.core.str("Multiple methods in multimethod '"), cljs.core.str(name), cljs.core.str("' match dispatch value: "), cljs.core.str(dispatch_val), cljs.core.str(" -\x3e "), cljs.core.str(k), cljs.core.str(" and "), cljs.core.str(cljs.core.first.call(null, be2)), cljs.core.str(", and neither is preferred")].join(""));
      }
      return be2;
    } else {
      return be;
    }
  }, null, cljs.core.deref.call(null, method_table));
  if (cljs.core.truth_(best_entry)) {
    if (cljs.core._EQ_.call(null, cljs.core.deref.call(null, cached_hierarchy), cljs.core.deref.call(null, hierarchy))) {
      cljs.core.swap_BANG_.call(null, method_cache, cljs.core.assoc, dispatch_val, cljs.core.second.call(null, best_entry));
      return cljs.core.second.call(null, best_entry);
    } else {
      cljs.core.reset_cache.call(null, method_cache, method_table, cached_hierarchy, hierarchy);
      return find_and_cache_best_method.call(null, name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
    }
  } else {
    return null;
  }
};
cljs.core.IMultiFn = function() {
  var obj108336 = {};
  return obj108336;
}();
cljs.core._reset = function _reset(mf) {
  if (function() {
    var and__12818__auto__ = mf;
    if (and__12818__auto__) {
      return mf.cljs$core$IMultiFn$_reset$arity$1;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_reset$arity$1(mf);
  } else {
    var x__13457__auto__ = mf == null ? null : mf;
    return function() {
      var or__12830__auto__ = cljs.core._reset[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = cljs.core._reset["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-reset", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._add_method = function _add_method(mf, dispatch_val, method) {
  if (function() {
    var and__12818__auto__ = mf;
    if (and__12818__auto__) {
      return mf.cljs$core$IMultiFn$_add_method$arity$3;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_add_method$arity$3(mf, dispatch_val, method);
  } else {
    var x__13457__auto__ = mf == null ? null : mf;
    return function() {
      var or__12830__auto__ = cljs.core._add_method[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = cljs.core._add_method["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-add-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, method);
  }
};
cljs.core._remove_method = function _remove_method(mf, dispatch_val) {
  if (function() {
    var and__12818__auto__ = mf;
    if (and__12818__auto__) {
      return mf.cljs$core$IMultiFn$_remove_method$arity$2;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_remove_method$arity$2(mf, dispatch_val);
  } else {
    var x__13457__auto__ = mf == null ? null : mf;
    return function() {
      var or__12830__auto__ = cljs.core._remove_method[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = cljs.core._remove_method["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-remove-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._prefer_method = function _prefer_method(mf, dispatch_val, dispatch_val_y) {
  if (function() {
    var and__12818__auto__ = mf;
    if (and__12818__auto__) {
      return mf.cljs$core$IMultiFn$_prefer_method$arity$3;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefer_method$arity$3(mf, dispatch_val, dispatch_val_y);
  } else {
    var x__13457__auto__ = mf == null ? null : mf;
    return function() {
      var or__12830__auto__ = cljs.core._prefer_method[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = cljs.core._prefer_method["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-prefer-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, dispatch_val_y);
  }
};
cljs.core._get_method = function _get_method(mf, dispatch_val) {
  if (function() {
    var and__12818__auto__ = mf;
    if (and__12818__auto__) {
      return mf.cljs$core$IMultiFn$_get_method$arity$2;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_get_method$arity$2(mf, dispatch_val);
  } else {
    var x__13457__auto__ = mf == null ? null : mf;
    return function() {
      var or__12830__auto__ = cljs.core._get_method[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = cljs.core._get_method["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-get-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._methods = function _methods(mf) {
  if (function() {
    var and__12818__auto__ = mf;
    if (and__12818__auto__) {
      return mf.cljs$core$IMultiFn$_methods$arity$1;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_methods$arity$1(mf);
  } else {
    var x__13457__auto__ = mf == null ? null : mf;
    return function() {
      var or__12830__auto__ = cljs.core._methods[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = cljs.core._methods["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-methods", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._prefers = function _prefers(mf) {
  if (function() {
    var and__12818__auto__ = mf;
    if (and__12818__auto__) {
      return mf.cljs$core$IMultiFn$_prefers$arity$1;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefers$arity$1(mf);
  } else {
    var x__13457__auto__ = mf == null ? null : mf;
    return function() {
      var or__12830__auto__ = cljs.core._prefers[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = cljs.core._prefers["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-prefers", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._dispatch = function _dispatch(mf, args) {
  if (function() {
    var and__12818__auto__ = mf;
    if (and__12818__auto__) {
      return mf.cljs$core$IMultiFn$_dispatch$arity$2;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_dispatch$arity$2(mf, args);
  } else {
    var x__13457__auto__ = mf == null ? null : mf;
    return function() {
      var or__12830__auto__ = cljs.core._dispatch[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = cljs.core._dispatch["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-dispatch", mf);
        }
      }
    }().call(null, mf, args);
  }
};
cljs.core.do_dispatch = function do_dispatch(mf, name, dispatch_fn, args) {
  var dispatch_val = cljs.core.apply.call(null, dispatch_fn, args);
  var target_fn = cljs.core._get_method.call(null, mf, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    throw new Error([cljs.core.str("No method in multimethod '"), cljs.core.str(name), cljs.core.str("' for dispatch value: "), cljs.core.str(dispatch_val)].join(""));
  }
  return cljs.core.apply.call(null, target_fn, args);
};
cljs.core.MultiFn = function(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  this.name = name;
  this.dispatch_fn = dispatch_fn;
  this.default_dispatch_val = default_dispatch_val;
  this.hierarchy = hierarchy;
  this.method_table = method_table;
  this.prefer_table = prefer_table;
  this.method_cache = method_cache;
  this.cached_hierarchy = cached_hierarchy;
  this.cljs$lang$protocol_mask$partition0$ = 4194304;
  this.cljs$lang$protocol_mask$partition1$ = 256;
};
cljs.core.MultiFn.cljs$lang$type = true;
cljs.core.MultiFn.cljs$lang$ctorStr = "cljs.core/MultiFn";
cljs.core.MultiFn.cljs$lang$ctorPrWriter = function(this__13397__auto__, writer__13398__auto__, opt__13399__auto__) {
  return cljs.core._write.call(null, writer__13398__auto__, "cljs.core/MultiFn");
};
cljs.core.MultiFn.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_reset$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, function(mf__$2) {
    return cljs.core.PersistentArrayMap.EMPTY;
  });
  cljs.core.swap_BANG_.call(null, self__.method_cache, function(mf__$2) {
    return cljs.core.PersistentArrayMap.EMPTY;
  });
  cljs.core.swap_BANG_.call(null, self__.prefer_table, function(mf__$2) {
    return cljs.core.PersistentArrayMap.EMPTY;
  });
  cljs.core.swap_BANG_.call(null, self__.cached_hierarchy, function(mf__$2) {
    return null;
  });
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_add_method$arity$3 = function(mf, dispatch_val, method) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, cljs.core.assoc, dispatch_val, method);
  cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_remove_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, cljs.core.dissoc, dispatch_val);
  cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_get_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core._EQ_.call(null, cljs.core.deref.call(null, self__.cached_hierarchy), cljs.core.deref.call(null, self__.hierarchy))) {
  } else {
    cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  }
  var temp__4090__auto__ = cljs.core.deref.call(null, self__.method_cache).call(null, dispatch_val);
  if (cljs.core.truth_(temp__4090__auto__)) {
    var target_fn = temp__4090__auto__;
    return target_fn;
  } else {
    var temp__4090__auto____$1 = cljs.core.find_and_cache_best_method.call(null, self__.name, dispatch_val, self__.hierarchy, self__.method_table, self__.prefer_table, self__.method_cache, self__.cached_hierarchy);
    if (cljs.core.truth_(temp__4090__auto____$1)) {
      var target_fn = temp__4090__auto____$1;
      return target_fn;
    } else {
      return cljs.core.deref.call(null, self__.method_table).call(null, self__.default_dispatch_val);
    }
  }
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefer_method$arity$3 = function(mf, dispatch_val_x, dispatch_val_y) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core.truth_(cljs.core.prefers_STAR_.call(null, dispatch_val_x, dispatch_val_y, self__.prefer_table))) {
    throw new Error([cljs.core.str("Preference conflict in multimethod '"), cljs.core.str(self__.name), cljs.core.str("': "), cljs.core.str(dispatch_val_y), cljs.core.str(" is already preferred to "), cljs.core.str(dispatch_val_x)].join(""));
  } else {
  }
  cljs.core.swap_BANG_.call(null, self__.prefer_table, function(old) {
    return cljs.core.assoc.call(null, old, dispatch_val_x, cljs.core.conj.call(null, cljs.core.get.call(null, old, dispatch_val_x, cljs.core.PersistentHashSet.EMPTY), dispatch_val_y));
  });
  return cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_methods$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.call(null, self__.method_table);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefers$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.call(null, self__.prefer_table);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_dispatch$arity$2 = function(mf, args) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.do_dispatch.call(null, mf__$1, self__.name, self__.dispatch_fn, args);
};
cljs.core.__GT_MultiFn = function __GT_MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  return new cljs.core.MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
};
cljs.core.MultiFn.prototype.call = function() {
  var G__108337__delegate = function(_, args) {
    var self = this;
    return cljs.core._dispatch.call(null, self, args);
  };
  var G__108337 = function(_, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return G__108337__delegate.call(this, _, args);
  };
  G__108337.cljs$lang$maxFixedArity = 1;
  G__108337.cljs$lang$applyTo = function(arglist__108338) {
    var _ = cljs.core.first(arglist__108338);
    var args = cljs.core.rest(arglist__108338);
    return G__108337__delegate(_, args);
  };
  G__108337.cljs$core$IFn$_invoke$arity$variadic = G__108337__delegate;
  return G__108337;
}();
cljs.core.MultiFn.prototype.apply = function(_, args) {
  var self = this;
  return cljs.core._dispatch.call(null, self, args);
};
cljs.core.remove_all_methods = function remove_all_methods(multifn) {
  return cljs.core._reset.call(null, multifn);
};
cljs.core.remove_method = function remove_method(multifn, dispatch_val) {
  return cljs.core._remove_method.call(null, multifn, dispatch_val);
};
cljs.core.prefer_method = function prefer_method(multifn, dispatch_val_x, dispatch_val_y) {
  return cljs.core._prefer_method.call(null, multifn, dispatch_val_x, dispatch_val_y);
};
cljs.core.methods$ = function methods$(multifn) {
  return cljs.core._methods.call(null, multifn);
};
cljs.core.get_method = function get_method(multifn, dispatch_val) {
  return cljs.core._get_method.call(null, multifn, dispatch_val);
};
cljs.core.prefers = function prefers(multifn) {
  return cljs.core._prefers.call(null, multifn);
};
cljs.core.UUID = function(uuid) {
  this.uuid = uuid;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2153775104;
};
cljs.core.UUID.cljs$lang$type = true;
cljs.core.UUID.cljs$lang$ctorStr = "cljs.core/UUID";
cljs.core.UUID.cljs$lang$ctorPrWriter = function(this__13397__auto__, writer__13398__auto__, opt__13399__auto__) {
  return cljs.core._write.call(null, writer__13398__auto__, "cljs.core/UUID");
};
cljs.core.UUID.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.string.hashCode(cljs.core.pr_str.call(null, this$__$1));
};
cljs.core.UUID.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, ___$1) {
  var self__ = this;
  var ___$2 = this;
  return cljs.core._write.call(null, writer, [cljs.core.str('#uuid "'), cljs.core.str(self__.uuid), cljs.core.str('"')].join(""));
};
cljs.core.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return other instanceof cljs.core.UUID && self__.uuid === other.uuid;
};
cljs.core.__GT_UUID = function __GT_UUID(uuid) {
  return new cljs.core.UUID(uuid);
};
cljs.core.ExceptionInfo = function(message, data, cause) {
  this.message = message;
  this.data = data;
  this.cause = cause;
};
cljs.core.ExceptionInfo.cljs$lang$type = true;
cljs.core.ExceptionInfo.cljs$lang$ctorStr = "cljs.core/ExceptionInfo";
cljs.core.ExceptionInfo.cljs$lang$ctorPrWriter = function(this__13400__auto__, writer__13401__auto__, opts__13402__auto__) {
  return cljs.core._write.call(null, writer__13401__auto__, "cljs.core/ExceptionInfo");
};
cljs.core.__GT_ExceptionInfo = function __GT_ExceptionInfo(message, data, cause) {
  return new cljs.core.ExceptionInfo(message, data, cause);
};
cljs.core.ExceptionInfo.prototype = new Error;
cljs.core.ExceptionInfo.prototype.constructor = cljs.core.ExceptionInfo;
cljs.core.ex_info = function() {
  var ex_info = null;
  var ex_info__2 = function(msg, map) {
    return new cljs.core.ExceptionInfo(msg, map, null);
  };
  var ex_info__3 = function(msg, map, cause) {
    return new cljs.core.ExceptionInfo(msg, map, cause);
  };
  ex_info = function(msg, map, cause) {
    switch(arguments.length) {
      case 2:
        return ex_info__2.call(this, msg, map);
      case 3:
        return ex_info__3.call(this, msg, map, cause);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ex_info.cljs$core$IFn$_invoke$arity$2 = ex_info__2;
  ex_info.cljs$core$IFn$_invoke$arity$3 = ex_info__3;
  return ex_info;
}();
cljs.core.ex_data = function ex_data(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.data;
  } else {
    return null;
  }
};
cljs.core.ex_message = function ex_message(ex) {
  if (ex instanceof Error) {
    return ex.message;
  } else {
    return null;
  }
};
cljs.core.ex_cause = function ex_cause(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.cause;
  } else {
    return null;
  }
};
cljs.core.comparator = function comparator(pred) {
  return function(x, y) {
    if (cljs.core.truth_(pred.call(null, x, y))) {
      return-1;
    } else {
      if (cljs.core.truth_(pred.call(null, y, x))) {
        return 1;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return 0;
        } else {
          return null;
        }
      }
    }
  };
};
cljs.core.special_symbol_QMARK_ = function special_symbol_QMARK_(x) {
  return cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [new cljs.core.Symbol(null, "deftype*", "deftype*", -978581244, null), null, new cljs.core.Symbol(null, "new", "new", -1640422567, null), null, new cljs.core.Symbol(null, "quote", "quote", -1532577739, null), null, new cljs.core.Symbol(null, "\x26", "\x26", -1640531489, null), null, new cljs.core.Symbol(null, "set!", "set!", -1637004872, null), null, new cljs.core.Symbol(null, 
  "recur", "recur", -1532142362, null), null, new cljs.core.Symbol(null, ".", ".", -1640531481, null), null, new cljs.core.Symbol(null, "ns", "ns", -1640528002, null), null, new cljs.core.Symbol(null, "do", "do", -1640528316, null), null, new cljs.core.Symbol(null, "fn*", "fn*", -1640430053, null), null, new cljs.core.Symbol(null, "throw", "throw", -1530191713, null), null, new cljs.core.Symbol(null, "letfn*", "letfn*", 1548249632, null), null, new cljs.core.Symbol(null, "js*", "js*", -1640426054, 
  null), null, new cljs.core.Symbol(null, "defrecord*", "defrecord*", 774272013, null), null, new cljs.core.Symbol(null, "let*", "let*", -1637213400, null), null, new cljs.core.Symbol(null, "loop*", "loop*", -1537374273, null), null, new cljs.core.Symbol(null, "try", "try", -1640416396, null), null, new cljs.core.Symbol(null, "if", "if", -1640528170, null), null, new cljs.core.Symbol(null, "def", "def", -1640432194, null), null], null), null), x);
};
goog.provide("goog.json");
goog.provide("goog.json.Serializer");
goog.json.isValid_ = function(s) {
  if (/^\s*$/.test(s)) {
    return false;
  }
  var backslashesRe = /\\["\\\/bfnrtu]/g;
  var simpleValuesRe = /"[^"\\\n\r\u2028\u2029\x00-\x08\x0a-\x1f]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;
  var openBracketsRe = /(?:^|:|,)(?:[\s\u2028\u2029]*\[)+/g;
  var remainderRe = /^[\],:{}\s\u2028\u2029]*$/;
  return remainderRe.test(s.replace(backslashesRe, "@").replace(simpleValuesRe, "]").replace(openBracketsRe, ""));
};
goog.json.parse = function(s) {
  var o = String(s);
  if (goog.json.isValid_(o)) {
    try {
      return(eval("(" + o + ")"));
    } catch (ex) {
    }
  }
  throw Error("Invalid JSON string: " + o);
};
goog.json.unsafeParse = function(s) {
  return(eval("(" + s + ")"));
};
goog.json.Replacer;
goog.json.Reviver;
goog.json.serialize = function(object, opt_replacer) {
  return(new goog.json.Serializer(opt_replacer)).serialize(object);
};
goog.json.Serializer = function(opt_replacer) {
  this.replacer_ = opt_replacer;
};
goog.json.Serializer.prototype.serialize = function(object) {
  var sb = [];
  this.serialize_(object, sb);
  return sb.join("");
};
goog.json.Serializer.prototype.serialize_ = function(object, sb) {
  switch(typeof object) {
    case "string":
      this.serializeString_((object), sb);
      break;
    case "number":
      this.serializeNumber_((object), sb);
      break;
    case "boolean":
      sb.push(object);
      break;
    case "undefined":
      sb.push("null");
      break;
    case "object":
      if (object == null) {
        sb.push("null");
        break;
      }
      if (goog.isArray(object)) {
        this.serializeArray((object), sb);
        break;
      }
      this.serializeObject_((object), sb);
      break;
    case "function":
      break;
    default:
      throw Error("Unknown type: " + typeof object);;
  }
};
goog.json.Serializer.charToJsonCharCache_ = {'"':'\\"', "\\":"\\\\", "/":"\\/", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\u000b"};
goog.json.Serializer.charsToReplace_ = /\uffff/.test("\uffff") ? /[\\\"\x00-\x1f\x7f-\uffff]/g : /[\\\"\x00-\x1f\x7f-\xff]/g;
goog.json.Serializer.prototype.serializeString_ = function(s, sb) {
  sb.push('"', s.replace(goog.json.Serializer.charsToReplace_, function(c) {
    if (c in goog.json.Serializer.charToJsonCharCache_) {
      return goog.json.Serializer.charToJsonCharCache_[c];
    }
    var cc = c.charCodeAt(0);
    var rv = "\\u";
    if (cc < 16) {
      rv += "000";
    } else {
      if (cc < 256) {
        rv += "00";
      } else {
        if (cc < 4096) {
          rv += "0";
        }
      }
    }
    return goog.json.Serializer.charToJsonCharCache_[c] = rv + cc.toString(16);
  }), '"');
};
goog.json.Serializer.prototype.serializeNumber_ = function(n, sb) {
  sb.push(isFinite(n) && !isNaN(n) ? n : "null");
};
goog.json.Serializer.prototype.serializeArray = function(arr, sb) {
  var l = arr.length;
  sb.push("[");
  var sep = "";
  for (var i = 0;i < l;i++) {
    sb.push(sep);
    var value = arr[i];
    this.serialize_(this.replacer_ ? this.replacer_.call(arr, String(i), value) : value, sb);
    sep = ",";
  }
  sb.push("]");
};
goog.json.Serializer.prototype.serializeObject_ = function(obj, sb) {
  sb.push("{");
  var sep = "";
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var value = obj[key];
      if (typeof value != "function") {
        sb.push(sep);
        this.serializeString_(key, sb);
        sb.push(":");
        this.serialize_(this.replacer_ ? this.replacer_.call(obj, key, value) : value, sb);
        sep = ",";
      }
    }
  }
  sb.push("}");
};
goog.provide("goog.disposable.IDisposable");
goog.disposable.IDisposable = function() {
};
goog.disposable.IDisposable.prototype.dispose;
goog.disposable.IDisposable.prototype.isDisposed;
goog.provide("goog.Disposable");
goog.provide("goog.dispose");
goog.require("goog.disposable.IDisposable");
goog.Disposable = function() {
  if (goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {
    this.creationStack = (new Error).stack;
    goog.Disposable.instances_[goog.getUid(this)] = this;
  }
};
goog.Disposable.MonitoringMode = {OFF:0, PERMANENT:1, INTERACTIVE:2};
goog.Disposable.MONITORING_MODE = 0;
goog.Disposable.instances_ = {};
goog.Disposable.getUndisposedObjects = function() {
  var ret = [];
  for (var id in goog.Disposable.instances_) {
    if (goog.Disposable.instances_.hasOwnProperty(id)) {
      ret.push(goog.Disposable.instances_[Number(id)]);
    }
  }
  return ret;
};
goog.Disposable.clearUndisposedObjects = function() {
  goog.Disposable.instances_ = {};
};
goog.Disposable.prototype.disposed_ = false;
goog.Disposable.prototype.onDisposeCallbacks_;
goog.Disposable.prototype.creationStack;
goog.Disposable.prototype.isDisposed = function() {
  return this.disposed_;
};
goog.Disposable.prototype.getDisposed = goog.Disposable.prototype.isDisposed;
goog.Disposable.prototype.dispose = function() {
  if (!this.disposed_) {
    this.disposed_ = true;
    this.disposeInternal();
    if (goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {
      var uid = goog.getUid(this);
      if (goog.Disposable.MONITORING_MODE == goog.Disposable.MonitoringMode.PERMANENT && !goog.Disposable.instances_.hasOwnProperty(uid)) {
        throw Error(this + " did not call the goog.Disposable base " + "constructor or was disposed of after a clearUndisposedObjects " + "call");
      }
      delete goog.Disposable.instances_[uid];
    }
  }
};
goog.Disposable.prototype.registerDisposable = function(disposable) {
  this.addOnDisposeCallback(goog.partial(goog.dispose, disposable));
};
goog.Disposable.prototype.addOnDisposeCallback = function(callback, opt_scope) {
  if (!this.onDisposeCallbacks_) {
    this.onDisposeCallbacks_ = [];
  }
  this.onDisposeCallbacks_.push(goog.bind(callback, opt_scope));
};
goog.Disposable.prototype.disposeInternal = function() {
  if (this.onDisposeCallbacks_) {
    while (this.onDisposeCallbacks_.length) {
      this.onDisposeCallbacks_.shift()();
    }
  }
};
goog.Disposable.isDisposed = function(obj) {
  if (obj && typeof obj.isDisposed == "function") {
    return obj.isDisposed();
  }
  return false;
};
goog.dispose = function(obj) {
  if (obj && typeof obj.dispose == "function") {
    obj.dispose();
  }
};
goog.disposeAll = function(var_args) {
  for (var i = 0, len = arguments.length;i < len;++i) {
    var disposable = arguments[i];
    if (goog.isArrayLike(disposable)) {
      goog.disposeAll.apply(null, disposable);
    } else {
      goog.dispose(disposable);
    }
  }
};
goog.provide("goog.debug.EntryPointMonitor");
goog.provide("goog.debug.entryPointRegistry");
goog.require("goog.asserts");
goog.debug.EntryPointMonitor = function() {
};
goog.debug.EntryPointMonitor.prototype.wrap;
goog.debug.EntryPointMonitor.prototype.unwrap;
goog.debug.entryPointRegistry.refList_ = [];
goog.debug.entryPointRegistry.monitors_ = [];
goog.debug.entryPointRegistry.monitorsMayExist_ = false;
goog.debug.entryPointRegistry.register = function(callback) {
  goog.debug.entryPointRegistry.refList_[goog.debug.entryPointRegistry.refList_.length] = callback;
  if (goog.debug.entryPointRegistry.monitorsMayExist_) {
    var monitors = goog.debug.entryPointRegistry.monitors_;
    for (var i = 0;i < monitors.length;i++) {
      callback(goog.bind(monitors[i].wrap, monitors[i]));
    }
  }
};
goog.debug.entryPointRegistry.monitorAll = function(monitor) {
  goog.debug.entryPointRegistry.monitorsMayExist_ = true;
  var transformer = goog.bind(monitor.wrap, monitor);
  for (var i = 0;i < goog.debug.entryPointRegistry.refList_.length;i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer);
  }
  goog.debug.entryPointRegistry.monitors_.push(monitor);
};
goog.debug.entryPointRegistry.unmonitorAllIfPossible = function(monitor) {
  var monitors = goog.debug.entryPointRegistry.monitors_;
  goog.asserts.assert(monitor == monitors[monitors.length - 1], "Only the most recent monitor can be unwrapped.");
  var transformer = goog.bind(monitor.unwrap, monitor);
  for (var i = 0;i < goog.debug.entryPointRegistry.refList_.length;i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer);
  }
  monitors.length--;
};
goog.provide("goog.debug.errorHandlerWeakDep");
goog.debug.errorHandlerWeakDep = {protectEntryPoint:function(fn, opt_tracers) {
  return fn;
}};
goog.provide("goog.userAgent");
goog.require("goog.string");
goog.userAgent.ASSUME_IE = false;
goog.userAgent.ASSUME_GECKO = false;
goog.userAgent.ASSUME_WEBKIT = false;
goog.userAgent.ASSUME_MOBILE_WEBKIT = false;
goog.userAgent.ASSUME_OPERA = false;
goog.userAgent.ASSUME_ANY_VERSION = false;
goog.userAgent.BROWSER_KNOWN_ = goog.userAgent.ASSUME_IE || (goog.userAgent.ASSUME_GECKO || (goog.userAgent.ASSUME_MOBILE_WEBKIT || (goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_OPERA)));
goog.userAgent.getUserAgentString = function() {
  return goog.global["navigator"] ? goog.global["navigator"].userAgent : null;
};
goog.userAgent.getNavigator = function() {
  return goog.global["navigator"];
};
goog.userAgent.init_ = function() {
  goog.userAgent.detectedOpera_ = false;
  goog.userAgent.detectedIe_ = false;
  goog.userAgent.detectedWebkit_ = false;
  goog.userAgent.detectedMobile_ = false;
  goog.userAgent.detectedGecko_ = false;
  var ua;
  if (!goog.userAgent.BROWSER_KNOWN_ && (ua = goog.userAgent.getUserAgentString())) {
    var navigator = goog.userAgent.getNavigator();
    goog.userAgent.detectedOpera_ = ua.indexOf("Opera") == 0;
    goog.userAgent.detectedIe_ = !goog.userAgent.detectedOpera_ && ua.indexOf("MSIE") != -1;
    goog.userAgent.detectedWebkit_ = !goog.userAgent.detectedOpera_ && ua.indexOf("WebKit") != -1;
    goog.userAgent.detectedMobile_ = goog.userAgent.detectedWebkit_ && ua.indexOf("Mobile") != -1;
    goog.userAgent.detectedGecko_ = !goog.userAgent.detectedOpera_ && (!goog.userAgent.detectedWebkit_ && navigator.product == "Gecko");
  }
};
if (!goog.userAgent.BROWSER_KNOWN_) {
  goog.userAgent.init_();
}
goog.userAgent.OPERA = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_OPERA : goog.userAgent.detectedOpera_;
goog.userAgent.IE = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_IE : goog.userAgent.detectedIe_;
goog.userAgent.GECKO = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_GECKO : goog.userAgent.detectedGecko_;
goog.userAgent.WEBKIT = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_MOBILE_WEBKIT : goog.userAgent.detectedWebkit_;
goog.userAgent.MOBILE = goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.detectedMobile_;
goog.userAgent.SAFARI = goog.userAgent.WEBKIT;
goog.userAgent.determinePlatform_ = function() {
  var navigator = goog.userAgent.getNavigator();
  return navigator && navigator.platform || "";
};
goog.userAgent.PLATFORM = goog.userAgent.determinePlatform_();
goog.userAgent.ASSUME_MAC = false;
goog.userAgent.ASSUME_WINDOWS = false;
goog.userAgent.ASSUME_LINUX = false;
goog.userAgent.ASSUME_X11 = false;
goog.userAgent.ASSUME_ANDROID = false;
goog.userAgent.ASSUME_IPHONE = false;
goog.userAgent.ASSUME_IPAD = false;
goog.userAgent.PLATFORM_KNOWN_ = goog.userAgent.ASSUME_MAC || (goog.userAgent.ASSUME_WINDOWS || (goog.userAgent.ASSUME_LINUX || (goog.userAgent.ASSUME_X11 || (goog.userAgent.ASSUME_ANDROID || (goog.userAgent.ASSUME_IPHONE || goog.userAgent.ASSUME_IPAD)))));
goog.userAgent.initPlatform_ = function() {
  goog.userAgent.detectedMac_ = goog.string.contains(goog.userAgent.PLATFORM, "Mac");
  goog.userAgent.detectedWindows_ = goog.string.contains(goog.userAgent.PLATFORM, "Win");
  goog.userAgent.detectedLinux_ = goog.string.contains(goog.userAgent.PLATFORM, "Linux");
  goog.userAgent.detectedX11_ = !!goog.userAgent.getNavigator() && goog.string.contains(goog.userAgent.getNavigator()["appVersion"] || "", "X11");
  var ua = goog.userAgent.getUserAgentString();
  goog.userAgent.detectedAndroid_ = !!ua && ua.indexOf("Android") >= 0;
  goog.userAgent.detectedIPhone_ = !!ua && ua.indexOf("iPhone") >= 0;
  goog.userAgent.detectedIPad_ = !!ua && ua.indexOf("iPad") >= 0;
};
if (!goog.userAgent.PLATFORM_KNOWN_) {
  goog.userAgent.initPlatform_();
}
goog.userAgent.MAC = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_MAC : goog.userAgent.detectedMac_;
goog.userAgent.WINDOWS = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_WINDOWS : goog.userAgent.detectedWindows_;
goog.userAgent.LINUX = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_LINUX : goog.userAgent.detectedLinux_;
goog.userAgent.X11 = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_X11 : goog.userAgent.detectedX11_;
goog.userAgent.ANDROID = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_ANDROID : goog.userAgent.detectedAndroid_;
goog.userAgent.IPHONE = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPHONE : goog.userAgent.detectedIPhone_;
goog.userAgent.IPAD = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPAD : goog.userAgent.detectedIPad_;
goog.userAgent.determineVersion_ = function() {
  var version = "", re;
  if (goog.userAgent.OPERA && goog.global["opera"]) {
    var operaVersion = goog.global["opera"].version;
    version = typeof operaVersion == "function" ? operaVersion() : operaVersion;
  } else {
    if (goog.userAgent.GECKO) {
      re = /rv\:([^\);]+)(\)|;)/;
    } else {
      if (goog.userAgent.IE) {
        re = /MSIE\s+([^\);]+)(\)|;)/;
      } else {
        if (goog.userAgent.WEBKIT) {
          re = /WebKit\/(\S+)/;
        }
      }
    }
    if (re) {
      var arr = re.exec(goog.userAgent.getUserAgentString());
      version = arr ? arr[1] : "";
    }
  }
  if (goog.userAgent.IE) {
    var docMode = goog.userAgent.getDocumentMode_();
    if (docMode > parseFloat(version)) {
      return String(docMode);
    }
  }
  return version;
};
goog.userAgent.getDocumentMode_ = function() {
  var doc = goog.global["document"];
  return doc ? doc["documentMode"] : undefined;
};
goog.userAgent.VERSION = goog.userAgent.determineVersion_();
goog.userAgent.compare = function(v1, v2) {
  return goog.string.compareVersions(v1, v2);
};
goog.userAgent.isVersionCache_ = {};
goog.userAgent.isVersion = function(version) {
  return goog.userAgent.ASSUME_ANY_VERSION || (goog.userAgent.isVersionCache_[version] || (goog.userAgent.isVersionCache_[version] = goog.string.compareVersions(goog.userAgent.VERSION, version) >= 0));
};
goog.userAgent.isDocumentMode = function(documentMode) {
  return goog.userAgent.IE && goog.userAgent.DOCUMENT_MODE >= documentMode;
};
goog.userAgent.DOCUMENT_MODE = function() {
  var doc = goog.global["document"];
  if (!doc || !goog.userAgent.IE) {
    return undefined;
  }
  var mode = goog.userAgent.getDocumentMode_();
  return mode || (doc["compatMode"] == "CSS1Compat" ? parseInt(goog.userAgent.VERSION, 10) : 5);
}();
goog.provide("goog.events.BrowserFeature");
goog.require("goog.userAgent");
goog.events.BrowserFeature = {HAS_W3C_BUTTON:!goog.userAgent.IE || goog.userAgent.isDocumentMode(9), HAS_W3C_EVENT_SUPPORT:!goog.userAgent.IE || goog.userAgent.isDocumentMode(9), SET_KEY_CODE_TO_PREVENT_DEFAULT:goog.userAgent.IE && !goog.userAgent.isVersion("9"), HAS_NAVIGATOR_ONLINE_PROPERTY:!goog.userAgent.WEBKIT || goog.userAgent.isVersion("528"), HAS_HTML5_NETWORK_EVENT_SUPPORT:goog.userAgent.GECKO && goog.userAgent.isVersion("1.9b") || (goog.userAgent.IE && goog.userAgent.isVersion("8") || (goog.userAgent.OPERA && 
goog.userAgent.isVersion("9.5") || goog.userAgent.WEBKIT && goog.userAgent.isVersion("528"))), HTML5_NETWORK_EVENTS_FIRE_ON_BODY:goog.userAgent.GECKO && !goog.userAgent.isVersion("8") || goog.userAgent.IE && !goog.userAgent.isVersion("9"), TOUCH_ENABLED:"ontouchstart" in goog.global || (!!(goog.global["document"] && (document.documentElement && "ontouchstart" in document.documentElement)) || !!(goog.global["navigator"] && goog.global["navigator"]["msMaxTouchPoints"]))};
goog.provide("goog.events.Event");
goog.provide("goog.events.EventLike");
goog.require("goog.Disposable");
goog.events.EventLike;
goog.events.Event = function(type, opt_target) {
  this.type = type;
  this.target = opt_target;
  this.currentTarget = this.target;
};
goog.events.Event.prototype.disposeInternal = function() {
};
goog.events.Event.prototype.dispose = function() {
};
goog.events.Event.prototype.propagationStopped_ = false;
goog.events.Event.prototype.defaultPrevented = false;
goog.events.Event.prototype.returnValue_ = true;
goog.events.Event.prototype.stopPropagation = function() {
  this.propagationStopped_ = true;
};
goog.events.Event.prototype.preventDefault = function() {
  this.defaultPrevented = true;
  this.returnValue_ = false;
};
goog.events.Event.stopPropagation = function(e) {
  e.stopPropagation();
};
goog.events.Event.preventDefault = function(e) {
  e.preventDefault();
};
goog.provide("goog.events.EventType");
goog.require("goog.userAgent");
goog.events.EventType = {CLICK:"click", DBLCLICK:"dblclick", MOUSEDOWN:"mousedown", MOUSEUP:"mouseup", MOUSEOVER:"mouseover", MOUSEOUT:"mouseout", MOUSEMOVE:"mousemove", SELECTSTART:"selectstart", KEYPRESS:"keypress", KEYDOWN:"keydown", KEYUP:"keyup", BLUR:"blur", FOCUS:"focus", DEACTIVATE:"deactivate", FOCUSIN:goog.userAgent.IE ? "focusin" : "DOMFocusIn", FOCUSOUT:goog.userAgent.IE ? "focusout" : "DOMFocusOut", CHANGE:"change", SELECT:"select", SUBMIT:"submit", INPUT:"input", PROPERTYCHANGE:"propertychange", 
DRAGSTART:"dragstart", DRAG:"drag", DRAGENTER:"dragenter", DRAGOVER:"dragover", DRAGLEAVE:"dragleave", DROP:"drop", DRAGEND:"dragend", TOUCHSTART:"touchstart", TOUCHMOVE:"touchmove", TOUCHEND:"touchend", TOUCHCANCEL:"touchcancel", BEFOREUNLOAD:"beforeunload", CONTEXTMENU:"contextmenu", ERROR:"error", HELP:"help", LOAD:"load", LOSECAPTURE:"losecapture", READYSTATECHANGE:"readystatechange", RESIZE:"resize", SCROLL:"scroll", UNLOAD:"unload", HASHCHANGE:"hashchange", PAGEHIDE:"pagehide", PAGESHOW:"pageshow", 
POPSTATE:"popstate", COPY:"copy", PASTE:"paste", CUT:"cut", BEFORECOPY:"beforecopy", BEFORECUT:"beforecut", BEFOREPASTE:"beforepaste", ONLINE:"online", OFFLINE:"offline", MESSAGE:"message", CONNECT:"connect", TRANSITIONEND:goog.userAgent.WEBKIT ? "webkitTransitionEnd" : goog.userAgent.OPERA ? "oTransitionEnd" : "transitionend", MSGESTURECHANGE:"MSGestureChange", MSGESTUREEND:"MSGestureEnd", MSGESTUREHOLD:"MSGestureHold", MSGESTURESTART:"MSGestureStart", MSGESTURETAP:"MSGestureTap", MSGOTPOINTERCAPTURE:"MSGotPointerCapture", 
MSINERTIASTART:"MSInertiaStart", MSLOSTPOINTERCAPTURE:"MSLostPointerCapture", MSPOINTERCANCEL:"MSPointerCancel", MSPOINTERDOWN:"MSPointerDown", MSPOINTERMOVE:"MSPointerMove", MSPOINTEROVER:"MSPointerOver", MSPOINTEROUT:"MSPointerOut", MSPOINTERUP:"MSPointerUp", TEXTINPUT:"textinput", COMPOSITIONSTART:"compositionstart", COMPOSITIONUPDATE:"compositionupdate", COMPOSITIONEND:"compositionend"};
goog.provide("goog.reflect");
goog.reflect.object = function(type, object) {
  return object;
};
goog.reflect.sinkValue = function(x) {
  goog.reflect.sinkValue[" "](x);
  return x;
};
goog.reflect.sinkValue[" "] = goog.nullFunction;
goog.reflect.canAccessProperty = function(obj, prop) {
  try {
    goog.reflect.sinkValue(obj[prop]);
    return true;
  } catch (e) {
  }
  return false;
};
goog.provide("goog.events.BrowserEvent");
goog.provide("goog.events.BrowserEvent.MouseButton");
goog.require("goog.events.BrowserFeature");
goog.require("goog.events.Event");
goog.require("goog.events.EventType");
goog.require("goog.reflect");
goog.require("goog.userAgent");
goog.events.BrowserEvent = function(opt_e, opt_currentTarget) {
  if (opt_e) {
    this.init(opt_e, opt_currentTarget);
  }
};
goog.inherits(goog.events.BrowserEvent, goog.events.Event);
goog.events.BrowserEvent.MouseButton = {LEFT:0, MIDDLE:1, RIGHT:2};
goog.events.BrowserEvent.IEButtonMap = [1, 4, 2];
goog.events.BrowserEvent.prototype.target = null;
goog.events.BrowserEvent.prototype.currentTarget;
goog.events.BrowserEvent.prototype.relatedTarget = null;
goog.events.BrowserEvent.prototype.offsetX = 0;
goog.events.BrowserEvent.prototype.offsetY = 0;
goog.events.BrowserEvent.prototype.clientX = 0;
goog.events.BrowserEvent.prototype.clientY = 0;
goog.events.BrowserEvent.prototype.screenX = 0;
goog.events.BrowserEvent.prototype.screenY = 0;
goog.events.BrowserEvent.prototype.button = 0;
goog.events.BrowserEvent.prototype.keyCode = 0;
goog.events.BrowserEvent.prototype.charCode = 0;
goog.events.BrowserEvent.prototype.ctrlKey = false;
goog.events.BrowserEvent.prototype.altKey = false;
goog.events.BrowserEvent.prototype.shiftKey = false;
goog.events.BrowserEvent.prototype.metaKey = false;
goog.events.BrowserEvent.prototype.state;
goog.events.BrowserEvent.prototype.platformModifierKey = false;
goog.events.BrowserEvent.prototype.event_ = null;
goog.events.BrowserEvent.prototype.init = function(e, opt_currentTarget) {
  var type = this.type = e.type;
  goog.events.Event.call(this, type);
  this.target = (e.target) || e.srcElement;
  this.currentTarget = (opt_currentTarget);
  var relatedTarget = (e.relatedTarget);
  if (relatedTarget) {
    if (goog.userAgent.GECKO) {
      if (!goog.reflect.canAccessProperty(relatedTarget, "nodeName")) {
        relatedTarget = null;
      }
    }
  } else {
    if (type == goog.events.EventType.MOUSEOVER) {
      relatedTarget = e.fromElement;
    } else {
      if (type == goog.events.EventType.MOUSEOUT) {
        relatedTarget = e.toElement;
      }
    }
  }
  this.relatedTarget = relatedTarget;
  this.offsetX = goog.userAgent.WEBKIT || e.offsetX !== undefined ? e.offsetX : e.layerX;
  this.offsetY = goog.userAgent.WEBKIT || e.offsetY !== undefined ? e.offsetY : e.layerY;
  this.clientX = e.clientX !== undefined ? e.clientX : e.pageX;
  this.clientY = e.clientY !== undefined ? e.clientY : e.pageY;
  this.screenX = e.screenX || 0;
  this.screenY = e.screenY || 0;
  this.button = e.button;
  this.keyCode = e.keyCode || 0;
  this.charCode = e.charCode || (type == "keypress" ? e.keyCode : 0);
  this.ctrlKey = e.ctrlKey;
  this.altKey = e.altKey;
  this.shiftKey = e.shiftKey;
  this.metaKey = e.metaKey;
  this.platformModifierKey = goog.userAgent.MAC ? e.metaKey : e.ctrlKey;
  this.state = e.state;
  this.event_ = e;
  if (e.defaultPrevented) {
    this.preventDefault();
  }
  delete this.propagationStopped_;
};
goog.events.BrowserEvent.prototype.isButton = function(button) {
  if (!goog.events.BrowserFeature.HAS_W3C_BUTTON) {
    if (this.type == "click") {
      return button == goog.events.BrowserEvent.MouseButton.LEFT;
    } else {
      return!!(this.event_.button & goog.events.BrowserEvent.IEButtonMap[button]);
    }
  } else {
    return this.event_.button == button;
  }
};
goog.events.BrowserEvent.prototype.isMouseActionButton = function() {
  return this.isButton(goog.events.BrowserEvent.MouseButton.LEFT) && !(goog.userAgent.WEBKIT && (goog.userAgent.MAC && this.ctrlKey));
};
goog.events.BrowserEvent.prototype.stopPropagation = function() {
  goog.events.BrowserEvent.superClass_.stopPropagation.call(this);
  if (this.event_.stopPropagation) {
    this.event_.stopPropagation();
  } else {
    this.event_.cancelBubble = true;
  }
};
goog.events.BrowserEvent.prototype.preventDefault = function() {
  goog.events.BrowserEvent.superClass_.preventDefault.call(this);
  var be = this.event_;
  if (!be.preventDefault) {
    be.returnValue = false;
    if (goog.events.BrowserFeature.SET_KEY_CODE_TO_PREVENT_DEFAULT) {
      try {
        var VK_F1 = 112;
        var VK_F12 = 123;
        if (be.ctrlKey || be.keyCode >= VK_F1 && be.keyCode <= VK_F12) {
          be.keyCode = -1;
        }
      } catch (ex) {
      }
    }
  } else {
    be.preventDefault();
  }
};
goog.events.BrowserEvent.prototype.getBrowserEvent = function() {
  return this.event_;
};
goog.events.BrowserEvent.prototype.disposeInternal = function() {
};
goog.provide("goog.events.EventWrapper");
goog.events.EventWrapper = function() {
};
goog.events.EventWrapper.prototype.listen = function(src, listener, opt_capt, opt_scope, opt_eventHandler) {
};
goog.events.EventWrapper.prototype.unlisten = function(src, listener, opt_capt, opt_scope, opt_eventHandler) {
};
goog.provide("goog.events.Listenable");
goog.provide("goog.events.ListenableKey");
goog.require("goog.events.EventLike");
goog.events.Listenable = function() {
};
goog.events.Listenable.USE_LISTENABLE_INTERFACE = false;
goog.events.Listenable.IMPLEMENTED_BY_PROP_ = "__closure_listenable";
goog.events.Listenable.addImplementation = function(cls) {
  cls.prototype[goog.events.Listenable.IMPLEMENTED_BY_PROP_] = true;
};
goog.events.Listenable.isImplementedBy = function(obj) {
  return!!(obj && obj[goog.events.Listenable.IMPLEMENTED_BY_PROP_]);
};
goog.events.Listenable.prototype.listen;
goog.events.Listenable.prototype.listenOnce;
goog.events.Listenable.prototype.unlisten;
goog.events.Listenable.prototype.unlistenByKey;
goog.events.Listenable.prototype.dispatchEvent;
goog.events.Listenable.prototype.removeAllListeners;
goog.events.Listenable.prototype.fireListeners;
goog.events.Listenable.prototype.getListeners;
goog.events.Listenable.prototype.getListener;
goog.events.Listenable.prototype.hasListener;
goog.events.ListenableKey = function() {
};
goog.events.ListenableKey.counter_ = 0;
goog.events.ListenableKey.reserveKey = function() {
  return++goog.events.ListenableKey.counter_;
};
goog.events.ListenableKey.prototype.src;
goog.events.ListenableKey.prototype.type;
goog.events.ListenableKey.prototype.listener;
goog.events.ListenableKey.prototype.capture;
goog.events.ListenableKey.prototype.handler;
goog.events.ListenableKey.prototype.key;
goog.provide("goog.events.Listener");
goog.require("goog.events.ListenableKey");
goog.events.Listener = function() {
  if (goog.events.Listener.ENABLE_MONITORING) {
    this.creationStack = (new Error).stack;
  }
};
goog.events.Listener.ENABLE_MONITORING = false;
goog.events.Listener.prototype.isFunctionListener_;
goog.events.Listener.prototype.listener;
goog.events.Listener.prototype.proxy;
goog.events.Listener.prototype.src;
goog.events.Listener.prototype.type;
goog.events.Listener.prototype.capture;
goog.events.Listener.prototype.handler;
goog.events.Listener.prototype.key = 0;
goog.events.Listener.prototype.removed = false;
goog.events.Listener.prototype.callOnce = false;
goog.events.Listener.prototype.creationStack;
goog.events.Listener.prototype.init = function(listener, proxy, src, type, capture, opt_handler) {
  if (goog.isFunction(listener)) {
    this.isFunctionListener_ = true;
  } else {
    if (listener && (listener.handleEvent && goog.isFunction(listener.handleEvent))) {
      this.isFunctionListener_ = false;
    } else {
      throw Error("Invalid listener argument");
    }
  }
  this.listener = listener;
  this.proxy = proxy;
  this.src = src;
  this.type = type;
  this.capture = !!capture;
  this.handler = opt_handler;
  this.callOnce = false;
  this.key = goog.events.ListenableKey.reserveKey();
  this.removed = false;
};
goog.events.Listener.prototype.handleEvent = function(eventObject) {
  if (this.isFunctionListener_) {
    return this.listener.call(this.handler || this.src, eventObject);
  }
  return this.listener.handleEvent.call(this.listener, eventObject);
};
goog.provide("goog.events");
goog.provide("goog.events.Key");
goog.require("goog.array");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.debug.errorHandlerWeakDep");
goog.require("goog.events.BrowserEvent");
goog.require("goog.events.BrowserFeature");
goog.require("goog.events.Event");
goog.require("goog.events.EventWrapper");
goog.require("goog.events.Listenable");
goog.require("goog.events.Listener");
goog.require("goog.object");
goog.require("goog.userAgent");
goog.events.Key;
goog.events.ListenableType;
goog.events.listeners_ = {};
goog.events.listenerTree_ = {};
goog.events.sources_ = {};
goog.events.onString_ = "on";
goog.events.onStringMap_ = {};
goog.events.keySeparator_ = "_";
goog.events.listen = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.listen(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  var listenableKey;
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE && goog.events.Listenable.isImplementedBy(src)) {
    listenableKey = src.listen((type), goog.events.wrapListener_(listener), opt_capt, opt_handler);
  } else {
    listenableKey = goog.events.listen_((src), type, listener, false, opt_capt, opt_handler);
  }
  var key = listenableKey.key;
  goog.events.listeners_[key] = listenableKey;
  return key;
};
goog.events.listen_ = function(src, type, listener, callOnce, opt_capt, opt_handler) {
  if (!type) {
    throw Error("Invalid event type");
  }
  var capture = !!opt_capt;
  var map = goog.events.listenerTree_;
  if (!(type in map)) {
    map[type] = {count_:0, remaining_:0};
  }
  map = map[type];
  if (!(capture in map)) {
    map[capture] = {count_:0, remaining_:0};
    map.count_++;
  }
  map = map[capture];
  var srcUid = goog.getUid(src);
  var listenerArray, listenerObj;
  map.remaining_++;
  if (!map[srcUid]) {
    listenerArray = map[srcUid] = [];
    map.count_++;
  } else {
    listenerArray = map[srcUid];
    for (var i = 0;i < listenerArray.length;i++) {
      listenerObj = listenerArray[i];
      if (listenerObj.listener == listener && listenerObj.handler == opt_handler) {
        if (listenerObj.removed) {
          break;
        }
        if (!callOnce) {
          listenerArray[i].callOnce = false;
        }
        return listenerArray[i];
      }
    }
  }
  var proxy = goog.events.getProxy();
  listenerObj = new goog.events.Listener;
  listenerObj.init(listener, proxy, src, type, capture, opt_handler);
  listenerObj.callOnce = callOnce;
  proxy.src = src;
  proxy.listener = listenerObj;
  listenerArray.push(listenerObj);
  if (!goog.events.sources_[srcUid]) {
    goog.events.sources_[srcUid] = [];
  }
  goog.events.sources_[srcUid].push(listenerObj);
  if (src.addEventListener) {
    if (src == goog.global || !src.customEvent_) {
      src.addEventListener(type, proxy, capture);
    }
  } else {
    src.attachEvent(goog.events.getOnString_(type), proxy);
  }
  return listenerObj;
};
goog.events.getProxy = function() {
  var proxyCallbackFunction = goog.events.handleBrowserEvent_;
  var f = goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT ? function(eventObject) {
    return proxyCallbackFunction.call(f.src, f.listener, eventObject);
  } : function(eventObject) {
    var v = proxyCallbackFunction.call(f.src, f.listener, eventObject);
    if (!v) {
      return v;
    }
  };
  return f;
};
goog.events.listenOnce = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.listenOnce(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  var listenableKey;
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE && goog.events.Listenable.isImplementedBy(src)) {
    listenableKey = src.listenOnce((type), goog.events.wrapListener_(listener), opt_capt, opt_handler);
  } else {
    listenableKey = goog.events.listen_((src), type, listener, true, opt_capt, opt_handler);
  }
  var key = listenableKey.key;
  goog.events.listeners_[key] = listenableKey;
  return key;
};
goog.events.listenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.listen(src, listener, opt_capt, opt_handler);
};
goog.events.unlisten = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.unlisten(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE && goog.events.Listenable.isImplementedBy(src)) {
    return src.unlisten((type), goog.events.wrapListener_(listener), opt_capt, opt_handler);
  }
  var capture = !!opt_capt;
  var listenerArray = goog.events.getListeners_(src, type, capture);
  if (!listenerArray) {
    return false;
  }
  for (var i = 0;i < listenerArray.length;i++) {
    if (listenerArray[i].listener == listener && (listenerArray[i].capture == capture && listenerArray[i].handler == opt_handler)) {
      return goog.events.unlistenByKey(listenerArray[i].key);
    }
  }
  return false;
};
goog.events.unlistenByKey = function(key) {
  var listener = goog.events.listeners_[key];
  if (!listener) {
    return false;
  }
  if (listener.removed) {
    return false;
  }
  var src = listener.src;
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE && goog.events.Listenable.isImplementedBy(src)) {
    return src.unlistenByKey(listener);
  }
  var type = listener.type;
  var proxy = listener.proxy;
  var capture = listener.capture;
  if (src.removeEventListener) {
    if (src == goog.global || !src.customEvent_) {
      src.removeEventListener(type, proxy, capture);
    }
  } else {
    if (src.detachEvent) {
      src.detachEvent(goog.events.getOnString_(type), proxy);
    }
  }
  var srcUid = goog.getUid(src);
  if (goog.events.sources_[srcUid]) {
    var sourcesArray = goog.events.sources_[srcUid];
    goog.array.remove(sourcesArray, listener);
    if (sourcesArray.length == 0) {
      delete goog.events.sources_[srcUid];
    }
  }
  listener.removed = true;
  var listenerArray = goog.events.listenerTree_[type][capture][srcUid];
  if (listenerArray) {
    listenerArray.needsCleanup_ = true;
    goog.events.cleanUp_(type, capture, srcUid, listenerArray);
  }
  delete goog.events.listeners_[key];
  return true;
};
goog.events.unlistenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.unlisten(src, listener, opt_capt, opt_handler);
};
goog.events.cleanUp = function(listenableKey) {
  delete goog.events.listeners_[listenableKey.key];
};
goog.events.cleanUp_ = function(type, capture, srcUid, listenerArray) {
  if (!listenerArray.locked_) {
    if (listenerArray.needsCleanup_) {
      for (var oldIndex = 0, newIndex = 0;oldIndex < listenerArray.length;oldIndex++) {
        if (listenerArray[oldIndex].removed) {
          var proxy = listenerArray[oldIndex].proxy;
          proxy.src = null;
          continue;
        }
        if (oldIndex != newIndex) {
          listenerArray[newIndex] = listenerArray[oldIndex];
        }
        newIndex++;
      }
      listenerArray.length = newIndex;
      listenerArray.needsCleanup_ = false;
      if (newIndex == 0) {
        delete goog.events.listenerTree_[type][capture][srcUid];
        goog.events.listenerTree_[type][capture].count_--;
        if (goog.events.listenerTree_[type][capture].count_ == 0) {
          delete goog.events.listenerTree_[type][capture];
          goog.events.listenerTree_[type].count_--;
        }
        if (goog.events.listenerTree_[type].count_ == 0) {
          delete goog.events.listenerTree_[type];
        }
      }
    }
  }
};
goog.events.removeAll = function(opt_obj, opt_type) {
  var count = 0;
  var noObj = opt_obj == null;
  var noType = opt_type == null;
  if (!noObj) {
    if (goog.events.Listenable.USE_LISTENABLE_INTERFACE && (opt_obj && goog.events.Listenable.isImplementedBy(opt_obj))) {
      return opt_obj.removeAllListeners(opt_type);
    }
    var srcUid = goog.getUid((opt_obj));
    if (goog.events.sources_[srcUid]) {
      var sourcesArray = goog.events.sources_[srcUid];
      for (var i = sourcesArray.length - 1;i >= 0;i--) {
        var listener = sourcesArray[i];
        if (noType || opt_type == listener.type) {
          goog.events.unlistenByKey(listener.key);
          count++;
        }
      }
    }
  } else {
    goog.object.forEach(goog.events.listeners_, function(listener, key) {
      goog.events.unlistenByKey(key);
      count++;
    });
  }
  return count;
};
goog.events.getListeners = function(obj, type, capture) {
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE && goog.events.Listenable.isImplementedBy(obj)) {
    return obj.getListeners(type, capture);
  } else {
    return goog.events.getListeners_(obj, type, capture) || [];
  }
};
goog.events.getListeners_ = function(obj, type, capture) {
  var map = goog.events.listenerTree_;
  if (type in map) {
    map = map[type];
    if (capture in map) {
      map = map[capture];
      var objUid = goog.getUid(obj);
      if (map[objUid]) {
        return map[objUid];
      }
    }
  }
  return null;
};
goog.events.getListener = function(src, type, listener, opt_capt, opt_handler) {
  var capture = !!opt_capt;
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE && goog.events.Listenable.isImplementedBy(src)) {
    return src.getListener((type), goog.events.wrapListener_(listener), capture, opt_handler);
  }
  var listenerArray = goog.events.getListeners_(src, type, capture);
  if (listenerArray) {
    for (var i = 0;i < listenerArray.length;i++) {
      if (!listenerArray[i].removed && (listenerArray[i].listener == listener && (listenerArray[i].capture == capture && listenerArray[i].handler == opt_handler))) {
        return listenerArray[i];
      }
    }
  }
  return null;
};
goog.events.hasListener = function(obj, opt_type, opt_capture) {
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE && goog.events.Listenable.isImplementedBy(obj)) {
    return obj.hasListener(opt_type, opt_capture);
  }
  var objUid = goog.getUid(obj);
  var listeners = goog.events.sources_[objUid];
  if (listeners) {
    var hasType = goog.isDef(opt_type);
    var hasCapture = goog.isDef(opt_capture);
    if (hasType && hasCapture) {
      var map = goog.events.listenerTree_[opt_type];
      return!!map && (!!map[opt_capture] && objUid in map[opt_capture]);
    } else {
      if (!(hasType || hasCapture)) {
        return true;
      } else {
        return goog.array.some(listeners, function(listener) {
          return hasType && listener.type == opt_type || hasCapture && listener.capture == opt_capture;
        });
      }
    }
  }
  return false;
};
goog.events.expose = function(e) {
  var str = [];
  for (var key in e) {
    if (e[key] && e[key].id) {
      str.push(key + " \x3d " + e[key] + " (" + e[key].id + ")");
    } else {
      str.push(key + " \x3d " + e[key]);
    }
  }
  return str.join("\n");
};
goog.events.getOnString_ = function(type) {
  if (type in goog.events.onStringMap_) {
    return goog.events.onStringMap_[type];
  }
  return goog.events.onStringMap_[type] = goog.events.onString_ + type;
};
goog.events.fireListeners = function(obj, type, capture, eventObject) {
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE && goog.events.Listenable.isImplementedBy(obj)) {
    return obj.fireListeners(type, capture, eventObject);
  }
  var map = goog.events.listenerTree_;
  if (type in map) {
    map = map[type];
    if (capture in map) {
      return goog.events.fireListeners_(map[capture], obj, type, capture, eventObject);
    }
  }
  return true;
};
goog.events.fireListeners_ = function(map, obj, type, capture, eventObject) {
  var retval = 1;
  var objUid = goog.getUid(obj);
  if (map[objUid]) {
    var remaining = --map.remaining_;
    var listenerArray = map[objUid];
    if (!listenerArray.locked_) {
      listenerArray.locked_ = 1;
    } else {
      listenerArray.locked_++;
    }
    try {
      var length = listenerArray.length;
      for (var i = 0;i < length;i++) {
        var listener = listenerArray[i];
        if (listener && !listener.removed) {
          retval &= goog.events.fireListener(listener, eventObject) !== false;
        }
      }
    } finally {
      map.remaining_ = Math.max(remaining, map.remaining_);
      listenerArray.locked_--;
      goog.events.cleanUp_(type, capture, objUid, listenerArray);
    }
  }
  return Boolean(retval);
};
goog.events.fireListener = function(listener, eventObject) {
  if (listener.callOnce) {
    goog.events.unlistenByKey(listener.key);
  }
  return listener.handleEvent(eventObject);
};
goog.events.getTotalListenerCount = function() {
  return goog.object.getCount(goog.events.listeners_);
};
goog.events.dispatchEvent = function(src, e) {
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE) {
    return src.dispatchEvent(e);
  }
  var type = e.type || e;
  var map = goog.events.listenerTree_;
  if (!(type in map)) {
    return true;
  }
  if (goog.isString(e)) {
    e = new goog.events.Event(e, src);
  } else {
    if (!(e instanceof goog.events.Event)) {
      var oldEvent = e;
      e = new goog.events.Event((type), src);
      goog.object.extend(e, oldEvent);
    } else {
      e.target = e.target || src;
    }
  }
  var rv = 1, ancestors;
  map = map[type];
  var hasCapture = true in map;
  var targetsMap;
  if (hasCapture) {
    ancestors = [];
    for (var parent = src;parent;parent = parent.getParentEventTarget()) {
      ancestors.push(parent);
    }
    targetsMap = map[true];
    targetsMap.remaining_ = targetsMap.count_;
    for (var i = ancestors.length - 1;!e.propagationStopped_ && (i >= 0 && targetsMap.remaining_);i--) {
      e.currentTarget = ancestors[i];
      rv &= goog.events.fireListeners_(targetsMap, ancestors[i], e.type, true, e) && e.returnValue_ != false;
    }
  }
  var hasBubble = false in map;
  if (hasBubble) {
    targetsMap = map[false];
    targetsMap.remaining_ = targetsMap.count_;
    if (hasCapture) {
      for (var i = 0;!e.propagationStopped_ && (i < ancestors.length && targetsMap.remaining_);i++) {
        e.currentTarget = ancestors[i];
        rv &= goog.events.fireListeners_(targetsMap, ancestors[i], e.type, false, e) && e.returnValue_ != false;
      }
    } else {
      for (var current = src;!e.propagationStopped_ && (current && targetsMap.remaining_);current = current.getParentEventTarget()) {
        e.currentTarget = current;
        rv &= goog.events.fireListeners_(targetsMap, current, e.type, false, e) && e.returnValue_ != false;
      }
    }
  }
  return Boolean(rv);
};
goog.events.protectBrowserEventEntryPoint = function(errorHandler) {
  goog.events.handleBrowserEvent_ = errorHandler.protectEntryPoint(goog.events.handleBrowserEvent_);
};
goog.events.handleBrowserEvent_ = function(listener, opt_evt) {
  if (listener.removed) {
    return true;
  }
  var type = listener.type;
  var map = goog.events.listenerTree_;
  if (!(type in map)) {
    return true;
  }
  map = map[type];
  var retval, targetsMap;
  if (!goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT) {
    var ieEvent = opt_evt || (goog.getObjectByName("window.event"));
    var hasCapture = true in map;
    var hasBubble = false in map;
    if (hasCapture) {
      if (goog.events.isMarkedIeEvent_(ieEvent)) {
        return true;
      }
      goog.events.markIeEvent_(ieEvent);
    }
    var evt = new goog.events.BrowserEvent;
    evt.init(ieEvent, (this));
    retval = true;
    try {
      if (hasCapture) {
        var ancestors = [];
        for (var parent = evt.currentTarget;parent;parent = parent.parentNode) {
          ancestors.push(parent);
        }
        targetsMap = map[true];
        targetsMap.remaining_ = targetsMap.count_;
        for (var i = ancestors.length - 1;!evt.propagationStopped_ && (i >= 0 && targetsMap.remaining_);i--) {
          evt.currentTarget = ancestors[i];
          retval &= goog.events.fireListeners_(targetsMap, ancestors[i], type, true, evt);
        }
        if (hasBubble) {
          targetsMap = map[false];
          targetsMap.remaining_ = targetsMap.count_;
          for (var i = 0;!evt.propagationStopped_ && (i < ancestors.length && targetsMap.remaining_);i++) {
            evt.currentTarget = ancestors[i];
            retval &= goog.events.fireListeners_(targetsMap, ancestors[i], type, false, evt);
          }
        }
      } else {
        retval = goog.events.fireListener(listener, evt);
      }
    } finally {
      if (ancestors) {
        ancestors.length = 0;
      }
    }
    return retval;
  }
  var be = new goog.events.BrowserEvent(opt_evt, (this));
  retval = goog.events.fireListener(listener, be);
  return retval;
};
goog.events.markIeEvent_ = function(e) {
  var useReturnValue = false;
  if (e.keyCode == 0) {
    try {
      e.keyCode = -1;
      return;
    } catch (ex) {
      useReturnValue = true;
    }
  }
  if (useReturnValue || (e.returnValue) == undefined) {
    e.returnValue = true;
  }
};
goog.events.isMarkedIeEvent_ = function(e) {
  return e.keyCode < 0 || e.returnValue != undefined;
};
goog.events.uniqueIdCounter_ = 0;
goog.events.getUniqueId = function(identifier) {
  return identifier + "_" + goog.events.uniqueIdCounter_++;
};
goog.events.LISTENER_WRAPPER_PROP_ = "__closure_events_fn_" + (Math.random() * 1E9 >>> 0);
goog.events.wrapListener_ = function(listener) {
  if (goog.isFunction(listener)) {
    return listener;
  }
  return listener[goog.events.LISTENER_WRAPPER_PROP_] || (listener[goog.events.LISTENER_WRAPPER_PROP_] = function(e) {
    return listener.handleEvent(e);
  });
};
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.events.handleBrowserEvent_ = transformer(goog.events.handleBrowserEvent_);
});
goog.provide("goog.events.EventHandler");
goog.require("goog.Disposable");
goog.require("goog.array");
goog.require("goog.events");
goog.require("goog.events.EventWrapper");
goog.events.EventHandler = function(opt_handler) {
  goog.Disposable.call(this);
  this.handler_ = opt_handler;
  this.keys_ = [];
};
goog.inherits(goog.events.EventHandler, goog.Disposable);
goog.events.EventHandler.typeArray_ = [];
goog.events.EventHandler.prototype.listen = function(src, type, opt_fn, opt_capture, opt_handler) {
  if (!goog.isArray(type)) {
    goog.events.EventHandler.typeArray_[0] = (type);
    type = goog.events.EventHandler.typeArray_;
  }
  for (var i = 0;i < type.length;i++) {
    var key = (goog.events.listen(src, type[i], opt_fn || this, opt_capture || false, opt_handler || (this.handler_ || this)));
    this.keys_.push(key);
  }
  return this;
};
goog.events.EventHandler.prototype.listenOnce = function(src, type, opt_fn, opt_capture, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      this.listenOnce(src, type[i], opt_fn, opt_capture, opt_handler);
    }
  } else {
    var key = (goog.events.listenOnce(src, type, opt_fn || this, opt_capture, opt_handler || (this.handler_ || this)));
    this.keys_.push(key);
  }
  return this;
};
goog.events.EventHandler.prototype.listenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.listen(src, listener, opt_capt, opt_handler || (this.handler_ || this), this);
  return this;
};
goog.events.EventHandler.prototype.getListenerCount = function() {
  return this.keys_.length;
};
goog.events.EventHandler.prototype.unlisten = function(src, type, opt_fn, opt_capture, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      this.unlisten(src, type[i], opt_fn, opt_capture, opt_handler);
    }
  } else {
    var listener = goog.events.getListener(src, type, opt_fn || this, opt_capture, opt_handler || (this.handler_ || this));
    if (listener) {
      var key = listener.key;
      goog.events.unlistenByKey(key);
      goog.array.remove(this.keys_, key);
    }
  }
  return this;
};
goog.events.EventHandler.prototype.unlistenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.unlisten(src, listener, opt_capt, opt_handler || (this.handler_ || this), this);
  return this;
};
goog.events.EventHandler.prototype.removeAll = function() {
  goog.array.forEach(this.keys_, goog.events.unlistenByKey);
  this.keys_.length = 0;
};
goog.events.EventHandler.prototype.disposeInternal = function() {
  goog.events.EventHandler.superClass_.disposeInternal.call(this);
  this.removeAll();
};
goog.events.EventHandler.prototype.handleEvent = function(e) {
  throw Error("EventHandler.handleEvent not implemented");
};
goog.provide("goog.events.EventTarget");
goog.require("goog.Disposable");
goog.require("goog.events");
goog.require("goog.events.Event");
goog.require("goog.events.Listenable");
goog.require("goog.events.Listener");
goog.require("goog.object");
goog.events.EventTarget = function() {
  goog.Disposable.call(this);
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE) {
    this.eventTargetListeners_ = {};
    this.reallyDisposed_ = false;
    this.actualEventTarget_ = this;
  }
};
goog.inherits(goog.events.EventTarget, goog.Disposable);
if (goog.events.Listenable.USE_LISTENABLE_INTERFACE) {
  goog.events.Listenable.addImplementation(goog.events.EventTarget);
}
goog.events.EventTarget.MAX_ANCESTORS_ = 1E3;
goog.events.EventTarget.prototype.customEvent_ = true;
goog.events.EventTarget.prototype.parentEventTarget_ = null;
goog.events.EventTarget.prototype.getParentEventTarget = function() {
  return this.parentEventTarget_;
};
goog.events.EventTarget.prototype.setParentEventTarget = function(parent) {
  this.parentEventTarget_ = parent;
};
goog.events.EventTarget.prototype.addEventListener = function(type, handler, opt_capture, opt_handlerScope) {
  goog.events.listen(this, type, handler, opt_capture, opt_handlerScope);
};
goog.events.EventTarget.prototype.removeEventListener = function(type, handler, opt_capture, opt_handlerScope) {
  goog.events.unlisten(this, type, handler, opt_capture, opt_handlerScope);
};
goog.events.EventTarget.prototype.dispatchEvent = function(e) {
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE) {
    if (this.reallyDisposed_) {
      return true;
    }
    var ancestorsTree, ancestor = this.getParentEventTarget();
    if (ancestor) {
      ancestorsTree = [];
      var ancestorCount = 1;
      for (;ancestor;ancestor = ancestor.getParentEventTarget()) {
        ancestorsTree.push(ancestor);
        goog.asserts.assert(++ancestorCount < goog.events.EventTarget.MAX_ANCESTORS_, "infinite loop");
      }
    }
    return goog.events.EventTarget.dispatchEventInternal_(this.actualEventTarget_, e, ancestorsTree);
  } else {
    return goog.events.dispatchEvent(this, e);
  }
};
goog.events.EventTarget.prototype.disposeInternal = function() {
  goog.events.EventTarget.superClass_.disposeInternal.call(this);
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE) {
    this.removeAllListeners();
    this.reallyDisposed_ = true;
  } else {
    goog.events.removeAll(this);
  }
  this.parentEventTarget_ = null;
};
if (goog.events.Listenable.USE_LISTENABLE_INTERFACE) {
  goog.events.EventTarget.prototype.listen = function(type, listener, opt_useCapture, opt_listenerScope) {
    return this.listenInternal_(type, listener, false, opt_useCapture, opt_listenerScope);
  };
  goog.events.EventTarget.prototype.listenOnce = function(type, listener, opt_useCapture, opt_listenerScope) {
    return this.listenInternal_(type, listener, true, opt_useCapture, opt_listenerScope);
  };
  goog.events.EventTarget.prototype.listenInternal_ = function(type, listener, callOnce, opt_useCapture, opt_listenerScope) {
    goog.asserts.assert(!this.reallyDisposed_, "Can not listen on disposed object.");
    var listenerArray = this.eventTargetListeners_[type] || (this.eventTargetListeners_[type] = []);
    var listenerObj;
    var index = goog.events.EventTarget.findListenerIndex_(listenerArray, listener, opt_useCapture, opt_listenerScope);
    if (index > -1) {
      listenerObj = listenerArray[index];
      if (!callOnce) {
        listenerObj.callOnce = false;
      }
      return listenerObj;
    }
    listenerObj = new goog.events.Listener;
    listenerObj.init(listener, null, this, type, !!opt_useCapture, opt_listenerScope);
    listenerObj.callOnce = callOnce;
    listenerArray.push(listenerObj);
    return listenerObj;
  };
  goog.events.EventTarget.prototype.unlisten = function(type, listener, opt_useCapture, opt_listenerScope) {
    if (!(type in this.eventTargetListeners_)) {
      return false;
    }
    var listenerArray = this.eventTargetListeners_[type];
    var index = goog.events.EventTarget.findListenerIndex_(listenerArray, listener, opt_useCapture, opt_listenerScope);
    if (index > -1) {
      var listenerObj = listenerArray[index];
      goog.events.cleanUp(listenerObj);
      listenerObj.removed = true;
      return goog.array.removeAt(listenerArray, index);
    }
    return false;
  };
  goog.events.EventTarget.prototype.unlistenByKey = function(key) {
    var type = key.type;
    if (!(type in this.eventTargetListeners_)) {
      return false;
    }
    var removed = goog.array.remove(this.eventTargetListeners_[type], key);
    if (removed) {
      goog.events.cleanUp(key);
      key.removed = true;
    }
    return removed;
  };
  goog.events.EventTarget.prototype.removeAllListeners = function(opt_type, opt_capture) {
    var count = 0;
    for (var type in this.eventTargetListeners_) {
      if (!opt_type || type == opt_type) {
        var listenerArray = this.eventTargetListeners_[type];
        for (var i = 0;i < listenerArray.length;i++) {
          ++count;
          goog.events.cleanUp(listenerArray[i]);
          listenerArray[i].removed = true;
        }
        listenerArray.length = 0;
      }
    }
    return count;
  };
  goog.events.EventTarget.prototype.fireListeners = function(type, capture, eventObject) {
    goog.asserts.assert(!this.reallyDisposed_, "Can not fire listeners after dispose() completed.");
    if (!(type in this.eventTargetListeners_)) {
      return true;
    }
    var rv = true;
    var listenerArray = goog.array.clone(this.eventTargetListeners_[type]);
    for (var i = 0;i < listenerArray.length;++i) {
      var listener = listenerArray[i];
      if (listener && (!listener.removed && listener.capture == capture)) {
        if (listener.callOnce) {
          this.unlistenByKey(listener);
        }
        rv = listener.handleEvent(eventObject) !== false && rv;
      }
    }
    return rv && eventObject.returnValue_ != false;
  };
  goog.events.EventTarget.prototype.getListeners = function(type, capture) {
    var listenerArray = this.eventTargetListeners_[type];
    var rv = [];
    if (listenerArray) {
      for (var i = 0;i < listenerArray.length;++i) {
        var listenerObj = listenerArray[i];
        if (listenerObj.capture == capture) {
          rv.push(listenerObj);
        }
      }
    }
    return rv;
  };
  goog.events.EventTarget.prototype.getListener = function(type, listener, capture, opt_listenerScope) {
    var listenerArray = this.eventTargetListeners_[type];
    var i = -1;
    if (listenerArray) {
      i = goog.events.EventTarget.findListenerIndex_(listenerArray, listener, capture, opt_listenerScope);
    }
    return i > -1 ? listenerArray[i] : null;
  };
  goog.events.EventTarget.prototype.hasListener = function(opt_type, opt_capture) {
    var hasType = goog.isDef(opt_type);
    var hasCapture = goog.isDef(opt_capture);
    return goog.object.some(this.eventTargetListeners_, function(listenersArray, type) {
      for (var i = 0;i < listenersArray.length;++i) {
        if ((!hasType || listenersArray[i].type == opt_type) && (!hasCapture || listenersArray[i].capture == opt_capture)) {
          return true;
        }
      }
      return false;
    });
  };
  goog.events.EventTarget.prototype.setTargetForTesting = function(target) {
    this.actualEventTarget_ = target;
  };
  goog.events.EventTarget.dispatchEventInternal_ = function(target, e, opt_ancestorsTree) {
    var type = e.type || (e);
    if (goog.isString(e)) {
      e = new goog.events.Event(e, target);
    } else {
      if (!(e instanceof goog.events.Event)) {
        var oldEvent = e;
        e = new goog.events.Event(type, target);
        goog.object.extend(e, oldEvent);
      } else {
        e.target = e.target || target;
      }
    }
    var rv = true, currentTarget;
    if (opt_ancestorsTree) {
      for (var i = opt_ancestorsTree.length - 1;!e.propagationStopped_ && i >= 0;i--) {
        currentTarget = e.currentTarget = opt_ancestorsTree[i];
        rv = currentTarget.fireListeners(type, true, e) && rv;
      }
    }
    if (!e.propagationStopped_) {
      currentTarget = e.currentTarget = target;
      rv = currentTarget.fireListeners(type, true, e) && rv;
      if (!e.propagationStopped_) {
        rv = currentTarget.fireListeners(type, false, e) && rv;
      }
    }
    if (opt_ancestorsTree) {
      for (i = 0;!e.propagationStopped_ && i < opt_ancestorsTree.length;i++) {
        currentTarget = e.currentTarget = opt_ancestorsTree[i];
        rv = currentTarget.fireListeners(type, false, e) && rv;
      }
    }
    return rv;
  };
  goog.events.EventTarget.findListenerIndex_ = function(listenerArray, listener, opt_useCapture, opt_listenerScope) {
    for (var i = 0;i < listenerArray.length;++i) {
      var listenerObj = listenerArray[i];
      if (listenerObj.listener == listener && (listenerObj.capture == !!opt_useCapture && listenerObj.handler == opt_listenerScope)) {
        return i;
      }
    }
    return-1;
  };
}
;goog.provide("goog.net.EventType");
goog.net.EventType = {COMPLETE:"complete", SUCCESS:"success", ERROR:"error", ABORT:"abort", READY:"ready", READY_STATE_CHANGE:"readystatechange", TIMEOUT:"timeout", INCREMENTAL_DATA:"incrementaldata", PROGRESS:"progress"};
goog.provide("goog.Timer");
goog.require("goog.events.EventTarget");
goog.Timer = function(opt_interval, opt_timerObject) {
  goog.events.EventTarget.call(this);
  this.interval_ = opt_interval || 1;
  this.timerObject_ = opt_timerObject || goog.Timer.defaultTimerObject;
  this.boundTick_ = goog.bind(this.tick_, this);
  this.last_ = goog.now();
};
goog.inherits(goog.Timer, goog.events.EventTarget);
goog.Timer.MAX_TIMEOUT_ = 2147483647;
goog.Timer.prototype.enabled = false;
goog.Timer.defaultTimerObject = goog.global;
goog.Timer.intervalScale = 0.8;
goog.Timer.prototype.timer_ = null;
goog.Timer.prototype.getInterval = function() {
  return this.interval_;
};
goog.Timer.prototype.setInterval = function(interval) {
  this.interval_ = interval;
  if (this.timer_ && this.enabled) {
    this.stop();
    this.start();
  } else {
    if (this.timer_) {
      this.stop();
    }
  }
};
goog.Timer.prototype.tick_ = function() {
  if (this.enabled) {
    var elapsed = goog.now() - this.last_;
    if (elapsed > 0 && elapsed < this.interval_ * goog.Timer.intervalScale) {
      this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_ - elapsed);
      return;
    }
    this.dispatchTick();
    if (this.enabled) {
      this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_);
      this.last_ = goog.now();
    }
  }
};
goog.Timer.prototype.dispatchTick = function() {
  this.dispatchEvent(goog.Timer.TICK);
};
goog.Timer.prototype.start = function() {
  this.enabled = true;
  if (!this.timer_) {
    this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_);
    this.last_ = goog.now();
  }
};
goog.Timer.prototype.stop = function() {
  this.enabled = false;
  if (this.timer_) {
    this.timerObject_.clearTimeout(this.timer_);
    this.timer_ = null;
  }
};
goog.Timer.prototype.disposeInternal = function() {
  goog.Timer.superClass_.disposeInternal.call(this);
  this.stop();
  delete this.timerObject_;
};
goog.Timer.TICK = "tick";
goog.Timer.callOnce = function(listener, opt_delay, opt_handler) {
  if (goog.isFunction(listener)) {
    if (opt_handler) {
      listener = goog.bind(listener, opt_handler);
    }
  } else {
    if (listener && typeof listener.handleEvent == "function") {
      listener = goog.bind(listener.handleEvent, listener);
    } else {
      throw Error("Invalid listener argument");
    }
  }
  if (opt_delay > goog.Timer.MAX_TIMEOUT_) {
    return-1;
  } else {
    return goog.Timer.defaultTimerObject.setTimeout(listener, opt_delay || 0);
  }
};
goog.Timer.clear = function(timerId) {
  goog.Timer.defaultTimerObject.clearTimeout(timerId);
};
goog.provide("goog.structs");
goog.require("goog.array");
goog.require("goog.object");
goog.structs.getCount = function(col) {
  if (typeof col.getCount == "function") {
    return col.getCount();
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return col.length;
  }
  return goog.object.getCount(col);
};
goog.structs.getValues = function(col) {
  if (typeof col.getValues == "function") {
    return col.getValues();
  }
  if (goog.isString(col)) {
    return col.split("");
  }
  if (goog.isArrayLike(col)) {
    var rv = [];
    var l = col.length;
    for (var i = 0;i < l;i++) {
      rv.push(col[i]);
    }
    return rv;
  }
  return goog.object.getValues(col);
};
goog.structs.getKeys = function(col) {
  if (typeof col.getKeys == "function") {
    return col.getKeys();
  }
  if (typeof col.getValues == "function") {
    return undefined;
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    var rv = [];
    var l = col.length;
    for (var i = 0;i < l;i++) {
      rv.push(i);
    }
    return rv;
  }
  return goog.object.getKeys(col);
};
goog.structs.contains = function(col, val) {
  if (typeof col.contains == "function") {
    return col.contains(val);
  }
  if (typeof col.containsValue == "function") {
    return col.containsValue(val);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.contains((col), val);
  }
  return goog.object.containsValue(col, val);
};
goog.structs.isEmpty = function(col) {
  if (typeof col.isEmpty == "function") {
    return col.isEmpty();
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.isEmpty((col));
  }
  return goog.object.isEmpty(col);
};
goog.structs.clear = function(col) {
  if (typeof col.clear == "function") {
    col.clear();
  } else {
    if (goog.isArrayLike(col)) {
      goog.array.clear((col));
    } else {
      goog.object.clear(col);
    }
  }
};
goog.structs.forEach = function(col, f, opt_obj) {
  if (typeof col.forEach == "function") {
    col.forEach(f, opt_obj);
  } else {
    if (goog.isArrayLike(col) || goog.isString(col)) {
      goog.array.forEach((col), f, opt_obj);
    } else {
      var keys = goog.structs.getKeys(col);
      var values = goog.structs.getValues(col);
      var l = values.length;
      for (var i = 0;i < l;i++) {
        f.call(opt_obj, values[i], keys && keys[i], col);
      }
    }
  }
};
goog.structs.filter = function(col, f, opt_obj) {
  if (typeof col.filter == "function") {
    return col.filter(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.filter((col), f, opt_obj);
  }
  var rv;
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  if (keys) {
    rv = {};
    for (var i = 0;i < l;i++) {
      if (f.call(opt_obj, values[i], keys[i], col)) {
        rv[keys[i]] = values[i];
      }
    }
  } else {
    rv = [];
    for (var i = 0;i < l;i++) {
      if (f.call(opt_obj, values[i], undefined, col)) {
        rv.push(values[i]);
      }
    }
  }
  return rv;
};
goog.structs.map = function(col, f, opt_obj) {
  if (typeof col.map == "function") {
    return col.map(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.map((col), f, opt_obj);
  }
  var rv;
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  if (keys) {
    rv = {};
    for (var i = 0;i < l;i++) {
      rv[keys[i]] = f.call(opt_obj, values[i], keys[i], col);
    }
  } else {
    rv = [];
    for (var i = 0;i < l;i++) {
      rv[i] = f.call(opt_obj, values[i], undefined, col);
    }
  }
  return rv;
};
goog.structs.some = function(col, f, opt_obj) {
  if (typeof col.some == "function") {
    return col.some(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.some((col), f, opt_obj);
  }
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    if (f.call(opt_obj, values[i], keys && keys[i], col)) {
      return true;
    }
  }
  return false;
};
goog.structs.every = function(col, f, opt_obj) {
  if (typeof col.every == "function") {
    return col.every(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.every((col), f, opt_obj);
  }
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    if (!f.call(opt_obj, values[i], keys && keys[i], col)) {
      return false;
    }
  }
  return true;
};
goog.provide("goog.structs.Collection");
goog.structs.Collection = function() {
};
goog.structs.Collection.prototype.add;
goog.structs.Collection.prototype.remove;
goog.structs.Collection.prototype.contains;
goog.structs.Collection.prototype.getCount;
goog.provide("goog.iter");
goog.provide("goog.iter.Iterator");
goog.provide("goog.iter.StopIteration");
goog.require("goog.array");
goog.require("goog.asserts");
goog.iter.Iterable;
if ("StopIteration" in goog.global) {
  goog.iter.StopIteration = goog.global["StopIteration"];
} else {
  goog.iter.StopIteration = Error("StopIteration");
}
goog.iter.Iterator = function() {
};
goog.iter.Iterator.prototype.next = function() {
  throw goog.iter.StopIteration;
};
goog.iter.Iterator.prototype.__iterator__ = function(opt_keys) {
  return this;
};
goog.iter.toIterator = function(iterable) {
  if (iterable instanceof goog.iter.Iterator) {
    return iterable;
  }
  if (typeof iterable.__iterator__ == "function") {
    return iterable.__iterator__(false);
  }
  if (goog.isArrayLike(iterable)) {
    var i = 0;
    var newIter = new goog.iter.Iterator;
    newIter.next = function() {
      while (true) {
        if (i >= iterable.length) {
          throw goog.iter.StopIteration;
        }
        if (!(i in iterable)) {
          i++;
          continue;
        }
        return iterable[i++];
      }
    };
    return newIter;
  }
  throw Error("Not implemented");
};
goog.iter.forEach = function(iterable, f, opt_obj) {
  if (goog.isArrayLike(iterable)) {
    try {
      goog.array.forEach((iterable), f, opt_obj);
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
    }
  } else {
    iterable = goog.iter.toIterator(iterable);
    try {
      while (true) {
        f.call(opt_obj, iterable.next(), undefined, iterable);
      }
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
    }
  }
};
goog.iter.filter = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    while (true) {
      var val = iterator.next();
      if (f.call(opt_obj, val, undefined, iterator)) {
        return val;
      }
    }
  };
  return newIter;
};
goog.iter.range = function(startOrStop, opt_stop, opt_step) {
  var start = 0;
  var stop = startOrStop;
  var step = opt_step || 1;
  if (arguments.length > 1) {
    start = startOrStop;
    stop = opt_stop;
  }
  if (step == 0) {
    throw Error("Range step argument must not be zero");
  }
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    if (step > 0 && start >= stop || step < 0 && start <= stop) {
      throw goog.iter.StopIteration;
    }
    var rv = start;
    start += step;
    return rv;
  };
  return newIter;
};
goog.iter.join = function(iterable, deliminator) {
  return goog.iter.toArray(iterable).join(deliminator);
};
goog.iter.map = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    while (true) {
      var val = iterator.next();
      return f.call(opt_obj, val, undefined, iterator);
    }
  };
  return newIter;
};
goog.iter.reduce = function(iterable, f, val, opt_obj) {
  var rval = val;
  goog.iter.forEach(iterable, function(val) {
    rval = f.call(opt_obj, rval, val);
  });
  return rval;
};
goog.iter.some = function(iterable, f, opt_obj) {
  iterable = goog.iter.toIterator(iterable);
  try {
    while (true) {
      if (f.call(opt_obj, iterable.next(), undefined, iterable)) {
        return true;
      }
    }
  } catch (ex) {
    if (ex !== goog.iter.StopIteration) {
      throw ex;
    }
  }
  return false;
};
goog.iter.every = function(iterable, f, opt_obj) {
  iterable = goog.iter.toIterator(iterable);
  try {
    while (true) {
      if (!f.call(opt_obj, iterable.next(), undefined, iterable)) {
        return false;
      }
    }
  } catch (ex) {
    if (ex !== goog.iter.StopIteration) {
      throw ex;
    }
  }
  return true;
};
goog.iter.chain = function(var_args) {
  var args = arguments;
  var length = args.length;
  var i = 0;
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    try {
      if (i >= length) {
        throw goog.iter.StopIteration;
      }
      var current = goog.iter.toIterator(args[i]);
      return current.next();
    } catch (ex) {
      if (ex !== goog.iter.StopIteration || i >= length) {
        throw ex;
      } else {
        i++;
        return this.next();
      }
    }
  };
  return newIter;
};
goog.iter.dropWhile = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  var dropping = true;
  newIter.next = function() {
    while (true) {
      var val = iterator.next();
      if (dropping && f.call(opt_obj, val, undefined, iterator)) {
        continue;
      } else {
        dropping = false;
      }
      return val;
    }
  };
  return newIter;
};
goog.iter.takeWhile = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  var taking = true;
  newIter.next = function() {
    while (true) {
      if (taking) {
        var val = iterator.next();
        if (f.call(opt_obj, val, undefined, iterator)) {
          return val;
        } else {
          taking = false;
        }
      } else {
        throw goog.iter.StopIteration;
      }
    }
  };
  return newIter;
};
goog.iter.toArray = function(iterable) {
  if (goog.isArrayLike(iterable)) {
    return goog.array.toArray((iterable));
  }
  iterable = goog.iter.toIterator(iterable);
  var array = [];
  goog.iter.forEach(iterable, function(val) {
    array.push(val);
  });
  return array;
};
goog.iter.equals = function(iterable1, iterable2) {
  iterable1 = goog.iter.toIterator(iterable1);
  iterable2 = goog.iter.toIterator(iterable2);
  var b1, b2;
  try {
    while (true) {
      b1 = b2 = false;
      var val1 = iterable1.next();
      b1 = true;
      var val2 = iterable2.next();
      b2 = true;
      if (val1 != val2) {
        return false;
      }
    }
  } catch (ex) {
    if (ex !== goog.iter.StopIteration) {
      throw ex;
    } else {
      if (b1 && !b2) {
        return false;
      }
      if (!b2) {
        try {
          val2 = iterable2.next();
          return false;
        } catch (ex1) {
          if (ex1 !== goog.iter.StopIteration) {
            throw ex1;
          }
          return true;
        }
      }
    }
  }
  return false;
};
goog.iter.nextOrValue = function(iterable, defaultValue) {
  try {
    return goog.iter.toIterator(iterable).next();
  } catch (e) {
    if (e != goog.iter.StopIteration) {
      throw e;
    }
    return defaultValue;
  }
};
goog.iter.product = function(var_args) {
  var someArrayEmpty = goog.array.some(arguments, function(arr) {
    return!arr.length;
  });
  if (someArrayEmpty || !arguments.length) {
    return new goog.iter.Iterator;
  }
  var iter = new goog.iter.Iterator;
  var arrays = arguments;
  var indicies = goog.array.repeat(0, arrays.length);
  iter.next = function() {
    if (indicies) {
      var retVal = goog.array.map(indicies, function(valueIndex, arrayIndex) {
        return arrays[arrayIndex][valueIndex];
      });
      for (var i = indicies.length - 1;i >= 0;i--) {
        goog.asserts.assert(indicies);
        if (indicies[i] < arrays[i].length - 1) {
          indicies[i]++;
          break;
        }
        if (i == 0) {
          indicies = null;
          break;
        }
        indicies[i] = 0;
      }
      return retVal;
    }
    throw goog.iter.StopIteration;
  };
  return iter;
};
goog.iter.cycle = function(iterable) {
  var baseIterator = goog.iter.toIterator(iterable);
  var cache = [];
  var cacheIndex = 0;
  var iter = new goog.iter.Iterator;
  var useCache = false;
  iter.next = function() {
    var returnElement = null;
    if (!useCache) {
      try {
        returnElement = baseIterator.next();
        cache.push(returnElement);
        return returnElement;
      } catch (e) {
        if (e != goog.iter.StopIteration || goog.array.isEmpty(cache)) {
          throw e;
        }
        useCache = true;
      }
    }
    returnElement = cache[cacheIndex];
    cacheIndex = (cacheIndex + 1) % cache.length;
    return returnElement;
  };
  return iter;
};
goog.provide("goog.structs.Map");
goog.require("goog.iter.Iterator");
goog.require("goog.iter.StopIteration");
goog.require("goog.object");
goog.require("goog.structs");
goog.structs.Map = function(opt_map, var_args) {
  this.map_ = {};
  this.keys_ = [];
  var argLength = arguments.length;
  if (argLength > 1) {
    if (argLength % 2) {
      throw Error("Uneven number of arguments");
    }
    for (var i = 0;i < argLength;i += 2) {
      this.set(arguments[i], arguments[i + 1]);
    }
  } else {
    if (opt_map) {
      this.addAll((opt_map));
    }
  }
};
goog.structs.Map.prototype.count_ = 0;
goog.structs.Map.prototype.version_ = 0;
goog.structs.Map.prototype.getCount = function() {
  return this.count_;
};
goog.structs.Map.prototype.getValues = function() {
  this.cleanupKeysArray_();
  var rv = [];
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    rv.push(this.map_[key]);
  }
  return rv;
};
goog.structs.Map.prototype.getKeys = function() {
  this.cleanupKeysArray_();
  return(this.keys_.concat());
};
goog.structs.Map.prototype.containsKey = function(key) {
  return goog.structs.Map.hasKey_(this.map_, key);
};
goog.structs.Map.prototype.containsValue = function(val) {
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    if (goog.structs.Map.hasKey_(this.map_, key) && this.map_[key] == val) {
      return true;
    }
  }
  return false;
};
goog.structs.Map.prototype.equals = function(otherMap, opt_equalityFn) {
  if (this === otherMap) {
    return true;
  }
  if (this.count_ != otherMap.getCount()) {
    return false;
  }
  var equalityFn = opt_equalityFn || goog.structs.Map.defaultEquals;
  this.cleanupKeysArray_();
  for (var key, i = 0;key = this.keys_[i];i++) {
    if (!equalityFn(this.get(key), otherMap.get(key))) {
      return false;
    }
  }
  return true;
};
goog.structs.Map.defaultEquals = function(a, b) {
  return a === b;
};
goog.structs.Map.prototype.isEmpty = function() {
  return this.count_ == 0;
};
goog.structs.Map.prototype.clear = function() {
  this.map_ = {};
  this.keys_.length = 0;
  this.count_ = 0;
  this.version_ = 0;
};
goog.structs.Map.prototype.remove = function(key) {
  if (goog.structs.Map.hasKey_(this.map_, key)) {
    delete this.map_[key];
    this.count_--;
    this.version_++;
    if (this.keys_.length > 2 * this.count_) {
      this.cleanupKeysArray_();
    }
    return true;
  }
  return false;
};
goog.structs.Map.prototype.cleanupKeysArray_ = function() {
  if (this.count_ != this.keys_.length) {
    var srcIndex = 0;
    var destIndex = 0;
    while (srcIndex < this.keys_.length) {
      var key = this.keys_[srcIndex];
      if (goog.structs.Map.hasKey_(this.map_, key)) {
        this.keys_[destIndex++] = key;
      }
      srcIndex++;
    }
    this.keys_.length = destIndex;
  }
  if (this.count_ != this.keys_.length) {
    var seen = {};
    var srcIndex = 0;
    var destIndex = 0;
    while (srcIndex < this.keys_.length) {
      var key = this.keys_[srcIndex];
      if (!goog.structs.Map.hasKey_(seen, key)) {
        this.keys_[destIndex++] = key;
        seen[key] = 1;
      }
      srcIndex++;
    }
    this.keys_.length = destIndex;
  }
};
goog.structs.Map.prototype.get = function(key, opt_val) {
  if (goog.structs.Map.hasKey_(this.map_, key)) {
    return this.map_[key];
  }
  return opt_val;
};
goog.structs.Map.prototype.set = function(key, value) {
  if (!goog.structs.Map.hasKey_(this.map_, key)) {
    this.count_++;
    this.keys_.push(key);
    this.version_++;
  }
  this.map_[key] = value;
};
goog.structs.Map.prototype.addAll = function(map) {
  var keys, values;
  if (map instanceof goog.structs.Map) {
    keys = map.getKeys();
    values = map.getValues();
  } else {
    keys = goog.object.getKeys(map);
    values = goog.object.getValues(map);
  }
  for (var i = 0;i < keys.length;i++) {
    this.set(keys[i], values[i]);
  }
};
goog.structs.Map.prototype.clone = function() {
  return new goog.structs.Map(this);
};
goog.structs.Map.prototype.transpose = function() {
  var transposed = new goog.structs.Map;
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    var value = this.map_[key];
    transposed.set(value, key);
  }
  return transposed;
};
goog.structs.Map.prototype.toObject = function() {
  this.cleanupKeysArray_();
  var obj = {};
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    obj[key] = this.map_[key];
  }
  return obj;
};
goog.structs.Map.prototype.getKeyIterator = function() {
  return this.__iterator__(true);
};
goog.structs.Map.prototype.getValueIterator = function() {
  return this.__iterator__(false);
};
goog.structs.Map.prototype.__iterator__ = function(opt_keys) {
  this.cleanupKeysArray_();
  var i = 0;
  var keys = this.keys_;
  var map = this.map_;
  var version = this.version_;
  var selfObj = this;
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    while (true) {
      if (version != selfObj.version_) {
        throw Error("The map has changed since the iterator was created");
      }
      if (i >= keys.length) {
        throw goog.iter.StopIteration;
      }
      var key = keys[i++];
      return opt_keys ? key : map[key];
    }
  };
  return newIter;
};
goog.structs.Map.hasKey_ = function(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
};
goog.provide("goog.structs.Set");
goog.require("goog.structs");
goog.require("goog.structs.Collection");
goog.require("goog.structs.Map");
goog.structs.Set = function(opt_values) {
  this.map_ = new goog.structs.Map;
  if (opt_values) {
    this.addAll(opt_values);
  }
};
goog.structs.Set.getKey_ = function(val) {
  var type = typeof val;
  if (type == "object" && val || type == "function") {
    return "o" + goog.getUid((val));
  } else {
    return type.substr(0, 1) + val;
  }
};
goog.structs.Set.prototype.getCount = function() {
  return this.map_.getCount();
};
goog.structs.Set.prototype.add = function(element) {
  this.map_.set(goog.structs.Set.getKey_(element), element);
};
goog.structs.Set.prototype.addAll = function(col) {
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    this.add(values[i]);
  }
};
goog.structs.Set.prototype.removeAll = function(col) {
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    this.remove(values[i]);
  }
};
goog.structs.Set.prototype.remove = function(element) {
  return this.map_.remove(goog.structs.Set.getKey_(element));
};
goog.structs.Set.prototype.clear = function() {
  this.map_.clear();
};
goog.structs.Set.prototype.isEmpty = function() {
  return this.map_.isEmpty();
};
goog.structs.Set.prototype.contains = function(element) {
  return this.map_.containsKey(goog.structs.Set.getKey_(element));
};
goog.structs.Set.prototype.containsAll = function(col) {
  return goog.structs.every(col, this.contains, this);
};
goog.structs.Set.prototype.intersection = function(col) {
  var result = new goog.structs.Set;
  var values = goog.structs.getValues(col);
  for (var i = 0;i < values.length;i++) {
    var value = values[i];
    if (this.contains(value)) {
      result.add(value);
    }
  }
  return result;
};
goog.structs.Set.prototype.difference = function(col) {
  var result = this.clone();
  result.removeAll(col);
  return result;
};
goog.structs.Set.prototype.getValues = function() {
  return this.map_.getValues();
};
goog.structs.Set.prototype.clone = function() {
  return new goog.structs.Set(this);
};
goog.structs.Set.prototype.equals = function(col) {
  return this.getCount() == goog.structs.getCount(col) && this.isSubsetOf(col);
};
goog.structs.Set.prototype.isSubsetOf = function(col) {
  var colCount = goog.structs.getCount(col);
  if (this.getCount() > colCount) {
    return false;
  }
  if (!(col instanceof goog.structs.Set) && colCount > 5) {
    col = new goog.structs.Set(col);
  }
  return goog.structs.every(this, function(value) {
    return goog.structs.contains(col, value);
  });
};
goog.structs.Set.prototype.__iterator__ = function(opt_keys) {
  return this.map_.__iterator__(false);
};
goog.provide("goog.debug");
goog.require("goog.array");
goog.require("goog.string");
goog.require("goog.structs.Set");
goog.require("goog.userAgent");
goog.debug.catchErrors = function(logFunc, opt_cancel, opt_target) {
  var target = opt_target || goog.global;
  var oldErrorHandler = target.onerror;
  var retVal = !!opt_cancel;
  if (goog.userAgent.WEBKIT && !goog.userAgent.isVersion("535.3")) {
    retVal = !retVal;
  }
  target.onerror = function(message, url, line) {
    if (oldErrorHandler) {
      oldErrorHandler(message, url, line);
    }
    logFunc({message:message, fileName:url, line:line});
    return retVal;
  };
};
goog.debug.expose = function(obj, opt_showFn) {
  if (typeof obj == "undefined") {
    return "undefined";
  }
  if (obj == null) {
    return "NULL";
  }
  var str = [];
  for (var x in obj) {
    if (!opt_showFn && goog.isFunction(obj[x])) {
      continue;
    }
    var s = x + " \x3d ";
    try {
      s += obj[x];
    } catch (e) {
      s += "*** " + e + " ***";
    }
    str.push(s);
  }
  return str.join("\n");
};
goog.debug.deepExpose = function(obj, opt_showFn) {
  var previous = new goog.structs.Set;
  var str = [];
  var helper = function(obj, space) {
    var nestspace = space + "  ";
    var indentMultiline = function(str) {
      return str.replace(/\n/g, "\n" + space);
    };
    try {
      if (!goog.isDef(obj)) {
        str.push("undefined");
      } else {
        if (goog.isNull(obj)) {
          str.push("NULL");
        } else {
          if (goog.isString(obj)) {
            str.push('"' + indentMultiline(obj) + '"');
          } else {
            if (goog.isFunction(obj)) {
              str.push(indentMultiline(String(obj)));
            } else {
              if (goog.isObject(obj)) {
                if (previous.contains(obj)) {
                  str.push("*** reference loop detected ***");
                } else {
                  previous.add(obj);
                  str.push("{");
                  for (var x in obj) {
                    if (!opt_showFn && goog.isFunction(obj[x])) {
                      continue;
                    }
                    str.push("\n");
                    str.push(nestspace);
                    str.push(x + " \x3d ");
                    helper(obj[x], nestspace);
                  }
                  str.push("\n" + space + "}");
                }
              } else {
                str.push(obj);
              }
            }
          }
        }
      }
    } catch (e) {
      str.push("*** " + e + " ***");
    }
  };
  helper(obj, "");
  return str.join("");
};
goog.debug.exposeArray = function(arr) {
  var str = [];
  for (var i = 0;i < arr.length;i++) {
    if (goog.isArray(arr[i])) {
      str.push(goog.debug.exposeArray(arr[i]));
    } else {
      str.push(arr[i]);
    }
  }
  return "[ " + str.join(", ") + " ]";
};
goog.debug.exposeException = function(err, opt_fn) {
  try {
    var e = goog.debug.normalizeErrorObject(err);
    var error = "Message: " + goog.string.htmlEscape(e.message) + '\nUrl: \x3ca href\x3d"view-source:' + e.fileName + '" target\x3d"_new"\x3e' + e.fileName + "\x3c/a\x3e\nLine: " + e.lineNumber + "\n\nBrowser stack:\n" + goog.string.htmlEscape(e.stack + "-\x3e ") + "[end]\n\nJS stack traversal:\n" + goog.string.htmlEscape(goog.debug.getStacktrace(opt_fn) + "-\x3e ");
    return error;
  } catch (e2) {
    return "Exception trying to expose exception! You win, we lose. " + e2;
  }
};
goog.debug.normalizeErrorObject = function(err) {
  var href = goog.getObjectByName("window.location.href");
  if (goog.isString(err)) {
    return{"message":err, "name":"Unknown error", "lineNumber":"Not available", "fileName":href, "stack":"Not available"};
  }
  var lineNumber, fileName;
  var threwError = false;
  try {
    lineNumber = err.lineNumber || (err.line || "Not available");
  } catch (e) {
    lineNumber = "Not available";
    threwError = true;
  }
  try {
    fileName = err.fileName || (err.filename || (err.sourceURL || (goog.global["$googDebugFname"] || href)));
  } catch (e) {
    fileName = "Not available";
    threwError = true;
  }
  if (threwError || (!err.lineNumber || (!err.fileName || !err.stack))) {
    return{"message":err.message, "name":err.name, "lineNumber":lineNumber, "fileName":fileName, "stack":err.stack || "Not available"};
  }
  return err;
};
goog.debug.enhanceError = function(err, opt_message) {
  var error = typeof err == "string" ? Error(err) : err;
  if (!error.stack) {
    error.stack = goog.debug.getStacktrace(arguments.callee.caller);
  }
  if (opt_message) {
    var x = 0;
    while (error["message" + x]) {
      ++x;
    }
    error["message" + x] = String(opt_message);
  }
  return error;
};
goog.debug.getStacktraceSimple = function(opt_depth) {
  var sb = [];
  var fn = arguments.callee.caller;
  var depth = 0;
  while (fn && (!opt_depth || depth < opt_depth)) {
    sb.push(goog.debug.getFunctionName(fn));
    sb.push("()\n");
    try {
      fn = fn.caller;
    } catch (e) {
      sb.push("[exception trying to get caller]\n");
      break;
    }
    depth++;
    if (depth >= goog.debug.MAX_STACK_DEPTH) {
      sb.push("[...long stack...]");
      break;
    }
  }
  if (opt_depth && depth >= opt_depth) {
    sb.push("[...reached max depth limit...]");
  } else {
    sb.push("[end]");
  }
  return sb.join("");
};
goog.debug.MAX_STACK_DEPTH = 50;
goog.debug.getStacktrace = function(opt_fn) {
  return goog.debug.getStacktraceHelper_(opt_fn || arguments.callee.caller, []);
};
goog.debug.getStacktraceHelper_ = function(fn, visited) {
  var sb = [];
  if (goog.array.contains(visited, fn)) {
    sb.push("[...circular reference...]");
  } else {
    if (fn && visited.length < goog.debug.MAX_STACK_DEPTH) {
      sb.push(goog.debug.getFunctionName(fn) + "(");
      var args = fn.arguments;
      for (var i = 0;i < args.length;i++) {
        if (i > 0) {
          sb.push(", ");
        }
        var argDesc;
        var arg = args[i];
        switch(typeof arg) {
          case "object":
            argDesc = arg ? "object" : "null";
            break;
          case "string":
            argDesc = arg;
            break;
          case "number":
            argDesc = String(arg);
            break;
          case "boolean":
            argDesc = arg ? "true" : "false";
            break;
          case "function":
            argDesc = goog.debug.getFunctionName(arg);
            argDesc = argDesc ? argDesc : "[fn]";
            break;
          case "undefined":
          ;
          default:
            argDesc = typeof arg;
            break;
        }
        if (argDesc.length > 40) {
          argDesc = argDesc.substr(0, 40) + "...";
        }
        sb.push(argDesc);
      }
      visited.push(fn);
      sb.push(")\n");
      try {
        sb.push(goog.debug.getStacktraceHelper_(fn.caller, visited));
      } catch (e) {
        sb.push("[exception trying to get caller]\n");
      }
    } else {
      if (fn) {
        sb.push("[...long stack...]");
      } else {
        sb.push("[end]");
      }
    }
  }
  return sb.join("");
};
goog.debug.setFunctionResolver = function(resolver) {
  goog.debug.fnNameResolver_ = resolver;
};
goog.debug.getFunctionName = function(fn) {
  if (goog.debug.fnNameCache_[fn]) {
    return goog.debug.fnNameCache_[fn];
  }
  if (goog.debug.fnNameResolver_) {
    var name = goog.debug.fnNameResolver_(fn);
    if (name) {
      goog.debug.fnNameCache_[fn] = name;
      return name;
    }
  }
  var functionSource = String(fn);
  if (!goog.debug.fnNameCache_[functionSource]) {
    var matches = /function ([^\(]+)/.exec(functionSource);
    if (matches) {
      var method = matches[1];
      goog.debug.fnNameCache_[functionSource] = method;
    } else {
      goog.debug.fnNameCache_[functionSource] = "[Anonymous]";
    }
  }
  return goog.debug.fnNameCache_[functionSource];
};
goog.debug.makeWhitespaceVisible = function(string) {
  return string.replace(/ /g, "[_]").replace(/\f/g, "[f]").replace(/\n/g, "[n]\n").replace(/\r/g, "[r]").replace(/\t/g, "[t]");
};
goog.debug.fnNameCache_ = {};
goog.debug.fnNameResolver_;
goog.provide("goog.debug.LogRecord");
goog.debug.LogRecord = function(level, msg, loggerName, opt_time, opt_sequenceNumber) {
  this.reset(level, msg, loggerName, opt_time, opt_sequenceNumber);
};
goog.debug.LogRecord.prototype.time_;
goog.debug.LogRecord.prototype.level_;
goog.debug.LogRecord.prototype.msg_;
goog.debug.LogRecord.prototype.loggerName_;
goog.debug.LogRecord.prototype.sequenceNumber_ = 0;
goog.debug.LogRecord.prototype.exception_ = null;
goog.debug.LogRecord.prototype.exceptionText_ = null;
goog.debug.LogRecord.ENABLE_SEQUENCE_NUMBERS = true;
goog.debug.LogRecord.nextSequenceNumber_ = 0;
goog.debug.LogRecord.prototype.reset = function(level, msg, loggerName, opt_time, opt_sequenceNumber) {
  if (goog.debug.LogRecord.ENABLE_SEQUENCE_NUMBERS) {
    this.sequenceNumber_ = typeof opt_sequenceNumber == "number" ? opt_sequenceNumber : goog.debug.LogRecord.nextSequenceNumber_++;
  }
  this.time_ = opt_time || goog.now();
  this.level_ = level;
  this.msg_ = msg;
  this.loggerName_ = loggerName;
  delete this.exception_;
  delete this.exceptionText_;
};
goog.debug.LogRecord.prototype.getLoggerName = function() {
  return this.loggerName_;
};
goog.debug.LogRecord.prototype.getException = function() {
  return this.exception_;
};
goog.debug.LogRecord.prototype.setException = function(exception) {
  this.exception_ = exception;
};
goog.debug.LogRecord.prototype.getExceptionText = function() {
  return this.exceptionText_;
};
goog.debug.LogRecord.prototype.setExceptionText = function(text) {
  this.exceptionText_ = text;
};
goog.debug.LogRecord.prototype.setLoggerName = function(loggerName) {
  this.loggerName_ = loggerName;
};
goog.debug.LogRecord.prototype.getLevel = function() {
  return this.level_;
};
goog.debug.LogRecord.prototype.setLevel = function(level) {
  this.level_ = level;
};
goog.debug.LogRecord.prototype.getMessage = function() {
  return this.msg_;
};
goog.debug.LogRecord.prototype.setMessage = function(msg) {
  this.msg_ = msg;
};
goog.debug.LogRecord.prototype.getMillis = function() {
  return this.time_;
};
goog.debug.LogRecord.prototype.setMillis = function(time) {
  this.time_ = time;
};
goog.debug.LogRecord.prototype.getSequenceNumber = function() {
  return this.sequenceNumber_;
};
goog.provide("goog.debug.LogBuffer");
goog.require("goog.asserts");
goog.require("goog.debug.LogRecord");
goog.debug.LogBuffer = function() {
  goog.asserts.assert(goog.debug.LogBuffer.isBufferingEnabled(), "Cannot use goog.debug.LogBuffer without defining " + "goog.debug.LogBuffer.CAPACITY.");
  this.clear();
};
goog.debug.LogBuffer.getInstance = function() {
  if (!goog.debug.LogBuffer.instance_) {
    goog.debug.LogBuffer.instance_ = new goog.debug.LogBuffer;
  }
  return goog.debug.LogBuffer.instance_;
};
goog.debug.LogBuffer.CAPACITY = 0;
goog.debug.LogBuffer.prototype.buffer_;
goog.debug.LogBuffer.prototype.curIndex_;
goog.debug.LogBuffer.prototype.isFull_;
goog.debug.LogBuffer.prototype.addRecord = function(level, msg, loggerName) {
  var curIndex = (this.curIndex_ + 1) % goog.debug.LogBuffer.CAPACITY;
  this.curIndex_ = curIndex;
  if (this.isFull_) {
    var ret = this.buffer_[curIndex];
    ret.reset(level, msg, loggerName);
    return ret;
  }
  this.isFull_ = curIndex == goog.debug.LogBuffer.CAPACITY - 1;
  return this.buffer_[curIndex] = new goog.debug.LogRecord(level, msg, loggerName);
};
goog.debug.LogBuffer.isBufferingEnabled = function() {
  return goog.debug.LogBuffer.CAPACITY > 0;
};
goog.debug.LogBuffer.prototype.clear = function() {
  this.buffer_ = new Array(goog.debug.LogBuffer.CAPACITY);
  this.curIndex_ = -1;
  this.isFull_ = false;
};
goog.debug.LogBuffer.prototype.forEachRecord = function(func) {
  var buffer = this.buffer_;
  if (!buffer[0]) {
    return;
  }
  var curIndex = this.curIndex_;
  var i = this.isFull_ ? curIndex : -1;
  do {
    i = (i + 1) % goog.debug.LogBuffer.CAPACITY;
    func((buffer[i]));
  } while (i != curIndex);
};
goog.provide("goog.debug.LogManager");
goog.provide("goog.debug.Logger");
goog.provide("goog.debug.Logger.Level");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.debug");
goog.require("goog.debug.LogBuffer");
goog.require("goog.debug.LogRecord");
goog.debug.Logger = function(name) {
  this.name_ = name;
};
goog.debug.Logger.prototype.parent_ = null;
goog.debug.Logger.prototype.level_ = null;
goog.debug.Logger.prototype.children_ = null;
goog.debug.Logger.prototype.handlers_ = null;
goog.debug.Logger.ENABLE_HIERARCHY = true;
if (!goog.debug.Logger.ENABLE_HIERARCHY) {
  goog.debug.Logger.rootHandlers_ = [];
  goog.debug.Logger.rootLevel_;
}
goog.debug.Logger.Level = function(name, value) {
  this.name = name;
  this.value = value;
};
goog.debug.Logger.Level.prototype.toString = function() {
  return this.name;
};
goog.debug.Logger.Level.OFF = new goog.debug.Logger.Level("OFF", Infinity);
goog.debug.Logger.Level.SHOUT = new goog.debug.Logger.Level("SHOUT", 1200);
goog.debug.Logger.Level.SEVERE = new goog.debug.Logger.Level("SEVERE", 1E3);
goog.debug.Logger.Level.WARNING = new goog.debug.Logger.Level("WARNING", 900);
goog.debug.Logger.Level.INFO = new goog.debug.Logger.Level("INFO", 800);
goog.debug.Logger.Level.CONFIG = new goog.debug.Logger.Level("CONFIG", 700);
goog.debug.Logger.Level.FINE = new goog.debug.Logger.Level("FINE", 500);
goog.debug.Logger.Level.FINER = new goog.debug.Logger.Level("FINER", 400);
goog.debug.Logger.Level.FINEST = new goog.debug.Logger.Level("FINEST", 300);
goog.debug.Logger.Level.ALL = new goog.debug.Logger.Level("ALL", 0);
goog.debug.Logger.Level.PREDEFINED_LEVELS = [goog.debug.Logger.Level.OFF, goog.debug.Logger.Level.SHOUT, goog.debug.Logger.Level.SEVERE, goog.debug.Logger.Level.WARNING, goog.debug.Logger.Level.INFO, goog.debug.Logger.Level.CONFIG, goog.debug.Logger.Level.FINE, goog.debug.Logger.Level.FINER, goog.debug.Logger.Level.FINEST, goog.debug.Logger.Level.ALL];
goog.debug.Logger.Level.predefinedLevelsCache_ = null;
goog.debug.Logger.Level.createPredefinedLevelsCache_ = function() {
  goog.debug.Logger.Level.predefinedLevelsCache_ = {};
  for (var i = 0, level;level = goog.debug.Logger.Level.PREDEFINED_LEVELS[i];i++) {
    goog.debug.Logger.Level.predefinedLevelsCache_[level.value] = level;
    goog.debug.Logger.Level.predefinedLevelsCache_[level.name] = level;
  }
};
goog.debug.Logger.Level.getPredefinedLevel = function(name) {
  if (!goog.debug.Logger.Level.predefinedLevelsCache_) {
    goog.debug.Logger.Level.createPredefinedLevelsCache_();
  }
  return goog.debug.Logger.Level.predefinedLevelsCache_[name] || null;
};
goog.debug.Logger.Level.getPredefinedLevelByValue = function(value) {
  if (!goog.debug.Logger.Level.predefinedLevelsCache_) {
    goog.debug.Logger.Level.createPredefinedLevelsCache_();
  }
  if (value in goog.debug.Logger.Level.predefinedLevelsCache_) {
    return goog.debug.Logger.Level.predefinedLevelsCache_[value];
  }
  for (var i = 0;i < goog.debug.Logger.Level.PREDEFINED_LEVELS.length;++i) {
    var level = goog.debug.Logger.Level.PREDEFINED_LEVELS[i];
    if (level.value <= value) {
      return level;
    }
  }
  return null;
};
goog.debug.Logger.getLogger = function(name) {
  return goog.debug.LogManager.getLogger(name);
};
goog.debug.Logger.logToProfilers = function(msg) {
  if (goog.global["console"]) {
    if (goog.global["console"]["timeStamp"]) {
      goog.global["console"]["timeStamp"](msg);
    } else {
      if (goog.global["console"]["markTimeline"]) {
        goog.global["console"]["markTimeline"](msg);
      }
    }
  }
  if (goog.global["msWriteProfilerMark"]) {
    goog.global["msWriteProfilerMark"](msg);
  }
};
goog.debug.Logger.prototype.getName = function() {
  return this.name_;
};
goog.debug.Logger.prototype.addHandler = function(handler) {
  if (goog.debug.Logger.ENABLE_HIERARCHY) {
    if (!this.handlers_) {
      this.handlers_ = [];
    }
    this.handlers_.push(handler);
  } else {
    goog.asserts.assert(!this.name_, "Cannot call addHandler on a non-root logger when " + "goog.debug.Logger.ENABLE_HIERARCHY is false.");
    goog.debug.Logger.rootHandlers_.push(handler);
  }
};
goog.debug.Logger.prototype.removeHandler = function(handler) {
  var handlers = goog.debug.Logger.ENABLE_HIERARCHY ? this.handlers_ : goog.debug.Logger.rootHandlers_;
  return!!handlers && goog.array.remove(handlers, handler);
};
goog.debug.Logger.prototype.getParent = function() {
  return this.parent_;
};
goog.debug.Logger.prototype.getChildren = function() {
  if (!this.children_) {
    this.children_ = {};
  }
  return this.children_;
};
goog.debug.Logger.prototype.setLevel = function(level) {
  if (goog.debug.Logger.ENABLE_HIERARCHY) {
    this.level_ = level;
  } else {
    goog.asserts.assert(!this.name_, "Cannot call setLevel() on a non-root logger when " + "goog.debug.Logger.ENABLE_HIERARCHY is false.");
    goog.debug.Logger.rootLevel_ = level;
  }
};
goog.debug.Logger.prototype.getLevel = function() {
  return this.level_;
};
goog.debug.Logger.prototype.getEffectiveLevel = function() {
  if (!goog.debug.Logger.ENABLE_HIERARCHY) {
    return goog.debug.Logger.rootLevel_;
  }
  if (this.level_) {
    return this.level_;
  }
  if (this.parent_) {
    return this.parent_.getEffectiveLevel();
  }
  goog.asserts.fail("Root logger has no level set.");
  return null;
};
goog.debug.Logger.prototype.isLoggable = function(level) {
  return level.value >= this.getEffectiveLevel().value;
};
goog.debug.Logger.prototype.log = function(level, msg, opt_exception) {
  if (this.isLoggable(level)) {
    this.doLogRecord_(this.getLogRecord(level, msg, opt_exception));
  }
};
goog.debug.Logger.prototype.getLogRecord = function(level, msg, opt_exception) {
  if (goog.debug.LogBuffer.isBufferingEnabled()) {
    var logRecord = goog.debug.LogBuffer.getInstance().addRecord(level, msg, this.name_)
  } else {
    logRecord = new goog.debug.LogRecord(level, String(msg), this.name_);
  }
  if (opt_exception) {
    logRecord.setException(opt_exception);
    logRecord.setExceptionText(goog.debug.exposeException(opt_exception, arguments.callee.caller));
  }
  return logRecord;
};
goog.debug.Logger.prototype.shout = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.SHOUT, msg, opt_exception);
};
goog.debug.Logger.prototype.severe = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.SEVERE, msg, opt_exception);
};
goog.debug.Logger.prototype.warning = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.WARNING, msg, opt_exception);
};
goog.debug.Logger.prototype.info = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.INFO, msg, opt_exception);
};
goog.debug.Logger.prototype.config = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.CONFIG, msg, opt_exception);
};
goog.debug.Logger.prototype.fine = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.FINE, msg, opt_exception);
};
goog.debug.Logger.prototype.finer = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.FINER, msg, opt_exception);
};
goog.debug.Logger.prototype.finest = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.FINEST, msg, opt_exception);
};
goog.debug.Logger.prototype.logRecord = function(logRecord) {
  if (this.isLoggable(logRecord.getLevel())) {
    this.doLogRecord_(logRecord);
  }
};
goog.debug.Logger.prototype.doLogRecord_ = function(logRecord) {
  goog.debug.Logger.logToProfilers("log:" + logRecord.getMessage());
  if (goog.debug.Logger.ENABLE_HIERARCHY) {
    var target = this;
    while (target) {
      target.callPublish_(logRecord);
      target = target.getParent();
    }
  } else {
    for (var i = 0, handler;handler = goog.debug.Logger.rootHandlers_[i++];) {
      handler(logRecord);
    }
  }
};
goog.debug.Logger.prototype.callPublish_ = function(logRecord) {
  if (this.handlers_) {
    for (var i = 0, handler;handler = this.handlers_[i];i++) {
      handler(logRecord);
    }
  }
};
goog.debug.Logger.prototype.setParent_ = function(parent) {
  this.parent_ = parent;
};
goog.debug.Logger.prototype.addChild_ = function(name, logger) {
  this.getChildren()[name] = logger;
};
goog.debug.LogManager = {};
goog.debug.LogManager.loggers_ = {};
goog.debug.LogManager.rootLogger_ = null;
goog.debug.LogManager.initialize = function() {
  if (!goog.debug.LogManager.rootLogger_) {
    goog.debug.LogManager.rootLogger_ = new goog.debug.Logger("");
    goog.debug.LogManager.loggers_[""] = goog.debug.LogManager.rootLogger_;
    goog.debug.LogManager.rootLogger_.setLevel(goog.debug.Logger.Level.CONFIG);
  }
};
goog.debug.LogManager.getLoggers = function() {
  return goog.debug.LogManager.loggers_;
};
goog.debug.LogManager.getRoot = function() {
  goog.debug.LogManager.initialize();
  return(goog.debug.LogManager.rootLogger_);
};
goog.debug.LogManager.getLogger = function(name) {
  goog.debug.LogManager.initialize();
  var ret = goog.debug.LogManager.loggers_[name];
  return ret || goog.debug.LogManager.createLogger_(name);
};
goog.debug.LogManager.createFunctionForCatchErrors = function(opt_logger) {
  return function(info) {
    var logger = opt_logger || goog.debug.LogManager.getRoot();
    logger.severe("Error: " + info.message + " (" + info.fileName + " @ Line: " + info.line + ")");
  };
};
goog.debug.LogManager.createLogger_ = function(name) {
  var logger = new goog.debug.Logger(name);
  if (goog.debug.Logger.ENABLE_HIERARCHY) {
    var lastDotIndex = name.lastIndexOf(".");
    var parentName = name.substr(0, lastDotIndex);
    var leafName = name.substr(lastDotIndex + 1);
    var parentLogger = goog.debug.LogManager.getLogger(parentName);
    parentLogger.addChild_(leafName, logger);
    logger.setParent_(parentLogger);
  }
  goog.debug.LogManager.loggers_[name] = logger;
  return logger;
};
goog.provide("goog.net.ErrorCode");
goog.net.ErrorCode = {NO_ERROR:0, ACCESS_DENIED:1, FILE_NOT_FOUND:2, FF_SILENT_ERROR:3, CUSTOM_ERROR:4, EXCEPTION:5, HTTP_ERROR:6, ABORT:7, TIMEOUT:8, OFFLINE:9};
goog.net.ErrorCode.getDebugMessage = function(errorCode) {
  switch(errorCode) {
    case goog.net.ErrorCode.NO_ERROR:
      return "No Error";
    case goog.net.ErrorCode.ACCESS_DENIED:
      return "Access denied to content document";
    case goog.net.ErrorCode.FILE_NOT_FOUND:
      return "File not found";
    case goog.net.ErrorCode.FF_SILENT_ERROR:
      return "Firefox silently errored";
    case goog.net.ErrorCode.CUSTOM_ERROR:
      return "Application custom error";
    case goog.net.ErrorCode.EXCEPTION:
      return "An exception occurred";
    case goog.net.ErrorCode.HTTP_ERROR:
      return "Http response at 400 or 500 level";
    case goog.net.ErrorCode.ABORT:
      return "Request was aborted";
    case goog.net.ErrorCode.TIMEOUT:
      return "Request timed out";
    case goog.net.ErrorCode.OFFLINE:
      return "The resource is not available offline";
    default:
      return "Unrecognized error code";
  }
};
goog.provide("goog.net.HttpStatus");
goog.net.HttpStatus = {CONTINUE:100, SWITCHING_PROTOCOLS:101, OK:200, CREATED:201, ACCEPTED:202, NON_AUTHORITATIVE_INFORMATION:203, NO_CONTENT:204, RESET_CONTENT:205, PARTIAL_CONTENT:206, MULTIPLE_CHOICES:300, MOVED_PERMANENTLY:301, FOUND:302, SEE_OTHER:303, NOT_MODIFIED:304, USE_PROXY:305, TEMPORARY_REDIRECT:307, BAD_REQUEST:400, UNAUTHORIZED:401, PAYMENT_REQUIRED:402, FORBIDDEN:403, NOT_FOUND:404, METHOD_NOT_ALLOWED:405, NOT_ACCEPTABLE:406, PROXY_AUTHENTICATION_REQUIRED:407, REQUEST_TIMEOUT:408, 
CONFLICT:409, GONE:410, LENGTH_REQUIRED:411, PRECONDITION_FAILED:412, REQUEST_ENTITY_TOO_LARGE:413, REQUEST_URI_TOO_LONG:414, UNSUPPORTED_MEDIA_TYPE:415, REQUEST_RANGE_NOT_SATISFIABLE:416, EXPECTATION_FAILED:417, INTERNAL_SERVER_ERROR:500, NOT_IMPLEMENTED:501, BAD_GATEWAY:502, SERVICE_UNAVAILABLE:503, GATEWAY_TIMEOUT:504, HTTP_VERSION_NOT_SUPPORTED:505, QUIRK_IE_NO_CONTENT:1223};
goog.net.HttpStatus.isSuccess = function(status) {
  switch(status) {
    case goog.net.HttpStatus.OK:
    ;
    case goog.net.HttpStatus.CREATED:
    ;
    case goog.net.HttpStatus.ACCEPTED:
    ;
    case goog.net.HttpStatus.NO_CONTENT:
    ;
    case goog.net.HttpStatus.PARTIAL_CONTENT:
    ;
    case goog.net.HttpStatus.NOT_MODIFIED:
    ;
    case goog.net.HttpStatus.QUIRK_IE_NO_CONTENT:
      return true;
    default:
      return false;
  }
};
goog.provide("goog.net.XmlHttpFactory");
goog.net.XmlHttpFactory = function() {
};
goog.net.XmlHttpFactory.prototype.cachedOptions_ = null;
goog.net.XmlHttpFactory.prototype.createInstance = goog.abstractMethod;
goog.net.XmlHttpFactory.prototype.getOptions = function() {
  return this.cachedOptions_ || (this.cachedOptions_ = this.internalGetOptions());
};
goog.net.XmlHttpFactory.prototype.internalGetOptions = goog.abstractMethod;
goog.provide("goog.net.WrapperXmlHttpFactory");
goog.require("goog.net.XmlHttpFactory");
goog.net.WrapperXmlHttpFactory = function(xhrFactory, optionsFactory) {
  goog.net.XmlHttpFactory.call(this);
  this.xhrFactory_ = xhrFactory;
  this.optionsFactory_ = optionsFactory;
};
goog.inherits(goog.net.WrapperXmlHttpFactory, goog.net.XmlHttpFactory);
goog.net.WrapperXmlHttpFactory.prototype.createInstance = function() {
  return this.xhrFactory_();
};
goog.net.WrapperXmlHttpFactory.prototype.getOptions = function() {
  return this.optionsFactory_();
};
goog.provide("goog.net.DefaultXmlHttpFactory");
goog.provide("goog.net.XmlHttp");
goog.provide("goog.net.XmlHttp.OptionType");
goog.provide("goog.net.XmlHttp.ReadyState");
goog.require("goog.net.WrapperXmlHttpFactory");
goog.require("goog.net.XmlHttpFactory");
goog.net.XmlHttp = function() {
  return goog.net.XmlHttp.factory_.createInstance();
};
goog.net.XmlHttp.ASSUME_NATIVE_XHR = false;
goog.net.XmlHttp.getOptions = function() {
  return goog.net.XmlHttp.factory_.getOptions();
};
goog.net.XmlHttp.OptionType = {USE_NULL_FUNCTION:0, LOCAL_REQUEST_ERROR:1};
goog.net.XmlHttp.ReadyState = {UNINITIALIZED:0, LOADING:1, LOADED:2, INTERACTIVE:3, COMPLETE:4};
goog.net.XmlHttp.factory_;
goog.net.XmlHttp.setFactory = function(factory, optionsFactory) {
  goog.net.XmlHttp.setGlobalFactory(new goog.net.WrapperXmlHttpFactory((factory), (optionsFactory)));
};
goog.net.XmlHttp.setGlobalFactory = function(factory) {
  goog.net.XmlHttp.factory_ = factory;
};
goog.net.DefaultXmlHttpFactory = function() {
  goog.net.XmlHttpFactory.call(this);
};
goog.inherits(goog.net.DefaultXmlHttpFactory, goog.net.XmlHttpFactory);
goog.net.DefaultXmlHttpFactory.prototype.createInstance = function() {
  var progId = this.getProgId_();
  if (progId) {
    return new ActiveXObject(progId);
  } else {
    return new XMLHttpRequest;
  }
};
goog.net.DefaultXmlHttpFactory.prototype.internalGetOptions = function() {
  var progId = this.getProgId_();
  var options = {};
  if (progId) {
    options[goog.net.XmlHttp.OptionType.USE_NULL_FUNCTION] = true;
    options[goog.net.XmlHttp.OptionType.LOCAL_REQUEST_ERROR] = true;
  }
  return options;
};
goog.net.DefaultXmlHttpFactory.prototype.ieProgId_;
goog.net.DefaultXmlHttpFactory.prototype.getProgId_ = function() {
  if (goog.net.XmlHttp.ASSUME_NATIVE_XHR) {
    return "";
  }
  if (!this.ieProgId_ && (typeof XMLHttpRequest == "undefined" && typeof ActiveXObject != "undefined")) {
    var ACTIVE_X_IDENTS = ["MSXML2.XMLHTTP.6.0", "MSXML2.XMLHTTP.3.0", "MSXML2.XMLHTTP", "Microsoft.XMLHTTP"];
    for (var i = 0;i < ACTIVE_X_IDENTS.length;i++) {
      var candidate = ACTIVE_X_IDENTS[i];
      try {
        new ActiveXObject(candidate);
        this.ieProgId_ = candidate;
        return candidate;
      } catch (e) {
      }
    }
    throw Error("Could not create ActiveXObject. ActiveX might be disabled," + " or MSXML might not be installed");
  }
  return(this.ieProgId_);
};
goog.net.XmlHttp.setGlobalFactory(new goog.net.DefaultXmlHttpFactory);
goog.provide("goog.uri.utils");
goog.provide("goog.uri.utils.ComponentIndex");
goog.provide("goog.uri.utils.QueryArray");
goog.provide("goog.uri.utils.QueryValue");
goog.provide("goog.uri.utils.StandardQueryParam");
goog.require("goog.asserts");
goog.require("goog.string");
goog.require("goog.userAgent");
goog.uri.utils.CharCode_ = {AMPERSAND:38, EQUAL:61, HASH:35, QUESTION:63};
goog.uri.utils.buildFromEncodedParts = function(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_queryData, opt_fragment) {
  var out = "";
  if (opt_scheme) {
    out += opt_scheme + ":";
  }
  if (opt_domain) {
    out += "//";
    if (opt_userInfo) {
      out += opt_userInfo + "@";
    }
    out += opt_domain;
    if (opt_port) {
      out += ":" + opt_port;
    }
  }
  if (opt_path) {
    out += opt_path;
  }
  if (opt_queryData) {
    out += "?" + opt_queryData;
  }
  if (opt_fragment) {
    out += "#" + opt_fragment;
  }
  return out;
};
goog.uri.utils.splitRe_ = new RegExp("^" + "(?:" + "([^:/?#.]+)" + ":)?" + "(?://" + "(?:([^/?#]*)@)?" + "([^/#?]*?)" + "(?::([0-9]+))?" + "(?\x3d[/#?]|$)" + ")?" + "([^?#]+)?" + "(?:\\?([^#]*))?" + "(?:#(.*))?" + "$");
goog.uri.utils.ComponentIndex = {SCHEME:1, USER_INFO:2, DOMAIN:3, PORT:4, PATH:5, QUERY_DATA:6, FRAGMENT:7};
goog.uri.utils.split = function(uri) {
  return(uri.match(goog.uri.utils.splitRe_));
};
goog.uri.utils.decodeIfPossible_ = function(uri) {
  return uri && decodeURIComponent(uri);
};
goog.uri.utils.getComponentByIndex_ = function(componentIndex, uri) {
  return goog.uri.utils.split(uri)[componentIndex] || null;
};
goog.uri.utils.getScheme = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.SCHEME, uri);
};
goog.uri.utils.getEffectiveScheme = function(uri) {
  var scheme = goog.uri.utils.getScheme(uri);
  if (!scheme && self.location) {
    var protocol = self.location.protocol;
    scheme = protocol.substr(0, protocol.length - 1);
  }
  return scheme ? scheme.toLowerCase() : "";
};
goog.uri.utils.getUserInfoEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.USER_INFO, uri);
};
goog.uri.utils.getUserInfo = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getUserInfoEncoded(uri));
};
goog.uri.utils.getDomainEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.DOMAIN, uri);
};
goog.uri.utils.getDomain = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getDomainEncoded(uri));
};
goog.uri.utils.getPort = function(uri) {
  return Number(goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.PORT, uri)) || null;
};
goog.uri.utils.getPathEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.PATH, uri);
};
goog.uri.utils.getPath = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getPathEncoded(uri));
};
goog.uri.utils.getQueryData = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.QUERY_DATA, uri);
};
goog.uri.utils.getFragmentEncoded = function(uri) {
  var hashIndex = uri.indexOf("#");
  return hashIndex < 0 ? null : uri.substr(hashIndex + 1);
};
goog.uri.utils.setFragmentEncoded = function(uri, fragment) {
  return goog.uri.utils.removeFragment(uri) + (fragment ? "#" + fragment : "");
};
goog.uri.utils.getFragment = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getFragmentEncoded(uri));
};
goog.uri.utils.getHost = function(uri) {
  var pieces = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(pieces[goog.uri.utils.ComponentIndex.SCHEME], pieces[goog.uri.utils.ComponentIndex.USER_INFO], pieces[goog.uri.utils.ComponentIndex.DOMAIN], pieces[goog.uri.utils.ComponentIndex.PORT]);
};
goog.uri.utils.getPathAndAfter = function(uri) {
  var pieces = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(null, null, null, null, pieces[goog.uri.utils.ComponentIndex.PATH], pieces[goog.uri.utils.ComponentIndex.QUERY_DATA], pieces[goog.uri.utils.ComponentIndex.FRAGMENT]);
};
goog.uri.utils.removeFragment = function(uri) {
  var hashIndex = uri.indexOf("#");
  return hashIndex < 0 ? uri : uri.substr(0, hashIndex);
};
goog.uri.utils.haveSameDomain = function(uri1, uri2) {
  var pieces1 = goog.uri.utils.split(uri1);
  var pieces2 = goog.uri.utils.split(uri2);
  return pieces1[goog.uri.utils.ComponentIndex.DOMAIN] == pieces2[goog.uri.utils.ComponentIndex.DOMAIN] && (pieces1[goog.uri.utils.ComponentIndex.SCHEME] == pieces2[goog.uri.utils.ComponentIndex.SCHEME] && pieces1[goog.uri.utils.ComponentIndex.PORT] == pieces2[goog.uri.utils.ComponentIndex.PORT]);
};
goog.uri.utils.assertNoFragmentsOrQueries_ = function(uri) {
  if (goog.DEBUG && (uri.indexOf("#") >= 0 || uri.indexOf("?") >= 0)) {
    throw Error("goog.uri.utils: Fragment or query identifiers are not " + "supported: [" + uri + "]");
  }
};
goog.uri.utils.QueryValue;
goog.uri.utils.QueryArray;
goog.uri.utils.appendQueryData_ = function(buffer) {
  if (buffer[1]) {
    var baseUri = (buffer[0]);
    var hashIndex = baseUri.indexOf("#");
    if (hashIndex >= 0) {
      buffer.push(baseUri.substr(hashIndex));
      buffer[0] = baseUri = baseUri.substr(0, hashIndex);
    }
    var questionIndex = baseUri.indexOf("?");
    if (questionIndex < 0) {
      buffer[1] = "?";
    } else {
      if (questionIndex == baseUri.length - 1) {
        buffer[1] = undefined;
      }
    }
  }
  return buffer.join("");
};
goog.uri.utils.appendKeyValuePairs_ = function(key, value, pairs) {
  if (goog.isArray(value)) {
    goog.asserts.assertArray(value);
    for (var j = 0;j < value.length;j++) {
      goog.uri.utils.appendKeyValuePairs_(key, String(value[j]), pairs);
    }
  } else {
    if (value != null) {
      pairs.push("\x26", key, value === "" ? "" : "\x3d", goog.string.urlEncode(value));
    }
  }
};
goog.uri.utils.buildQueryDataBuffer_ = function(buffer, keysAndValues, opt_startIndex) {
  goog.asserts.assert(Math.max(keysAndValues.length - (opt_startIndex || 0), 0) % 2 == 0, "goog.uri.utils: Key/value lists must be even in length.");
  for (var i = opt_startIndex || 0;i < keysAndValues.length;i += 2) {
    goog.uri.utils.appendKeyValuePairs_(keysAndValues[i], keysAndValues[i + 1], buffer);
  }
  return buffer;
};
goog.uri.utils.buildQueryData = function(keysAndValues, opt_startIndex) {
  var buffer = goog.uri.utils.buildQueryDataBuffer_([], keysAndValues, opt_startIndex);
  buffer[0] = "";
  return buffer.join("");
};
goog.uri.utils.buildQueryDataBufferFromMap_ = function(buffer, map) {
  for (var key in map) {
    goog.uri.utils.appendKeyValuePairs_(key, map[key], buffer);
  }
  return buffer;
};
goog.uri.utils.buildQueryDataFromMap = function(map) {
  var buffer = goog.uri.utils.buildQueryDataBufferFromMap_([], map);
  buffer[0] = "";
  return buffer.join("");
};
goog.uri.utils.appendParams = function(uri, var_args) {
  return goog.uri.utils.appendQueryData_(arguments.length == 2 ? goog.uri.utils.buildQueryDataBuffer_([uri], arguments[1], 0) : goog.uri.utils.buildQueryDataBuffer_([uri], arguments, 1));
};
goog.uri.utils.appendParamsFromMap = function(uri, map) {
  return goog.uri.utils.appendQueryData_(goog.uri.utils.buildQueryDataBufferFromMap_([uri], map));
};
goog.uri.utils.appendParam = function(uri, key, value) {
  return goog.uri.utils.appendQueryData_([uri, "\x26", key, "\x3d", goog.string.urlEncode(value)]);
};
goog.uri.utils.findParam_ = function(uri, startIndex, keyEncoded, hashOrEndIndex) {
  var index = startIndex;
  var keyLength = keyEncoded.length;
  while ((index = uri.indexOf(keyEncoded, index)) >= 0 && index < hashOrEndIndex) {
    var precedingChar = uri.charCodeAt(index - 1);
    if (precedingChar == goog.uri.utils.CharCode_.AMPERSAND || precedingChar == goog.uri.utils.CharCode_.QUESTION) {
      var followingChar = uri.charCodeAt(index + keyLength);
      if (!followingChar || (followingChar == goog.uri.utils.CharCode_.EQUAL || (followingChar == goog.uri.utils.CharCode_.AMPERSAND || followingChar == goog.uri.utils.CharCode_.HASH))) {
        return index;
      }
    }
    index += keyLength + 1;
  }
  return-1;
};
goog.uri.utils.hashOrEndRe_ = /#|$/;
goog.uri.utils.hasParam = function(uri, keyEncoded) {
  return goog.uri.utils.findParam_(uri, 0, keyEncoded, uri.search(goog.uri.utils.hashOrEndRe_)) >= 0;
};
goog.uri.utils.getParamValue = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var foundIndex = goog.uri.utils.findParam_(uri, 0, keyEncoded, hashOrEndIndex);
  if (foundIndex < 0) {
    return null;
  } else {
    var endPosition = uri.indexOf("\x26", foundIndex);
    if (endPosition < 0 || endPosition > hashOrEndIndex) {
      endPosition = hashOrEndIndex;
    }
    foundIndex += keyEncoded.length + 1;
    return goog.string.urlDecode(uri.substr(foundIndex, endPosition - foundIndex));
  }
};
goog.uri.utils.getParamValues = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var position = 0;
  var foundIndex;
  var result = [];
  while ((foundIndex = goog.uri.utils.findParam_(uri, position, keyEncoded, hashOrEndIndex)) >= 0) {
    position = uri.indexOf("\x26", foundIndex);
    if (position < 0 || position > hashOrEndIndex) {
      position = hashOrEndIndex;
    }
    foundIndex += keyEncoded.length + 1;
    result.push(goog.string.urlDecode(uri.substr(foundIndex, position - foundIndex)));
  }
  return result;
};
goog.uri.utils.trailingQueryPunctuationRe_ = /[?&]($|#)/;
goog.uri.utils.removeParam = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var position = 0;
  var foundIndex;
  var buffer = [];
  while ((foundIndex = goog.uri.utils.findParam_(uri, position, keyEncoded, hashOrEndIndex)) >= 0) {
    buffer.push(uri.substring(position, foundIndex));
    position = Math.min(uri.indexOf("\x26", foundIndex) + 1 || hashOrEndIndex, hashOrEndIndex);
  }
  buffer.push(uri.substr(position));
  return buffer.join("").replace(goog.uri.utils.trailingQueryPunctuationRe_, "$1");
};
goog.uri.utils.setParam = function(uri, keyEncoded, value) {
  return goog.uri.utils.appendParam(goog.uri.utils.removeParam(uri, keyEncoded), keyEncoded, value);
};
goog.uri.utils.appendPath = function(baseUri, path) {
  goog.uri.utils.assertNoFragmentsOrQueries_(baseUri);
  if (goog.string.endsWith(baseUri, "/")) {
    baseUri = baseUri.substr(0, baseUri.length - 1);
  }
  if (goog.string.startsWith(path, "/")) {
    path = path.substr(1);
  }
  return goog.string.buildString(baseUri, "/", path);
};
goog.uri.utils.StandardQueryParam = {RANDOM:"zx"};
goog.uri.utils.makeUnique = function(uri) {
  return goog.uri.utils.setParam(uri, goog.uri.utils.StandardQueryParam.RANDOM, goog.string.getRandomString());
};
goog.provide("goog.net.XhrIo");
goog.provide("goog.net.XhrIo.ResponseType");
goog.require("goog.Timer");
goog.require("goog.array");
goog.require("goog.debug.Logger");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.events");
goog.require("goog.events.EventTarget");
goog.require("goog.json");
goog.require("goog.net.ErrorCode");
goog.require("goog.net.EventType");
goog.require("goog.net.HttpStatus");
goog.require("goog.net.XmlHttp");
goog.require("goog.object");
goog.require("goog.structs");
goog.require("goog.structs.Map");
goog.require("goog.uri.utils");
goog.net.XhrIo = function(opt_xmlHttpFactory) {
  goog.events.EventTarget.call(this);
  this.headers = new goog.structs.Map;
  this.xmlHttpFactory_ = opt_xmlHttpFactory || null;
};
goog.inherits(goog.net.XhrIo, goog.events.EventTarget);
goog.net.XhrIo.ResponseType = {DEFAULT:"", TEXT:"text", DOCUMENT:"document", BLOB:"blob", ARRAY_BUFFER:"arraybuffer"};
goog.net.XhrIo.prototype.logger_ = goog.debug.Logger.getLogger("goog.net.XhrIo");
goog.net.XhrIo.CONTENT_TYPE_HEADER = "Content-Type";
goog.net.XhrIo.HTTP_SCHEME_PATTERN = /^https?$/i;
goog.net.XhrIo.FORM_CONTENT_TYPE = "application/x-www-form-urlencoded;charset\x3dutf-8";
goog.net.XhrIo.sendInstances_ = [];
goog.net.XhrIo.send = function(url, opt_callback, opt_method, opt_content, opt_headers, opt_timeoutInterval, opt_withCredentials) {
  var x = new goog.net.XhrIo;
  goog.net.XhrIo.sendInstances_.push(x);
  if (opt_callback) {
    goog.events.listen(x, goog.net.EventType.COMPLETE, opt_callback);
  }
  goog.events.listen(x, goog.net.EventType.READY, goog.partial(goog.net.XhrIo.cleanupSend_, x));
  if (opt_timeoutInterval) {
    x.setTimeoutInterval(opt_timeoutInterval);
  }
  if (opt_withCredentials) {
    x.setWithCredentials(opt_withCredentials);
  }
  x.send(url, opt_method, opt_content, opt_headers);
};
goog.net.XhrIo.cleanup = function() {
  var instances = goog.net.XhrIo.sendInstances_;
  while (instances.length) {
    instances.pop().dispose();
  }
};
goog.net.XhrIo.protectEntryPoints = function(errorHandler) {
  goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = errorHandler.protectEntryPoint(goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_);
};
goog.net.XhrIo.cleanupSend_ = function(XhrIo) {
  XhrIo.dispose();
  goog.array.remove(goog.net.XhrIo.sendInstances_, XhrIo);
};
goog.net.XhrIo.prototype.active_ = false;
goog.net.XhrIo.prototype.xhr_ = null;
goog.net.XhrIo.prototype.xhrOptions_ = null;
goog.net.XhrIo.prototype.lastUri_ = "";
goog.net.XhrIo.prototype.lastMethod_ = "";
goog.net.XhrIo.prototype.lastErrorCode_ = goog.net.ErrorCode.NO_ERROR;
goog.net.XhrIo.prototype.lastError_ = "";
goog.net.XhrIo.prototype.errorDispatched_ = false;
goog.net.XhrIo.prototype.inSend_ = false;
goog.net.XhrIo.prototype.inOpen_ = false;
goog.net.XhrIo.prototype.inAbort_ = false;
goog.net.XhrIo.prototype.timeoutInterval_ = 0;
goog.net.XhrIo.prototype.timeoutId_ = null;
goog.net.XhrIo.prototype.responseType_ = goog.net.XhrIo.ResponseType.DEFAULT;
goog.net.XhrIo.prototype.withCredentials_ = false;
goog.net.XhrIo.prototype.getTimeoutInterval = function() {
  return this.timeoutInterval_;
};
goog.net.XhrIo.prototype.setTimeoutInterval = function(ms) {
  this.timeoutInterval_ = Math.max(0, ms);
};
goog.net.XhrIo.prototype.setResponseType = function(type) {
  this.responseType_ = type;
};
goog.net.XhrIo.prototype.getResponseType = function() {
  return this.responseType_;
};
goog.net.XhrIo.prototype.setWithCredentials = function(withCredentials) {
  this.withCredentials_ = withCredentials;
};
goog.net.XhrIo.prototype.getWithCredentials = function() {
  return this.withCredentials_;
};
goog.net.XhrIo.prototype.send = function(url, opt_method, opt_content, opt_headers) {
  if (this.xhr_) {
    throw Error("[goog.net.XhrIo] Object is active with another request\x3d" + this.lastUri_ + "; newUri\x3d" + url);
  }
  var method = opt_method ? opt_method.toUpperCase() : "GET";
  this.lastUri_ = url;
  this.lastError_ = "";
  this.lastErrorCode_ = goog.net.ErrorCode.NO_ERROR;
  this.lastMethod_ = method;
  this.errorDispatched_ = false;
  this.active_ = true;
  this.xhr_ = this.createXhr();
  this.xhrOptions_ = this.xmlHttpFactory_ ? this.xmlHttpFactory_.getOptions() : goog.net.XmlHttp.getOptions();
  this.xhr_.onreadystatechange = goog.bind(this.onReadyStateChange_, this);
  try {
    this.logger_.fine(this.formatMsg_("Opening Xhr"));
    this.inOpen_ = true;
    this.xhr_.open(method, url, true);
    this.inOpen_ = false;
  } catch (err) {
    this.logger_.fine(this.formatMsg_("Error opening Xhr: " + err.message));
    this.error_(goog.net.ErrorCode.EXCEPTION, err);
    return;
  }
  var content = opt_content || "";
  var headers = this.headers.clone();
  if (opt_headers) {
    goog.structs.forEach(opt_headers, function(value, key) {
      headers.set(key, value);
    });
  }
  var contentIsFormData = goog.global["FormData"] && content instanceof goog.global["FormData"];
  if (method == "POST" && (!headers.containsKey(goog.net.XhrIo.CONTENT_TYPE_HEADER) && !contentIsFormData)) {
    headers.set(goog.net.XhrIo.CONTENT_TYPE_HEADER, goog.net.XhrIo.FORM_CONTENT_TYPE);
  }
  goog.structs.forEach(headers, function(value, key) {
    this.xhr_.setRequestHeader(key, value);
  }, this);
  if (this.responseType_) {
    this.xhr_.responseType = this.responseType_;
  }
  if (goog.object.containsKey(this.xhr_, "withCredentials")) {
    this.xhr_.withCredentials = this.withCredentials_;
  }
  try {
    if (this.timeoutId_) {
      goog.Timer.defaultTimerObject.clearTimeout(this.timeoutId_);
      this.timeoutId_ = null;
    }
    if (this.timeoutInterval_ > 0) {
      this.logger_.fine(this.formatMsg_("Will abort after " + this.timeoutInterval_ + "ms if incomplete"));
      this.timeoutId_ = goog.Timer.defaultTimerObject.setTimeout(goog.bind(this.timeout_, this), this.timeoutInterval_);
    }
    this.logger_.fine(this.formatMsg_("Sending request"));
    this.inSend_ = true;
    this.xhr_.send(content);
    this.inSend_ = false;
  } catch (err) {
    this.logger_.fine(this.formatMsg_("Send error: " + err.message));
    this.error_(goog.net.ErrorCode.EXCEPTION, err);
  }
};
goog.net.XhrIo.prototype.createXhr = function() {
  return this.xmlHttpFactory_ ? this.xmlHttpFactory_.createInstance() : goog.net.XmlHttp();
};
goog.net.XhrIo.prototype.timeout_ = function() {
  if (typeof goog == "undefined") {
  } else {
    if (this.xhr_) {
      this.lastError_ = "Timed out after " + this.timeoutInterval_ + "ms, aborting";
      this.lastErrorCode_ = goog.net.ErrorCode.TIMEOUT;
      this.logger_.fine(this.formatMsg_(this.lastError_));
      this.dispatchEvent(goog.net.EventType.TIMEOUT);
      this.abort(goog.net.ErrorCode.TIMEOUT);
    }
  }
};
goog.net.XhrIo.prototype.error_ = function(errorCode, err) {
  this.active_ = false;
  if (this.xhr_) {
    this.inAbort_ = true;
    this.xhr_.abort();
    this.inAbort_ = false;
  }
  this.lastError_ = err;
  this.lastErrorCode_ = errorCode;
  this.dispatchErrors_();
  this.cleanUpXhr_();
};
goog.net.XhrIo.prototype.dispatchErrors_ = function() {
  if (!this.errorDispatched_) {
    this.errorDispatched_ = true;
    this.dispatchEvent(goog.net.EventType.COMPLETE);
    this.dispatchEvent(goog.net.EventType.ERROR);
  }
};
goog.net.XhrIo.prototype.abort = function(opt_failureCode) {
  if (this.xhr_ && this.active_) {
    this.logger_.fine(this.formatMsg_("Aborting"));
    this.active_ = false;
    this.inAbort_ = true;
    this.xhr_.abort();
    this.inAbort_ = false;
    this.lastErrorCode_ = opt_failureCode || goog.net.ErrorCode.ABORT;
    this.dispatchEvent(goog.net.EventType.COMPLETE);
    this.dispatchEvent(goog.net.EventType.ABORT);
    this.cleanUpXhr_();
  }
};
goog.net.XhrIo.prototype.disposeInternal = function() {
  if (this.xhr_) {
    if (this.active_) {
      this.active_ = false;
      this.inAbort_ = true;
      this.xhr_.abort();
      this.inAbort_ = false;
    }
    this.cleanUpXhr_(true);
  }
  goog.net.XhrIo.superClass_.disposeInternal.call(this);
};
goog.net.XhrIo.prototype.onReadyStateChange_ = function() {
  if (!this.inOpen_ && (!this.inSend_ && !this.inAbort_)) {
    this.onReadyStateChangeEntryPoint_();
  } else {
    this.onReadyStateChangeHelper_();
  }
};
goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = function() {
  this.onReadyStateChangeHelper_();
};
goog.net.XhrIo.prototype.onReadyStateChangeHelper_ = function() {
  if (!this.active_) {
    return;
  }
  if (typeof goog == "undefined") {
  } else {
    if (this.xhrOptions_[goog.net.XmlHttp.OptionType.LOCAL_REQUEST_ERROR] && (this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE && this.getStatus() == 2)) {
      this.logger_.fine(this.formatMsg_("Local request error detected and ignored"));
    } else {
      if (this.inSend_ && this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE) {
        goog.Timer.defaultTimerObject.setTimeout(goog.bind(this.onReadyStateChange_, this), 0);
        return;
      }
      this.dispatchEvent(goog.net.EventType.READY_STATE_CHANGE);
      if (this.isComplete()) {
        this.logger_.fine(this.formatMsg_("Request complete"));
        this.active_ = false;
        try {
          if (this.isSuccess()) {
            this.dispatchEvent(goog.net.EventType.COMPLETE);
            this.dispatchEvent(goog.net.EventType.SUCCESS);
          } else {
            this.lastErrorCode_ = goog.net.ErrorCode.HTTP_ERROR;
            this.lastError_ = this.getStatusText() + " [" + this.getStatus() + "]";
            this.dispatchErrors_();
          }
        } finally {
          this.cleanUpXhr_();
        }
      }
    }
  }
};
goog.net.XhrIo.prototype.cleanUpXhr_ = function(opt_fromDispose) {
  if (this.xhr_) {
    var xhr = this.xhr_;
    var clearedOnReadyStateChange = this.xhrOptions_[goog.net.XmlHttp.OptionType.USE_NULL_FUNCTION] ? goog.nullFunction : null;
    this.xhr_ = null;
    this.xhrOptions_ = null;
    if (this.timeoutId_) {
      goog.Timer.defaultTimerObject.clearTimeout(this.timeoutId_);
      this.timeoutId_ = null;
    }
    if (!opt_fromDispose) {
      this.dispatchEvent(goog.net.EventType.READY);
    }
    try {
      xhr.onreadystatechange = clearedOnReadyStateChange;
    } catch (e) {
      this.logger_.severe("Problem encountered resetting onreadystatechange: " + e.message);
    }
  }
};
goog.net.XhrIo.prototype.isActive = function() {
  return!!this.xhr_;
};
goog.net.XhrIo.prototype.isComplete = function() {
  return this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE;
};
goog.net.XhrIo.prototype.isSuccess = function() {
  var status = this.getStatus();
  return goog.net.HttpStatus.isSuccess(status) || status === 0 && !this.isLastUriEffectiveSchemeHttp_();
};
goog.net.XhrIo.prototype.isLastUriEffectiveSchemeHttp_ = function() {
  var scheme = goog.uri.utils.getEffectiveScheme(String(this.lastUri_));
  return goog.net.XhrIo.HTTP_SCHEME_PATTERN.test(scheme);
};
goog.net.XhrIo.prototype.getReadyState = function() {
  return this.xhr_ ? (this.xhr_.readyState) : goog.net.XmlHttp.ReadyState.UNINITIALIZED;
};
goog.net.XhrIo.prototype.getStatus = function() {
  try {
    return this.getReadyState() > goog.net.XmlHttp.ReadyState.LOADED ? this.xhr_.status : -1;
  } catch (e) {
    this.logger_.warning("Can not get status: " + e.message);
    return-1;
  }
};
goog.net.XhrIo.prototype.getStatusText = function() {
  try {
    return this.getReadyState() > goog.net.XmlHttp.ReadyState.LOADED ? this.xhr_.statusText : "";
  } catch (e) {
    this.logger_.fine("Can not get status: " + e.message);
    return "";
  }
};
goog.net.XhrIo.prototype.getLastUri = function() {
  return String(this.lastUri_);
};
goog.net.XhrIo.prototype.getResponseText = function() {
  try {
    return this.xhr_ ? this.xhr_.responseText : "";
  } catch (e) {
    this.logger_.fine("Can not get responseText: " + e.message);
    return "";
  }
};
goog.net.XhrIo.prototype.getResponseBody = function() {
  try {
    if (this.xhr_ && "responseBody" in this.xhr_) {
      return this.xhr_["responseBody"];
    }
  } catch (e) {
    this.logger_.fine("Can not get responseBody: " + e.message);
  }
  return null;
};
goog.net.XhrIo.prototype.getResponseXml = function() {
  try {
    return this.xhr_ ? this.xhr_.responseXML : null;
  } catch (e) {
    this.logger_.fine("Can not get responseXML: " + e.message);
    return null;
  }
};
goog.net.XhrIo.prototype.getResponseJson = function(opt_xssiPrefix) {
  if (!this.xhr_) {
    return undefined;
  }
  var responseText = this.xhr_.responseText;
  if (opt_xssiPrefix && responseText.indexOf(opt_xssiPrefix) == 0) {
    responseText = responseText.substring(opt_xssiPrefix.length);
  }
  return goog.json.parse(responseText);
};
goog.net.XhrIo.prototype.getResponse = function() {
  try {
    if (!this.xhr_) {
      return null;
    }
    if ("response" in this.xhr_) {
      return this.xhr_.response;
    }
    switch(this.responseType_) {
      case goog.net.XhrIo.ResponseType.DEFAULT:
      ;
      case goog.net.XhrIo.ResponseType.TEXT:
        return this.xhr_.responseText;
      case goog.net.XhrIo.ResponseType.ARRAY_BUFFER:
        if ("mozResponseArrayBuffer" in this.xhr_) {
          return this.xhr_.mozResponseArrayBuffer;
        }
      ;
    }
    this.logger_.severe("Response type " + this.responseType_ + " is not " + "supported on this browser");
    return null;
  } catch (e) {
    this.logger_.fine("Can not get response: " + e.message);
    return null;
  }
};
goog.net.XhrIo.prototype.getResponseHeader = function(key) {
  return this.xhr_ && this.isComplete() ? this.xhr_.getResponseHeader(key) : undefined;
};
goog.net.XhrIo.prototype.getAllResponseHeaders = function() {
  return this.xhr_ && this.isComplete() ? this.xhr_.getAllResponseHeaders() : "";
};
goog.net.XhrIo.prototype.getLastErrorCode = function() {
  return this.lastErrorCode_;
};
goog.net.XhrIo.prototype.getLastError = function() {
  return goog.isString(this.lastError_) ? this.lastError_ : String(this.lastError_);
};
goog.net.XhrIo.prototype.formatMsg_ = function(msg) {
  return msg + " [" + this.lastMethod_ + " " + this.lastUri_ + " " + this.getStatus() + "]";
};
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = transformer(goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_);
});
goog.provide("goog.structs.Queue");
goog.require("goog.array");
goog.structs.Queue = function() {
  this.elements_ = [];
};
goog.structs.Queue.prototype.head_ = 0;
goog.structs.Queue.prototype.tail_ = 0;
goog.structs.Queue.prototype.enqueue = function(element) {
  this.elements_[this.tail_++] = element;
};
goog.structs.Queue.prototype.dequeue = function() {
  if (this.head_ == this.tail_) {
    return undefined;
  }
  var result = this.elements_[this.head_];
  delete this.elements_[this.head_];
  this.head_++;
  return result;
};
goog.structs.Queue.prototype.peek = function() {
  if (this.head_ == this.tail_) {
    return undefined;
  }
  return this.elements_[this.head_];
};
goog.structs.Queue.prototype.getCount = function() {
  return this.tail_ - this.head_;
};
goog.structs.Queue.prototype.isEmpty = function() {
  return this.tail_ - this.head_ == 0;
};
goog.structs.Queue.prototype.clear = function() {
  this.elements_.length = 0;
  this.head_ = 0;
  this.tail_ = 0;
};
goog.structs.Queue.prototype.contains = function(obj) {
  return goog.array.contains(this.elements_, obj);
};
goog.structs.Queue.prototype.remove = function(obj) {
  var index = goog.array.indexOf(this.elements_, obj);
  if (index < 0) {
    return false;
  }
  if (index == this.head_) {
    this.dequeue();
  } else {
    goog.array.removeAt(this.elements_, index);
    this.tail_--;
  }
  return true;
};
goog.structs.Queue.prototype.getValues = function() {
  return this.elements_.slice(this.head_, this.tail_);
};
goog.provide("goog.structs.Pool");
goog.require("goog.Disposable");
goog.require("goog.structs.Queue");
goog.require("goog.structs.Set");
goog.structs.Pool = function(opt_minCount, opt_maxCount) {
  goog.Disposable.call(this);
  this.minCount_ = opt_minCount || 0;
  this.maxCount_ = opt_maxCount || 10;
  if (this.minCount_ > this.maxCount_) {
    throw Error(goog.structs.Pool.ERROR_MIN_MAX_);
  }
  this.freeQueue_ = new goog.structs.Queue;
  this.inUseSet_ = new goog.structs.Set;
  this.delay = 0;
  this.lastAccess = null;
  this.adjustForMinMax();
  var magicProps = {canBeReused:0};
};
goog.inherits(goog.structs.Pool, goog.Disposable);
goog.structs.Pool.ERROR_MIN_MAX_ = "[goog.structs.Pool] Min can not be greater than max";
goog.structs.Pool.ERROR_DISPOSE_UNRELEASED_OBJS_ = "[goog.structs.Pool] Objects not released";
goog.structs.Pool.prototype.setMinimumCount = function(min) {
  if (min > this.maxCount_) {
    throw Error(goog.structs.Pool.ERROR_MIN_MAX_);
  }
  this.minCount_ = min;
  this.adjustForMinMax();
};
goog.structs.Pool.prototype.setMaximumCount = function(max) {
  if (max < this.minCount_) {
    throw Error(goog.structs.Pool.ERROR_MIN_MAX_);
  }
  this.maxCount_ = max;
  this.adjustForMinMax();
};
goog.structs.Pool.prototype.setDelay = function(delay) {
  this.delay = delay;
};
goog.structs.Pool.prototype.getObject = function() {
  var time = goog.now();
  if (goog.isDefAndNotNull(this.lastAccess) && time - this.lastAccess < this.delay) {
    return undefined;
  }
  var obj = this.removeFreeObject_();
  if (obj) {
    this.lastAccess = time;
    this.inUseSet_.add(obj);
  }
  return obj;
};
goog.structs.Pool.prototype.releaseObject = function(obj) {
  if (this.inUseSet_.remove(obj)) {
    this.addFreeObject(obj);
    return true;
  }
  return false;
};
goog.structs.Pool.prototype.removeFreeObject_ = function() {
  var obj;
  while (this.getFreeCount() > 0) {
    obj = (this.freeQueue_.dequeue());
    if (!this.objectCanBeReused(obj)) {
      this.adjustForMinMax();
    } else {
      break;
    }
  }
  if (!obj && this.getCount() < this.maxCount_) {
    obj = this.createObject();
  }
  return obj;
};
goog.structs.Pool.prototype.addFreeObject = function(obj) {
  this.inUseSet_.remove(obj);
  if (this.objectCanBeReused(obj) && this.getCount() < this.maxCount_) {
    this.freeQueue_.enqueue(obj);
  } else {
    this.disposeObject(obj);
  }
};
goog.structs.Pool.prototype.adjustForMinMax = function() {
  var freeQueue = this.freeQueue_;
  while (this.getCount() < this.minCount_) {
    freeQueue.enqueue(this.createObject());
  }
  while (this.getCount() > this.maxCount_ && this.getFreeCount() > 0) {
    this.disposeObject((freeQueue.dequeue()));
  }
};
goog.structs.Pool.prototype.createObject = function() {
  return{};
};
goog.structs.Pool.prototype.disposeObject = function(obj) {
  if (typeof obj.dispose == "function") {
    obj.dispose();
  } else {
    for (var i in obj) {
      obj[i] = null;
    }
  }
};
goog.structs.Pool.prototype.objectCanBeReused = function(obj) {
  if (typeof obj.canBeReused == "function") {
    return obj.canBeReused();
  }
  return true;
};
goog.structs.Pool.prototype.contains = function(obj) {
  return this.freeQueue_.contains(obj) || this.inUseSet_.contains(obj);
};
goog.structs.Pool.prototype.getCount = function() {
  return this.freeQueue_.getCount() + this.inUseSet_.getCount();
};
goog.structs.Pool.prototype.getInUseCount = function() {
  return this.inUseSet_.getCount();
};
goog.structs.Pool.prototype.getFreeCount = function() {
  return this.freeQueue_.getCount();
};
goog.structs.Pool.prototype.isEmpty = function() {
  return this.freeQueue_.isEmpty() && this.inUseSet_.isEmpty();
};
goog.structs.Pool.prototype.disposeInternal = function() {
  goog.structs.Pool.superClass_.disposeInternal.call(this);
  if (this.getInUseCount() > 0) {
    throw Error(goog.structs.Pool.ERROR_DISPOSE_UNRELEASED_OBJS_);
  }
  delete this.inUseSet_;
  var freeQueue = this.freeQueue_;
  while (!freeQueue.isEmpty()) {
    this.disposeObject((freeQueue.dequeue()));
  }
  delete this.freeQueue_;
};
goog.provide("goog.structs.Node");
goog.structs.Node = function(key, value) {
  this.key_ = key;
  this.value_ = value;
};
goog.structs.Node.prototype.getKey = function() {
  return this.key_;
};
goog.structs.Node.prototype.getValue = function() {
  return this.value_;
};
goog.structs.Node.prototype.clone = function() {
  return new goog.structs.Node(this.key_, this.value_);
};
goog.provide("goog.structs.Heap");
goog.require("goog.array");
goog.require("goog.object");
goog.require("goog.structs.Node");
goog.structs.Heap = function(opt_heap) {
  this.nodes_ = [];
  if (opt_heap) {
    this.insertAll(opt_heap);
  }
};
goog.structs.Heap.prototype.insert = function(key, value) {
  var node = new goog.structs.Node(key, value);
  var nodes = this.nodes_;
  nodes.push(node);
  this.moveUp_(nodes.length - 1);
};
goog.structs.Heap.prototype.insertAll = function(heap) {
  var keys, values;
  if (heap instanceof goog.structs.Heap) {
    keys = heap.getKeys();
    values = heap.getValues();
    if (heap.getCount() <= 0) {
      var nodes = this.nodes_;
      for (var i = 0;i < keys.length;i++) {
        nodes.push(new goog.structs.Node(keys[i], values[i]));
      }
      return;
    }
  } else {
    keys = goog.object.getKeys(heap);
    values = goog.object.getValues(heap);
  }
  for (var i = 0;i < keys.length;i++) {
    this.insert(keys[i], values[i]);
  }
};
goog.structs.Heap.prototype.remove = function() {
  var nodes = this.nodes_;
  var count = nodes.length;
  var rootNode = nodes[0];
  if (count <= 0) {
    return undefined;
  } else {
    if (count == 1) {
      goog.array.clear(nodes);
    } else {
      nodes[0] = nodes.pop();
      this.moveDown_(0);
    }
  }
  return rootNode.getValue();
};
goog.structs.Heap.prototype.peek = function() {
  var nodes = this.nodes_;
  if (nodes.length == 0) {
    return undefined;
  }
  return nodes[0].getValue();
};
goog.structs.Heap.prototype.peekKey = function() {
  return this.nodes_[0] && this.nodes_[0].getKey();
};
goog.structs.Heap.prototype.moveDown_ = function(index) {
  var nodes = this.nodes_;
  var count = nodes.length;
  var node = nodes[index];
  while (index < count >> 1) {
    var leftChildIndex = this.getLeftChildIndex_(index);
    var rightChildIndex = this.getRightChildIndex_(index);
    var smallerChildIndex = rightChildIndex < count && nodes[rightChildIndex].getKey() < nodes[leftChildIndex].getKey() ? rightChildIndex : leftChildIndex;
    if (nodes[smallerChildIndex].getKey() > node.getKey()) {
      break;
    }
    nodes[index] = nodes[smallerChildIndex];
    index = smallerChildIndex;
  }
  nodes[index] = node;
};
goog.structs.Heap.prototype.moveUp_ = function(index) {
  var nodes = this.nodes_;
  var node = nodes[index];
  while (index > 0) {
    var parentIndex = this.getParentIndex_(index);
    if (nodes[parentIndex].getKey() > node.getKey()) {
      nodes[index] = nodes[parentIndex];
      index = parentIndex;
    } else {
      break;
    }
  }
  nodes[index] = node;
};
goog.structs.Heap.prototype.getLeftChildIndex_ = function(index) {
  return index * 2 + 1;
};
goog.structs.Heap.prototype.getRightChildIndex_ = function(index) {
  return index * 2 + 2;
};
goog.structs.Heap.prototype.getParentIndex_ = function(index) {
  return index - 1 >> 1;
};
goog.structs.Heap.prototype.getValues = function() {
  var nodes = this.nodes_;
  var rv = [];
  var l = nodes.length;
  for (var i = 0;i < l;i++) {
    rv.push(nodes[i].getValue());
  }
  return rv;
};
goog.structs.Heap.prototype.getKeys = function() {
  var nodes = this.nodes_;
  var rv = [];
  var l = nodes.length;
  for (var i = 0;i < l;i++) {
    rv.push(nodes[i].getKey());
  }
  return rv;
};
goog.structs.Heap.prototype.containsValue = function(val) {
  return goog.array.some(this.nodes_, function(node) {
    return node.getValue() == val;
  });
};
goog.structs.Heap.prototype.containsKey = function(key) {
  return goog.array.some(this.nodes_, function(node) {
    return node.getKey() == key;
  });
};
goog.structs.Heap.prototype.clone = function() {
  return new goog.structs.Heap(this);
};
goog.structs.Heap.prototype.getCount = function() {
  return this.nodes_.length;
};
goog.structs.Heap.prototype.isEmpty = function() {
  return goog.array.isEmpty(this.nodes_);
};
goog.structs.Heap.prototype.clear = function() {
  goog.array.clear(this.nodes_);
};
goog.provide("goog.structs.PriorityQueue");
goog.require("goog.structs");
goog.require("goog.structs.Heap");
goog.structs.PriorityQueue = function() {
  goog.structs.Heap.call(this);
};
goog.inherits(goog.structs.PriorityQueue, goog.structs.Heap);
goog.structs.PriorityQueue.prototype.enqueue = function(priority, value) {
  this.insert(priority, value);
};
goog.structs.PriorityQueue.prototype.dequeue = function() {
  return this.remove();
};
goog.provide("goog.structs.PriorityPool");
goog.require("goog.structs.Pool");
goog.require("goog.structs.PriorityQueue");
goog.structs.PriorityPool = function(opt_minCount, opt_maxCount) {
  this.requestQueue_ = new goog.structs.PriorityQueue;
  goog.structs.Pool.call(this, opt_minCount, opt_maxCount);
};
goog.inherits(goog.structs.PriorityPool, goog.structs.Pool);
goog.structs.PriorityPool.prototype.delayTimeout_;
goog.structs.PriorityPool.DEFAULT_PRIORITY_ = 100;
goog.structs.PriorityPool.prototype.setDelay = function(delay) {
  goog.base(this, "setDelay", delay);
  if (!goog.isDefAndNotNull(this.lastAccess)) {
    return;
  }
  goog.global.clearTimeout(this.delayTimeout_);
  this.delayTimeout_ = goog.global.setTimeout(goog.bind(this.handleQueueRequests_, this), this.delay + this.lastAccess - goog.now());
  this.handleQueueRequests_();
};
goog.structs.PriorityPool.prototype.getObject = function(opt_callback, opt_priority) {
  if (!opt_callback) {
    var result = goog.base(this, "getObject");
    if (result && this.delay) {
      this.delayTimeout_ = goog.global.setTimeout(goog.bind(this.handleQueueRequests_, this), this.delay);
    }
    return result;
  }
  var priority = goog.isDef(opt_priority) ? opt_priority : goog.structs.PriorityPool.DEFAULT_PRIORITY_;
  this.requestQueue_.enqueue(priority, opt_callback);
  this.handleQueueRequests_();
  return undefined;
};
goog.structs.PriorityPool.prototype.handleQueueRequests_ = function() {
  var requestQueue = this.requestQueue_;
  while (requestQueue.getCount() > 0) {
    var obj = this.getObject();
    if (!obj) {
      return;
    } else {
      var requestCallback = requestQueue.dequeue();
      requestCallback.apply(this, [obj]);
    }
  }
};
goog.structs.PriorityPool.prototype.addFreeObject = function(obj) {
  goog.structs.PriorityPool.superClass_.addFreeObject.call(this, obj);
  this.handleQueueRequests_();
};
goog.structs.PriorityPool.prototype.adjustForMinMax = function() {
  goog.structs.PriorityPool.superClass_.adjustForMinMax.call(this);
  this.handleQueueRequests_();
};
goog.structs.PriorityPool.prototype.disposeInternal = function() {
  goog.structs.PriorityPool.superClass_.disposeInternal.call(this);
  goog.global.clearTimeout(this.delayTimeout_);
  this.requestQueue_.clear();
  this.requestQueue_ = null;
};
goog.provide("goog.net.XhrIoPool");
goog.require("goog.net.XhrIo");
goog.require("goog.structs");
goog.require("goog.structs.PriorityPool");
goog.net.XhrIoPool = function(opt_headers, opt_minCount, opt_maxCount) {
  goog.structs.PriorityPool.call(this, opt_minCount, opt_maxCount);
  this.headers_ = opt_headers;
};
goog.inherits(goog.net.XhrIoPool, goog.structs.PriorityPool);
goog.net.XhrIoPool.prototype.createObject = function() {
  var xhrIo = new goog.net.XhrIo;
  var headers = this.headers_;
  if (headers) {
    goog.structs.forEach(headers, function(value, key) {
      xhrIo.headers.set(key, value);
    });
  }
  return xhrIo;
};
goog.net.XhrIoPool.prototype.objectCanBeReused = function(obj) {
  var xhr = (obj);
  return!xhr.isDisposed() && !xhr.isActive();
};
goog.provide("goog.net.XhrManager");
goog.provide("goog.net.XhrManager.Event");
goog.provide("goog.net.XhrManager.Request");
goog.require("goog.Disposable");
goog.require("goog.events");
goog.require("goog.events.Event");
goog.require("goog.events.EventHandler");
goog.require("goog.events.EventTarget");
goog.require("goog.net.EventType");
goog.require("goog.net.XhrIo");
goog.require("goog.net.XhrIoPool");
goog.require("goog.structs.Map");
goog.net.XhrManager = function(opt_maxRetries, opt_headers, opt_minCount, opt_maxCount, opt_timeoutInterval) {
  goog.base(this);
  this.maxRetries_ = goog.isDef(opt_maxRetries) ? opt_maxRetries : 1;
  this.timeoutInterval_ = goog.isDef(opt_timeoutInterval) ? Math.max(0, opt_timeoutInterval) : 0;
  this.xhrPool_ = new goog.net.XhrIoPool(opt_headers, opt_minCount, opt_maxCount);
  this.requests_ = new goog.structs.Map;
  this.eventHandler_ = new goog.events.EventHandler(this);
};
goog.inherits(goog.net.XhrManager, goog.events.EventTarget);
goog.net.XhrManager.ERROR_ID_IN_USE_ = "[goog.net.XhrManager] ID in use";
goog.net.XhrManager.XHR_EVENT_TYPES_ = [goog.net.EventType.READY, goog.net.EventType.COMPLETE, goog.net.EventType.SUCCESS, goog.net.EventType.ERROR, goog.net.EventType.ABORT, goog.net.EventType.TIMEOUT];
goog.net.XhrManager.prototype.setTimeoutInterval = function(ms) {
  this.timeoutInterval_ = Math.max(0, ms);
};
goog.net.XhrManager.prototype.getOutstandingCount = function() {
  return this.requests_.getCount();
};
goog.net.XhrManager.prototype.getOutstandingRequestIds = function() {
  return this.requests_.getKeys();
};
goog.net.XhrManager.prototype.send = function(id, url, opt_method, opt_content, opt_headers, opt_priority, opt_callback, opt_maxRetries, opt_responseType) {
  var requests = this.requests_;
  if (requests.get(id)) {
    throw Error(goog.net.XhrManager.ERROR_ID_IN_USE_);
  }
  var request = new goog.net.XhrManager.Request(url, goog.bind(this.handleEvent_, this, id), opt_method, opt_content, opt_headers, opt_callback, goog.isDef(opt_maxRetries) ? opt_maxRetries : this.maxRetries_, opt_responseType);
  this.requests_.set(id, request);
  var callback = goog.bind(this.handleAvailableXhr_, this, id);
  this.xhrPool_.getObject(callback, opt_priority);
  return request;
};
goog.net.XhrManager.prototype.abort = function(id, opt_force) {
  var request = this.requests_.get(id);
  if (request) {
    var xhrIo = request.xhrIo;
    request.setAborted(true);
    if (opt_force) {
      if (xhrIo) {
        this.removeXhrListener_(xhrIo, request.getXhrEventCallback());
        goog.events.listenOnce(xhrIo, goog.net.EventType.READY, function() {
          this.xhrPool_.releaseObject(xhrIo);
        }, false, this);
      }
      this.requests_.remove(id);
    }
    if (xhrIo) {
      xhrIo.abort();
    }
  }
};
goog.net.XhrManager.prototype.handleAvailableXhr_ = function(id, xhrIo) {
  var request = this.requests_.get(id);
  if (request && !request.xhrIo) {
    this.addXhrListener_(xhrIo, request.getXhrEventCallback());
    xhrIo.setTimeoutInterval(this.timeoutInterval_);
    xhrIo.setResponseType(request.getResponseType());
    request.xhrIo = request.xhrLite = xhrIo;
    this.dispatchEvent(new goog.net.XhrManager.Event(goog.net.EventType.READY, this, id, xhrIo));
    this.retry_(id, xhrIo);
    if (request.getAborted()) {
      xhrIo.abort();
    }
  } else {
    this.xhrPool_.releaseObject(xhrIo);
  }
};
goog.net.XhrManager.prototype.handleEvent_ = function(id, e) {
  var xhrIo = (e.target);
  switch(e.type) {
    case goog.net.EventType.READY:
      this.retry_(id, xhrIo);
      break;
    case goog.net.EventType.COMPLETE:
      return this.handleComplete_(id, xhrIo, e);
    case goog.net.EventType.SUCCESS:
      this.handleSuccess_(id, xhrIo);
      break;
    case goog.net.EventType.TIMEOUT:
    ;
    case goog.net.EventType.ERROR:
      this.handleError_(id, xhrIo);
      break;
    case goog.net.EventType.ABORT:
      this.handleAbort_(id, xhrIo);
      break;
  }
  return null;
};
goog.net.XhrManager.prototype.retry_ = function(id, xhrIo) {
  var request = this.requests_.get(id);
  if (request && (!request.getCompleted() && !request.hasReachedMaxRetries())) {
    request.increaseAttemptCount();
    xhrIo.send(request.getUrl(), request.getMethod(), request.getContent(), request.getHeaders());
  } else {
    if (request) {
      this.removeXhrListener_(xhrIo, request.getXhrEventCallback());
      this.requests_.remove(id);
    }
    this.xhrPool_.releaseObject(xhrIo);
  }
};
goog.net.XhrManager.prototype.handleComplete_ = function(id, xhrIo, e) {
  var request = this.requests_.get(id);
  if (xhrIo.getLastErrorCode() == goog.net.ErrorCode.ABORT || (xhrIo.isSuccess() || request.hasReachedMaxRetries())) {
    this.dispatchEvent(new goog.net.XhrManager.Event(goog.net.EventType.COMPLETE, this, id, xhrIo));
    if (request) {
      request.setCompleted(true);
      if (request.getCompleteCallback()) {
        return request.getCompleteCallback().call(xhrIo, e);
      }
    }
  }
  return null;
};
goog.net.XhrManager.prototype.handleAbort_ = function(id, xhrIo) {
  this.dispatchEvent(new goog.net.XhrManager.Event(goog.net.EventType.ABORT, this, id, xhrIo));
};
goog.net.XhrManager.prototype.handleSuccess_ = function(id, xhrIo) {
  this.dispatchEvent(new goog.net.XhrManager.Event(goog.net.EventType.SUCCESS, this, id, xhrIo));
};
goog.net.XhrManager.prototype.handleError_ = function(id, xhrIo) {
  var request = this.requests_.get(id);
  if (request.hasReachedMaxRetries()) {
    this.dispatchEvent(new goog.net.XhrManager.Event(goog.net.EventType.ERROR, this, id, xhrIo));
  }
};
goog.net.XhrManager.prototype.removeXhrListener_ = function(xhrIo, func, opt_types) {
  var types = opt_types || goog.net.XhrManager.XHR_EVENT_TYPES_;
  this.eventHandler_.unlisten(xhrIo, types, func);
};
goog.net.XhrManager.prototype.addXhrListener_ = function(xhrIo, func, opt_types) {
  var types = opt_types || goog.net.XhrManager.XHR_EVENT_TYPES_;
  this.eventHandler_.listen(xhrIo, types, func);
};
goog.net.XhrManager.prototype.disposeInternal = function() {
  goog.net.XhrManager.superClass_.disposeInternal.call(this);
  this.xhrPool_.dispose();
  this.xhrPool_ = null;
  this.eventHandler_.dispose();
  this.eventHandler_ = null;
  var requests = this.requests_;
  goog.structs.forEach(requests, function(value, key) {
    value.dispose();
  });
  requests.clear();
  this.requests_ = null;
};
goog.net.XhrManager.Event = function(type, target, id, xhrIo) {
  goog.events.Event.call(this, type, target);
  this.id = id;
  this.xhrIo = xhrIo;
  this.xhrLite = (xhrIo);
};
goog.inherits(goog.net.XhrManager.Event, goog.events.Event);
goog.net.XhrManager.Request = function(url, xhrEventCallback, opt_method, opt_content, opt_headers, opt_callback, opt_maxRetries, opt_responseType) {
  goog.Disposable.call(this);
  this.url_ = url;
  this.method_ = opt_method || "GET";
  this.content_ = opt_content;
  this.headers_ = opt_headers || null;
  this.maxRetries_ = goog.isDef(opt_maxRetries) ? opt_maxRetries : 1;
  this.attemptCount_ = 0;
  this.completed_ = false;
  this.aborted_ = false;
  this.xhrEventCallback_ = xhrEventCallback;
  this.completeCallback_ = opt_callback;
  this.responseType_ = opt_responseType || goog.net.XhrIo.ResponseType.DEFAULT;
  this.xhrIo = null;
};
goog.inherits(goog.net.XhrManager.Request, goog.Disposable);
goog.net.XhrManager.Request.prototype.getUrl = function() {
  return this.url_;
};
goog.net.XhrManager.Request.prototype.getMethod = function() {
  return this.method_;
};
goog.net.XhrManager.Request.prototype.getContent = function() {
  return this.content_;
};
goog.net.XhrManager.Request.prototype.getHeaders = function() {
  return this.headers_;
};
goog.net.XhrManager.Request.prototype.getMaxRetries = function() {
  return this.maxRetries_;
};
goog.net.XhrManager.Request.prototype.getAttemptCount = function() {
  return this.attemptCount_;
};
goog.net.XhrManager.Request.prototype.increaseAttemptCount = function() {
  this.attemptCount_++;
};
goog.net.XhrManager.Request.prototype.hasReachedMaxRetries = function() {
  return this.attemptCount_ > this.maxRetries_;
};
goog.net.XhrManager.Request.prototype.setCompleted = function(complete) {
  this.completed_ = complete;
};
goog.net.XhrManager.Request.prototype.getCompleted = function() {
  return this.completed_;
};
goog.net.XhrManager.Request.prototype.setAborted = function(aborted) {
  this.aborted_ = aborted;
};
goog.net.XhrManager.Request.prototype.getAborted = function() {
  return this.aborted_;
};
goog.net.XhrManager.Request.prototype.getXhrEventCallback = function() {
  return this.xhrEventCallback_;
};
goog.net.XhrManager.Request.prototype.getCompleteCallback = function() {
  return this.completeCallback_;
};
goog.net.XhrManager.Request.prototype.getResponseType = function() {
  return this.responseType_;
};
goog.net.XhrManager.Request.prototype.disposeInternal = function() {
  goog.net.XhrManager.Request.superClass_.disposeInternal.call(this);
  delete this.xhrEventCallback_;
  delete this.completeCallback_;
};
goog.provide("goog.Uri");
goog.provide("goog.Uri.QueryData");
goog.require("goog.array");
goog.require("goog.string");
goog.require("goog.structs");
goog.require("goog.structs.Map");
goog.require("goog.uri.utils");
goog.require("goog.uri.utils.ComponentIndex");
goog.Uri = function(opt_uri, opt_ignoreCase) {
  var m;
  if (opt_uri instanceof goog.Uri) {
    this.ignoreCase_ = goog.isDef(opt_ignoreCase) ? opt_ignoreCase : opt_uri.getIgnoreCase();
    this.setScheme(opt_uri.getScheme());
    this.setUserInfo(opt_uri.getUserInfo());
    this.setDomain(opt_uri.getDomain());
    this.setPort(opt_uri.getPort());
    this.setPath(opt_uri.getPath());
    this.setQueryData(opt_uri.getQueryData().clone());
    this.setFragment(opt_uri.getFragment());
  } else {
    if (opt_uri && (m = goog.uri.utils.split(String(opt_uri)))) {
      this.ignoreCase_ = !!opt_ignoreCase;
      this.setScheme(m[goog.uri.utils.ComponentIndex.SCHEME] || "", true);
      this.setUserInfo(m[goog.uri.utils.ComponentIndex.USER_INFO] || "", true);
      this.setDomain(m[goog.uri.utils.ComponentIndex.DOMAIN] || "", true);
      this.setPort(m[goog.uri.utils.ComponentIndex.PORT]);
      this.setPath(m[goog.uri.utils.ComponentIndex.PATH] || "", true);
      this.setQueryData(m[goog.uri.utils.ComponentIndex.QUERY_DATA] || "", true);
      this.setFragment(m[goog.uri.utils.ComponentIndex.FRAGMENT] || "", true);
    } else {
      this.ignoreCase_ = !!opt_ignoreCase;
      this.queryData_ = new goog.Uri.QueryData(null, null, this.ignoreCase_);
    }
  }
};
goog.Uri.preserveParameterTypesCompatibilityFlag = false;
goog.Uri.RANDOM_PARAM = goog.uri.utils.StandardQueryParam.RANDOM;
goog.Uri.prototype.scheme_ = "";
goog.Uri.prototype.userInfo_ = "";
goog.Uri.prototype.domain_ = "";
goog.Uri.prototype.port_ = null;
goog.Uri.prototype.path_ = "";
goog.Uri.prototype.queryData_;
goog.Uri.prototype.fragment_ = "";
goog.Uri.prototype.isReadOnly_ = false;
goog.Uri.prototype.ignoreCase_ = false;
goog.Uri.prototype.toString = function() {
  var out = [];
  var scheme = this.getScheme();
  if (scheme) {
    out.push(goog.Uri.encodeSpecialChars_(scheme, goog.Uri.reDisallowedInSchemeOrUserInfo_), ":");
  }
  var domain = this.getDomain();
  if (domain) {
    out.push("//");
    var userInfo = this.getUserInfo();
    if (userInfo) {
      out.push(goog.Uri.encodeSpecialChars_(userInfo, goog.Uri.reDisallowedInSchemeOrUserInfo_), "@");
    }
    out.push(goog.string.urlEncode(domain));
    var port = this.getPort();
    if (port != null) {
      out.push(":", String(port));
    }
  }
  var path = this.getPath();
  if (path) {
    if (this.hasDomain() && path.charAt(0) != "/") {
      out.push("/");
    }
    out.push(goog.Uri.encodeSpecialChars_(path, path.charAt(0) == "/" ? goog.Uri.reDisallowedInAbsolutePath_ : goog.Uri.reDisallowedInRelativePath_));
  }
  var query = this.getEncodedQuery();
  if (query) {
    out.push("?", query);
  }
  var fragment = this.getFragment();
  if (fragment) {
    out.push("#", goog.Uri.encodeSpecialChars_(fragment, goog.Uri.reDisallowedInFragment_));
  }
  return out.join("");
};
goog.Uri.prototype.resolve = function(relativeUri) {
  var absoluteUri = this.clone();
  var overridden = relativeUri.hasScheme();
  if (overridden) {
    absoluteUri.setScheme(relativeUri.getScheme());
  } else {
    overridden = relativeUri.hasUserInfo();
  }
  if (overridden) {
    absoluteUri.setUserInfo(relativeUri.getUserInfo());
  } else {
    overridden = relativeUri.hasDomain();
  }
  if (overridden) {
    absoluteUri.setDomain(relativeUri.getDomain());
  } else {
    overridden = relativeUri.hasPort();
  }
  var path = relativeUri.getPath();
  if (overridden) {
    absoluteUri.setPort(relativeUri.getPort());
  } else {
    overridden = relativeUri.hasPath();
    if (overridden) {
      if (path.charAt(0) != "/") {
        if (this.hasDomain() && !this.hasPath()) {
          path = "/" + path;
        } else {
          var lastSlashIndex = absoluteUri.getPath().lastIndexOf("/");
          if (lastSlashIndex != -1) {
            path = absoluteUri.getPath().substr(0, lastSlashIndex + 1) + path;
          }
        }
      }
      path = goog.Uri.removeDotSegments(path);
    }
  }
  if (overridden) {
    absoluteUri.setPath(path);
  } else {
    overridden = relativeUri.hasQuery();
  }
  if (overridden) {
    absoluteUri.setQueryData(relativeUri.getDecodedQuery());
  } else {
    overridden = relativeUri.hasFragment();
  }
  if (overridden) {
    absoluteUri.setFragment(relativeUri.getFragment());
  }
  return absoluteUri;
};
goog.Uri.prototype.clone = function() {
  return new goog.Uri(this);
};
goog.Uri.prototype.getScheme = function() {
  return this.scheme_;
};
goog.Uri.prototype.setScheme = function(newScheme, opt_decode) {
  this.enforceReadOnly();
  this.scheme_ = opt_decode ? goog.Uri.decodeOrEmpty_(newScheme) : newScheme;
  if (this.scheme_) {
    this.scheme_ = this.scheme_.replace(/:$/, "");
  }
  return this;
};
goog.Uri.prototype.hasScheme = function() {
  return!!this.scheme_;
};
goog.Uri.prototype.getUserInfo = function() {
  return this.userInfo_;
};
goog.Uri.prototype.setUserInfo = function(newUserInfo, opt_decode) {
  this.enforceReadOnly();
  this.userInfo_ = opt_decode ? goog.Uri.decodeOrEmpty_(newUserInfo) : newUserInfo;
  return this;
};
goog.Uri.prototype.hasUserInfo = function() {
  return!!this.userInfo_;
};
goog.Uri.prototype.getDomain = function() {
  return this.domain_;
};
goog.Uri.prototype.setDomain = function(newDomain, opt_decode) {
  this.enforceReadOnly();
  this.domain_ = opt_decode ? goog.Uri.decodeOrEmpty_(newDomain) : newDomain;
  return this;
};
goog.Uri.prototype.hasDomain = function() {
  return!!this.domain_;
};
goog.Uri.prototype.getPort = function() {
  return this.port_;
};
goog.Uri.prototype.setPort = function(newPort) {
  this.enforceReadOnly();
  if (newPort) {
    newPort = Number(newPort);
    if (isNaN(newPort) || newPort < 0) {
      throw Error("Bad port number " + newPort);
    }
    this.port_ = newPort;
  } else {
    this.port_ = null;
  }
  return this;
};
goog.Uri.prototype.hasPort = function() {
  return this.port_ != null;
};
goog.Uri.prototype.getPath = function() {
  return this.path_;
};
goog.Uri.prototype.setPath = function(newPath, opt_decode) {
  this.enforceReadOnly();
  this.path_ = opt_decode ? goog.Uri.decodeOrEmpty_(newPath) : newPath;
  return this;
};
goog.Uri.prototype.hasPath = function() {
  return!!this.path_;
};
goog.Uri.prototype.hasQuery = function() {
  return this.queryData_.toString() !== "";
};
goog.Uri.prototype.setQueryData = function(queryData, opt_decode) {
  this.enforceReadOnly();
  if (queryData instanceof goog.Uri.QueryData) {
    this.queryData_ = queryData;
    this.queryData_.setIgnoreCase(this.ignoreCase_);
  } else {
    if (!opt_decode) {
      queryData = goog.Uri.encodeSpecialChars_(queryData, goog.Uri.reDisallowedInQuery_);
    }
    this.queryData_ = new goog.Uri.QueryData(queryData, null, this.ignoreCase_);
  }
  return this;
};
goog.Uri.prototype.setQuery = function(newQuery, opt_decode) {
  return this.setQueryData(newQuery, opt_decode);
};
goog.Uri.prototype.getEncodedQuery = function() {
  return this.queryData_.toString();
};
goog.Uri.prototype.getDecodedQuery = function() {
  return this.queryData_.toDecodedString();
};
goog.Uri.prototype.getQueryData = function() {
  return this.queryData_;
};
goog.Uri.prototype.getQuery = function() {
  return this.getEncodedQuery();
};
goog.Uri.prototype.setParameterValue = function(key, value) {
  this.enforceReadOnly();
  this.queryData_.set(key, value);
  return this;
};
goog.Uri.prototype.setParameterValues = function(key, values) {
  this.enforceReadOnly();
  if (!goog.isArray(values)) {
    values = [String(values)];
  }
  this.queryData_.setValues(key, (values));
  return this;
};
goog.Uri.prototype.getParameterValues = function(name) {
  return this.queryData_.getValues(name);
};
goog.Uri.prototype.getParameterValue = function(paramName) {
  return(this.queryData_.get(paramName));
};
goog.Uri.prototype.getFragment = function() {
  return this.fragment_;
};
goog.Uri.prototype.setFragment = function(newFragment, opt_decode) {
  this.enforceReadOnly();
  this.fragment_ = opt_decode ? goog.Uri.decodeOrEmpty_(newFragment) : newFragment;
  return this;
};
goog.Uri.prototype.hasFragment = function() {
  return!!this.fragment_;
};
goog.Uri.prototype.hasSameDomainAs = function(uri2) {
  return(!this.hasDomain() && !uri2.hasDomain() || this.getDomain() == uri2.getDomain()) && (!this.hasPort() && !uri2.hasPort() || this.getPort() == uri2.getPort());
};
goog.Uri.prototype.makeUnique = function() {
  this.enforceReadOnly();
  this.setParameterValue(goog.Uri.RANDOM_PARAM, goog.string.getRandomString());
  return this;
};
goog.Uri.prototype.removeParameter = function(key) {
  this.enforceReadOnly();
  this.queryData_.remove(key);
  return this;
};
goog.Uri.prototype.setReadOnly = function(isReadOnly) {
  this.isReadOnly_ = isReadOnly;
  return this;
};
goog.Uri.prototype.isReadOnly = function() {
  return this.isReadOnly_;
};
goog.Uri.prototype.enforceReadOnly = function() {
  if (this.isReadOnly_) {
    throw Error("Tried to modify a read-only Uri");
  }
};
goog.Uri.prototype.setIgnoreCase = function(ignoreCase) {
  this.ignoreCase_ = ignoreCase;
  if (this.queryData_) {
    this.queryData_.setIgnoreCase(ignoreCase);
  }
  return this;
};
goog.Uri.prototype.getIgnoreCase = function() {
  return this.ignoreCase_;
};
goog.Uri.parse = function(uri, opt_ignoreCase) {
  return uri instanceof goog.Uri ? uri.clone() : new goog.Uri(uri, opt_ignoreCase);
};
goog.Uri.create = function(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_query, opt_fragment, opt_ignoreCase) {
  var uri = new goog.Uri(null, opt_ignoreCase);
  opt_scheme && uri.setScheme(opt_scheme);
  opt_userInfo && uri.setUserInfo(opt_userInfo);
  opt_domain && uri.setDomain(opt_domain);
  opt_port && uri.setPort(opt_port);
  opt_path && uri.setPath(opt_path);
  opt_query && uri.setQueryData(opt_query);
  opt_fragment && uri.setFragment(opt_fragment);
  return uri;
};
goog.Uri.resolve = function(base, rel) {
  if (!(base instanceof goog.Uri)) {
    base = goog.Uri.parse(base);
  }
  if (!(rel instanceof goog.Uri)) {
    rel = goog.Uri.parse(rel);
  }
  return base.resolve(rel);
};
goog.Uri.removeDotSegments = function(path) {
  if (path == ".." || path == ".") {
    return "";
  } else {
    if (!goog.string.contains(path, "./") && !goog.string.contains(path, "/.")) {
      return path;
    } else {
      var leadingSlash = goog.string.startsWith(path, "/");
      var segments = path.split("/");
      var out = [];
      for (var pos = 0;pos < segments.length;) {
        var segment = segments[pos++];
        if (segment == ".") {
          if (leadingSlash && pos == segments.length) {
            out.push("");
          }
        } else {
          if (segment == "..") {
            if (out.length > 1 || out.length == 1 && out[0] != "") {
              out.pop();
            }
            if (leadingSlash && pos == segments.length) {
              out.push("");
            }
          } else {
            out.push(segment);
            leadingSlash = true;
          }
        }
      }
      return out.join("/");
    }
  }
};
goog.Uri.decodeOrEmpty_ = function(val) {
  return val ? decodeURIComponent(val) : "";
};
goog.Uri.encodeSpecialChars_ = function(unescapedPart, extra) {
  if (goog.isString(unescapedPart)) {
    return encodeURI(unescapedPart).replace(extra, goog.Uri.encodeChar_);
  }
  return null;
};
goog.Uri.encodeChar_ = function(ch) {
  var n = ch.charCodeAt(0);
  return "%" + (n >> 4 & 15).toString(16) + (n & 15).toString(16);
};
goog.Uri.reDisallowedInSchemeOrUserInfo_ = /[#\/\?@]/g;
goog.Uri.reDisallowedInRelativePath_ = /[\#\?:]/g;
goog.Uri.reDisallowedInAbsolutePath_ = /[\#\?]/g;
goog.Uri.reDisallowedInQuery_ = /[\#\?@]/g;
goog.Uri.reDisallowedInFragment_ = /#/g;
goog.Uri.haveSameDomain = function(uri1String, uri2String) {
  var pieces1 = goog.uri.utils.split(uri1String);
  var pieces2 = goog.uri.utils.split(uri2String);
  return pieces1[goog.uri.utils.ComponentIndex.DOMAIN] == pieces2[goog.uri.utils.ComponentIndex.DOMAIN] && pieces1[goog.uri.utils.ComponentIndex.PORT] == pieces2[goog.uri.utils.ComponentIndex.PORT];
};
goog.Uri.QueryData = function(opt_query, opt_uri, opt_ignoreCase) {
  this.encodedQuery_ = opt_query || null;
  this.ignoreCase_ = !!opt_ignoreCase;
};
goog.Uri.QueryData.prototype.ensureKeyMapInitialized_ = function() {
  if (!this.keyMap_) {
    this.keyMap_ = new goog.structs.Map;
    this.count_ = 0;
    if (this.encodedQuery_) {
      var pairs = this.encodedQuery_.split("\x26");
      for (var i = 0;i < pairs.length;i++) {
        var indexOfEquals = pairs[i].indexOf("\x3d");
        var name = null;
        var value = null;
        if (indexOfEquals >= 0) {
          name = pairs[i].substring(0, indexOfEquals);
          value = pairs[i].substring(indexOfEquals + 1);
        } else {
          name = pairs[i];
        }
        name = goog.string.urlDecode(name);
        name = this.getKeyName_(name);
        this.add(name, value ? goog.string.urlDecode(value) : "");
      }
    }
  }
};
goog.Uri.QueryData.createFromMap = function(map, opt_uri, opt_ignoreCase) {
  var keys = goog.structs.getKeys(map);
  if (typeof keys == "undefined") {
    throw Error("Keys are undefined");
  }
  var queryData = new goog.Uri.QueryData(null, null, opt_ignoreCase);
  var values = goog.structs.getValues(map);
  for (var i = 0;i < keys.length;i++) {
    var key = keys[i];
    var value = values[i];
    if (!goog.isArray(value)) {
      queryData.add(key, value);
    } else {
      queryData.setValues(key, value);
    }
  }
  return queryData;
};
goog.Uri.QueryData.createFromKeysValues = function(keys, values, opt_uri, opt_ignoreCase) {
  if (keys.length != values.length) {
    throw Error("Mismatched lengths for keys/values");
  }
  var queryData = new goog.Uri.QueryData(null, null, opt_ignoreCase);
  for (var i = 0;i < keys.length;i++) {
    queryData.add(keys[i], values[i]);
  }
  return queryData;
};
goog.Uri.QueryData.prototype.keyMap_ = null;
goog.Uri.QueryData.prototype.count_ = null;
goog.Uri.QueryData.prototype.getCount = function() {
  this.ensureKeyMapInitialized_();
  return this.count_;
};
goog.Uri.QueryData.prototype.add = function(key, value) {
  this.ensureKeyMapInitialized_();
  this.invalidateCache_();
  key = this.getKeyName_(key);
  var values = this.keyMap_.get(key);
  if (!values) {
    this.keyMap_.set(key, values = []);
  }
  values.push(value);
  this.count_++;
  return this;
};
goog.Uri.QueryData.prototype.remove = function(key) {
  this.ensureKeyMapInitialized_();
  key = this.getKeyName_(key);
  if (this.keyMap_.containsKey(key)) {
    this.invalidateCache_();
    this.count_ -= this.keyMap_.get(key).length;
    return this.keyMap_.remove(key);
  }
  return false;
};
goog.Uri.QueryData.prototype.clear = function() {
  this.invalidateCache_();
  this.keyMap_ = null;
  this.count_ = 0;
};
goog.Uri.QueryData.prototype.isEmpty = function() {
  this.ensureKeyMapInitialized_();
  return this.count_ == 0;
};
goog.Uri.QueryData.prototype.containsKey = function(key) {
  this.ensureKeyMapInitialized_();
  key = this.getKeyName_(key);
  return this.keyMap_.containsKey(key);
};
goog.Uri.QueryData.prototype.containsValue = function(value) {
  var vals = this.getValues();
  return goog.array.contains(vals, value);
};
goog.Uri.QueryData.prototype.getKeys = function() {
  this.ensureKeyMapInitialized_();
  var vals = (this.keyMap_.getValues());
  var keys = this.keyMap_.getKeys();
  var rv = [];
  for (var i = 0;i < keys.length;i++) {
    var val = vals[i];
    for (var j = 0;j < val.length;j++) {
      rv.push(keys[i]);
    }
  }
  return rv;
};
goog.Uri.QueryData.prototype.getValues = function(opt_key) {
  this.ensureKeyMapInitialized_();
  var rv = [];
  if (opt_key) {
    if (this.containsKey(opt_key)) {
      rv = goog.array.concat(rv, this.keyMap_.get(this.getKeyName_(opt_key)));
    }
  } else {
    var values = (this.keyMap_.getValues());
    for (var i = 0;i < values.length;i++) {
      rv = goog.array.concat(rv, values[i]);
    }
  }
  return rv;
};
goog.Uri.QueryData.prototype.set = function(key, value) {
  this.ensureKeyMapInitialized_();
  this.invalidateCache_();
  key = this.getKeyName_(key);
  if (this.containsKey(key)) {
    this.count_ -= this.keyMap_.get(key).length;
  }
  this.keyMap_.set(key, [value]);
  this.count_++;
  return this;
};
goog.Uri.QueryData.prototype.get = function(key, opt_default) {
  var values = key ? this.getValues(key) : [];
  if (goog.Uri.preserveParameterTypesCompatibilityFlag) {
    return values.length > 0 ? values[0] : opt_default;
  } else {
    return values.length > 0 ? String(values[0]) : opt_default;
  }
};
goog.Uri.QueryData.prototype.setValues = function(key, values) {
  this.remove(key);
  if (values.length > 0) {
    this.invalidateCache_();
    this.keyMap_.set(this.getKeyName_(key), goog.array.clone(values));
    this.count_ += values.length;
  }
};
goog.Uri.QueryData.prototype.toString = function() {
  if (this.encodedQuery_) {
    return this.encodedQuery_;
  }
  if (!this.keyMap_) {
    return "";
  }
  var sb = [];
  var keys = this.keyMap_.getKeys();
  for (var i = 0;i < keys.length;i++) {
    var key = keys[i];
    var encodedKey = goog.string.urlEncode(key);
    var val = this.getValues(key);
    for (var j = 0;j < val.length;j++) {
      var param = encodedKey;
      if (val[j] !== "") {
        param += "\x3d" + goog.string.urlEncode(val[j]);
      }
      sb.push(param);
    }
  }
  return this.encodedQuery_ = sb.join("\x26");
};
goog.Uri.QueryData.prototype.toDecodedString = function() {
  return goog.Uri.decodeOrEmpty_(this.toString());
};
goog.Uri.QueryData.prototype.invalidateCache_ = function() {
  this.encodedQuery_ = null;
};
goog.Uri.QueryData.prototype.filterKeys = function(keys) {
  this.ensureKeyMapInitialized_();
  goog.structs.forEach(this.keyMap_, function(value, key, map) {
    if (!goog.array.contains(keys, key)) {
      this.remove(key);
    }
  }, this);
  return this;
};
goog.Uri.QueryData.prototype.clone = function() {
  var rv = new goog.Uri.QueryData;
  rv.encodedQuery_ = this.encodedQuery_;
  if (this.keyMap_) {
    rv.keyMap_ = this.keyMap_.clone();
    rv.count_ = this.count_;
  }
  return rv;
};
goog.Uri.QueryData.prototype.getKeyName_ = function(arg) {
  var keyName = String(arg);
  if (this.ignoreCase_) {
    keyName = keyName.toLowerCase();
  }
  return keyName;
};
goog.Uri.QueryData.prototype.setIgnoreCase = function(ignoreCase) {
  var resetKeys = ignoreCase && !this.ignoreCase_;
  if (resetKeys) {
    this.ensureKeyMapInitialized_();
    this.invalidateCache_();
    goog.structs.forEach(this.keyMap_, function(value, key) {
      var lowerCase = key.toLowerCase();
      if (key != lowerCase) {
        this.remove(key);
        this.setValues(lowerCase, value);
      }
    }, this);
  }
  this.ignoreCase_ = ignoreCase;
};
goog.Uri.QueryData.prototype.extend = function(var_args) {
  for (var i = 0;i < arguments.length;i++) {
    var data = arguments[i];
    goog.structs.forEach(data, function(value, key) {
      this.add(key, value);
    }, this);
  }
};
goog.provide("clojure.string");
goog.require("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
goog.require("goog.string");
clojure.string.seq_reverse = function seq_reverse(coll) {
  return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
};
clojure.string.reverse = function reverse(s) {
  return s.split("").reverse().join("");
};
clojure.string.replace = function replace(s, match, replacement) {
  if (typeof match === "string") {
    return s.replace(new RegExp(goog.string.regExpEscape(match), "g"), replacement);
  } else {
    if (cljs.core.truth_(match.hasOwnProperty("source"))) {
      return s.replace(new RegExp(match.source, "g"), replacement);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw[cljs.core.str("Invalid match arg: "), cljs.core.str(match)].join("");
      } else {
        return null;
      }
    }
  }
};
clojure.string.replace_first = function replace_first(s, match, replacement) {
  return s.replace(match, replacement);
};
clojure.string.join = function() {
  var join = null;
  var join__1 = function(coll) {
    return cljs.core.apply.call(null, cljs.core.str, coll);
  };
  var join__2 = function(separator, coll) {
    return cljs.core.apply.call(null, cljs.core.str, cljs.core.interpose.call(null, separator, coll));
  };
  join = function(separator, coll) {
    switch(arguments.length) {
      case 1:
        return join__1.call(this, separator);
      case 2:
        return join__2.call(this, separator, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  join.cljs$core$IFn$_invoke$arity$1 = join__1;
  join.cljs$core$IFn$_invoke$arity$2 = join__2;
  return join;
}();
clojure.string.upper_case = function upper_case(s) {
  return s.toUpperCase();
};
clojure.string.lower_case = function lower_case(s) {
  return s.toLowerCase();
};
clojure.string.capitalize = function capitalize(s) {
  if (cljs.core.count.call(null, s) < 2) {
    return clojure.string.upper_case.call(null, s);
  } else {
    return[cljs.core.str(clojure.string.upper_case.call(null, cljs.core.subs.call(null, s, 0, 1))), cljs.core.str(clojure.string.lower_case.call(null, cljs.core.subs.call(null, s, 1)))].join("");
  }
};
clojure.string.pop_last_while_empty = function pop_last_while_empty(v) {
  var v__$1 = v;
  while (true) {
    if (cljs.core._EQ_.call(null, "", cljs.core.peek.call(null, v__$1))) {
      var G__108516 = cljs.core.pop.call(null, v__$1);
      v__$1 = G__108516;
      continue;
    } else {
      return v__$1;
    }
    break;
  }
};
clojure.string.discard_trailing_if_needed = function discard_trailing_if_needed(limit, v) {
  if (cljs.core._EQ_.call(null, 0, limit)) {
    return clojure.string.pop_last_while_empty.call(null, v);
  } else {
    return v;
  }
};
clojure.string.split_with_empty_regex = function split_with_empty_regex(s, limit) {
  if (limit <= 0 || limit >= 2 + cljs.core.count.call(null, s)) {
    return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s)))), "");
  } else {
    var pred__108520 = cljs.core._EQ_;
    var expr__108521 = limit;
    if (cljs.core.truth_(pred__108520.call(null, 1, expr__108521))) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [s], null);
    } else {
      if (cljs.core.truth_(pred__108520.call(null, 2, expr__108521))) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["", s], null);
      } else {
        var c = limit - 2;
        return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.subvec.call(null, cljs.core.vec.call(null, cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s))), 0, c))), cljs.core.subs.call(null, s, c));
      }
    }
  }
};
clojure.string.split = function() {
  var split = null;
  var split__2 = function(s, re) {
    return split.call(null, s, re, 0);
  };
  var split__3 = function(s, re, limit) {
    return clojure.string.discard_trailing_if_needed.call(null, limit, cljs.core._EQ_.call(null, [cljs.core.str(re)].join(""), "/(?:)/") ? clojure.string.split_with_empty_regex.call(null, s, limit) : limit < 1 ? cljs.core.vec.call(null, [cljs.core.str(s)].join("").split(re)) : function() {
      var s__$1 = s;
      var limit__$1 = limit;
      var parts = cljs.core.PersistentVector.EMPTY;
      while (true) {
        if (cljs.core._EQ_.call(null, limit__$1, 1)) {
          return cljs.core.conj.call(null, parts, s__$1);
        } else {
          var temp__4090__auto__ = cljs.core.re_find.call(null, re, s__$1);
          if (cljs.core.truth_(temp__4090__auto__)) {
            var m = temp__4090__auto__;
            var index = s__$1.indexOf(m);
            var G__108523 = s__$1.substring(index + cljs.core.count.call(null, m));
            var G__108524 = limit__$1 - 1;
            var G__108525 = cljs.core.conj.call(null, parts, s__$1.substring(0, index));
            s__$1 = G__108523;
            limit__$1 = G__108524;
            parts = G__108525;
            continue;
          } else {
            return cljs.core.conj.call(null, parts, s__$1);
          }
        }
        break;
      }
    }());
  };
  split = function(s, re, limit) {
    switch(arguments.length) {
      case 2:
        return split__2.call(this, s, re);
      case 3:
        return split__3.call(this, s, re, limit);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  split.cljs$core$IFn$_invoke$arity$2 = split__2;
  split.cljs$core$IFn$_invoke$arity$3 = split__3;
  return split;
}();
clojure.string.split_lines = function split_lines(s) {
  return clojure.string.split.call(null, s, /\n|\r\n/);
};
clojure.string.trim = function trim(s) {
  return goog.string.trim(s);
};
clojure.string.triml = function triml(s) {
  return goog.string.trimLeft(s);
};
clojure.string.trimr = function trimr(s) {
  return goog.string.trimRight(s);
};
clojure.string.trim_newline = function trim_newline(s) {
  var index = s.length;
  while (true) {
    if (index === 0) {
      return "";
    } else {
      var ch = cljs.core.get.call(null, s, index - 1);
      if (cljs.core._EQ_.call(null, ch, "\n") || cljs.core._EQ_.call(null, ch, "\r")) {
        var G__108526 = index - 1;
        index = G__108526;
        continue;
      } else {
        return s.substring(0, index);
      }
    }
    break;
  }
};
clojure.string.blank_QMARK_ = function blank_QMARK_(s) {
  return goog.string.isEmptySafe(s);
};
clojure.string.escape = function escape__$1(s, cmap) {
  var buffer = new goog.string.StringBuffer;
  var length = s.length;
  var index = 0;
  while (true) {
    if (cljs.core._EQ_.call(null, length, index)) {
      return buffer.toString();
    } else {
      var ch = s.charAt(index);
      var temp__4090__auto___108527 = cljs.core.get.call(null, cmap, ch);
      if (cljs.core.truth_(temp__4090__auto___108527)) {
        var replacement_108528 = temp__4090__auto___108527;
        buffer.append([cljs.core.str(replacement_108528)].join(""));
      } else {
        buffer.append(ch);
      }
      var G__108529 = index + 1;
      index = G__108529;
      continue;
    }
    break;
  }
};
goog.provide("cljs.reader");
goog.require("cljs.core");
goog.require("goog.string");
goog.require("goog.string");
cljs.reader.PushbackReader = function() {
  var obj109097 = {};
  return obj109097;
}();
cljs.reader.read_char = function read_char(reader) {
  if (function() {
    var and__12818__auto__ = reader;
    if (and__12818__auto__) {
      return reader.cljs$reader$PushbackReader$read_char$arity$1;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return reader.cljs$reader$PushbackReader$read_char$arity$1(reader);
  } else {
    var x__13457__auto__ = reader == null ? null : reader;
    return function() {
      var or__12830__auto__ = cljs.reader.read_char[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = cljs.reader.read_char["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.read-char", reader);
        }
      }
    }().call(null, reader);
  }
};
cljs.reader.unread = function unread(reader, ch) {
  if (function() {
    var and__12818__auto__ = reader;
    if (and__12818__auto__) {
      return reader.cljs$reader$PushbackReader$unread$arity$2;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return reader.cljs$reader$PushbackReader$unread$arity$2(reader, ch);
  } else {
    var x__13457__auto__ = reader == null ? null : reader;
    return function() {
      var or__12830__auto__ = cljs.reader.unread[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = cljs.reader.unread["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.unread", reader);
        }
      }
    }().call(null, reader, ch);
  }
};
cljs.reader.StringPushbackReader = function(s, buffer, idx) {
  this.s = s;
  this.buffer = buffer;
  this.idx = idx;
};
cljs.reader.StringPushbackReader.cljs$lang$type = true;
cljs.reader.StringPushbackReader.cljs$lang$ctorStr = "cljs.reader/StringPushbackReader";
cljs.reader.StringPushbackReader.cljs$lang$ctorPrWriter = function(this__13397__auto__, writer__13398__auto__, opt__13399__auto__) {
  return cljs.core._write.call(null, writer__13398__auto__, "cljs.reader/StringPushbackReader");
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$ = true;
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$read_char$arity$1 = function(reader) {
  var self__ = this;
  var reader__$1 = this;
  if (self__.buffer.length === 0) {
    self__.idx = self__.idx + 1;
    return self__.s[self__.idx];
  } else {
    return self__.buffer.pop();
  }
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$unread$arity$2 = function(reader, ch) {
  var self__ = this;
  var reader__$1 = this;
  return self__.buffer.push(ch);
};
cljs.reader.__GT_StringPushbackReader = function __GT_StringPushbackReader(s, buffer, idx) {
  return new cljs.reader.StringPushbackReader(s, buffer, idx);
};
cljs.reader.push_back_reader = function push_back_reader(s) {
  return new cljs.reader.StringPushbackReader(s, [], -1);
};
cljs.reader.whitespace_QMARK_ = function whitespace_QMARK_(ch) {
  var or__12830__auto__ = goog.string.isBreakingWhitespace(ch);
  if (cljs.core.truth_(or__12830__auto__)) {
    return or__12830__auto__;
  } else {
    return "," === ch;
  }
};
cljs.reader.numeric_QMARK_ = function numeric_QMARK_(ch) {
  return goog.string.isNumeric(ch);
};
cljs.reader.comment_prefix_QMARK_ = function comment_prefix_QMARK_(ch) {
  return ";" === ch;
};
cljs.reader.number_literal_QMARK_ = function number_literal_QMARK_(reader, initch) {
  return cljs.reader.numeric_QMARK_.call(null, initch) || ("+" === initch || "-" === initch) && cljs.reader.numeric_QMARK_.call(null, function() {
    var next_ch = cljs.reader.read_char.call(null, reader);
    cljs.reader.unread.call(null, reader, next_ch);
    return next_ch;
  }());
};
cljs.reader.reader_error = function() {
  var reader_error__delegate = function(rdr, msg) {
    throw new Error(cljs.core.apply.call(null, cljs.core.str, msg));
  };
  var reader_error = function(rdr, var_args) {
    var msg = null;
    if (arguments.length > 1) {
      msg = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return reader_error__delegate.call(this, rdr, msg);
  };
  reader_error.cljs$lang$maxFixedArity = 1;
  reader_error.cljs$lang$applyTo = function(arglist__109098) {
    var rdr = cljs.core.first(arglist__109098);
    var msg = cljs.core.rest(arglist__109098);
    return reader_error__delegate(rdr, msg);
  };
  reader_error.cljs$core$IFn$_invoke$arity$variadic = reader_error__delegate;
  return reader_error;
}();
cljs.reader.macro_terminating_QMARK_ = function macro_terminating_QMARK_(ch) {
  var and__12818__auto__ = !(ch === "#");
  if (and__12818__auto__) {
    var and__12818__auto____$1 = !(ch === "'");
    if (and__12818__auto____$1) {
      var and__12818__auto____$2 = !(ch === ":");
      if (and__12818__auto____$2) {
        return cljs.reader.macros.call(null, ch);
      } else {
        return and__12818__auto____$2;
      }
    } else {
      return and__12818__auto____$1;
    }
  } else {
    return and__12818__auto__;
  }
};
cljs.reader.read_token = function read_token(rdr, initch) {
  var sb = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (ch == null || (cljs.reader.whitespace_QMARK_.call(null, ch) || cljs.reader.macro_terminating_QMARK_.call(null, ch))) {
      cljs.reader.unread.call(null, rdr, ch);
      return sb.toString();
    } else {
      var G__109099 = function() {
        sb.append(ch);
        return sb;
      }();
      var G__109100 = cljs.reader.read_char.call(null, rdr);
      sb = G__109099;
      ch = G__109100;
      continue;
    }
    break;
  }
};
cljs.reader.skip_line = function skip_line(reader, _) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch === "\n" || (ch === "\r" || ch == null)) {
      return reader;
    } else {
      continue;
    }
    break;
  }
};
cljs.reader.int_pattern = cljs.core.re_pattern.call(null, "([-+]?)(?:(0)|([1-9][0-9]*)|0[xX]([0-9A-Fa-f]+)|0([0-7]+)|([1-9][0-9]?)[rR]([0-9A-Za-z]+)|0[0-9]+)(N)?");
cljs.reader.ratio_pattern = cljs.core.re_pattern.call(null, "([-+]?[0-9]+)/([0-9]+)");
cljs.reader.float_pattern = cljs.core.re_pattern.call(null, "([-+]?[0-9]+(\\.[0-9]*)?([eE][-+]?[0-9]+)?)(M)?");
cljs.reader.symbol_pattern = cljs.core.re_pattern.call(null, "[:]?([^0-9/].*/)?([^0-9/][^/]*)");
cljs.reader.re_find_STAR_ = function re_find_STAR_(re, s) {
  var matches = re.exec(s);
  if (matches == null) {
    return null;
  } else {
    if (matches.length === 1) {
      return matches[0];
    } else {
      return matches;
    }
  }
};
cljs.reader.match_int = function match_int(s) {
  var groups = cljs.reader.re_find_STAR_.call(null, cljs.reader.int_pattern, s);
  var group3 = groups[2];
  if (!(group3 == null || group3.length < 1)) {
    return 0;
  } else {
    var negate = "-" === groups[1] ? -1 : 1;
    var a = cljs.core.truth_(groups[3]) ? [groups[3], 10] : cljs.core.truth_(groups[4]) ? [groups[4], 16] : cljs.core.truth_(groups[5]) ? [groups[5], 8] : cljs.core.truth_(groups[7]) ? [groups[7], parseInt(groups[7])] : new cljs.core.Keyword(null, "default", "default", 2558708147) ? [null, null] : null;
    var n = a[0];
    var radix = a[1];
    if (n == null) {
      return null;
    } else {
      return negate * parseInt(n, radix);
    }
  }
};
cljs.reader.match_ratio = function match_ratio(s) {
  var groups = cljs.reader.re_find_STAR_.call(null, cljs.reader.ratio_pattern, s);
  var numinator = groups[1];
  var denominator = groups[2];
  return parseInt(numinator) / parseInt(denominator);
};
cljs.reader.match_float = function match_float(s) {
  return parseFloat(s);
};
cljs.reader.re_matches_STAR_ = function re_matches_STAR_(re, s) {
  var matches = re.exec(s);
  if (!(matches == null) && matches[0] === s) {
    if (matches.length === 1) {
      return matches[0];
    } else {
      return matches;
    }
  } else {
    return null;
  }
};
cljs.reader.match_number = function match_number(s) {
  if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.int_pattern, s))) {
    return cljs.reader.match_int.call(null, s);
  } else {
    if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.ratio_pattern, s))) {
      return cljs.reader.match_ratio.call(null, s);
    } else {
      if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.float_pattern, s))) {
        return cljs.reader.match_float.call(null, s);
      } else {
        return null;
      }
    }
  }
};
cljs.reader.escape_char_map = function escape_char_map(c) {
  if (c === "t") {
    return "\t";
  } else {
    if (c === "r") {
      return "\r";
    } else {
      if (c === "n") {
        return "\n";
      } else {
        if (c === "\\") {
          return "\\";
        } else {
          if (c === '"') {
            return'"';
          } else {
            if (c === "b") {
              return "\b";
            } else {
              if (c === "f") {
                return "\f";
              } else {
                if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                  return null;
                } else {
                  return null;
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.read_2_chars = function read_2_chars(reader) {
  return(new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.read_4_chars = function read_4_chars(reader) {
  return(new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.unicode_2_pattern = cljs.core.re_pattern.call(null, "[0-9A-Fa-f]{2}");
cljs.reader.unicode_4_pattern = cljs.core.re_pattern.call(null, "[0-9A-Fa-f]{4}");
cljs.reader.validate_unicode_escape = function validate_unicode_escape(unicode_pattern, reader, escape_char, unicode_str) {
  if (cljs.core.truth_(cljs.core.re_matches.call(null, unicode_pattern, unicode_str))) {
    return unicode_str;
  } else {
    return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", escape_char, unicode_str);
  }
};
cljs.reader.make_unicode_char = function make_unicode_char(code_str) {
  var code = parseInt(code_str, 16);
  return String.fromCharCode(code);
};
cljs.reader.escape_char = function escape_char(buffer, reader) {
  var ch = cljs.reader.read_char.call(null, reader);
  var mapresult = cljs.reader.escape_char_map.call(null, ch);
  if (cljs.core.truth_(mapresult)) {
    return mapresult;
  } else {
    if (ch === "x") {
      return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_2_pattern, reader, ch, cljs.reader.read_2_chars.call(null, reader)));
    } else {
      if (ch === "u") {
        return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_4_pattern, reader, ch, cljs.reader.read_4_chars.call(null, reader)));
      } else {
        if (cljs.reader.numeric_QMARK_.call(null, ch)) {
          return String.fromCharCode(ch);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", ch);
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.reader.read_past = function read_past(pred, rdr) {
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (cljs.core.truth_(pred.call(null, ch))) {
      var G__109101 = cljs.reader.read_char.call(null, rdr);
      ch = G__109101;
      continue;
    } else {
      return ch;
    }
    break;
  }
};
cljs.reader.read_delimited_list = function read_delimited_list(delim, rdr, recursive_QMARK_) {
  var a = cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY);
  while (true) {
    var ch = cljs.reader.read_past.call(null, cljs.reader.whitespace_QMARK_, rdr);
    if (cljs.core.truth_(ch)) {
    } else {
      cljs.reader.reader_error.call(null, rdr, "EOF while reading");
    }
    if (delim === ch) {
      return cljs.core.persistent_BANG_.call(null, a);
    } else {
      var temp__4090__auto__ = cljs.reader.macros.call(null, ch);
      if (cljs.core.truth_(temp__4090__auto__)) {
        var macrofn = temp__4090__auto__;
        var mret = macrofn.call(null, rdr, ch);
        var G__109102 = mret === rdr ? a : cljs.core.conj_BANG_.call(null, a, mret);
        a = G__109102;
        continue;
      } else {
        cljs.reader.unread.call(null, rdr, ch);
        var o = cljs.reader.read.call(null, rdr, true, null, recursive_QMARK_);
        var G__109103 = o === rdr ? a : cljs.core.conj_BANG_.call(null, a, o);
        a = G__109103;
        continue;
      }
    }
    break;
  }
};
cljs.reader.not_implemented = function not_implemented(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Reader for ", ch, " not implemented yet");
};
cljs.reader.read_dispatch = function read_dispatch(rdr, _) {
  var ch = cljs.reader.read_char.call(null, rdr);
  var dm = cljs.reader.dispatch_macros.call(null, ch);
  if (cljs.core.truth_(dm)) {
    return dm.call(null, rdr, _);
  } else {
    var temp__4090__auto__ = cljs.reader.maybe_read_tagged_type.call(null, rdr, ch);
    if (cljs.core.truth_(temp__4090__auto__)) {
      var obj = temp__4090__auto__;
      return obj;
    } else {
      return cljs.reader.reader_error.call(null, rdr, "No dispatch macro for ", ch);
    }
  }
};
cljs.reader.read_unmatched_delimiter = function read_unmatched_delimiter(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Unmached delimiter ", ch);
};
cljs.reader.read_list = function read_list(rdr, _) {
  return cljs.core.apply.call(null, cljs.core.list, cljs.reader.read_delimited_list.call(null, ")", rdr, true));
};
cljs.reader.read_comment = cljs.reader.skip_line;
cljs.reader.read_vector = function read_vector(rdr, _) {
  return cljs.reader.read_delimited_list.call(null, "]", rdr, true);
};
cljs.reader.read_map = function read_map(rdr, _) {
  var l = cljs.reader.read_delimited_list.call(null, "}", rdr, true);
  if (cljs.core.odd_QMARK_.call(null, cljs.core.count.call(null, l))) {
    cljs.reader.reader_error.call(null, rdr, "Map literal must contain an even number of forms");
  } else {
  }
  return cljs.core.apply.call(null, cljs.core.hash_map, l);
};
cljs.reader.read_number = function read_number(reader, initch) {
  var buffer = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (cljs.core.truth_(function() {
      var or__12830__auto__ = ch == null;
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = cljs.reader.whitespace_QMARK_.call(null, ch);
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          return cljs.reader.macros.call(null, ch);
        }
      }
    }())) {
      cljs.reader.unread.call(null, reader, ch);
      var s = buffer.toString();
      var or__12830__auto__ = cljs.reader.match_number.call(null, s);
      if (cljs.core.truth_(or__12830__auto__)) {
        return or__12830__auto__;
      } else {
        return cljs.reader.reader_error.call(null, reader, "Invalid number format [", s, "]");
      }
    } else {
      var G__109104 = function() {
        buffer.append(ch);
        return buffer;
      }();
      var G__109105 = cljs.reader.read_char.call(null, reader);
      buffer = G__109104;
      ch = G__109105;
      continue;
    }
    break;
  }
};
cljs.reader.read_string_STAR_ = function read_string_STAR_(reader, _) {
  var buffer = new goog.string.StringBuffer;
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (ch == null) {
      return cljs.reader.reader_error.call(null, reader, "EOF while reading");
    } else {
      if ("\\" === ch) {
        var G__109106 = function() {
          buffer.append(cljs.reader.escape_char.call(null, buffer, reader));
          return buffer;
        }();
        var G__109107 = cljs.reader.read_char.call(null, reader);
        buffer = G__109106;
        ch = G__109107;
        continue;
      } else {
        if ('"' === ch) {
          return buffer.toString();
        } else {
          if (new cljs.core.Keyword(null, "default", "default", 2558708147)) {
            var G__109108 = function() {
              buffer.append(ch);
              return buffer;
            }();
            var G__109109 = cljs.reader.read_char.call(null, reader);
            buffer = G__109108;
            ch = G__109109;
            continue;
          } else {
            return null;
          }
        }
      }
    }
    break;
  }
};
cljs.reader.special_symbols = function special_symbols(t, not_found) {
  if (t === "nil") {
    return null;
  } else {
    if (t === "true") {
      return true;
    } else {
      if (t === "false") {
        return false;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return not_found;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.reader.read_symbol = function read_symbol(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, initch);
  if (cljs.core.truth_(goog.string.contains(token, "/"))) {
    return cljs.core.symbol.call(null, cljs.core.subs.call(null, token, 0, token.indexOf("/")), cljs.core.subs.call(null, token, token.indexOf("/") + 1, token.length));
  } else {
    return cljs.reader.special_symbols.call(null, token, cljs.core.symbol.call(null, token));
  }
};
cljs.reader.read_keyword = function read_keyword(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, cljs.reader.read_char.call(null, reader));
  var a = cljs.reader.re_matches_STAR_.call(null, cljs.reader.symbol_pattern, token);
  var token__$1 = a[0];
  var ns = a[1];
  var name = a[2];
  if (!(void 0 === ns) && ns.substring(ns.length - 2, ns.length) === ":/" || (name[name.length - 1] === ":" || !(token__$1.indexOf("::", 1) === -1))) {
    return cljs.reader.reader_error.call(null, reader, "Invalid token: ", token__$1);
  } else {
    if (!(ns == null) && ns.length > 0) {
      return cljs.core.keyword.call(null, ns.substring(0, ns.indexOf("/")), name);
    } else {
      return cljs.core.keyword.call(null, token__$1);
    }
  }
};
cljs.reader.desugar_meta = function desugar_meta(f) {
  if (f instanceof cljs.core.Symbol) {
    return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", 1014018828), f], null);
  } else {
    if (typeof f === "string") {
      return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", 1014018828), f], null);
    } else {
      if (f instanceof cljs.core.Keyword) {
        return new cljs.core.PersistentArrayMap.fromArray([f, true], true, false);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return f;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.reader.wrapping_reader = function wrapping_reader(sym) {
  return function(rdr, _) {
    return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.reader.read.call(null, rdr, true, null, true)), sym);
  };
};
cljs.reader.throwing_reader = function throwing_reader(msg) {
  return function(rdr, _) {
    return cljs.reader.reader_error.call(null, rdr, msg);
  };
};
cljs.reader.read_meta = function read_meta(rdr, _) {
  var m = cljs.reader.desugar_meta.call(null, cljs.reader.read.call(null, rdr, true, null, true));
  if (cljs.core.map_QMARK_.call(null, m)) {
  } else {
    cljs.reader.reader_error.call(null, rdr, "Metadata must be Symbol,Keyword,String or Map");
  }
  var o = cljs.reader.read.call(null, rdr, true, null, true);
  if (function() {
    var G__109111 = o;
    if (G__109111) {
      var bit__13480__auto__ = G__109111.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__13480__auto__ || G__109111.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__109111.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__109111);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__109111);
    }
  }()) {
    return cljs.core.with_meta.call(null, o, cljs.core.merge.call(null, cljs.core.meta.call(null, o), m));
  } else {
    return cljs.reader.reader_error.call(null, rdr, "Metadata can only be applied to IWithMetas");
  }
};
cljs.reader.read_set = function read_set(rdr, _) {
  return cljs.core.set.call(null, cljs.reader.read_delimited_list.call(null, "}", rdr, true));
};
cljs.reader.read_regex = function read_regex(rdr, ch) {
  return cljs.core.re_pattern.call(null, cljs.reader.read_string_STAR_.call(null, rdr, ch));
};
cljs.reader.read_discard = function read_discard(rdr, _) {
  cljs.reader.read.call(null, rdr, true, null, true);
  return rdr;
};
cljs.reader.macros = function macros(c) {
  if (c === '"') {
    return cljs.reader.read_string_STAR_;
  } else {
    if (c === ":") {
      return cljs.reader.read_keyword;
    } else {
      if (c === ";") {
        return cljs.reader.read_comment;
      } else {
        if (c === "'") {
          return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "quote", "quote", -1532577739, null));
        } else {
          if (c === "@") {
            return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "deref", "deref", -1545057749, null));
          } else {
            if (c === "^") {
              return cljs.reader.read_meta;
            } else {
              if (c === "`") {
                return cljs.reader.not_implemented;
              } else {
                if (c === "~") {
                  return cljs.reader.not_implemented;
                } else {
                  if (c === "(") {
                    return cljs.reader.read_list;
                  } else {
                    if (c === ")") {
                      return cljs.reader.read_unmatched_delimiter;
                    } else {
                      if (c === "[") {
                        return cljs.reader.read_vector;
                      } else {
                        if (c === "]") {
                          return cljs.reader.read_unmatched_delimiter;
                        } else {
                          if (c === "{") {
                            return cljs.reader.read_map;
                          } else {
                            if (c === "}") {
                              return cljs.reader.read_unmatched_delimiter;
                            } else {
                              if (c === "\\") {
                                return cljs.reader.read_char;
                              } else {
                                if (c === "#") {
                                  return cljs.reader.read_dispatch;
                                } else {
                                  if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                                    return null;
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.dispatch_macros = function dispatch_macros(s) {
  if (s === "{") {
    return cljs.reader.read_set;
  } else {
    if (s === "\x3c") {
      return cljs.reader.throwing_reader.call(null, "Unreadable form");
    } else {
      if (s === '"') {
        return cljs.reader.read_regex;
      } else {
        if (s === "!") {
          return cljs.reader.read_comment;
        } else {
          if (s === "_") {
            return cljs.reader.read_discard;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return null;
            } else {
              return null;
            }
          }
        }
      }
    }
  }
};
cljs.reader.read = function read(reader, eof_is_error, sentinel, is_recursive) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch == null) {
      if (cljs.core.truth_(eof_is_error)) {
        return cljs.reader.reader_error.call(null, reader, "EOF while reading");
      } else {
        return sentinel;
      }
    } else {
      if (cljs.reader.whitespace_QMARK_.call(null, ch)) {
        var G__109112 = reader;
        var G__109113 = eof_is_error;
        var G__109114 = sentinel;
        var G__109115 = is_recursive;
        reader = G__109112;
        eof_is_error = G__109113;
        sentinel = G__109114;
        is_recursive = G__109115;
        continue;
      } else {
        if (cljs.reader.comment_prefix_QMARK_.call(null, ch)) {
          var G__109116 = cljs.reader.read_comment.call(null, reader, ch);
          var G__109117 = eof_is_error;
          var G__109118 = sentinel;
          var G__109119 = is_recursive;
          reader = G__109116;
          eof_is_error = G__109117;
          sentinel = G__109118;
          is_recursive = G__109119;
          continue;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var f = cljs.reader.macros.call(null, ch);
            var res = cljs.core.truth_(f) ? f.call(null, reader, ch) : cljs.reader.number_literal_QMARK_.call(null, reader, ch) ? cljs.reader.read_number.call(null, reader, ch) : new cljs.core.Keyword(null, "else", "else", 1017020587) ? cljs.reader.read_symbol.call(null, reader, ch) : null;
            if (res === reader) {
              var G__109120 = reader;
              var G__109121 = eof_is_error;
              var G__109122 = sentinel;
              var G__109123 = is_recursive;
              reader = G__109120;
              eof_is_error = G__109121;
              sentinel = G__109122;
              is_recursive = G__109123;
              continue;
            } else {
              return res;
            }
          } else {
            return null;
          }
        }
      }
    }
    break;
  }
};
cljs.reader.read_string = function read_string(s) {
  var r = cljs.reader.push_back_reader.call(null, s);
  return cljs.reader.read.call(null, r, true, null, false);
};
cljs.reader.zero_fill_right_and_truncate = function zero_fill_right_and_truncate(s, width) {
  if (cljs.core._EQ_.call(null, width, cljs.core.count.call(null, s))) {
    return s;
  } else {
    if (width < cljs.core.count.call(null, s)) {
      return cljs.core.subs.call(null, s, 0, width);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var b = new goog.string.StringBuffer(s);
        while (true) {
          if (b.getLength() < width) {
            var G__109124 = b.append("0");
            b = G__109124;
            continue;
          } else {
            return b.toString();
          }
          break;
        }
      } else {
        return null;
      }
    }
  }
};
cljs.reader.divisible_QMARK_ = function divisible_QMARK_(num, div) {
  return cljs.core.mod.call(null, num, div) === 0;
};
cljs.reader.indivisible_QMARK_ = function indivisible_QMARK_(num, div) {
  return!cljs.reader.divisible_QMARK_.call(null, num, div);
};
cljs.reader.leap_year_QMARK_ = function leap_year_QMARK_(year) {
  return cljs.reader.divisible_QMARK_.call(null, year, 4) && (cljs.reader.indivisible_QMARK_.call(null, year, 100) || cljs.reader.divisible_QMARK_.call(null, year, 400));
};
cljs.reader.days_in_month = function() {
  var dim_norm = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  var dim_leap = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  return function(month, leap_year_QMARK_) {
    return cljs.core.get.call(null, cljs.core.truth_(leap_year_QMARK_) ? dim_leap : dim_norm, month);
  };
}();
cljs.reader.timestamp_regex = /(\d\d\d\d)(?:-(\d\d)(?:-(\d\d)(?:[T](\d\d)(?::(\d\d)(?::(\d\d)(?:[.](\d+))?)?)?)?)?)?(?:[Z]|([-+])(\d\d):(\d\d))?/;
cljs.reader.parse_int = function parse_int(s) {
  var n = parseInt(s);
  if (cljs.core.not.call(null, isNaN(n))) {
    return n;
  } else {
    return null;
  }
};
cljs.reader.check = function check(low, n, high, msg) {
  if (low <= n && n <= high) {
  } else {
    cljs.reader.reader_error.call(null, null, [cljs.core.str(msg), cljs.core.str(" Failed:  "), cljs.core.str(low), cljs.core.str("\x3c\x3d"), cljs.core.str(n), cljs.core.str("\x3c\x3d"), cljs.core.str(high)].join(""));
  }
  return n;
};
cljs.reader.parse_and_validate_timestamp = function parse_and_validate_timestamp(s) {
  var vec__109126 = cljs.core.re_matches.call(null, cljs.reader.timestamp_regex, s);
  var _ = cljs.core.nth.call(null, vec__109126, 0, null);
  var years = cljs.core.nth.call(null, vec__109126, 1, null);
  var months = cljs.core.nth.call(null, vec__109126, 2, null);
  var days = cljs.core.nth.call(null, vec__109126, 3, null);
  var hours = cljs.core.nth.call(null, vec__109126, 4, null);
  var minutes = cljs.core.nth.call(null, vec__109126, 5, null);
  var seconds = cljs.core.nth.call(null, vec__109126, 6, null);
  var fraction = cljs.core.nth.call(null, vec__109126, 7, null);
  var offset_sign = cljs.core.nth.call(null, vec__109126, 8, null);
  var offset_hours = cljs.core.nth.call(null, vec__109126, 9, null);
  var offset_minutes = cljs.core.nth.call(null, vec__109126, 10, null);
  var v = vec__109126;
  if (cljs.core.not.call(null, v)) {
    return cljs.reader.reader_error.call(null, null, [cljs.core.str("Unrecognized date/time syntax: "), cljs.core.str(s)].join(""));
  } else {
    var years__$1 = cljs.reader.parse_int.call(null, years);
    var months__$1 = function() {
      var or__12830__auto__ = cljs.reader.parse_int.call(null, months);
      if (cljs.core.truth_(or__12830__auto__)) {
        return or__12830__auto__;
      } else {
        return 1;
      }
    }();
    var days__$1 = function() {
      var or__12830__auto__ = cljs.reader.parse_int.call(null, days);
      if (cljs.core.truth_(or__12830__auto__)) {
        return or__12830__auto__;
      } else {
        return 1;
      }
    }();
    var hours__$1 = function() {
      var or__12830__auto__ = cljs.reader.parse_int.call(null, hours);
      if (cljs.core.truth_(or__12830__auto__)) {
        return or__12830__auto__;
      } else {
        return 0;
      }
    }();
    var minutes__$1 = function() {
      var or__12830__auto__ = cljs.reader.parse_int.call(null, minutes);
      if (cljs.core.truth_(or__12830__auto__)) {
        return or__12830__auto__;
      } else {
        return 0;
      }
    }();
    var seconds__$1 = function() {
      var or__12830__auto__ = cljs.reader.parse_int.call(null, seconds);
      if (cljs.core.truth_(or__12830__auto__)) {
        return or__12830__auto__;
      } else {
        return 0;
      }
    }();
    var fraction__$1 = function() {
      var or__12830__auto__ = cljs.reader.parse_int.call(null, cljs.reader.zero_fill_right_and_truncate.call(null, fraction, 3));
      if (cljs.core.truth_(or__12830__auto__)) {
        return or__12830__auto__;
      } else {
        return 0;
      }
    }();
    var offset_sign__$1 = cljs.core._EQ_.call(null, offset_sign, "-") ? -1 : 1;
    var offset_hours__$1 = function() {
      var or__12830__auto__ = cljs.reader.parse_int.call(null, offset_hours);
      if (cljs.core.truth_(or__12830__auto__)) {
        return or__12830__auto__;
      } else {
        return 0;
      }
    }();
    var offset_minutes__$1 = function() {
      var or__12830__auto__ = cljs.reader.parse_int.call(null, offset_minutes);
      if (cljs.core.truth_(or__12830__auto__)) {
        return or__12830__auto__;
      } else {
        return 0;
      }
    }();
    var offset = offset_sign__$1 * (offset_hours__$1 * 60 + offset_minutes__$1);
    return new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [years__$1, cljs.reader.check.call(null, 1, months__$1, 12, "timestamp month field must be in range 1..12"), cljs.reader.check.call(null, 1, days__$1, cljs.reader.days_in_month.call(null, months__$1, cljs.reader.leap_year_QMARK_.call(null, years__$1)), "timestamp day field must be in range 1..last day in month"), cljs.reader.check.call(null, 0, hours__$1, 23, "timestamp hour field must be in range 0..23"), 
    cljs.reader.check.call(null, 0, minutes__$1, 59, "timestamp minute field must be in range 0..59"), cljs.reader.check.call(null, 0, seconds__$1, cljs.core._EQ_.call(null, minutes__$1, 59) ? 60 : 59, "timestamp second field must be in range 0..60"), cljs.reader.check.call(null, 0, fraction__$1, 999, "timestamp millisecond field must be in range 0..999"), offset], null);
  }
};
cljs.reader.parse_timestamp = function parse_timestamp(ts) {
  var temp__4090__auto__ = cljs.reader.parse_and_validate_timestamp.call(null, ts);
  if (cljs.core.truth_(temp__4090__auto__)) {
    var vec__109128 = temp__4090__auto__;
    var years = cljs.core.nth.call(null, vec__109128, 0, null);
    var months = cljs.core.nth.call(null, vec__109128, 1, null);
    var days = cljs.core.nth.call(null, vec__109128, 2, null);
    var hours = cljs.core.nth.call(null, vec__109128, 3, null);
    var minutes = cljs.core.nth.call(null, vec__109128, 4, null);
    var seconds = cljs.core.nth.call(null, vec__109128, 5, null);
    var ms = cljs.core.nth.call(null, vec__109128, 6, null);
    var offset = cljs.core.nth.call(null, vec__109128, 7, null);
    return new Date(Date.UTC(years, months - 1, days, hours, minutes, seconds, ms) - offset * 60 * 1E3);
  } else {
    return cljs.reader.reader_error.call(null, null, [cljs.core.str("Unrecognized date/time syntax: "), cljs.core.str(ts)].join(""));
  }
};
cljs.reader.read_date = function read_date(s) {
  if (typeof s === "string") {
    return cljs.reader.parse_timestamp.call(null, s);
  } else {
    return cljs.reader.reader_error.call(null, null, "Instance literal expects a string for its timestamp.");
  }
};
cljs.reader.read_queue = function read_queue(elems) {
  if (cljs.core.vector_QMARK_.call(null, elems)) {
    return cljs.core.into.call(null, cljs.core.PersistentQueue.EMPTY, elems);
  } else {
    return cljs.reader.reader_error.call(null, null, "Queue literal expects a vector for its elements.");
  }
};
cljs.reader.read_js = function read_js(form) {
  if (cljs.core.vector_QMARK_.call(null, form)) {
    var arr = [];
    var seq__109141_109153 = cljs.core.seq.call(null, form);
    var chunk__109142_109154 = null;
    var count__109143_109155 = 0;
    var i__109144_109156 = 0;
    while (true) {
      if (i__109144_109156 < count__109143_109155) {
        var x_109157 = cljs.core._nth.call(null, chunk__109142_109154, i__109144_109156);
        arr.push(x_109157);
        var G__109158 = seq__109141_109153;
        var G__109159 = chunk__109142_109154;
        var G__109160 = count__109143_109155;
        var G__109161 = i__109144_109156 + 1;
        seq__109141_109153 = G__109158;
        chunk__109142_109154 = G__109159;
        count__109143_109155 = G__109160;
        i__109144_109156 = G__109161;
        continue;
      } else {
        var temp__4092__auto___109162 = cljs.core.seq.call(null, seq__109141_109153);
        if (temp__4092__auto___109162) {
          var seq__109141_109163__$1 = temp__4092__auto___109162;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__109141_109163__$1)) {
            var c__13578__auto___109164 = cljs.core.chunk_first.call(null, seq__109141_109163__$1);
            var G__109165 = cljs.core.chunk_rest.call(null, seq__109141_109163__$1);
            var G__109166 = c__13578__auto___109164;
            var G__109167 = cljs.core.count.call(null, c__13578__auto___109164);
            var G__109168 = 0;
            seq__109141_109153 = G__109165;
            chunk__109142_109154 = G__109166;
            count__109143_109155 = G__109167;
            i__109144_109156 = G__109168;
            continue;
          } else {
            var x_109169 = cljs.core.first.call(null, seq__109141_109163__$1);
            arr.push(x_109169);
            var G__109170 = cljs.core.next.call(null, seq__109141_109163__$1);
            var G__109171 = null;
            var G__109172 = 0;
            var G__109173 = 0;
            seq__109141_109153 = G__109170;
            chunk__109142_109154 = G__109171;
            count__109143_109155 = G__109172;
            i__109144_109156 = G__109173;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return arr;
  } else {
    if (cljs.core.map_QMARK_.call(null, form)) {
      var obj = function() {
        var obj109146 = {};
        return obj109146;
      }();
      var seq__109147_109174 = cljs.core.seq.call(null, form);
      var chunk__109148_109175 = null;
      var count__109149_109176 = 0;
      var i__109150_109177 = 0;
      while (true) {
        if (i__109150_109177 < count__109149_109176) {
          var vec__109151_109178 = cljs.core._nth.call(null, chunk__109148_109175, i__109150_109177);
          var k_109179 = cljs.core.nth.call(null, vec__109151_109178, 0, null);
          var v_109180 = cljs.core.nth.call(null, vec__109151_109178, 1, null);
          obj[cljs.core.name.call(null, k_109179)] = v_109180;
          var G__109181 = seq__109147_109174;
          var G__109182 = chunk__109148_109175;
          var G__109183 = count__109149_109176;
          var G__109184 = i__109150_109177 + 1;
          seq__109147_109174 = G__109181;
          chunk__109148_109175 = G__109182;
          count__109149_109176 = G__109183;
          i__109150_109177 = G__109184;
          continue;
        } else {
          var temp__4092__auto___109185 = cljs.core.seq.call(null, seq__109147_109174);
          if (temp__4092__auto___109185) {
            var seq__109147_109186__$1 = temp__4092__auto___109185;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__109147_109186__$1)) {
              var c__13578__auto___109187 = cljs.core.chunk_first.call(null, seq__109147_109186__$1);
              var G__109188 = cljs.core.chunk_rest.call(null, seq__109147_109186__$1);
              var G__109189 = c__13578__auto___109187;
              var G__109190 = cljs.core.count.call(null, c__13578__auto___109187);
              var G__109191 = 0;
              seq__109147_109174 = G__109188;
              chunk__109148_109175 = G__109189;
              count__109149_109176 = G__109190;
              i__109150_109177 = G__109191;
              continue;
            } else {
              var vec__109152_109192 = cljs.core.first.call(null, seq__109147_109186__$1);
              var k_109193 = cljs.core.nth.call(null, vec__109152_109192, 0, null);
              var v_109194 = cljs.core.nth.call(null, vec__109152_109192, 1, null);
              obj[cljs.core.name.call(null, k_109193)] = v_109194;
              var G__109195 = cljs.core.next.call(null, seq__109147_109186__$1);
              var G__109196 = null;
              var G__109197 = 0;
              var G__109198 = 0;
              seq__109147_109174 = G__109195;
              chunk__109148_109175 = G__109196;
              count__109149_109176 = G__109197;
              i__109150_109177 = G__109198;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return obj;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.reader.reader_error.call(null, null, [cljs.core.str("JS literal expects a vector or map containing "), cljs.core.str("only string or unqualified keyword keys")].join(""));
      } else {
        return null;
      }
    }
  }
};
cljs.reader.read_uuid = function read_uuid(uuid) {
  if (typeof uuid === "string") {
    return new cljs.core.UUID(uuid);
  } else {
    return cljs.reader.reader_error.call(null, null, "UUID literal expects a string as its representation.");
  }
};
cljs.reader._STAR_tag_table_STAR_ = cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 4, ["inst", cljs.reader.read_date, "uuid", cljs.reader.read_uuid, "queue", cljs.reader.read_queue, "js", cljs.reader.read_js], null));
cljs.reader._STAR_default_data_reader_fn_STAR_ = cljs.core.atom.call(null, null);
cljs.reader.maybe_read_tagged_type = function maybe_read_tagged_type(rdr, initch) {
  var tag = cljs.reader.read_symbol.call(null, rdr, initch);
  var pfn = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), [cljs.core.str(tag)].join(""));
  var dfn = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  if (cljs.core.truth_(pfn)) {
    return pfn.call(null, cljs.reader.read.call(null, rdr, true, null, false));
  } else {
    if (cljs.core.truth_(dfn)) {
      return dfn.call(null, tag, cljs.reader.read.call(null, rdr, true, null, false));
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.reader.reader_error.call(null, rdr, "Could not find tag parser for ", [cljs.core.str(tag)].join(""), " in ", cljs.core.pr_str.call(null, cljs.core.keys.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_))));
      } else {
        return null;
      }
    }
  }
};
cljs.reader.register_tag_parser_BANG_ = function register_tag_parser_BANG_(tag, f) {
  var tag__$1 = [cljs.core.str(tag)].join("");
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.assoc, tag__$1, f);
  return old_parser;
};
cljs.reader.deregister_tag_parser_BANG_ = function deregister_tag_parser_BANG_(tag) {
  var tag__$1 = [cljs.core.str(tag)].join("");
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.dissoc, tag__$1);
  return old_parser;
};
cljs.reader.register_default_tag_parser_BANG_ = function register_default_tag_parser_BANG_(f) {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(_) {
    return f;
  });
  return old_parser;
};
cljs.reader.deregister_default_tag_parser_BANG_ = function deregister_default_tag_parser_BANG_() {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(_) {
    return null;
  });
  return old_parser;
};
goog.provide("ajax.core");
goog.require("cljs.core");
goog.require("goog.json.Serializer");
goog.require("goog.net.XhrManager");
goog.require("goog.Uri.QueryData");
goog.require("goog.events");
goog.require("goog.net.XhrManager");
goog.require("cljs.reader");
goog.require("goog.net.EventType");
goog.require("goog.structs");
goog.require("goog.Uri.QueryData");
goog.require("clojure.string");
goog.require("clojure.string");
goog.require("goog.structs");
goog.require("cljs.reader");
goog.require("goog.Uri");
goog.require("goog.net.XhrIo");
goog.require("goog.net.XhrIo");
goog.require("goog.events");
goog.require("goog.Uri");
ajax.core.AjaxImpl = function() {
  var obj108340 = {};
  return obj108340;
}();
ajax.core._js_ajax_request = function _js_ajax_request(this$, uri, method, body, headers, handler, opts) {
  if (function() {
    var and__12818__auto__ = this$;
    if (and__12818__auto__) {
      return this$.ajax$core$AjaxImpl$_js_ajax_request$arity$7;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return this$.ajax$core$AjaxImpl$_js_ajax_request$arity$7(this$, uri, method, body, headers, handler, opts);
  } else {
    var x__13457__auto__ = this$ == null ? null : this$;
    return function() {
      var or__12830__auto__ = ajax.core._js_ajax_request[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = ajax.core._js_ajax_request["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "AjaxImpl.-js-ajax-request", this$);
        }
      }
    }().call(null, this$, uri, method, body, headers, handler, opts);
  }
};
goog.net.XhrIo.prototype.ajax$core$AjaxImpl$ = true;
goog.net.XhrIo.prototype.ajax$core$AjaxImpl$_js_ajax_request$arity$7 = function(this$, uri, method, body, headers, handler, p__108341) {
  var map__108342 = p__108341;
  var map__108342__$1 = cljs.core.seq_QMARK_.call(null, map__108342) ? cljs.core.apply.call(null, cljs.core.hash_map, map__108342) : map__108342;
  var timeout = cljs.core.get.call(null, map__108342__$1, new cljs.core.Keyword(null, "timeout", "timeout", 3994960083));
  var this$__$1 = this;
  var G__108343 = this$__$1;
  goog.events.listen(G__108343, goog.net.EventType.COMPLETE, handler);
  G__108343.send(uri, method, body, headers, timeout);
  return G__108343;
};
goog.net.XhrManager.prototype.ajax$core$AjaxImpl$ = true;
goog.net.XhrManager.prototype.ajax$core$AjaxImpl$_js_ajax_request$arity$7 = function(this$, uri, method, body, headers, handler, p__108344) {
  var map__108345 = p__108344;
  var map__108345__$1 = cljs.core.seq_QMARK_.call(null, map__108345) ? cljs.core.apply.call(null, cljs.core.hash_map, map__108345) : map__108345;
  var max_retries = cljs.core.get.call(null, map__108345__$1, new cljs.core.Keyword(null, "max-retries", "max-retries", 902021455));
  var priority = cljs.core.get.call(null, map__108345__$1, new cljs.core.Keyword(null, "priority", "priority", 4143410454));
  var timeout = cljs.core.get.call(null, map__108345__$1, new cljs.core.Keyword(null, "timeout", "timeout", 3994960083));
  var id = cljs.core.get.call(null, map__108345__$1, new cljs.core.Keyword(null, "id", "id", 1013907597));
  var this$__$1 = this;
  return this$__$1.send(id, uri, method, body, headers, priority, handler, max_retries);
};
ajax.core.success_QMARK_ = function success_QMARK_(status) {
  return cljs.core.some.call(null, cljs.core.PersistentHashSet.fromArray([status], true), new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [200, 201, 202, 204, 205, 206], null));
};
ajax.core.read_edn = function read_edn(xhrio) {
  return cljs.reader.read_string.call(null, xhrio.getResponseText());
};
ajax.core.edn_response_format = function edn_response_format() {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "read", "read", 1017400584), ajax.core.read_edn, new cljs.core.Keyword(null, "description", "description", 3584325486), "EDN"], null);
};
ajax.core.edn_request_format = function edn_request_format() {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "write", "write", 1127304017), cljs.core.pr_str, new cljs.core.Keyword(null, "content-type", "content-type", 1799574400), "application/edn"], null);
};
ajax.core.params_to_str = function params_to_str(params) {
  if (cljs.core.truth_(params)) {
    return goog.Uri.QueryData.createFromMap(new goog.structs.Map(cljs.core.clj__GT_js.call(null, params))).toString();
  } else {
    return null;
  }
};
ajax.core.read_text = function read_text(xhrio) {
  return xhrio.getResponseText();
};
ajax.core.url_request_format = function url_request_format() {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "write", "write", 1127304017), ajax.core.params_to_str, new cljs.core.Keyword(null, "content-type", "content-type", 1799574400), "application/x-www-form-urlencoded"], null);
};
ajax.core.raw_response_format = function raw_response_format() {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "read", "read", 1017400584), ajax.core.read_text, new cljs.core.Keyword(null, "description", "description", 3584325486), "raw text"], null);
};
ajax.core.write_json = function write_json(data) {
  return(new goog.json.Serializer).serialize(cljs.core.clj__GT_js.call(null, data));
};
ajax.core.json_request_format = function json_request_format() {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "write", "write", 1127304017), ajax.core.write_json, new cljs.core.Keyword(null, "content-type", "content-type", 1799574400), "application/json"], null);
};
ajax.core.json_response_format = function json_response_format(p__108346) {
  var map__108348 = p__108346;
  var map__108348__$1 = cljs.core.seq_QMARK_.call(null, map__108348) ? cljs.core.apply.call(null, cljs.core.hash_map, map__108348) : map__108348;
  var keywords_QMARK_ = cljs.core.get.call(null, map__108348__$1, new cljs.core.Keyword(null, "keywords?", "keywords?", 4346628423));
  var prefix = cljs.core.get.call(null, map__108348__$1, new cljs.core.Keyword(null, "prefix", "prefix", 4328760836));
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "read", "read", 1017400584), function read_json(xhrio) {
    var json = xhrio.getResponseJson(prefix);
    return cljs.core.js__GT_clj.call(null, json, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 4191781672), keywords_QMARK_);
  }, new cljs.core.Keyword(null, "description", "description", 3584325486), [cljs.core.str("JSON"), cljs.core.str(cljs.core.truth_(prefix) ? [cljs.core.str(" prefix '"), cljs.core.str(prefix), cljs.core.str("'")].join("") : null), cljs.core.str(cljs.core.truth_(keywords_QMARK_) ? " keywordize" : null)].join("")], null);
};
ajax.core.get_default_format = function get_default_format(xhrio) {
  var ct = xhrio.getResponseHeader("Content-Type");
  var format = cljs.core.truth_(function() {
    var and__12818__auto__ = ct;
    if (cljs.core.truth_(and__12818__auto__)) {
      return ct.indexOf("json") >= 0;
    } else {
      return and__12818__auto__;
    }
  }()) ? ajax.core.json_response_format.call(null, cljs.core.PersistentArrayMap.EMPTY) : ajax.core.edn_response_format.call(null);
  return cljs.core.update_in.call(null, format, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "description", "description", 3584325486)], null), function(p1__108349_SHARP_) {
    return[cljs.core.str(p1__108349_SHARP_), cljs.core.str(" (default)")].join("");
  });
};
ajax.core.use_content_type = function use_content_type(format) {
  return cljs.core.dissoc.call(null, format, new cljs.core.Keyword(null, "write", "write", 1127304017));
};
ajax.core.codec = function codec(request_format, p__108350) {
  var map__108352 = p__108350;
  var map__108352__$1 = cljs.core.seq_QMARK_.call(null, map__108352) ? cljs.core.apply.call(null, cljs.core.hash_map, map__108352) : map__108352;
  var response_format = map__108352__$1;
  var description = cljs.core.get.call(null, map__108352__$1, new cljs.core.Keyword(null, "description", "description", 3584325486));
  var read = cljs.core.get.call(null, map__108352__$1, new cljs.core.Keyword(null, "read", "read", 1017400584));
  return cljs.core.assoc.call(null, request_format, new cljs.core.Keyword(null, "read", "read", 1017400584), read, new cljs.core.Keyword(null, "description", "description", 3584325486), description);
};
ajax.core.get_format = function get_format(format) {
  if (cljs.core.map_QMARK_.call(null, format)) {
    return format;
  } else {
    if (cljs.core.ifn_QMARK_.call(null, format)) {
      return ajax.core.codec.call(null, ajax.core.url_request_format.call(null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "read", "read", 1017400584), format, new cljs.core.Keyword(null, "description", "description", 3584325486), "custom"], null));
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw new Error([cljs.core.str("unrecognized format: "), cljs.core.str(format)].join(""));
      } else {
        return null;
      }
    }
  }
};
ajax.core.exception_response = function exception_response(e, status, p__108353, xhrio) {
  var map__108355 = p__108353;
  var map__108355__$1 = cljs.core.seq_QMARK_.call(null, map__108355) ? cljs.core.apply.call(null, cljs.core.hash_map, map__108355) : map__108355;
  var description = cljs.core.get.call(null, map__108355__$1, new cljs.core.Keyword(null, "description", "description", 3584325486));
  var response = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "status", "status", 4416389988), status, new cljs.core.Keyword(null, "response", "response", 673580979), null], null);
  var status_text = [cljs.core.str(e.message), cljs.core.str("  Format should have been "), cljs.core.str(description)].join("");
  var parse_error = cljs.core.assoc.call(null, response, new cljs.core.Keyword(null, "status-text", "status-text", 4371493274), status_text, new cljs.core.Keyword(null, "is-parse-error", "is-parse-error", 4116943293), true, new cljs.core.Keyword(null, "original-text", "original-text", 2831108891), xhrio.getResponseText());
  if (cljs.core.truth_(ajax.core.success_QMARK_.call(null, status))) {
    return parse_error;
  } else {
    return cljs.core.assoc.call(null, response, new cljs.core.Keyword(null, "status-text", "status-text", 4371493274), xhrio.getStatusText(), new cljs.core.Keyword(null, "parse-error", "parse-error", 3528843744), parse_error);
  }
};
ajax.core.interpret_response = function interpret_response(format, response, get_default_format) {
  try {
    var xhrio = response.target;
    var status = xhrio.getStatus();
    var format__$1 = cljs.core.truth_((new cljs.core.Keyword(null, "read", "read", 1017400584)).cljs$core$IFn$_invoke$arity$1(format)) ? format : get_default_format.call(null, xhrio);
    var parse = (new cljs.core.Keyword(null, "read", "read", 1017400584)).cljs$core$IFn$_invoke$arity$1(format__$1);
    try {
      var response__$1 = parse.call(null, xhrio);
      if (cljs.core.truth_(ajax.core.success_QMARK_.call(null, status))) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [true, response__$1], null);
      } else {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [false, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "status", "status", 4416389988), status, new cljs.core.Keyword(null, "status-text", "status-text", 4371493274), xhrio.getStatusText(), new cljs.core.Keyword(null, "response", "response", 673580979), response__$1], null)], null);
      }
    } catch (e108359) {
      if (e108359 instanceof Object) {
        var e = e108359;
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [false, ajax.core.exception_response.call(null, e, status, format__$1, xhrio)], null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw e108359;
        } else {
          return null;
        }
      }
    }
  } catch (e108358) {
    if (e108358 instanceof Object) {
      var e = e108358;
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [false, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "status", "status", 4416389988), 0, new cljs.core.Keyword(null, "status-text", "status-text", 4371493274), e.message, new cljs.core.Keyword(null, "response", "response", 673580979), null], null)], null);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw e108358;
      } else {
        return null;
      }
    }
  }
};
ajax.core.no_format = function no_format(xhrio) {
  throw new Error("No response format was supplied.");
};
ajax.core.uri_with_params = function uri_with_params(uri, params) {
  if (cljs.core.truth_(params)) {
    return[cljs.core.str(uri), cljs.core.str("?"), cljs.core.str(ajax.core.params_to_str.call(null, params))].join("");
  } else {
    return uri;
  }
};
ajax.core.process_inputs = function process_inputs(uri, method, p__108360, p__108361) {
  var map__108365 = p__108360;
  var map__108365__$1 = cljs.core.seq_QMARK_.call(null, map__108365) ? cljs.core.apply.call(null, cljs.core.hash_map, map__108365) : map__108365;
  var format = map__108365__$1;
  var content_type = cljs.core.get.call(null, map__108365__$1, new cljs.core.Keyword(null, "content-type", "content-type", 1799574400));
  var write = cljs.core.get.call(null, map__108365__$1, new cljs.core.Keyword(null, "write", "write", 1127304017));
  var map__108366 = p__108361;
  var map__108366__$1 = cljs.core.seq_QMARK_.call(null, map__108366) ? cljs.core.apply.call(null, cljs.core.hash_map, map__108366) : map__108366;
  var headers = cljs.core.get.call(null, map__108366__$1, new cljs.core.Keyword(null, "headers", "headers", 1809212152));
  var params = cljs.core.get.call(null, map__108366__$1, new cljs.core.Keyword(null, "params", "params", 4313443576));
  if (cljs.core._EQ_.call(null, method, "GET")) {
    return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [ajax.core.uri_with_params.call(null, uri, params), null, headers], null);
  } else {
    var map__108367 = format;
    var map__108367__$1 = cljs.core.seq_QMARK_.call(null, map__108367) ? cljs.core.apply.call(null, cljs.core.hash_map, map__108367) : map__108367;
    var content_type__$1 = cljs.core.get.call(null, map__108367__$1, new cljs.core.Keyword(null, "content-type", "content-type", 1799574400));
    var write__$1 = cljs.core.get.call(null, map__108367__$1, new cljs.core.Keyword(null, "write", "write", 1127304017));
    var body = write__$1.call(null, params);
    var content_type__$2 = cljs.core.truth_(content_type__$1) ? new cljs.core.PersistentArrayMap(null, 1, ["Content-Type", content_type__$1], null) : null;
    var headers__$1 = cljs.core.merge.call(null, function() {
      var or__12830__auto__ = headers;
      if (cljs.core.truth_(or__12830__auto__)) {
        return or__12830__auto__;
      } else {
        return cljs.core.PersistentArrayMap.EMPTY;
      }
    }(), content_type__$2);
    return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [uri, body, headers__$1], null);
  }
};
ajax.core.normalize_method = function normalize_method(method) {
  if (method instanceof cljs.core.Keyword) {
    return clojure.string.upper_case.call(null, cljs.core.name.call(null, method));
  } else {
    return method;
  }
};
ajax.core.base_handler = function base_handler(format, p__108368) {
  var map__108370 = p__108368;
  var map__108370__$1 = cljs.core.seq_QMARK_.call(null, map__108370) ? cljs.core.apply.call(null, cljs.core.hash_map, map__108370) : map__108370;
  var get_default_format = cljs.core.get.call(null, map__108370__$1, new cljs.core.Keyword(null, "get-default-format", "get-default-format", 1021569996));
  var handler = cljs.core.get.call(null, map__108370__$1, new cljs.core.Keyword(null, "handler", "handler", 1706707644));
  return function(xhrio) {
    return handler.call(null, ajax.core.interpret_response.call(null, format, xhrio, function() {
      var or__12830__auto__ = get_default_format;
      if (cljs.core.truth_(or__12830__auto__)) {
        return or__12830__auto__;
      } else {
        return ajax.core.no_format;
      }
    }()));
  };
};
ajax.core.ajax_request = function() {
  var ajax_request = null;
  var ajax_request__3 = function(uri, method, opts) {
    return ajax_request.call(null, uri, method, opts, new goog.net.XhrIo);
  };
  var ajax_request__4 = function(uri, method, p__108371, js_ajax) {
    var map__108374 = p__108371;
    var map__108374__$1 = cljs.core.seq_QMARK_.call(null, map__108374) ? cljs.core.apply.call(null, cljs.core.hash_map, map__108374) : map__108374;
    var opts = map__108374__$1;
    var format = cljs.core.get.call(null, map__108374__$1, new cljs.core.Keyword(null, "format", "format", 4040092521));
    var format__$1 = ajax.core.get_format.call(null, format);
    var method__$1 = ajax.core.normalize_method.call(null, method);
    var vec__108375 = ajax.core.process_inputs.call(null, uri, method__$1, format__$1, opts);
    var uri__$1 = cljs.core.nth.call(null, vec__108375, 0, null);
    var body = cljs.core.nth.call(null, vec__108375, 1, null);
    var headers = cljs.core.nth.call(null, vec__108375, 2, null);
    var handler = ajax.core.base_handler.call(null, format__$1, opts);
    return ajax.core._js_ajax_request.call(null, js_ajax, uri__$1, method__$1, body, cljs.core.clj__GT_js.call(null, headers), handler, opts);
  };
  ajax_request = function(uri, method, p__108371, js_ajax) {
    switch(arguments.length) {
      case 3:
        return ajax_request__3.call(this, uri, method, p__108371);
      case 4:
        return ajax_request__4.call(this, uri, method, p__108371, js_ajax);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ajax_request.cljs$core$IFn$_invoke$arity$3 = ajax_request__3;
  ajax_request.cljs$core$IFn$_invoke$arity$4 = ajax_request__4;
  return ajax_request;
}();
ajax.core.json_format = function json_format(format_params) {
  return ajax.core.codec.call(null, ajax.core.json_request_format.call(null), ajax.core.json_response_format.call(null, format_params));
};
ajax.core.edn_format = function edn_format() {
  return ajax.core.codec.call(null, ajax.core.edn_request_format.call(null), ajax.core.edn_response_format.call(null));
};
ajax.core.raw_format = function raw_format() {
  return ajax.core.codec.call(null, ajax.core.url_request_format.call(null), ajax.core.raw_response_format.call(null));
};
ajax.core.keyword_request_format = function keyword_request_format(format, format_params) {
  var G__108377 = format;
  if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "url", "url", 1014020321), G__108377)) {
    return ajax.core.url_request_format.call(null);
  } else {
    if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "raw", "raw", 1014016922), G__108377)) {
      return ajax.core.url_request_format.call(null);
    } else {
      if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "edn", "edn", 1014004513), G__108377)) {
        return ajax.core.edn_request_format.call(null);
      } else {
        if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "json", "json", 1017176154), G__108377)) {
          return ajax.core.json_request_format.call(null);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            throw new Error([cljs.core.str("unrecognized request format: "), cljs.core.str(format)].join(""));
          } else {
            return null;
          }
        }
      }
    }
  }
};
ajax.core.keyword_response_format = function keyword_response_format(format, format_params) {
  var G__108379 = format;
  if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "raw", "raw", 1014016922), G__108379)) {
    return ajax.core.raw_response_format.call(null);
  } else {
    if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "edn", "edn", 1014004513), G__108379)) {
      return ajax.core.edn_response_format.call(null);
    } else {
      if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "json", "json", 1017176154), G__108379)) {
        return ajax.core.json_response_format.call(null, format_params);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return null;
        } else {
          return null;
        }
      }
    }
  }
};
ajax.core.transform_handler = function transform_handler(p__108380) {
  var map__108385 = p__108380;
  var map__108385__$1 = cljs.core.seq_QMARK_.call(null, map__108385) ? cljs.core.apply.call(null, cljs.core.hash_map, map__108385) : map__108385;
  var finally$ = cljs.core.get.call(null, map__108385__$1, new cljs.core.Keyword(null, "finally", "finally", 4455611637));
  var error_handler = cljs.core.get.call(null, map__108385__$1, new cljs.core.Keyword(null, "error-handler", "error-handler", 1866823671));
  var handler = cljs.core.get.call(null, map__108385__$1, new cljs.core.Keyword(null, "handler", "handler", 1706707644));
  return function easy_handler(p__108386) {
    var vec__108388 = p__108386;
    var ok = cljs.core.nth.call(null, vec__108388, 0, null);
    var result = cljs.core.nth.call(null, vec__108388, 1, null);
    var temp__4090__auto___108389 = cljs.core.truth_(ok) ? handler : error_handler;
    if (cljs.core.truth_(temp__4090__auto___108389)) {
      var h_108390 = temp__4090__auto___108389;
      h_108390.call(null, result);
    } else {
    }
    if (cljs.core.fn_QMARK_.call(null, finally$)) {
      return finally$.call(null);
    } else {
      return null;
    }
  };
};
ajax.core.transform_format = function transform_format(p__108391) {
  var map__108393 = p__108391;
  var map__108393__$1 = cljs.core.seq_QMARK_.call(null, map__108393) ? cljs.core.apply.call(null, cljs.core.hash_map, map__108393) : map__108393;
  var opts = map__108393__$1;
  var response_format = cljs.core.get.call(null, map__108393__$1, new cljs.core.Keyword(null, "response-format", "response-format", 4250805877));
  var format = cljs.core.get.call(null, map__108393__$1, new cljs.core.Keyword(null, "format", "format", 4040092521));
  var rf = ajax.core.keyword_response_format.call(null, response_format, opts);
  if (format == null) {
    return ajax.core.codec.call(null, ajax.core.edn_request_format.call(null), rf);
  } else {
    if (format instanceof cljs.core.Keyword) {
      return ajax.core.codec.call(null, ajax.core.keyword_request_format.call(null, format, opts), rf);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return format;
      } else {
        return null;
      }
    }
  }
};
ajax.core.transform_opts = function transform_opts(opts) {
  return cljs.core.assoc.call(null, opts, new cljs.core.Keyword(null, "handler", "handler", 1706707644), ajax.core.transform_handler.call(null, opts), new cljs.core.Keyword(null, "format", "format", 4040092521), ajax.core.transform_format.call(null, opts), new cljs.core.Keyword(null, "get-default-format", "get-default-format", 1021569996), ajax.core.get_default_format);
};
ajax.core.GET = function() {
  var GET__delegate = function(uri, p__108394) {
    var vec__108396 = p__108394;
    var opts = cljs.core.nth.call(null, vec__108396, 0, null);
    return ajax.core.ajax_request.call(null, uri, "GET", ajax.core.transform_opts.call(null, opts));
  };
  var GET = function(uri, var_args) {
    var p__108394 = null;
    if (arguments.length > 1) {
      p__108394 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return GET__delegate.call(this, uri, p__108394);
  };
  GET.cljs$lang$maxFixedArity = 1;
  GET.cljs$lang$applyTo = function(arglist__108397) {
    var uri = cljs.core.first(arglist__108397);
    var p__108394 = cljs.core.rest(arglist__108397);
    return GET__delegate(uri, p__108394);
  };
  GET.cljs$core$IFn$_invoke$arity$variadic = GET__delegate;
  return GET;
}();
ajax.core.PUT = function() {
  var PUT__delegate = function(uri, p__108398) {
    var vec__108400 = p__108398;
    var opts = cljs.core.nth.call(null, vec__108400, 0, null);
    return ajax.core.ajax_request.call(null, uri, "PUT", ajax.core.transform_opts.call(null, opts));
  };
  var PUT = function(uri, var_args) {
    var p__108398 = null;
    if (arguments.length > 1) {
      p__108398 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return PUT__delegate.call(this, uri, p__108398);
  };
  PUT.cljs$lang$maxFixedArity = 1;
  PUT.cljs$lang$applyTo = function(arglist__108401) {
    var uri = cljs.core.first(arglist__108401);
    var p__108398 = cljs.core.rest(arglist__108401);
    return PUT__delegate(uri, p__108398);
  };
  PUT.cljs$core$IFn$_invoke$arity$variadic = PUT__delegate;
  return PUT;
}();
ajax.core.POST = function() {
  var POST__delegate = function(uri, p__108402) {
    var vec__108404 = p__108402;
    var opts = cljs.core.nth.call(null, vec__108404, 0, null);
    return ajax.core.ajax_request.call(null, uri, "POST", ajax.core.transform_opts.call(null, opts));
  };
  var POST = function(uri, var_args) {
    var p__108402 = null;
    if (arguments.length > 1) {
      p__108402 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return POST__delegate.call(this, uri, p__108402);
  };
  POST.cljs$lang$maxFixedArity = 1;
  POST.cljs$lang$applyTo = function(arglist__108405) {
    var uri = cljs.core.first(arglist__108405);
    var p__108402 = cljs.core.rest(arglist__108405);
    return POST__delegate(uri, p__108402);
  };
  POST.cljs$core$IFn$_invoke$arity$variadic = POST__delegate;
  return POST;
}();
goog.provide("om.dom");
goog.require("cljs.core");
om.dom.a = function() {
  var a__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.a.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var a = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return a__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  a.cljs$lang$maxFixedArity = 1;
  a.cljs$lang$applyTo = function(arglist__108982) {
    var opts__14331__auto__ = cljs.core.first(arglist__108982);
    var children__14332__auto__ = cljs.core.rest(arglist__108982);
    return a__delegate(opts__14331__auto__, children__14332__auto__);
  };
  a.cljs$core$IFn$_invoke$arity$variadic = a__delegate;
  return a;
}();
om.dom.abbr = function() {
  var abbr__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.abbr.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var abbr = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return abbr__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  abbr.cljs$lang$maxFixedArity = 1;
  abbr.cljs$lang$applyTo = function(arglist__108983) {
    var opts__14331__auto__ = cljs.core.first(arglist__108983);
    var children__14332__auto__ = cljs.core.rest(arglist__108983);
    return abbr__delegate(opts__14331__auto__, children__14332__auto__);
  };
  abbr.cljs$core$IFn$_invoke$arity$variadic = abbr__delegate;
  return abbr;
}();
om.dom.address = function() {
  var address__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.address.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var address = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return address__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  address.cljs$lang$maxFixedArity = 1;
  address.cljs$lang$applyTo = function(arglist__108984) {
    var opts__14331__auto__ = cljs.core.first(arglist__108984);
    var children__14332__auto__ = cljs.core.rest(arglist__108984);
    return address__delegate(opts__14331__auto__, children__14332__auto__);
  };
  address.cljs$core$IFn$_invoke$arity$variadic = address__delegate;
  return address;
}();
om.dom.area = function() {
  var area__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.area.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var area = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return area__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  area.cljs$lang$maxFixedArity = 1;
  area.cljs$lang$applyTo = function(arglist__108985) {
    var opts__14331__auto__ = cljs.core.first(arglist__108985);
    var children__14332__auto__ = cljs.core.rest(arglist__108985);
    return area__delegate(opts__14331__auto__, children__14332__auto__);
  };
  area.cljs$core$IFn$_invoke$arity$variadic = area__delegate;
  return area;
}();
om.dom.article = function() {
  var article__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.article.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var article = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return article__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  article.cljs$lang$maxFixedArity = 1;
  article.cljs$lang$applyTo = function(arglist__108986) {
    var opts__14331__auto__ = cljs.core.first(arglist__108986);
    var children__14332__auto__ = cljs.core.rest(arglist__108986);
    return article__delegate(opts__14331__auto__, children__14332__auto__);
  };
  article.cljs$core$IFn$_invoke$arity$variadic = article__delegate;
  return article;
}();
om.dom.aside = function() {
  var aside__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.aside.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var aside = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return aside__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  aside.cljs$lang$maxFixedArity = 1;
  aside.cljs$lang$applyTo = function(arglist__108987) {
    var opts__14331__auto__ = cljs.core.first(arglist__108987);
    var children__14332__auto__ = cljs.core.rest(arglist__108987);
    return aside__delegate(opts__14331__auto__, children__14332__auto__);
  };
  aside.cljs$core$IFn$_invoke$arity$variadic = aside__delegate;
  return aside;
}();
om.dom.audio = function() {
  var audio__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.audio.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var audio = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return audio__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  audio.cljs$lang$maxFixedArity = 1;
  audio.cljs$lang$applyTo = function(arglist__108988) {
    var opts__14331__auto__ = cljs.core.first(arglist__108988);
    var children__14332__auto__ = cljs.core.rest(arglist__108988);
    return audio__delegate(opts__14331__auto__, children__14332__auto__);
  };
  audio.cljs$core$IFn$_invoke$arity$variadic = audio__delegate;
  return audio;
}();
om.dom.b = function() {
  var b__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.b.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var b = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return b__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  b.cljs$lang$maxFixedArity = 1;
  b.cljs$lang$applyTo = function(arglist__108989) {
    var opts__14331__auto__ = cljs.core.first(arglist__108989);
    var children__14332__auto__ = cljs.core.rest(arglist__108989);
    return b__delegate(opts__14331__auto__, children__14332__auto__);
  };
  b.cljs$core$IFn$_invoke$arity$variadic = b__delegate;
  return b;
}();
om.dom.base = function() {
  var base__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.base.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var base = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return base__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  base.cljs$lang$maxFixedArity = 1;
  base.cljs$lang$applyTo = function(arglist__108990) {
    var opts__14331__auto__ = cljs.core.first(arglist__108990);
    var children__14332__auto__ = cljs.core.rest(arglist__108990);
    return base__delegate(opts__14331__auto__, children__14332__auto__);
  };
  base.cljs$core$IFn$_invoke$arity$variadic = base__delegate;
  return base;
}();
om.dom.bdi = function() {
  var bdi__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.bdi.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var bdi = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return bdi__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  bdi.cljs$lang$maxFixedArity = 1;
  bdi.cljs$lang$applyTo = function(arglist__108991) {
    var opts__14331__auto__ = cljs.core.first(arglist__108991);
    var children__14332__auto__ = cljs.core.rest(arglist__108991);
    return bdi__delegate(opts__14331__auto__, children__14332__auto__);
  };
  bdi.cljs$core$IFn$_invoke$arity$variadic = bdi__delegate;
  return bdi;
}();
om.dom.bdo = function() {
  var bdo__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.bdo.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var bdo = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return bdo__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  bdo.cljs$lang$maxFixedArity = 1;
  bdo.cljs$lang$applyTo = function(arglist__108992) {
    var opts__14331__auto__ = cljs.core.first(arglist__108992);
    var children__14332__auto__ = cljs.core.rest(arglist__108992);
    return bdo__delegate(opts__14331__auto__, children__14332__auto__);
  };
  bdo.cljs$core$IFn$_invoke$arity$variadic = bdo__delegate;
  return bdo;
}();
om.dom.big = function() {
  var big__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.big.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var big = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return big__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  big.cljs$lang$maxFixedArity = 1;
  big.cljs$lang$applyTo = function(arglist__108993) {
    var opts__14331__auto__ = cljs.core.first(arglist__108993);
    var children__14332__auto__ = cljs.core.rest(arglist__108993);
    return big__delegate(opts__14331__auto__, children__14332__auto__);
  };
  big.cljs$core$IFn$_invoke$arity$variadic = big__delegate;
  return big;
}();
om.dom.blockquote = function() {
  var blockquote__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.blockquote.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var blockquote = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return blockquote__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  blockquote.cljs$lang$maxFixedArity = 1;
  blockquote.cljs$lang$applyTo = function(arglist__108994) {
    var opts__14331__auto__ = cljs.core.first(arglist__108994);
    var children__14332__auto__ = cljs.core.rest(arglist__108994);
    return blockquote__delegate(opts__14331__auto__, children__14332__auto__);
  };
  blockquote.cljs$core$IFn$_invoke$arity$variadic = blockquote__delegate;
  return blockquote;
}();
om.dom.body = function() {
  var body__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.body.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var body = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return body__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  body.cljs$lang$maxFixedArity = 1;
  body.cljs$lang$applyTo = function(arglist__108995) {
    var opts__14331__auto__ = cljs.core.first(arglist__108995);
    var children__14332__auto__ = cljs.core.rest(arglist__108995);
    return body__delegate(opts__14331__auto__, children__14332__auto__);
  };
  body.cljs$core$IFn$_invoke$arity$variadic = body__delegate;
  return body;
}();
om.dom.br = function() {
  var br__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.br.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var br = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return br__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  br.cljs$lang$maxFixedArity = 1;
  br.cljs$lang$applyTo = function(arglist__108996) {
    var opts__14331__auto__ = cljs.core.first(arglist__108996);
    var children__14332__auto__ = cljs.core.rest(arglist__108996);
    return br__delegate(opts__14331__auto__, children__14332__auto__);
  };
  br.cljs$core$IFn$_invoke$arity$variadic = br__delegate;
  return br;
}();
om.dom.button = function() {
  var button__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.button.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var button = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return button__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  button.cljs$lang$maxFixedArity = 1;
  button.cljs$lang$applyTo = function(arglist__108997) {
    var opts__14331__auto__ = cljs.core.first(arglist__108997);
    var children__14332__auto__ = cljs.core.rest(arglist__108997);
    return button__delegate(opts__14331__auto__, children__14332__auto__);
  };
  button.cljs$core$IFn$_invoke$arity$variadic = button__delegate;
  return button;
}();
om.dom.canvas = function() {
  var canvas__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.canvas.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var canvas = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return canvas__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  canvas.cljs$lang$maxFixedArity = 1;
  canvas.cljs$lang$applyTo = function(arglist__108998) {
    var opts__14331__auto__ = cljs.core.first(arglist__108998);
    var children__14332__auto__ = cljs.core.rest(arglist__108998);
    return canvas__delegate(opts__14331__auto__, children__14332__auto__);
  };
  canvas.cljs$core$IFn$_invoke$arity$variadic = canvas__delegate;
  return canvas;
}();
om.dom.caption = function() {
  var caption__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.caption.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var caption = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return caption__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  caption.cljs$lang$maxFixedArity = 1;
  caption.cljs$lang$applyTo = function(arglist__108999) {
    var opts__14331__auto__ = cljs.core.first(arglist__108999);
    var children__14332__auto__ = cljs.core.rest(arglist__108999);
    return caption__delegate(opts__14331__auto__, children__14332__auto__);
  };
  caption.cljs$core$IFn$_invoke$arity$variadic = caption__delegate;
  return caption;
}();
om.dom.cite = function() {
  var cite__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.cite.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var cite = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return cite__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  cite.cljs$lang$maxFixedArity = 1;
  cite.cljs$lang$applyTo = function(arglist__109000) {
    var opts__14331__auto__ = cljs.core.first(arglist__109000);
    var children__14332__auto__ = cljs.core.rest(arglist__109000);
    return cite__delegate(opts__14331__auto__, children__14332__auto__);
  };
  cite.cljs$core$IFn$_invoke$arity$variadic = cite__delegate;
  return cite;
}();
om.dom.code = function() {
  var code__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.code.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var code = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return code__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  code.cljs$lang$maxFixedArity = 1;
  code.cljs$lang$applyTo = function(arglist__109001) {
    var opts__14331__auto__ = cljs.core.first(arglist__109001);
    var children__14332__auto__ = cljs.core.rest(arglist__109001);
    return code__delegate(opts__14331__auto__, children__14332__auto__);
  };
  code.cljs$core$IFn$_invoke$arity$variadic = code__delegate;
  return code;
}();
om.dom.col = function() {
  var col__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.col.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var col = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return col__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  col.cljs$lang$maxFixedArity = 1;
  col.cljs$lang$applyTo = function(arglist__109002) {
    var opts__14331__auto__ = cljs.core.first(arglist__109002);
    var children__14332__auto__ = cljs.core.rest(arglist__109002);
    return col__delegate(opts__14331__auto__, children__14332__auto__);
  };
  col.cljs$core$IFn$_invoke$arity$variadic = col__delegate;
  return col;
}();
om.dom.colgroup = function() {
  var colgroup__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.colgroup.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var colgroup = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return colgroup__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  colgroup.cljs$lang$maxFixedArity = 1;
  colgroup.cljs$lang$applyTo = function(arglist__109003) {
    var opts__14331__auto__ = cljs.core.first(arglist__109003);
    var children__14332__auto__ = cljs.core.rest(arglist__109003);
    return colgroup__delegate(opts__14331__auto__, children__14332__auto__);
  };
  colgroup.cljs$core$IFn$_invoke$arity$variadic = colgroup__delegate;
  return colgroup;
}();
om.dom.data = function() {
  var data__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.data.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var data = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return data__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  data.cljs$lang$maxFixedArity = 1;
  data.cljs$lang$applyTo = function(arglist__109004) {
    var opts__14331__auto__ = cljs.core.first(arglist__109004);
    var children__14332__auto__ = cljs.core.rest(arglist__109004);
    return data__delegate(opts__14331__auto__, children__14332__auto__);
  };
  data.cljs$core$IFn$_invoke$arity$variadic = data__delegate;
  return data;
}();
om.dom.datalist = function() {
  var datalist__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.datalist.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var datalist = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return datalist__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  datalist.cljs$lang$maxFixedArity = 1;
  datalist.cljs$lang$applyTo = function(arglist__109005) {
    var opts__14331__auto__ = cljs.core.first(arglist__109005);
    var children__14332__auto__ = cljs.core.rest(arglist__109005);
    return datalist__delegate(opts__14331__auto__, children__14332__auto__);
  };
  datalist.cljs$core$IFn$_invoke$arity$variadic = datalist__delegate;
  return datalist;
}();
om.dom.dd = function() {
  var dd__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.dd.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var dd = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return dd__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  dd.cljs$lang$maxFixedArity = 1;
  dd.cljs$lang$applyTo = function(arglist__109006) {
    var opts__14331__auto__ = cljs.core.first(arglist__109006);
    var children__14332__auto__ = cljs.core.rest(arglist__109006);
    return dd__delegate(opts__14331__auto__, children__14332__auto__);
  };
  dd.cljs$core$IFn$_invoke$arity$variadic = dd__delegate;
  return dd;
}();
om.dom.del = function() {
  var del__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.del.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var del = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return del__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  del.cljs$lang$maxFixedArity = 1;
  del.cljs$lang$applyTo = function(arglist__109007) {
    var opts__14331__auto__ = cljs.core.first(arglist__109007);
    var children__14332__auto__ = cljs.core.rest(arglist__109007);
    return del__delegate(opts__14331__auto__, children__14332__auto__);
  };
  del.cljs$core$IFn$_invoke$arity$variadic = del__delegate;
  return del;
}();
om.dom.dfn = function() {
  var dfn__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.dfn.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var dfn = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return dfn__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  dfn.cljs$lang$maxFixedArity = 1;
  dfn.cljs$lang$applyTo = function(arglist__109008) {
    var opts__14331__auto__ = cljs.core.first(arglist__109008);
    var children__14332__auto__ = cljs.core.rest(arglist__109008);
    return dfn__delegate(opts__14331__auto__, children__14332__auto__);
  };
  dfn.cljs$core$IFn$_invoke$arity$variadic = dfn__delegate;
  return dfn;
}();
om.dom.div = function() {
  var div__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.div.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var div = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return div__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  div.cljs$lang$maxFixedArity = 1;
  div.cljs$lang$applyTo = function(arglist__109009) {
    var opts__14331__auto__ = cljs.core.first(arglist__109009);
    var children__14332__auto__ = cljs.core.rest(arglist__109009);
    return div__delegate(opts__14331__auto__, children__14332__auto__);
  };
  div.cljs$core$IFn$_invoke$arity$variadic = div__delegate;
  return div;
}();
om.dom.dl = function() {
  var dl__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.dl.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var dl = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return dl__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  dl.cljs$lang$maxFixedArity = 1;
  dl.cljs$lang$applyTo = function(arglist__109010) {
    var opts__14331__auto__ = cljs.core.first(arglist__109010);
    var children__14332__auto__ = cljs.core.rest(arglist__109010);
    return dl__delegate(opts__14331__auto__, children__14332__auto__);
  };
  dl.cljs$core$IFn$_invoke$arity$variadic = dl__delegate;
  return dl;
}();
om.dom.dt = function() {
  var dt__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.dt.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var dt = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return dt__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  dt.cljs$lang$maxFixedArity = 1;
  dt.cljs$lang$applyTo = function(arglist__109011) {
    var opts__14331__auto__ = cljs.core.first(arglist__109011);
    var children__14332__auto__ = cljs.core.rest(arglist__109011);
    return dt__delegate(opts__14331__auto__, children__14332__auto__);
  };
  dt.cljs$core$IFn$_invoke$arity$variadic = dt__delegate;
  return dt;
}();
om.dom.em = function() {
  var em__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.em.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var em = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return em__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  em.cljs$lang$maxFixedArity = 1;
  em.cljs$lang$applyTo = function(arglist__109012) {
    var opts__14331__auto__ = cljs.core.first(arglist__109012);
    var children__14332__auto__ = cljs.core.rest(arglist__109012);
    return em__delegate(opts__14331__auto__, children__14332__auto__);
  };
  em.cljs$core$IFn$_invoke$arity$variadic = em__delegate;
  return em;
}();
om.dom.embed = function() {
  var embed__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.embed.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var embed = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return embed__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  embed.cljs$lang$maxFixedArity = 1;
  embed.cljs$lang$applyTo = function(arglist__109013) {
    var opts__14331__auto__ = cljs.core.first(arglist__109013);
    var children__14332__auto__ = cljs.core.rest(arglist__109013);
    return embed__delegate(opts__14331__auto__, children__14332__auto__);
  };
  embed.cljs$core$IFn$_invoke$arity$variadic = embed__delegate;
  return embed;
}();
om.dom.fieldset = function() {
  var fieldset__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.fieldset.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var fieldset = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return fieldset__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  fieldset.cljs$lang$maxFixedArity = 1;
  fieldset.cljs$lang$applyTo = function(arglist__109014) {
    var opts__14331__auto__ = cljs.core.first(arglist__109014);
    var children__14332__auto__ = cljs.core.rest(arglist__109014);
    return fieldset__delegate(opts__14331__auto__, children__14332__auto__);
  };
  fieldset.cljs$core$IFn$_invoke$arity$variadic = fieldset__delegate;
  return fieldset;
}();
om.dom.figcaption = function() {
  var figcaption__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.figcaption.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var figcaption = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return figcaption__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  figcaption.cljs$lang$maxFixedArity = 1;
  figcaption.cljs$lang$applyTo = function(arglist__109015) {
    var opts__14331__auto__ = cljs.core.first(arglist__109015);
    var children__14332__auto__ = cljs.core.rest(arglist__109015);
    return figcaption__delegate(opts__14331__auto__, children__14332__auto__);
  };
  figcaption.cljs$core$IFn$_invoke$arity$variadic = figcaption__delegate;
  return figcaption;
}();
om.dom.figure = function() {
  var figure__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.figure.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var figure = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return figure__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  figure.cljs$lang$maxFixedArity = 1;
  figure.cljs$lang$applyTo = function(arglist__109016) {
    var opts__14331__auto__ = cljs.core.first(arglist__109016);
    var children__14332__auto__ = cljs.core.rest(arglist__109016);
    return figure__delegate(opts__14331__auto__, children__14332__auto__);
  };
  figure.cljs$core$IFn$_invoke$arity$variadic = figure__delegate;
  return figure;
}();
om.dom.footer = function() {
  var footer__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.footer.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var footer = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return footer__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  footer.cljs$lang$maxFixedArity = 1;
  footer.cljs$lang$applyTo = function(arglist__109017) {
    var opts__14331__auto__ = cljs.core.first(arglist__109017);
    var children__14332__auto__ = cljs.core.rest(arglist__109017);
    return footer__delegate(opts__14331__auto__, children__14332__auto__);
  };
  footer.cljs$core$IFn$_invoke$arity$variadic = footer__delegate;
  return footer;
}();
om.dom.form = function() {
  var form__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.form.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var form = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return form__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  form.cljs$lang$maxFixedArity = 1;
  form.cljs$lang$applyTo = function(arglist__109018) {
    var opts__14331__auto__ = cljs.core.first(arglist__109018);
    var children__14332__auto__ = cljs.core.rest(arglist__109018);
    return form__delegate(opts__14331__auto__, children__14332__auto__);
  };
  form.cljs$core$IFn$_invoke$arity$variadic = form__delegate;
  return form;
}();
om.dom.h1 = function() {
  var h1__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.h1.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var h1 = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return h1__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  h1.cljs$lang$maxFixedArity = 1;
  h1.cljs$lang$applyTo = function(arglist__109019) {
    var opts__14331__auto__ = cljs.core.first(arglist__109019);
    var children__14332__auto__ = cljs.core.rest(arglist__109019);
    return h1__delegate(opts__14331__auto__, children__14332__auto__);
  };
  h1.cljs$core$IFn$_invoke$arity$variadic = h1__delegate;
  return h1;
}();
om.dom.h2 = function() {
  var h2__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.h2.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var h2 = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return h2__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  h2.cljs$lang$maxFixedArity = 1;
  h2.cljs$lang$applyTo = function(arglist__109020) {
    var opts__14331__auto__ = cljs.core.first(arglist__109020);
    var children__14332__auto__ = cljs.core.rest(arglist__109020);
    return h2__delegate(opts__14331__auto__, children__14332__auto__);
  };
  h2.cljs$core$IFn$_invoke$arity$variadic = h2__delegate;
  return h2;
}();
om.dom.h3 = function() {
  var h3__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.h3.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var h3 = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return h3__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  h3.cljs$lang$maxFixedArity = 1;
  h3.cljs$lang$applyTo = function(arglist__109021) {
    var opts__14331__auto__ = cljs.core.first(arglist__109021);
    var children__14332__auto__ = cljs.core.rest(arglist__109021);
    return h3__delegate(opts__14331__auto__, children__14332__auto__);
  };
  h3.cljs$core$IFn$_invoke$arity$variadic = h3__delegate;
  return h3;
}();
om.dom.h4 = function() {
  var h4__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.h4.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var h4 = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return h4__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  h4.cljs$lang$maxFixedArity = 1;
  h4.cljs$lang$applyTo = function(arglist__109022) {
    var opts__14331__auto__ = cljs.core.first(arglist__109022);
    var children__14332__auto__ = cljs.core.rest(arglist__109022);
    return h4__delegate(opts__14331__auto__, children__14332__auto__);
  };
  h4.cljs$core$IFn$_invoke$arity$variadic = h4__delegate;
  return h4;
}();
om.dom.h5 = function() {
  var h5__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.h5.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var h5 = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return h5__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  h5.cljs$lang$maxFixedArity = 1;
  h5.cljs$lang$applyTo = function(arglist__109023) {
    var opts__14331__auto__ = cljs.core.first(arglist__109023);
    var children__14332__auto__ = cljs.core.rest(arglist__109023);
    return h5__delegate(opts__14331__auto__, children__14332__auto__);
  };
  h5.cljs$core$IFn$_invoke$arity$variadic = h5__delegate;
  return h5;
}();
om.dom.h6 = function() {
  var h6__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.h6.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var h6 = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return h6__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  h6.cljs$lang$maxFixedArity = 1;
  h6.cljs$lang$applyTo = function(arglist__109024) {
    var opts__14331__auto__ = cljs.core.first(arglist__109024);
    var children__14332__auto__ = cljs.core.rest(arglist__109024);
    return h6__delegate(opts__14331__auto__, children__14332__auto__);
  };
  h6.cljs$core$IFn$_invoke$arity$variadic = h6__delegate;
  return h6;
}();
om.dom.head = function() {
  var head__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.head.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var head = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return head__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  head.cljs$lang$maxFixedArity = 1;
  head.cljs$lang$applyTo = function(arglist__109025) {
    var opts__14331__auto__ = cljs.core.first(arglist__109025);
    var children__14332__auto__ = cljs.core.rest(arglist__109025);
    return head__delegate(opts__14331__auto__, children__14332__auto__);
  };
  head.cljs$core$IFn$_invoke$arity$variadic = head__delegate;
  return head;
}();
om.dom.header = function() {
  var header__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.header.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var header = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return header__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  header.cljs$lang$maxFixedArity = 1;
  header.cljs$lang$applyTo = function(arglist__109026) {
    var opts__14331__auto__ = cljs.core.first(arglist__109026);
    var children__14332__auto__ = cljs.core.rest(arglist__109026);
    return header__delegate(opts__14331__auto__, children__14332__auto__);
  };
  header.cljs$core$IFn$_invoke$arity$variadic = header__delegate;
  return header;
}();
om.dom.hr = function() {
  var hr__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.hr.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var hr = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return hr__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  hr.cljs$lang$maxFixedArity = 1;
  hr.cljs$lang$applyTo = function(arglist__109027) {
    var opts__14331__auto__ = cljs.core.first(arglist__109027);
    var children__14332__auto__ = cljs.core.rest(arglist__109027);
    return hr__delegate(opts__14331__auto__, children__14332__auto__);
  };
  hr.cljs$core$IFn$_invoke$arity$variadic = hr__delegate;
  return hr;
}();
om.dom.html = function() {
  var html__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.html.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var html = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return html__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  html.cljs$lang$maxFixedArity = 1;
  html.cljs$lang$applyTo = function(arglist__109028) {
    var opts__14331__auto__ = cljs.core.first(arglist__109028);
    var children__14332__auto__ = cljs.core.rest(arglist__109028);
    return html__delegate(opts__14331__auto__, children__14332__auto__);
  };
  html.cljs$core$IFn$_invoke$arity$variadic = html__delegate;
  return html;
}();
om.dom.i = function() {
  var i__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.i.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var i = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return i__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  i.cljs$lang$maxFixedArity = 1;
  i.cljs$lang$applyTo = function(arglist__109029) {
    var opts__14331__auto__ = cljs.core.first(arglist__109029);
    var children__14332__auto__ = cljs.core.rest(arglist__109029);
    return i__delegate(opts__14331__auto__, children__14332__auto__);
  };
  i.cljs$core$IFn$_invoke$arity$variadic = i__delegate;
  return i;
}();
om.dom.iframe = function() {
  var iframe__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.iframe.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var iframe = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return iframe__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  iframe.cljs$lang$maxFixedArity = 1;
  iframe.cljs$lang$applyTo = function(arglist__109030) {
    var opts__14331__auto__ = cljs.core.first(arglist__109030);
    var children__14332__auto__ = cljs.core.rest(arglist__109030);
    return iframe__delegate(opts__14331__auto__, children__14332__auto__);
  };
  iframe.cljs$core$IFn$_invoke$arity$variadic = iframe__delegate;
  return iframe;
}();
om.dom.img = function() {
  var img__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.img.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var img = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return img__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  img.cljs$lang$maxFixedArity = 1;
  img.cljs$lang$applyTo = function(arglist__109031) {
    var opts__14331__auto__ = cljs.core.first(arglist__109031);
    var children__14332__auto__ = cljs.core.rest(arglist__109031);
    return img__delegate(opts__14331__auto__, children__14332__auto__);
  };
  img.cljs$core$IFn$_invoke$arity$variadic = img__delegate;
  return img;
}();
om.dom.ins = function() {
  var ins__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.ins.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var ins = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return ins__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  ins.cljs$lang$maxFixedArity = 1;
  ins.cljs$lang$applyTo = function(arglist__109032) {
    var opts__14331__auto__ = cljs.core.first(arglist__109032);
    var children__14332__auto__ = cljs.core.rest(arglist__109032);
    return ins__delegate(opts__14331__auto__, children__14332__auto__);
  };
  ins.cljs$core$IFn$_invoke$arity$variadic = ins__delegate;
  return ins;
}();
om.dom.kbd = function() {
  var kbd__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.kbd.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var kbd = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return kbd__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  kbd.cljs$lang$maxFixedArity = 1;
  kbd.cljs$lang$applyTo = function(arglist__109033) {
    var opts__14331__auto__ = cljs.core.first(arglist__109033);
    var children__14332__auto__ = cljs.core.rest(arglist__109033);
    return kbd__delegate(opts__14331__auto__, children__14332__auto__);
  };
  kbd.cljs$core$IFn$_invoke$arity$variadic = kbd__delegate;
  return kbd;
}();
om.dom.keygen = function() {
  var keygen__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.keygen.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var keygen = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return keygen__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  keygen.cljs$lang$maxFixedArity = 1;
  keygen.cljs$lang$applyTo = function(arglist__109034) {
    var opts__14331__auto__ = cljs.core.first(arglist__109034);
    var children__14332__auto__ = cljs.core.rest(arglist__109034);
    return keygen__delegate(opts__14331__auto__, children__14332__auto__);
  };
  keygen.cljs$core$IFn$_invoke$arity$variadic = keygen__delegate;
  return keygen;
}();
om.dom.label = function() {
  var label__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.label.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var label = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return label__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  label.cljs$lang$maxFixedArity = 1;
  label.cljs$lang$applyTo = function(arglist__109035) {
    var opts__14331__auto__ = cljs.core.first(arglist__109035);
    var children__14332__auto__ = cljs.core.rest(arglist__109035);
    return label__delegate(opts__14331__auto__, children__14332__auto__);
  };
  label.cljs$core$IFn$_invoke$arity$variadic = label__delegate;
  return label;
}();
om.dom.legend = function() {
  var legend__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.legend.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var legend = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return legend__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  legend.cljs$lang$maxFixedArity = 1;
  legend.cljs$lang$applyTo = function(arglist__109036) {
    var opts__14331__auto__ = cljs.core.first(arglist__109036);
    var children__14332__auto__ = cljs.core.rest(arglist__109036);
    return legend__delegate(opts__14331__auto__, children__14332__auto__);
  };
  legend.cljs$core$IFn$_invoke$arity$variadic = legend__delegate;
  return legend;
}();
om.dom.li = function() {
  var li__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.li.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var li = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return li__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  li.cljs$lang$maxFixedArity = 1;
  li.cljs$lang$applyTo = function(arglist__109037) {
    var opts__14331__auto__ = cljs.core.first(arglist__109037);
    var children__14332__auto__ = cljs.core.rest(arglist__109037);
    return li__delegate(opts__14331__auto__, children__14332__auto__);
  };
  li.cljs$core$IFn$_invoke$arity$variadic = li__delegate;
  return li;
}();
om.dom.link = function() {
  var link__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.link.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var link = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return link__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  link.cljs$lang$maxFixedArity = 1;
  link.cljs$lang$applyTo = function(arglist__109038) {
    var opts__14331__auto__ = cljs.core.first(arglist__109038);
    var children__14332__auto__ = cljs.core.rest(arglist__109038);
    return link__delegate(opts__14331__auto__, children__14332__auto__);
  };
  link.cljs$core$IFn$_invoke$arity$variadic = link__delegate;
  return link;
}();
om.dom.main = function() {
  var main__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.main.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var main = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return main__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  main.cljs$lang$maxFixedArity = 1;
  main.cljs$lang$applyTo = function(arglist__109039) {
    var opts__14331__auto__ = cljs.core.first(arglist__109039);
    var children__14332__auto__ = cljs.core.rest(arglist__109039);
    return main__delegate(opts__14331__auto__, children__14332__auto__);
  };
  main.cljs$core$IFn$_invoke$arity$variadic = main__delegate;
  return main;
}();
om.dom.map = function() {
  var map__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.map.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var map = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return map__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  map.cljs$lang$maxFixedArity = 1;
  map.cljs$lang$applyTo = function(arglist__109040) {
    var opts__14331__auto__ = cljs.core.first(arglist__109040);
    var children__14332__auto__ = cljs.core.rest(arglist__109040);
    return map__delegate(opts__14331__auto__, children__14332__auto__);
  };
  map.cljs$core$IFn$_invoke$arity$variadic = map__delegate;
  return map;
}();
om.dom.mark = function() {
  var mark__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.mark.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var mark = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return mark__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  mark.cljs$lang$maxFixedArity = 1;
  mark.cljs$lang$applyTo = function(arglist__109041) {
    var opts__14331__auto__ = cljs.core.first(arglist__109041);
    var children__14332__auto__ = cljs.core.rest(arglist__109041);
    return mark__delegate(opts__14331__auto__, children__14332__auto__);
  };
  mark.cljs$core$IFn$_invoke$arity$variadic = mark__delegate;
  return mark;
}();
om.dom.menu = function() {
  var menu__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.menu.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var menu = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return menu__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  menu.cljs$lang$maxFixedArity = 1;
  menu.cljs$lang$applyTo = function(arglist__109042) {
    var opts__14331__auto__ = cljs.core.first(arglist__109042);
    var children__14332__auto__ = cljs.core.rest(arglist__109042);
    return menu__delegate(opts__14331__auto__, children__14332__auto__);
  };
  menu.cljs$core$IFn$_invoke$arity$variadic = menu__delegate;
  return menu;
}();
om.dom.menuitem = function() {
  var menuitem__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.menuitem.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var menuitem = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return menuitem__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  menuitem.cljs$lang$maxFixedArity = 1;
  menuitem.cljs$lang$applyTo = function(arglist__109043) {
    var opts__14331__auto__ = cljs.core.first(arglist__109043);
    var children__14332__auto__ = cljs.core.rest(arglist__109043);
    return menuitem__delegate(opts__14331__auto__, children__14332__auto__);
  };
  menuitem.cljs$core$IFn$_invoke$arity$variadic = menuitem__delegate;
  return menuitem;
}();
om.dom.meta = function() {
  var meta__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.meta.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var meta = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return meta__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  meta.cljs$lang$maxFixedArity = 1;
  meta.cljs$lang$applyTo = function(arglist__109044) {
    var opts__14331__auto__ = cljs.core.first(arglist__109044);
    var children__14332__auto__ = cljs.core.rest(arglist__109044);
    return meta__delegate(opts__14331__auto__, children__14332__auto__);
  };
  meta.cljs$core$IFn$_invoke$arity$variadic = meta__delegate;
  return meta;
}();
om.dom.meter = function() {
  var meter__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.meter.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var meter = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return meter__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  meter.cljs$lang$maxFixedArity = 1;
  meter.cljs$lang$applyTo = function(arglist__109045) {
    var opts__14331__auto__ = cljs.core.first(arglist__109045);
    var children__14332__auto__ = cljs.core.rest(arglist__109045);
    return meter__delegate(opts__14331__auto__, children__14332__auto__);
  };
  meter.cljs$core$IFn$_invoke$arity$variadic = meter__delegate;
  return meter;
}();
om.dom.nav = function() {
  var nav__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.nav.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var nav = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return nav__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  nav.cljs$lang$maxFixedArity = 1;
  nav.cljs$lang$applyTo = function(arglist__109046) {
    var opts__14331__auto__ = cljs.core.first(arglist__109046);
    var children__14332__auto__ = cljs.core.rest(arglist__109046);
    return nav__delegate(opts__14331__auto__, children__14332__auto__);
  };
  nav.cljs$core$IFn$_invoke$arity$variadic = nav__delegate;
  return nav;
}();
om.dom.noscript = function() {
  var noscript__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.noscript.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var noscript = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return noscript__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  noscript.cljs$lang$maxFixedArity = 1;
  noscript.cljs$lang$applyTo = function(arglist__109047) {
    var opts__14331__auto__ = cljs.core.first(arglist__109047);
    var children__14332__auto__ = cljs.core.rest(arglist__109047);
    return noscript__delegate(opts__14331__auto__, children__14332__auto__);
  };
  noscript.cljs$core$IFn$_invoke$arity$variadic = noscript__delegate;
  return noscript;
}();
om.dom.object = function() {
  var object__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.object.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var object = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return object__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  object.cljs$lang$maxFixedArity = 1;
  object.cljs$lang$applyTo = function(arglist__109048) {
    var opts__14331__auto__ = cljs.core.first(arglist__109048);
    var children__14332__auto__ = cljs.core.rest(arglist__109048);
    return object__delegate(opts__14331__auto__, children__14332__auto__);
  };
  object.cljs$core$IFn$_invoke$arity$variadic = object__delegate;
  return object;
}();
om.dom.ol = function() {
  var ol__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.ol.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var ol = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return ol__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  ol.cljs$lang$maxFixedArity = 1;
  ol.cljs$lang$applyTo = function(arglist__109049) {
    var opts__14331__auto__ = cljs.core.first(arglist__109049);
    var children__14332__auto__ = cljs.core.rest(arglist__109049);
    return ol__delegate(opts__14331__auto__, children__14332__auto__);
  };
  ol.cljs$core$IFn$_invoke$arity$variadic = ol__delegate;
  return ol;
}();
om.dom.optgroup = function() {
  var optgroup__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.optgroup.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var optgroup = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return optgroup__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  optgroup.cljs$lang$maxFixedArity = 1;
  optgroup.cljs$lang$applyTo = function(arglist__109050) {
    var opts__14331__auto__ = cljs.core.first(arglist__109050);
    var children__14332__auto__ = cljs.core.rest(arglist__109050);
    return optgroup__delegate(opts__14331__auto__, children__14332__auto__);
  };
  optgroup.cljs$core$IFn$_invoke$arity$variadic = optgroup__delegate;
  return optgroup;
}();
om.dom.output = function() {
  var output__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.output.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var output = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return output__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  output.cljs$lang$maxFixedArity = 1;
  output.cljs$lang$applyTo = function(arglist__109051) {
    var opts__14331__auto__ = cljs.core.first(arglist__109051);
    var children__14332__auto__ = cljs.core.rest(arglist__109051);
    return output__delegate(opts__14331__auto__, children__14332__auto__);
  };
  output.cljs$core$IFn$_invoke$arity$variadic = output__delegate;
  return output;
}();
om.dom.p = function() {
  var p__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.p.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var p = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return p__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  p.cljs$lang$maxFixedArity = 1;
  p.cljs$lang$applyTo = function(arglist__109052) {
    var opts__14331__auto__ = cljs.core.first(arglist__109052);
    var children__14332__auto__ = cljs.core.rest(arglist__109052);
    return p__delegate(opts__14331__auto__, children__14332__auto__);
  };
  p.cljs$core$IFn$_invoke$arity$variadic = p__delegate;
  return p;
}();
om.dom.param = function() {
  var param__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.param.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var param = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return param__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  param.cljs$lang$maxFixedArity = 1;
  param.cljs$lang$applyTo = function(arglist__109053) {
    var opts__14331__auto__ = cljs.core.first(arglist__109053);
    var children__14332__auto__ = cljs.core.rest(arglist__109053);
    return param__delegate(opts__14331__auto__, children__14332__auto__);
  };
  param.cljs$core$IFn$_invoke$arity$variadic = param__delegate;
  return param;
}();
om.dom.pre = function() {
  var pre__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.pre.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var pre = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return pre__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  pre.cljs$lang$maxFixedArity = 1;
  pre.cljs$lang$applyTo = function(arglist__109054) {
    var opts__14331__auto__ = cljs.core.first(arglist__109054);
    var children__14332__auto__ = cljs.core.rest(arglist__109054);
    return pre__delegate(opts__14331__auto__, children__14332__auto__);
  };
  pre.cljs$core$IFn$_invoke$arity$variadic = pre__delegate;
  return pre;
}();
om.dom.progress = function() {
  var progress__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.progress.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var progress = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return progress__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  progress.cljs$lang$maxFixedArity = 1;
  progress.cljs$lang$applyTo = function(arglist__109055) {
    var opts__14331__auto__ = cljs.core.first(arglist__109055);
    var children__14332__auto__ = cljs.core.rest(arglist__109055);
    return progress__delegate(opts__14331__auto__, children__14332__auto__);
  };
  progress.cljs$core$IFn$_invoke$arity$variadic = progress__delegate;
  return progress;
}();
om.dom.q = function() {
  var q__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.q.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var q = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return q__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  q.cljs$lang$maxFixedArity = 1;
  q.cljs$lang$applyTo = function(arglist__109056) {
    var opts__14331__auto__ = cljs.core.first(arglist__109056);
    var children__14332__auto__ = cljs.core.rest(arglist__109056);
    return q__delegate(opts__14331__auto__, children__14332__auto__);
  };
  q.cljs$core$IFn$_invoke$arity$variadic = q__delegate;
  return q;
}();
om.dom.rp = function() {
  var rp__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.rp.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var rp = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return rp__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  rp.cljs$lang$maxFixedArity = 1;
  rp.cljs$lang$applyTo = function(arglist__109057) {
    var opts__14331__auto__ = cljs.core.first(arglist__109057);
    var children__14332__auto__ = cljs.core.rest(arglist__109057);
    return rp__delegate(opts__14331__auto__, children__14332__auto__);
  };
  rp.cljs$core$IFn$_invoke$arity$variadic = rp__delegate;
  return rp;
}();
om.dom.rt = function() {
  var rt__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.rt.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var rt = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return rt__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  rt.cljs$lang$maxFixedArity = 1;
  rt.cljs$lang$applyTo = function(arglist__109058) {
    var opts__14331__auto__ = cljs.core.first(arglist__109058);
    var children__14332__auto__ = cljs.core.rest(arglist__109058);
    return rt__delegate(opts__14331__auto__, children__14332__auto__);
  };
  rt.cljs$core$IFn$_invoke$arity$variadic = rt__delegate;
  return rt;
}();
om.dom.ruby = function() {
  var ruby__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.ruby.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var ruby = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return ruby__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  ruby.cljs$lang$maxFixedArity = 1;
  ruby.cljs$lang$applyTo = function(arglist__109059) {
    var opts__14331__auto__ = cljs.core.first(arglist__109059);
    var children__14332__auto__ = cljs.core.rest(arglist__109059);
    return ruby__delegate(opts__14331__auto__, children__14332__auto__);
  };
  ruby.cljs$core$IFn$_invoke$arity$variadic = ruby__delegate;
  return ruby;
}();
om.dom.s = function() {
  var s__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.s.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var s = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return s__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  s.cljs$lang$maxFixedArity = 1;
  s.cljs$lang$applyTo = function(arglist__109060) {
    var opts__14331__auto__ = cljs.core.first(arglist__109060);
    var children__14332__auto__ = cljs.core.rest(arglist__109060);
    return s__delegate(opts__14331__auto__, children__14332__auto__);
  };
  s.cljs$core$IFn$_invoke$arity$variadic = s__delegate;
  return s;
}();
om.dom.samp = function() {
  var samp__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.samp.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var samp = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return samp__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  samp.cljs$lang$maxFixedArity = 1;
  samp.cljs$lang$applyTo = function(arglist__109061) {
    var opts__14331__auto__ = cljs.core.first(arglist__109061);
    var children__14332__auto__ = cljs.core.rest(arglist__109061);
    return samp__delegate(opts__14331__auto__, children__14332__auto__);
  };
  samp.cljs$core$IFn$_invoke$arity$variadic = samp__delegate;
  return samp;
}();
om.dom.script = function() {
  var script__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.script.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var script = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return script__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  script.cljs$lang$maxFixedArity = 1;
  script.cljs$lang$applyTo = function(arglist__109062) {
    var opts__14331__auto__ = cljs.core.first(arglist__109062);
    var children__14332__auto__ = cljs.core.rest(arglist__109062);
    return script__delegate(opts__14331__auto__, children__14332__auto__);
  };
  script.cljs$core$IFn$_invoke$arity$variadic = script__delegate;
  return script;
}();
om.dom.section = function() {
  var section__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.section.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var section = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return section__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  section.cljs$lang$maxFixedArity = 1;
  section.cljs$lang$applyTo = function(arglist__109063) {
    var opts__14331__auto__ = cljs.core.first(arglist__109063);
    var children__14332__auto__ = cljs.core.rest(arglist__109063);
    return section__delegate(opts__14331__auto__, children__14332__auto__);
  };
  section.cljs$core$IFn$_invoke$arity$variadic = section__delegate;
  return section;
}();
om.dom.select = function() {
  var select__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.select.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var select = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return select__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  select.cljs$lang$maxFixedArity = 1;
  select.cljs$lang$applyTo = function(arglist__109064) {
    var opts__14331__auto__ = cljs.core.first(arglist__109064);
    var children__14332__auto__ = cljs.core.rest(arglist__109064);
    return select__delegate(opts__14331__auto__, children__14332__auto__);
  };
  select.cljs$core$IFn$_invoke$arity$variadic = select__delegate;
  return select;
}();
om.dom.small = function() {
  var small__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.small.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var small = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return small__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  small.cljs$lang$maxFixedArity = 1;
  small.cljs$lang$applyTo = function(arglist__109065) {
    var opts__14331__auto__ = cljs.core.first(arglist__109065);
    var children__14332__auto__ = cljs.core.rest(arglist__109065);
    return small__delegate(opts__14331__auto__, children__14332__auto__);
  };
  small.cljs$core$IFn$_invoke$arity$variadic = small__delegate;
  return small;
}();
om.dom.source = function() {
  var source__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.source.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var source = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return source__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  source.cljs$lang$maxFixedArity = 1;
  source.cljs$lang$applyTo = function(arglist__109066) {
    var opts__14331__auto__ = cljs.core.first(arglist__109066);
    var children__14332__auto__ = cljs.core.rest(arglist__109066);
    return source__delegate(opts__14331__auto__, children__14332__auto__);
  };
  source.cljs$core$IFn$_invoke$arity$variadic = source__delegate;
  return source;
}();
om.dom.span = function() {
  var span__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.span.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var span = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return span__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  span.cljs$lang$maxFixedArity = 1;
  span.cljs$lang$applyTo = function(arglist__109067) {
    var opts__14331__auto__ = cljs.core.first(arglist__109067);
    var children__14332__auto__ = cljs.core.rest(arglist__109067);
    return span__delegate(opts__14331__auto__, children__14332__auto__);
  };
  span.cljs$core$IFn$_invoke$arity$variadic = span__delegate;
  return span;
}();
om.dom.strong = function() {
  var strong__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.strong.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var strong = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return strong__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  strong.cljs$lang$maxFixedArity = 1;
  strong.cljs$lang$applyTo = function(arglist__109068) {
    var opts__14331__auto__ = cljs.core.first(arglist__109068);
    var children__14332__auto__ = cljs.core.rest(arglist__109068);
    return strong__delegate(opts__14331__auto__, children__14332__auto__);
  };
  strong.cljs$core$IFn$_invoke$arity$variadic = strong__delegate;
  return strong;
}();
om.dom.style = function() {
  var style__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.style.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var style = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return style__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  style.cljs$lang$maxFixedArity = 1;
  style.cljs$lang$applyTo = function(arglist__109069) {
    var opts__14331__auto__ = cljs.core.first(arglist__109069);
    var children__14332__auto__ = cljs.core.rest(arglist__109069);
    return style__delegate(opts__14331__auto__, children__14332__auto__);
  };
  style.cljs$core$IFn$_invoke$arity$variadic = style__delegate;
  return style;
}();
om.dom.sub = function() {
  var sub__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.sub.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var sub = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return sub__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  sub.cljs$lang$maxFixedArity = 1;
  sub.cljs$lang$applyTo = function(arglist__109070) {
    var opts__14331__auto__ = cljs.core.first(arglist__109070);
    var children__14332__auto__ = cljs.core.rest(arglist__109070);
    return sub__delegate(opts__14331__auto__, children__14332__auto__);
  };
  sub.cljs$core$IFn$_invoke$arity$variadic = sub__delegate;
  return sub;
}();
om.dom.summary = function() {
  var summary__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.summary.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var summary = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return summary__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  summary.cljs$lang$maxFixedArity = 1;
  summary.cljs$lang$applyTo = function(arglist__109071) {
    var opts__14331__auto__ = cljs.core.first(arglist__109071);
    var children__14332__auto__ = cljs.core.rest(arglist__109071);
    return summary__delegate(opts__14331__auto__, children__14332__auto__);
  };
  summary.cljs$core$IFn$_invoke$arity$variadic = summary__delegate;
  return summary;
}();
om.dom.sup = function() {
  var sup__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.sup.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var sup = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return sup__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  sup.cljs$lang$maxFixedArity = 1;
  sup.cljs$lang$applyTo = function(arglist__109072) {
    var opts__14331__auto__ = cljs.core.first(arglist__109072);
    var children__14332__auto__ = cljs.core.rest(arglist__109072);
    return sup__delegate(opts__14331__auto__, children__14332__auto__);
  };
  sup.cljs$core$IFn$_invoke$arity$variadic = sup__delegate;
  return sup;
}();
om.dom.table = function() {
  var table__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.table.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var table = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return table__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  table.cljs$lang$maxFixedArity = 1;
  table.cljs$lang$applyTo = function(arglist__109073) {
    var opts__14331__auto__ = cljs.core.first(arglist__109073);
    var children__14332__auto__ = cljs.core.rest(arglist__109073);
    return table__delegate(opts__14331__auto__, children__14332__auto__);
  };
  table.cljs$core$IFn$_invoke$arity$variadic = table__delegate;
  return table;
}();
om.dom.tbody = function() {
  var tbody__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.tbody.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var tbody = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return tbody__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  tbody.cljs$lang$maxFixedArity = 1;
  tbody.cljs$lang$applyTo = function(arglist__109074) {
    var opts__14331__auto__ = cljs.core.first(arglist__109074);
    var children__14332__auto__ = cljs.core.rest(arglist__109074);
    return tbody__delegate(opts__14331__auto__, children__14332__auto__);
  };
  tbody.cljs$core$IFn$_invoke$arity$variadic = tbody__delegate;
  return tbody;
}();
om.dom.td = function() {
  var td__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.td.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var td = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return td__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  td.cljs$lang$maxFixedArity = 1;
  td.cljs$lang$applyTo = function(arglist__109075) {
    var opts__14331__auto__ = cljs.core.first(arglist__109075);
    var children__14332__auto__ = cljs.core.rest(arglist__109075);
    return td__delegate(opts__14331__auto__, children__14332__auto__);
  };
  td.cljs$core$IFn$_invoke$arity$variadic = td__delegate;
  return td;
}();
om.dom.tfoot = function() {
  var tfoot__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.tfoot.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var tfoot = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return tfoot__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  tfoot.cljs$lang$maxFixedArity = 1;
  tfoot.cljs$lang$applyTo = function(arglist__109076) {
    var opts__14331__auto__ = cljs.core.first(arglist__109076);
    var children__14332__auto__ = cljs.core.rest(arglist__109076);
    return tfoot__delegate(opts__14331__auto__, children__14332__auto__);
  };
  tfoot.cljs$core$IFn$_invoke$arity$variadic = tfoot__delegate;
  return tfoot;
}();
om.dom.th = function() {
  var th__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.th.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var th = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return th__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  th.cljs$lang$maxFixedArity = 1;
  th.cljs$lang$applyTo = function(arglist__109077) {
    var opts__14331__auto__ = cljs.core.first(arglist__109077);
    var children__14332__auto__ = cljs.core.rest(arglist__109077);
    return th__delegate(opts__14331__auto__, children__14332__auto__);
  };
  th.cljs$core$IFn$_invoke$arity$variadic = th__delegate;
  return th;
}();
om.dom.thead = function() {
  var thead__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.thead.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var thead = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return thead__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  thead.cljs$lang$maxFixedArity = 1;
  thead.cljs$lang$applyTo = function(arglist__109078) {
    var opts__14331__auto__ = cljs.core.first(arglist__109078);
    var children__14332__auto__ = cljs.core.rest(arglist__109078);
    return thead__delegate(opts__14331__auto__, children__14332__auto__);
  };
  thead.cljs$core$IFn$_invoke$arity$variadic = thead__delegate;
  return thead;
}();
om.dom.time = function() {
  var time__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.time.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var time = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return time__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  time.cljs$lang$maxFixedArity = 1;
  time.cljs$lang$applyTo = function(arglist__109079) {
    var opts__14331__auto__ = cljs.core.first(arglist__109079);
    var children__14332__auto__ = cljs.core.rest(arglist__109079);
    return time__delegate(opts__14331__auto__, children__14332__auto__);
  };
  time.cljs$core$IFn$_invoke$arity$variadic = time__delegate;
  return time;
}();
om.dom.title = function() {
  var title__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.title.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var title = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return title__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  title.cljs$lang$maxFixedArity = 1;
  title.cljs$lang$applyTo = function(arglist__109080) {
    var opts__14331__auto__ = cljs.core.first(arglist__109080);
    var children__14332__auto__ = cljs.core.rest(arglist__109080);
    return title__delegate(opts__14331__auto__, children__14332__auto__);
  };
  title.cljs$core$IFn$_invoke$arity$variadic = title__delegate;
  return title;
}();
om.dom.tr = function() {
  var tr__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.tr.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var tr = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return tr__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  tr.cljs$lang$maxFixedArity = 1;
  tr.cljs$lang$applyTo = function(arglist__109081) {
    var opts__14331__auto__ = cljs.core.first(arglist__109081);
    var children__14332__auto__ = cljs.core.rest(arglist__109081);
    return tr__delegate(opts__14331__auto__, children__14332__auto__);
  };
  tr.cljs$core$IFn$_invoke$arity$variadic = tr__delegate;
  return tr;
}();
om.dom.track = function() {
  var track__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.track.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var track = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return track__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  track.cljs$lang$maxFixedArity = 1;
  track.cljs$lang$applyTo = function(arglist__109082) {
    var opts__14331__auto__ = cljs.core.first(arglist__109082);
    var children__14332__auto__ = cljs.core.rest(arglist__109082);
    return track__delegate(opts__14331__auto__, children__14332__auto__);
  };
  track.cljs$core$IFn$_invoke$arity$variadic = track__delegate;
  return track;
}();
om.dom.u = function() {
  var u__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.u.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var u = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return u__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  u.cljs$lang$maxFixedArity = 1;
  u.cljs$lang$applyTo = function(arglist__109083) {
    var opts__14331__auto__ = cljs.core.first(arglist__109083);
    var children__14332__auto__ = cljs.core.rest(arglist__109083);
    return u__delegate(opts__14331__auto__, children__14332__auto__);
  };
  u.cljs$core$IFn$_invoke$arity$variadic = u__delegate;
  return u;
}();
om.dom.ul = function() {
  var ul__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.ul.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var ul = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return ul__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  ul.cljs$lang$maxFixedArity = 1;
  ul.cljs$lang$applyTo = function(arglist__109084) {
    var opts__14331__auto__ = cljs.core.first(arglist__109084);
    var children__14332__auto__ = cljs.core.rest(arglist__109084);
    return ul__delegate(opts__14331__auto__, children__14332__auto__);
  };
  ul.cljs$core$IFn$_invoke$arity$variadic = ul__delegate;
  return ul;
}();
om.dom.var$ = function() {
  var var$__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.var$.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var var$ = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return var$__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  var$.cljs$lang$maxFixedArity = 1;
  var$.cljs$lang$applyTo = function(arglist__109085) {
    var opts__14331__auto__ = cljs.core.first(arglist__109085);
    var children__14332__auto__ = cljs.core.rest(arglist__109085);
    return var$__delegate(opts__14331__auto__, children__14332__auto__);
  };
  var$.cljs$core$IFn$_invoke$arity$variadic = var$__delegate;
  return var$;
}();
om.dom.video = function() {
  var video__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.video.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var video = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return video__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  video.cljs$lang$maxFixedArity = 1;
  video.cljs$lang$applyTo = function(arglist__109086) {
    var opts__14331__auto__ = cljs.core.first(arglist__109086);
    var children__14332__auto__ = cljs.core.rest(arglist__109086);
    return video__delegate(opts__14331__auto__, children__14332__auto__);
  };
  video.cljs$core$IFn$_invoke$arity$variadic = video__delegate;
  return video;
}();
om.dom.wbr = function() {
  var wbr__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.wbr.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var wbr = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return wbr__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  wbr.cljs$lang$maxFixedArity = 1;
  wbr.cljs$lang$applyTo = function(arglist__109087) {
    var opts__14331__auto__ = cljs.core.first(arglist__109087);
    var children__14332__auto__ = cljs.core.rest(arglist__109087);
    return wbr__delegate(opts__14331__auto__, children__14332__auto__);
  };
  wbr.cljs$core$IFn$_invoke$arity$variadic = wbr__delegate;
  return wbr;
}();
om.dom.circle = function() {
  var circle__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.circle.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var circle = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return circle__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  circle.cljs$lang$maxFixedArity = 1;
  circle.cljs$lang$applyTo = function(arglist__109088) {
    var opts__14331__auto__ = cljs.core.first(arglist__109088);
    var children__14332__auto__ = cljs.core.rest(arglist__109088);
    return circle__delegate(opts__14331__auto__, children__14332__auto__);
  };
  circle.cljs$core$IFn$_invoke$arity$variadic = circle__delegate;
  return circle;
}();
om.dom.g = function() {
  var g__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.g.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var g = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return g__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  g.cljs$lang$maxFixedArity = 1;
  g.cljs$lang$applyTo = function(arglist__109089) {
    var opts__14331__auto__ = cljs.core.first(arglist__109089);
    var children__14332__auto__ = cljs.core.rest(arglist__109089);
    return g__delegate(opts__14331__auto__, children__14332__auto__);
  };
  g.cljs$core$IFn$_invoke$arity$variadic = g__delegate;
  return g;
}();
om.dom.line = function() {
  var line__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.line.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var line = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return line__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  line.cljs$lang$maxFixedArity = 1;
  line.cljs$lang$applyTo = function(arglist__109090) {
    var opts__14331__auto__ = cljs.core.first(arglist__109090);
    var children__14332__auto__ = cljs.core.rest(arglist__109090);
    return line__delegate(opts__14331__auto__, children__14332__auto__);
  };
  line.cljs$core$IFn$_invoke$arity$variadic = line__delegate;
  return line;
}();
om.dom.path = function() {
  var path__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.path.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var path = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return path__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  path.cljs$lang$maxFixedArity = 1;
  path.cljs$lang$applyTo = function(arglist__109091) {
    var opts__14331__auto__ = cljs.core.first(arglist__109091);
    var children__14332__auto__ = cljs.core.rest(arglist__109091);
    return path__delegate(opts__14331__auto__, children__14332__auto__);
  };
  path.cljs$core$IFn$_invoke$arity$variadic = path__delegate;
  return path;
}();
om.dom.polyline = function() {
  var polyline__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.polyline.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var polyline = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return polyline__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  polyline.cljs$lang$maxFixedArity = 1;
  polyline.cljs$lang$applyTo = function(arglist__109092) {
    var opts__14331__auto__ = cljs.core.first(arglist__109092);
    var children__14332__auto__ = cljs.core.rest(arglist__109092);
    return polyline__delegate(opts__14331__auto__, children__14332__auto__);
  };
  polyline.cljs$core$IFn$_invoke$arity$variadic = polyline__delegate;
  return polyline;
}();
om.dom.rect = function() {
  var rect__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.rect.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var rect = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return rect__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  rect.cljs$lang$maxFixedArity = 1;
  rect.cljs$lang$applyTo = function(arglist__109093) {
    var opts__14331__auto__ = cljs.core.first(arglist__109093);
    var children__14332__auto__ = cljs.core.rest(arglist__109093);
    return rect__delegate(opts__14331__auto__, children__14332__auto__);
  };
  rect.cljs$core$IFn$_invoke$arity$variadic = rect__delegate;
  return rect;
}();
om.dom.svg = function() {
  var svg__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.svg.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var svg = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return svg__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  svg.cljs$lang$maxFixedArity = 1;
  svg.cljs$lang$applyTo = function(arglist__109094) {
    var opts__14331__auto__ = cljs.core.first(arglist__109094);
    var children__14332__auto__ = cljs.core.rest(arglist__109094);
    return svg__delegate(opts__14331__auto__, children__14332__auto__);
  };
  svg.cljs$core$IFn$_invoke$arity$variadic = svg__delegate;
  return svg;
}();
om.dom.text = function() {
  var text__delegate = function(opts__14331__auto__, children__14332__auto__) {
    return React.DOM.text.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__14331__auto__, children__14332__auto__)));
  };
  var text = function(opts__14331__auto__, var_args) {
    var children__14332__auto__ = null;
    if (arguments.length > 1) {
      children__14332__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return text__delegate.call(this, opts__14331__auto__, children__14332__auto__);
  };
  text.cljs$lang$maxFixedArity = 1;
  text.cljs$lang$applyTo = function(arglist__109095) {
    var opts__14331__auto__ = cljs.core.first(arglist__109095);
    var children__14332__auto__ = cljs.core.rest(arglist__109095);
    return text__delegate(opts__14331__auto__, children__14332__auto__);
  };
  text.cljs$core$IFn$_invoke$arity$variadic = text__delegate;
  return text;
}();
om.dom.wrap_form_element = function wrap_form_element(ctor) {
  return React.createClass({"render":function() {
    var this$ = this;
    return this$.transferPropsTo(ctor.call(null, {"children":this$.props["children"], "onChange":this$["onChange"], "value":this$.state["value"]}));
  }, "componentWillReceiveProps":function(new_props) {
    var this$ = this;
    return this$.setState({"value":new_props["value"]});
  }, "onChange":function(e) {
    var this$ = this;
    var handler = this$.props["onChange"];
    if (handler == null) {
      return null;
    } else {
      handler.call(null, e);
      return this$.setState({"value":e.target.value});
    }
  }, "getInitialState":function() {
    var this$ = this;
    return{"value":this$.props["value"]};
  }});
};
om.dom.input = om.dom.wrap_form_element.call(null, React.DOM.input);
om.dom.textarea = om.dom.wrap_form_element.call(null, React.DOM.textarea);
om.dom.option = om.dom.wrap_form_element.call(null, React.DOM.option);
om.dom.render = function render(component, el) {
  return React.renderComponent(component, el);
};
om.dom.render_to_str = function render_to_str(c) {
  return React.renderComponentToString(c);
};
goog.provide("om.core");
goog.require("cljs.core");
goog.require("om.dom");
goog.require("om.dom");
om.core._STAR_read_enabled_STAR_ = false;
om.core._STAR_parent_STAR_ = null;
om.core.IInitState = function() {
  var obj108407 = {};
  return obj108407;
}();
om.core.init_state = function init_state(this$) {
  if (function() {
    var and__12818__auto__ = this$;
    if (and__12818__auto__) {
      return this$.om$core$IInitState$init_state$arity$1;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return this$.om$core$IInitState$init_state$arity$1(this$);
  } else {
    var x__13457__auto__ = this$ == null ? null : this$;
    return function() {
      var or__12830__auto__ = om.core.init_state[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = om.core.init_state["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IInitState.init-state", this$);
        }
      }
    }().call(null, this$);
  }
};
om.core.IShouldUpdate = function() {
  var obj108409 = {};
  return obj108409;
}();
om.core.should_update = function should_update(this$, next_props, next_state) {
  if (function() {
    var and__12818__auto__ = this$;
    if (and__12818__auto__) {
      return this$.om$core$IShouldUpdate$should_update$arity$3;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return this$.om$core$IShouldUpdate$should_update$arity$3(this$, next_props, next_state);
  } else {
    var x__13457__auto__ = this$ == null ? null : this$;
    return function() {
      var or__12830__auto__ = om.core.should_update[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = om.core.should_update["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IShouldUpdate.should-update", this$);
        }
      }
    }().call(null, this$, next_props, next_state);
  }
};
om.core.IWillMount = function() {
  var obj108411 = {};
  return obj108411;
}();
om.core.will_mount = function will_mount(this$) {
  if (function() {
    var and__12818__auto__ = this$;
    if (and__12818__auto__) {
      return this$.om$core$IWillMount$will_mount$arity$1;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return this$.om$core$IWillMount$will_mount$arity$1(this$);
  } else {
    var x__13457__auto__ = this$ == null ? null : this$;
    return function() {
      var or__12830__auto__ = om.core.will_mount[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = om.core.will_mount["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWillMount.will-mount", this$);
        }
      }
    }().call(null, this$);
  }
};
om.core.IDidMount = function() {
  var obj108413 = {};
  return obj108413;
}();
om.core.did_mount = function did_mount(this$) {
  if (function() {
    var and__12818__auto__ = this$;
    if (and__12818__auto__) {
      return this$.om$core$IDidMount$did_mount$arity$1;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return this$.om$core$IDidMount$did_mount$arity$1(this$);
  } else {
    var x__13457__auto__ = this$ == null ? null : this$;
    return function() {
      var or__12830__auto__ = om.core.did_mount[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = om.core.did_mount["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDidMount.did-mount", this$);
        }
      }
    }().call(null, this$);
  }
};
om.core.IWillUnmount = function() {
  var obj108415 = {};
  return obj108415;
}();
om.core.will_unmount = function will_unmount(this$) {
  if (function() {
    var and__12818__auto__ = this$;
    if (and__12818__auto__) {
      return this$.om$core$IWillUnmount$will_unmount$arity$1;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return this$.om$core$IWillUnmount$will_unmount$arity$1(this$);
  } else {
    var x__13457__auto__ = this$ == null ? null : this$;
    return function() {
      var or__12830__auto__ = om.core.will_unmount[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = om.core.will_unmount["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWillUnmount.will-unmount", this$);
        }
      }
    }().call(null, this$);
  }
};
om.core.IWillUpdate = function() {
  var obj108417 = {};
  return obj108417;
}();
om.core.will_update = function will_update(this$, next_props, next_state) {
  if (function() {
    var and__12818__auto__ = this$;
    if (and__12818__auto__) {
      return this$.om$core$IWillUpdate$will_update$arity$3;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return this$.om$core$IWillUpdate$will_update$arity$3(this$, next_props, next_state);
  } else {
    var x__13457__auto__ = this$ == null ? null : this$;
    return function() {
      var or__12830__auto__ = om.core.will_update[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = om.core.will_update["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWillUpdate.will-update", this$);
        }
      }
    }().call(null, this$, next_props, next_state);
  }
};
om.core.IDidUpdate = function() {
  var obj108419 = {};
  return obj108419;
}();
om.core.did_update = function did_update(this$, prev_props, prev_state) {
  if (function() {
    var and__12818__auto__ = this$;
    if (and__12818__auto__) {
      return this$.om$core$IDidUpdate$did_update$arity$3;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return this$.om$core$IDidUpdate$did_update$arity$3(this$, prev_props, prev_state);
  } else {
    var x__13457__auto__ = this$ == null ? null : this$;
    return function() {
      var or__12830__auto__ = om.core.did_update[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = om.core.did_update["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDidUpdate.did-update", this$);
        }
      }
    }().call(null, this$, prev_props, prev_state);
  }
};
om.core.IRender = function() {
  var obj108421 = {};
  return obj108421;
}();
om.core.render = function render(this$) {
  if (function() {
    var and__12818__auto__ = this$;
    if (and__12818__auto__) {
      return this$.om$core$IRender$render$arity$1;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return this$.om$core$IRender$render$arity$1(this$);
  } else {
    var x__13457__auto__ = this$ == null ? null : this$;
    return function() {
      var or__12830__auto__ = om.core.render[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = om.core.render["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRender.render", this$);
        }
      }
    }().call(null, this$);
  }
};
om.core.IRenderState = function() {
  var obj108423 = {};
  return obj108423;
}();
om.core.render_state = function render_state(this$, state) {
  if (function() {
    var and__12818__auto__ = this$;
    if (and__12818__auto__) {
      return this$.om$core$IRenderState$render_state$arity$2;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return this$.om$core$IRenderState$render_state$arity$2(this$, state);
  } else {
    var x__13457__auto__ = this$ == null ? null : this$;
    return function() {
      var or__12830__auto__ = om.core.render_state[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = om.core.render_state["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRenderState.render-state", this$);
        }
      }
    }().call(null, this$, state);
  }
};
om.core.IValue = function() {
  var obj108425 = {};
  return obj108425;
}();
om.core._value = function _value(x) {
  if (function() {
    var and__12818__auto__ = x;
    if (and__12818__auto__) {
      return x.om$core$IValue$_value$arity$1;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return x.om$core$IValue$_value$arity$1(x);
  } else {
    var x__13457__auto__ = x == null ? null : x;
    return function() {
      var or__12830__auto__ = om.core._value[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = om.core._value["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IValue.-value", x);
        }
      }
    }().call(null, x);
  }
};
om.core.IValue["_"] = true;
om.core._value["_"] = function(x) {
  return x;
};
om.core.ICursor = function() {
  var obj108427 = {};
  return obj108427;
}();
om.core._path = function _path(cursor) {
  if (function() {
    var and__12818__auto__ = cursor;
    if (and__12818__auto__) {
      return cursor.om$core$ICursor$_path$arity$1;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return cursor.om$core$ICursor$_path$arity$1(cursor);
  } else {
    var x__13457__auto__ = cursor == null ? null : cursor;
    return function() {
      var or__12830__auto__ = om.core._path[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = om.core._path["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICursor.-path", cursor);
        }
      }
    }().call(null, cursor);
  }
};
om.core._state = function _state(cursor) {
  if (function() {
    var and__12818__auto__ = cursor;
    if (and__12818__auto__) {
      return cursor.om$core$ICursor$_state$arity$1;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return cursor.om$core$ICursor$_state$arity$1(cursor);
  } else {
    var x__13457__auto__ = cursor == null ? null : cursor;
    return function() {
      var or__12830__auto__ = om.core._state[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = om.core._state["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICursor.-state", cursor);
        }
      }
    }().call(null, cursor);
  }
};
om.core.IToCursor = function() {
  var obj108429 = {};
  return obj108429;
}();
om.core._to_cursor = function() {
  var _to_cursor = null;
  var _to_cursor__2 = function(value, state) {
    if (function() {
      var and__12818__auto__ = value;
      if (and__12818__auto__) {
        return value.om$core$IToCursor$_to_cursor$arity$2;
      } else {
        return and__12818__auto__;
      }
    }()) {
      return value.om$core$IToCursor$_to_cursor$arity$2(value, state);
    } else {
      var x__13457__auto__ = value == null ? null : value;
      return function() {
        var or__12830__auto__ = om.core._to_cursor[goog.typeOf(x__13457__auto__)];
        if (or__12830__auto__) {
          return or__12830__auto__;
        } else {
          var or__12830__auto____$1 = om.core._to_cursor["_"];
          if (or__12830__auto____$1) {
            return or__12830__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IToCursor.-to-cursor", value);
          }
        }
      }().call(null, value, state);
    }
  };
  var _to_cursor__3 = function(value, state, path) {
    if (function() {
      var and__12818__auto__ = value;
      if (and__12818__auto__) {
        return value.om$core$IToCursor$_to_cursor$arity$3;
      } else {
        return and__12818__auto__;
      }
    }()) {
      return value.om$core$IToCursor$_to_cursor$arity$3(value, state, path);
    } else {
      var x__13457__auto__ = value == null ? null : value;
      return function() {
        var or__12830__auto__ = om.core._to_cursor[goog.typeOf(x__13457__auto__)];
        if (or__12830__auto__) {
          return or__12830__auto__;
        } else {
          var or__12830__auto____$1 = om.core._to_cursor["_"];
          if (or__12830__auto____$1) {
            return or__12830__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IToCursor.-to-cursor", value);
          }
        }
      }().call(null, value, state, path);
    }
  };
  _to_cursor = function(value, state, path) {
    switch(arguments.length) {
      case 2:
        return _to_cursor__2.call(this, value, state);
      case 3:
        return _to_cursor__3.call(this, value, state, path);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _to_cursor.cljs$core$IFn$_invoke$arity$2 = _to_cursor__2;
  _to_cursor.cljs$core$IFn$_invoke$arity$3 = _to_cursor__3;
  return _to_cursor;
}();
om.core.transact_STAR_ = function transact_STAR_(state, path, f) {
  var old_state = cljs.core.deref.call(null, state);
  if (cljs.core.empty_QMARK_.call(null, path)) {
    cljs.core.swap_BANG_.call(null, state, f);
  } else {
    cljs.core.swap_BANG_.call(null, state, cljs.core.update_in, path, f);
  }
  return new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "path", "path", 1017337751), path, new cljs.core.Keyword(null, "old-value", "old-value", 1451216317), cljs.core.get_in.call(null, old_state, path), new cljs.core.Keyword(null, "new-value", "new-value", 3626601078), cljs.core.get_in.call(null, cljs.core.deref.call(null, state), path), new cljs.core.Keyword(null, "old-state", "old-state", 1449001181), old_state, new cljs.core.Keyword(null, "new-state", "new-state", 3624385942), 
  cljs.core.deref.call(null, state)], null);
};
om.core.ITransact = function() {
  var obj108431 = {};
  return obj108431;
}();
om.core._transact_BANG_ = function _transact_BANG_(cursor, korks, f) {
  if (function() {
    var and__12818__auto__ = cursor;
    if (and__12818__auto__) {
      return cursor.om$core$ITransact$_transact_BANG_$arity$3;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return cursor.om$core$ITransact$_transact_BANG_$arity$3(cursor, korks, f);
  } else {
    var x__13457__auto__ = cursor == null ? null : cursor;
    return function() {
      var or__12830__auto__ = om.core._transact_BANG_[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = om.core._transact_BANG_["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransact.-transact!", cursor);
        }
      }
    }().call(null, cursor, korks, f);
  }
};
om.core.INotify = function() {
  var obj108433 = {};
  return obj108433;
}();
om.core._notify = function _notify(x, tx_data, root_cursor) {
  if (function() {
    var and__12818__auto__ = x;
    if (and__12818__auto__) {
      return x.om$core$INotify$_notify$arity$3;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return x.om$core$INotify$_notify$arity$3(x, tx_data, root_cursor);
  } else {
    var x__13457__auto__ = x == null ? null : x;
    return function() {
      var or__12830__auto__ = om.core._notify[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = om.core._notify["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INotify.-notify", x);
        }
      }
    }().call(null, x, tx_data, root_cursor);
  }
};
om.core.children = function children(node) {
  var c = node.props.children;
  if (cljs.core.fn_QMARK_.call(null, c)) {
    return node.props.children = function() {
      var _STAR_read_enabled_STAR_108435 = om.core._STAR_read_enabled_STAR_;
      try {
        om.core._STAR_read_enabled_STAR_ = true;
        return c.call(null, node);
      } finally {
        om.core._STAR_read_enabled_STAR_ = _STAR_read_enabled_STAR_108435;
      }
    }();
  } else {
    return c;
  }
};
om.core.get_props = function get_props(x) {
  return x.props["__om_cursor"];
};
om.core.get_state = function() {
  var get_state = null;
  var get_state__1 = function(owner) {
    var state = owner.state;
    var or__12830__auto__ = state["__om_pending_state"];
    if (cljs.core.truth_(or__12830__auto__)) {
      return or__12830__auto__;
    } else {
      return state["__om_state"];
    }
  };
  var get_state__2 = function(owner, korks) {
    if (!cljs.core.sequential_QMARK_.call(null, korks)) {
      return cljs.core.get.call(null, get_state.call(null, owner), korks);
    } else {
      if (cljs.core.empty_QMARK_.call(null, korks)) {
        return get_state.call(null, owner);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return cljs.core.get_in.call(null, get_state.call(null, owner), korks);
        } else {
          return null;
        }
      }
    }
  };
  get_state = function(owner, korks) {
    switch(arguments.length) {
      case 1:
        return get_state__1.call(this, owner);
      case 2:
        return get_state__2.call(this, owner, korks);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_state.cljs$core$IFn$_invoke$arity$1 = get_state__1;
  get_state.cljs$core$IFn$_invoke$arity$2 = get_state__2;
  return get_state;
}();
om.core.get_shared = function() {
  var get_shared = null;
  var get_shared__1 = function(owner) {
    if (owner == null) {
      return null;
    } else {
      return owner.props["__om_shared"];
    }
  };
  var get_shared__2 = function(owner, korks) {
    if (!cljs.core.sequential_QMARK_.call(null, korks)) {
      return cljs.core.get.call(null, get_shared.call(null, owner), korks);
    } else {
      if (cljs.core.empty_QMARK_.call(null, korks)) {
        return get_shared.call(null, owner);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return cljs.core.get_in.call(null, get_shared.call(null, owner), korks);
        } else {
          return null;
        }
      }
    }
  };
  get_shared = function(owner, korks) {
    switch(arguments.length) {
      case 1:
        return get_shared__1.call(this, owner);
      case 2:
        return get_shared__2.call(this, owner, korks);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_shared.cljs$core$IFn$_invoke$arity$1 = get_shared__1;
  get_shared.cljs$core$IFn$_invoke$arity$2 = get_shared__2;
  return get_shared;
}();
om.core.merge_pending_state = function merge_pending_state(owner) {
  var state = owner.state;
  var temp__4092__auto__ = state["__om_pending_state"];
  if (cljs.core.truth_(temp__4092__auto__)) {
    var pending_state = temp__4092__auto__;
    var G__108437 = state;
    G__108437["__om_prev_state"] = state["__om_state"];
    G__108437["__om_state"] = pending_state;
    G__108437["__om_pending_state"] = null;
    return G__108437;
  } else {
    return null;
  }
};
om.core.merge_props_state = function() {
  var merge_props_state = null;
  var merge_props_state__1 = function(owner) {
    return merge_props_state.call(null, owner, null);
  };
  var merge_props_state__2 = function(owner, props) {
    var props__$1 = function() {
      var or__12830__auto__ = props;
      if (cljs.core.truth_(or__12830__auto__)) {
        return or__12830__auto__;
      } else {
        return owner.props;
      }
    }();
    var temp__4092__auto__ = props__$1["__om_state"];
    if (cljs.core.truth_(temp__4092__auto__)) {
      var props_state = temp__4092__auto__;
      var state = owner.state;
      state["__om_pending_state"] = cljs.core.merge.call(null, function() {
        var or__12830__auto__ = state["__om_pending_state"];
        if (cljs.core.truth_(or__12830__auto__)) {
          return or__12830__auto__;
        } else {
          return state["__om_state"];
        }
      }(), props_state);
      return props__$1["__om_state"] = null;
    } else {
      return null;
    }
  };
  merge_props_state = function(owner, props) {
    switch(arguments.length) {
      case 1:
        return merge_props_state__1.call(this, owner);
      case 2:
        return merge_props_state__2.call(this, owner, props);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  merge_props_state.cljs$core$IFn$_invoke$arity$1 = merge_props_state__1;
  merge_props_state.cljs$core$IFn$_invoke$arity$2 = merge_props_state__2;
  return merge_props_state;
}();
om.core.Pure = React.createClass({"render":function() {
  var this$ = this;
  var c = om.core.children.call(null, this$);
  var _STAR_read_enabled_STAR_108452 = om.core._STAR_read_enabled_STAR_;
  try {
    om.core._STAR_read_enabled_STAR_ = true;
    if (function() {
      var G__108453 = c;
      if (G__108453) {
        var bit__13480__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__12830__auto__ = bit__13480__auto__;
          if (cljs.core.truth_(or__12830__auto__)) {
            return or__12830__auto__;
          } else {
            return G__108453.om$core$IRender$;
          }
        }())) {
          return true;
        } else {
          if (!G__108453.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRender, G__108453);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRender, G__108453);
      }
    }()) {
      var _STAR_parent_STAR_108454 = om.core._STAR_parent_STAR_;
      try {
        om.core._STAR_parent_STAR_ = this$;
        return om.core.render.call(null, c);
      } finally {
        om.core._STAR_parent_STAR_ = _STAR_parent_STAR_108454;
      }
    } else {
      if (function() {
        var G__108455 = c;
        if (G__108455) {
          var bit__13480__auto__ = null;
          if (cljs.core.truth_(function() {
            var or__12830__auto__ = bit__13480__auto__;
            if (cljs.core.truth_(or__12830__auto__)) {
              return or__12830__auto__;
            } else {
              return G__108455.om$core$IRenderState$;
            }
          }())) {
            return true;
          } else {
            if (!G__108455.cljs$lang$protocol_mask$partition$) {
              return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRenderState, G__108455);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRenderState, G__108455);
        }
      }()) {
        var _STAR_parent_STAR_108456 = om.core._STAR_parent_STAR_;
        try {
          om.core._STAR_parent_STAR_ = this$;
          return om.core.render_state.call(null, c, om.core.get_state.call(null, this$));
        } finally {
          om.core._STAR_parent_STAR_ = _STAR_parent_STAR_108456;
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return c;
        } else {
          return null;
        }
      }
    }
  } finally {
    om.core._STAR_read_enabled_STAR_ = _STAR_read_enabled_STAR_108452;
  }
}, "componentDidUpdate":function(prev_props, prev_state, root_node) {
  var this$ = this;
  var c = om.core.children.call(null, this$);
  if (function() {
    var G__108450 = c;
    if (G__108450) {
      var bit__13480__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__12830__auto__ = bit__13480__auto__;
        if (cljs.core.truth_(or__12830__auto__)) {
          return or__12830__auto__;
        } else {
          return G__108450.om$core$IDidUpdate$;
        }
      }())) {
        return true;
      } else {
        if (!G__108450.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IDidUpdate, G__108450);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IDidUpdate, G__108450);
    }
  }()) {
    var state_108457 = this$.state;
    var _STAR_read_enabled_STAR_108451_108458 = om.core._STAR_read_enabled_STAR_;
    try {
      om.core._STAR_read_enabled_STAR_ = true;
      om.core.did_update.call(null, c, om.core.get_props.call(null, {"props":prev_props}), function() {
        var or__12830__auto__ = state_108457["__om_prev_state"];
        if (cljs.core.truth_(or__12830__auto__)) {
          return or__12830__auto__;
        } else {
          return state_108457["__om_state"];
        }
      }());
    } finally {
      om.core._STAR_read_enabled_STAR_ = _STAR_read_enabled_STAR_108451_108458;
    }
  } else {
  }
  return this$.state["__om_prev_state"] = null;
}, "componentWillUpdate":function(next_props, next_state) {
  var this$ = this;
  var c_108459 = om.core.children.call(null, this$);
  if (function() {
    var G__108448 = c_108459;
    if (G__108448) {
      var bit__13480__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__12830__auto__ = bit__13480__auto__;
        if (cljs.core.truth_(or__12830__auto__)) {
          return or__12830__auto__;
        } else {
          return G__108448.om$core$IWillUpdate$;
        }
      }())) {
        return true;
      } else {
        if (!G__108448.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillUpdate, G__108448);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillUpdate, G__108448);
    }
  }()) {
    var state_108460 = this$.state;
    var _STAR_read_enabled_STAR_108449_108461 = om.core._STAR_read_enabled_STAR_;
    try {
      om.core._STAR_read_enabled_STAR_ = true;
      om.core.will_update.call(null, c_108459, om.core.get_props.call(null, {"props":next_props}), function() {
        var or__12830__auto__ = state_108460["__om_pending_state"];
        if (cljs.core.truth_(or__12830__auto__)) {
          return or__12830__auto__;
        } else {
          return state_108460["__om_state"];
        }
      }());
    } finally {
      om.core._STAR_read_enabled_STAR_ = _STAR_read_enabled_STAR_108449_108461;
    }
  } else {
  }
  return om.core.merge_pending_state.call(null, this$);
}, "componentWillUnmount":function() {
  var this$ = this;
  var c = om.core.children.call(null, this$);
  if (function() {
    var G__108446 = c;
    if (G__108446) {
      var bit__13480__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__12830__auto__ = bit__13480__auto__;
        if (cljs.core.truth_(or__12830__auto__)) {
          return or__12830__auto__;
        } else {
          return G__108446.om$core$IWillUnmount$;
        }
      }())) {
        return true;
      } else {
        if (!G__108446.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillUnmount, G__108446);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillUnmount, G__108446);
    }
  }()) {
    var _STAR_read_enabled_STAR_108447 = om.core._STAR_read_enabled_STAR_;
    try {
      om.core._STAR_read_enabled_STAR_ = true;
      return om.core.will_unmount.call(null, c);
    } finally {
      om.core._STAR_read_enabled_STAR_ = _STAR_read_enabled_STAR_108447;
    }
  } else {
    return null;
  }
}, "componentDidMount":function(node) {
  var this$ = this;
  var c = om.core.children.call(null, this$);
  if (function() {
    var G__108444 = c;
    if (G__108444) {
      var bit__13480__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__12830__auto__ = bit__13480__auto__;
        if (cljs.core.truth_(or__12830__auto__)) {
          return or__12830__auto__;
        } else {
          return G__108444.om$core$IDidMount$;
        }
      }())) {
        return true;
      } else {
        if (!G__108444.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IDidMount, G__108444);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IDidMount, G__108444);
    }
  }()) {
    var _STAR_read_enabled_STAR_108445 = om.core._STAR_read_enabled_STAR_;
    try {
      om.core._STAR_read_enabled_STAR_ = true;
      return om.core.did_mount.call(null, c);
    } finally {
      om.core._STAR_read_enabled_STAR_ = _STAR_read_enabled_STAR_108445;
    }
  } else {
    return null;
  }
}, "componentWillMount":function() {
  var this$ = this;
  om.core.merge_props_state.call(null, this$);
  var c_108462 = om.core.children.call(null, this$);
  if (function() {
    var G__108442 = c_108462;
    if (G__108442) {
      var bit__13480__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__12830__auto__ = bit__13480__auto__;
        if (cljs.core.truth_(or__12830__auto__)) {
          return or__12830__auto__;
        } else {
          return G__108442.om$core$IWillMount$;
        }
      }())) {
        return true;
      } else {
        if (!G__108442.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillMount, G__108442);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillMount, G__108442);
    }
  }()) {
    var _STAR_read_enabled_STAR_108443_108463 = om.core._STAR_read_enabled_STAR_;
    try {
      om.core._STAR_read_enabled_STAR_ = true;
      om.core.will_mount.call(null, c_108462);
    } finally {
      om.core._STAR_read_enabled_STAR_ = _STAR_read_enabled_STAR_108443_108463;
    }
  } else {
  }
  return om.core.merge_pending_state.call(null, this$);
}, "shouldComponentUpdate":function(next_props, next_state) {
  var this$ = this;
  var _STAR_read_enabled_STAR_108440 = om.core._STAR_read_enabled_STAR_;
  try {
    om.core._STAR_read_enabled_STAR_ = true;
    var props = this$.props;
    var state = this$.state;
    var c = om.core.children.call(null, this$);
    om.core.merge_props_state.call(null, this$, next_props);
    if (function() {
      var G__108441 = c;
      if (G__108441) {
        var bit__13480__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__12830__auto__ = bit__13480__auto__;
          if (cljs.core.truth_(or__12830__auto__)) {
            return or__12830__auto__;
          } else {
            return G__108441.om$core$IShouldUpdate$;
          }
        }())) {
          return true;
        } else {
          if (!G__108441.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_.call(null, om.core.IShouldUpdate, G__108441);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, om.core.IShouldUpdate, G__108441);
      }
    }()) {
      return om.core.should_update.call(null, c, om.core.get_props.call(null, {"props":next_props}), function() {
        var or__12830__auto__ = state["__om_pending_state"];
        if (cljs.core.truth_(or__12830__auto__)) {
          return or__12830__auto__;
        } else {
          return state["__om_state"];
        }
      }());
    } else {
      if (!(om.core._value.call(null, props["__om_cursor"]) === om.core._value.call(null, next_props["__om_cursor"]))) {
        return true;
      } else {
        if (!(state["__om_pending_state"] == null)) {
          return true;
        } else {
          if (!(props["__om_index"] === next_props["__om_index"])) {
            return true;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return false;
            } else {
              return null;
            }
          }
        }
      }
    }
  } finally {
    om.core._STAR_read_enabled_STAR_ = _STAR_read_enabled_STAR_108440;
  }
}, "getInitialState":function() {
  var this$ = this;
  var c = om.core.children.call(null, this$);
  var props = this$.props;
  var istate = function() {
    var or__12830__auto__ = props["__om_init_state"];
    if (cljs.core.truth_(or__12830__auto__)) {
      return or__12830__auto__;
    } else {
      return cljs.core.PersistentArrayMap.EMPTY;
    }
  }();
  var ret = {"__om_state":cljs.core.merge.call(null, istate, function() {
    var G__108438 = c;
    if (G__108438) {
      var bit__13480__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__12830__auto__ = bit__13480__auto__;
        if (cljs.core.truth_(or__12830__auto__)) {
          return or__12830__auto__;
        } else {
          return G__108438.om$core$IInitState$;
        }
      }())) {
        return true;
      } else {
        if (!G__108438.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IInitState, G__108438);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IInitState, G__108438);
    }
  }() ? function() {
    var _STAR_read_enabled_STAR_108439 = om.core._STAR_read_enabled_STAR_;
    try {
      om.core._STAR_read_enabled_STAR_ = true;
      return om.core.init_state.call(null, c);
    } finally {
      om.core._STAR_read_enabled_STAR_ = _STAR_read_enabled_STAR_108439;
    }
  }() : null)};
  props["__om_init_state"] = null;
  return ret;
}});
om.core.pure = function pure(obj) {
  return new om.core.Pure(obj);
};
om.core.path = function path(cursor) {
  return om.core._path.call(null, cursor);
};
om.core.value = function value(cursor) {
  return om.core._value.call(null, cursor);
};
om.core.cursor_QMARK_ = function cursor_QMARK_(x) {
  var G__108465 = x;
  if (G__108465) {
    var bit__13480__auto__ = null;
    if (cljs.core.truth_(function() {
      var or__12830__auto__ = bit__13480__auto__;
      if (cljs.core.truth_(or__12830__auto__)) {
        return or__12830__auto__;
      } else {
        return G__108465.om$core$ICursor$;
      }
    }())) {
      return true;
    } else {
      if (!G__108465.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_.call(null, om.core.ICursor, G__108465);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, om.core.ICursor, G__108465);
  }
};
om.core.MapCursor = function(value, state, path) {
  this.value = value;
  this.state = state;
  this.path = path;
  this.cljs$lang$protocol_mask$partition0$ = 2158397195;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
om.core.MapCursor.cljs$lang$type = true;
om.core.MapCursor.cljs$lang$ctorStr = "om.core/MapCursor";
om.core.MapCursor.cljs$lang$ctorPrWriter = function(this__13397__auto__, writer__13398__auto__, opt__13399__auto__) {
  return cljs.core._write.call(null, writer__13398__auto__, "om.core/MapCursor");
};
om.core.MapCursor.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this$, k) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._lookup.call(null, this$__$1, k, null);
};
om.core.MapCursor.prototype.cljs$core$ILookup$_lookup$arity$3 = function(_, k, not_found) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    var v = cljs.core._lookup.call(null, self__.value, k, not_found);
    if (!cljs.core._EQ_.call(null, v, not_found)) {
      return om.core.to_cursor.call(null, v, self__.state, cljs.core.conj.call(null, self__.path, k));
    } else {
      return not_found;
    }
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.MapCursor.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(_, k) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return cljs.core._contains_key_QMARK_.call(null, self__.value, k);
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.MapCursor.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(_, k, v) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return new om.core.MapCursor(cljs.core._assoc.call(null, self__.value, k, v), self__.state, self__.path);
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.MapCursor.prototype.call = function() {
  var G__108469 = null;
  var G__108469__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var this$ = self____$1;
    return this$.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__108469__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var this$ = self____$1;
    return this$.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__108469 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__108469__2.call(this, self__, k);
      case 3:
        return G__108469__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__108469;
}();
om.core.MapCursor.prototype.apply = function(self__, args108466) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args108466)));
};
om.core.MapCursor.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$ILookup$_lookup$arity$2(null, k);
};
om.core.MapCursor.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
om.core.MapCursor.prototype.om$core$ICursor$ = true;
om.core.MapCursor.prototype.om$core$ICursor$_path$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.path;
};
om.core.MapCursor.prototype.om$core$ICursor$_state$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
om.core.MapCursor.prototype.cljs$core$IDeref$_deref$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (!om.core._STAR_read_enabled_STAR_) {
    return cljs.core.get_in.call(null, cljs.core.deref.call(null, self__.state), self__.path);
  } else {
    throw new Error([cljs.core.str("Cannot deref cursor during render phase: "), cljs.core.str(this$__$1)].join(""));
  }
};
om.core.MapCursor.prototype.om$core$IValue$ = true;
om.core.MapCursor.prototype.om$core$IValue$_value$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return self__.value;
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.MapCursor.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, opts) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return cljs.core._pr_writer.call(null, self__.value, writer, opts);
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.MapCursor.prototype.cljs$core$ICollection$_conj$arity$2 = function(_, o) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return new om.core.MapCursor(cljs.core._conj.call(null, self__.value, o), self__.state, self__.path);
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.MapCursor.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    if (cljs.core.count.call(null, self__.value) > 0) {
      return cljs.core.map.call(null, function(p__108467) {
        var vec__108468 = p__108467;
        var k = cljs.core.nth.call(null, vec__108468, 0, null);
        var v = cljs.core.nth.call(null, vec__108468, 1, null);
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, om.core.to_cursor.call(null, v, self__.state, cljs.core.conj.call(null, self__.path, k))], null);
      }, self__.value);
    } else {
      return null;
    }
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.MapCursor.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return cljs.core._count.call(null, self__.value);
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.MapCursor.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    if (om.core.cursor_QMARK_.call(null, other)) {
      return cljs.core._EQ_.call(null, self__.value, om.core._value.call(null, other));
    } else {
      return cljs.core._EQ_.call(null, self__.value, other);
    }
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.MapCursor.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return new om.core.MapCursor(cljs.core.with_meta.call(null, self__.value, new_meta), self__.state, self__.path);
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.MapCursor.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new om.core.MapCursor(self__.value, self__.state, self__.path);
};
om.core.MapCursor.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return cljs.core.meta.call(null, self__.value);
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.MapCursor.prototype.cljs$core$IMap$_dissoc$arity$2 = function(_, k) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return new om.core.MapCursor(cljs.core._dissoc.call(null, self__.value, k), self__.state, self__.path);
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.MapCursor.prototype.om$core$ITransact$ = true;
om.core.MapCursor.prototype.om$core$ITransact$_transact_BANG_$arity$3 = function(_, korks, f) {
  var self__ = this;
  var ___$1 = this;
  return om.core.transact_STAR_.call(null, self__.state, cljs.core.into.call(null, self__.path, korks), f);
};
om.core.__GT_MapCursor = function __GT_MapCursor(value, state, path) {
  return new om.core.MapCursor(value, state, path);
};
om.core.IndexedCursor = function(value, state, path) {
  this.value = value;
  this.state = state;
  this.path = path;
  this.cljs$lang$protocol_mask$partition0$ = 2175181595;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
om.core.IndexedCursor.cljs$lang$type = true;
om.core.IndexedCursor.cljs$lang$ctorStr = "om.core/IndexedCursor";
om.core.IndexedCursor.cljs$lang$ctorPrWriter = function(this__13397__auto__, writer__13398__auto__, opt__13399__auto__) {
  return cljs.core._write.call(null, writer__13398__auto__, "om.core/IndexedCursor");
};
om.core.IndexedCursor.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this$, n) {
  var self__ = this;
  var this$__$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return cljs.core._nth.call(null, this$__$1, n, null);
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.IndexedCursor.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this$, n, not_found) {
  var self__ = this;
  var this$__$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return cljs.core._nth.call(null, this$__$1, n, not_found);
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.IndexedCursor.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(_, k) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return cljs.core._contains_key_QMARK_.call(null, self__.value, k);
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.IndexedCursor.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(_, n, v) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return om.core.to_cursor.call(null, cljs.core._assoc_n.call(null, self__.value, n, v), self__.state, self__.path);
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.IndexedCursor.prototype.call = function() {
  var G__108471 = null;
  var G__108471__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var this$ = self____$1;
    return this$.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__108471__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var this$ = self____$1;
    return this$.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__108471 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__108471__2.call(this, self__, k);
      case 3:
        return G__108471__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__108471;
}();
om.core.IndexedCursor.prototype.apply = function(self__, args108470) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args108470)));
};
om.core.IndexedCursor.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$ILookup$_lookup$arity$2(null, k);
};
om.core.IndexedCursor.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
om.core.IndexedCursor.prototype.om$core$ICursor$ = true;
om.core.IndexedCursor.prototype.om$core$ICursor$_path$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.path;
};
om.core.IndexedCursor.prototype.om$core$ICursor$_state$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
om.core.IndexedCursor.prototype.cljs$core$IDeref$_deref$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (!om.core._STAR_read_enabled_STAR_) {
    return cljs.core.get_in.call(null, cljs.core.deref.call(null, self__.state), self__.path);
  } else {
    throw new Error([cljs.core.str("Cannot deref cursor during render phase: "), cljs.core.str(this$__$1)].join(""));
  }
};
om.core.IndexedCursor.prototype.om$core$IValue$ = true;
om.core.IndexedCursor.prototype.om$core$IValue$_value$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return self__.value;
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.IndexedCursor.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, opts) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return cljs.core._pr_writer.call(null, self__.value, writer, opts);
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.IndexedCursor.prototype.cljs$core$ICollection$_conj$arity$2 = function(_, o) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return new om.core.IndexedCursor(cljs.core._conj.call(null, self__.value, o), self__.state, self__.path);
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.IndexedCursor.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    if (cljs.core.count.call(null, self__.value) > 0) {
      return cljs.core.map.call(null, function(v, i) {
        return om.core.to_cursor.call(null, v, self__.state, cljs.core.conj.call(null, self__.path, i));
      }, self__.value, cljs.core.range.call(null));
    } else {
      return null;
    }
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.IndexedCursor.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return cljs.core._count.call(null, self__.value);
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.IndexedCursor.prototype.cljs$core$IStack$_peek$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return om.core.to_cursor.call(null, cljs.core._peek.call(null, self__.value), self__.state, self__.path);
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.IndexedCursor.prototype.cljs$core$IStack$_pop$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return om.core.to_cursor.call(null, cljs.core._pop.call(null, self__.value), self__.state, self__.path);
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.IndexedCursor.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    if (om.core.cursor_QMARK_.call(null, other)) {
      return cljs.core._EQ_.call(null, self__.value, om.core._value.call(null, other));
    } else {
      return cljs.core._EQ_.call(null, self__.value, other);
    }
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.IndexedCursor.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return new om.core.IndexedCursor(cljs.core.with_meta.call(null, self__.value, new_meta), self__.state, self__.path);
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.IndexedCursor.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new om.core.IndexedCursor(self__.value, self__.state, self__.path);
};
om.core.IndexedCursor.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return cljs.core.meta.call(null, self__.value);
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.IndexedCursor.prototype.cljs$core$IIndexed$_nth$arity$2 = function(_, n) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return om.core.to_cursor.call(null, cljs.core._nth.call(null, self__.value, n), self__.state, cljs.core.conj.call(null, self__.path, n));
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.IndexedCursor.prototype.cljs$core$IIndexed$_nth$arity$3 = function(_, n, not_found) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    if (n < cljs.core._count.call(null, self__.value)) {
      return om.core.to_cursor.call(null, cljs.core._nth.call(null, self__.value, n), self__.state, cljs.core.conj.call(null, self__.path, n));
    } else {
      return not_found;
    }
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.IndexedCursor.prototype.om$core$ITransact$ = true;
om.core.IndexedCursor.prototype.om$core$ITransact$_transact_BANG_$arity$3 = function(_, korks, f) {
  var self__ = this;
  var ___$1 = this;
  return om.core.transact_STAR_.call(null, self__.state, cljs.core.into.call(null, self__.path, korks), f);
};
om.core.__GT_IndexedCursor = function __GT_IndexedCursor(value, state, path) {
  return new om.core.IndexedCursor(value, state, path);
};
om.core.to_cursor_STAR_ = function to_cursor_STAR_(val, state, path) {
  var x108473 = cljs.core.clone.call(null, val);
  x108473.cljs$core$IEquiv$ = true;
  x108473.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
    var ___$1 = this;
    if (om.core._STAR_read_enabled_STAR_) {
      if (om.core.cursor_QMARK_.call(null, other)) {
        return cljs.core._EQ_.call(null, val, om.core._value.call(null, other));
      } else {
        return cljs.core._EQ_.call(null, val, other);
      }
    } else {
      throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
    }
  };
  x108473.om$core$ITransact$ = true;
  x108473.om$core$ITransact$_transact_BANG_$arity$3 = function(_, korks, f) {
    var ___$1 = this;
    return om.core.transact_STAR_.call(null, state, cljs.core.into.call(null, path, korks), f);
  };
  x108473.om$core$ICursor$ = true;
  x108473.om$core$ICursor$_path$arity$1 = function(_) {
    var ___$1 = this;
    return path;
  };
  x108473.om$core$ICursor$_state$arity$1 = function(_) {
    var ___$1 = this;
    return state;
  };
  x108473.cljs$core$IDeref$ = true;
  x108473.cljs$core$IDeref$_deref$arity$1 = function(this$) {
    var this$__$1 = this;
    if (!om.core._STAR_read_enabled_STAR_) {
      return cljs.core.get_in.call(null, cljs.core.deref.call(null, state), path);
    } else {
      throw new Error([cljs.core.str("Cannot deref cursor during render phase: "), cljs.core.str(this$__$1)].join(""));
    }
  };
  return x108473;
};
om.core.to_cursor = function() {
  var to_cursor = null;
  var to_cursor__1 = function(val) {
    return to_cursor.call(null, val, null, cljs.core.PersistentVector.EMPTY);
  };
  var to_cursor__2 = function(val, state) {
    return to_cursor.call(null, val, state, cljs.core.PersistentVector.EMPTY);
  };
  var to_cursor__3 = function(val, state, path) {
    if (om.core.cursor_QMARK_.call(null, val)) {
      return val;
    } else {
      if (function() {
        var G__108476 = val;
        if (G__108476) {
          var bit__13480__auto__ = null;
          if (cljs.core.truth_(function() {
            var or__12830__auto__ = bit__13480__auto__;
            if (cljs.core.truth_(or__12830__auto__)) {
              return or__12830__auto__;
            } else {
              return G__108476.om$core$IToCursor$;
            }
          }())) {
            return true;
          } else {
            if (!G__108476.cljs$lang$protocol_mask$partition$) {
              return cljs.core.native_satisfies_QMARK_.call(null, om.core.IToCursor, G__108476);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IToCursor, G__108476);
        }
      }()) {
        return om.core._to_cursor.call(null, val, state, path);
      } else {
        if (cljs.core.indexed_QMARK_.call(null, val)) {
          return new om.core.IndexedCursor(val, state, path);
        } else {
          if (cljs.core.map_QMARK_.call(null, val)) {
            return new om.core.MapCursor(val, state, path);
          } else {
            if (function() {
              var G__108477 = val;
              if (G__108477) {
                var bit__13480__auto__ = G__108477.cljs$lang$protocol_mask$partition1$ & 8192;
                if (bit__13480__auto__ || G__108477.cljs$core$ICloneable$) {
                  return true;
                } else {
                  if (!G__108477.cljs$lang$protocol_mask$partition1$) {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICloneable, G__108477);
                  } else {
                    return false;
                  }
                }
              } else {
                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICloneable, G__108477);
              }
            }()) {
              return om.core.to_cursor_STAR_.call(null, val, state, path);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return val;
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  };
  to_cursor = function(val, state, path) {
    switch(arguments.length) {
      case 1:
        return to_cursor__1.call(this, val);
      case 2:
        return to_cursor__2.call(this, val, state);
      case 3:
        return to_cursor__3.call(this, val, state, path);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  to_cursor.cljs$core$IFn$_invoke$arity$1 = to_cursor__1;
  to_cursor.cljs$core$IFn$_invoke$arity$2 = to_cursor__2;
  to_cursor.cljs$core$IFn$_invoke$arity$3 = to_cursor__3;
  return to_cursor;
}();
om.core.notify_STAR_ = function notify_STAR_(cursor, tx_data) {
  var state = om.core._state.call(null, cursor);
  return om.core._notify.call(null, state, tx_data, om.core.to_cursor.call(null, cljs.core.deref.call(null, state), state));
};
om.core.refresh_queued = false;
om.core.refresh_set = cljs.core.atom.call(null, cljs.core.PersistentHashSet.EMPTY);
om.core.render_all = function render_all() {
  om.core.refresh_queued = false;
  var seq__108482 = cljs.core.seq.call(null, cljs.core.deref.call(null, om.core.refresh_set));
  var chunk__108483 = null;
  var count__108484 = 0;
  var i__108485 = 0;
  while (true) {
    if (i__108485 < count__108484) {
      var f = cljs.core._nth.call(null, chunk__108483, i__108485);
      f.call(null);
      var G__108486 = seq__108482;
      var G__108487 = chunk__108483;
      var G__108488 = count__108484;
      var G__108489 = i__108485 + 1;
      seq__108482 = G__108486;
      chunk__108483 = G__108487;
      count__108484 = G__108488;
      i__108485 = G__108489;
      continue;
    } else {
      var temp__4092__auto__ = cljs.core.seq.call(null, seq__108482);
      if (temp__4092__auto__) {
        var seq__108482__$1 = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__108482__$1)) {
          var c__13578__auto__ = cljs.core.chunk_first.call(null, seq__108482__$1);
          var G__108490 = cljs.core.chunk_rest.call(null, seq__108482__$1);
          var G__108491 = c__13578__auto__;
          var G__108492 = cljs.core.count.call(null, c__13578__auto__);
          var G__108493 = 0;
          seq__108482 = G__108490;
          chunk__108483 = G__108491;
          count__108484 = G__108492;
          i__108485 = G__108493;
          continue;
        } else {
          var f = cljs.core.first.call(null, seq__108482__$1);
          f.call(null);
          var G__108494 = cljs.core.next.call(null, seq__108482__$1);
          var G__108495 = null;
          var G__108496 = 0;
          var G__108497 = 0;
          seq__108482 = G__108494;
          chunk__108483 = G__108495;
          count__108484 = G__108496;
          i__108485 = G__108497;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
om.core.roots = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
om.core.valid_QMARK_ = function valid_QMARK_(m) {
  return cljs.core.every_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 8, [new cljs.core.Keyword(null, "init-state", "init-state", 4479067398), null, new cljs.core.Keyword(null, "state", "state", 1123661827), null, new cljs.core.Keyword(null, "react-key", "react-key", 4184082563), null, new cljs.core.Keyword("om.core", "index", "om.core/index", 3166146514), null, new cljs.core.Keyword(null, "key", "key", 1014010321), null, new cljs.core.Keyword(null, 
  "shared", "shared", 4405305303), null, new cljs.core.Keyword(null, "opts", "opts", 1017322386), null, new cljs.core.Keyword(null, "fn", "fn", 1013907514), null], null), null), cljs.core.keys.call(null, m));
};
om.core.build = function() {
  var build = null;
  var build__2 = function(f, cursor) {
    return build.call(null, f, cursor, null);
  };
  var build__3 = function(f, cursor, m) {
    if (om.core.valid_QMARK_.call(null, m)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.apply.call(null, cljs.core.str, "build options contains invalid keys, only :key, :react-key, ", ":fn, :init-state, :state, and :opts allowed, given ", cljs.core.interpose.call(null, ", ", cljs.core.keys.call(null, m)))), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "valid?", "valid?", 1830611324, null), new cljs.core.Symbol(null, "m", "m", -1640531418, null))))].join(""));
    }
    if (m == null) {
      var shared = function() {
        var or__12830__auto__ = (new cljs.core.Keyword(null, "shared", "shared", 4405305303)).cljs$core$IFn$_invoke$arity$1(m);
        if (cljs.core.truth_(or__12830__auto__)) {
          return or__12830__auto__;
        } else {
          return om.core.get_shared.call(null, om.core._STAR_parent_STAR_);
        }
      }();
      var pure__14365__auto__ = om.core.pure.call(null, {"children":function(this$) {
        var _STAR_read_enabled_STAR_108502 = om.core._STAR_read_enabled_STAR_;
        try {
          om.core._STAR_read_enabled_STAR_ = true;
          return f.call(null, cursor, this$);
        } finally {
          om.core._STAR_read_enabled_STAR_ = _STAR_read_enabled_STAR_108502;
        }
      }, "__om_shared":shared, "__om_cursor":cursor});
      pure__14365__auto__.constructor = goog.getUid(f);
      return pure__14365__auto__;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var map__108503 = m;
        var map__108503__$1 = cljs.core.seq_QMARK_.call(null, map__108503) ? cljs.core.apply.call(null, cljs.core.hash_map, map__108503) : map__108503;
        var opts = cljs.core.get.call(null, map__108503__$1, new cljs.core.Keyword(null, "opts", "opts", 1017322386));
        var init_state = cljs.core.get.call(null, map__108503__$1, new cljs.core.Keyword(null, "init-state", "init-state", 4479067398));
        var state = cljs.core.get.call(null, map__108503__$1, new cljs.core.Keyword(null, "state", "state", 1123661827));
        var key = cljs.core.get.call(null, map__108503__$1, new cljs.core.Keyword(null, "key", "key", 1014010321));
        var dataf = cljs.core.get.call(null, m, new cljs.core.Keyword(null, "fn", "fn", 1013907514));
        var cursor_SINGLEQUOTE_ = !(dataf == null) ? dataf.call(null, cursor) : cursor;
        var rkey = !(key == null) ? cljs.core.get.call(null, cursor_SINGLEQUOTE_, key) : cljs.core.get.call(null, m, new cljs.core.Keyword(null, "react-key", "react-key", 4184082563));
        var shared = function() {
          var or__12830__auto__ = (new cljs.core.Keyword(null, "shared", "shared", 4405305303)).cljs$core$IFn$_invoke$arity$1(m);
          if (cljs.core.truth_(or__12830__auto__)) {
            return or__12830__auto__;
          } else {
            return om.core.get_shared.call(null, om.core._STAR_parent_STAR_);
          }
        }();
        var pure__14365__auto__ = om.core.pure.call(null, {"children":opts == null ? function(this$) {
          var _STAR_read_enabled_STAR_108504 = om.core._STAR_read_enabled_STAR_;
          try {
            om.core._STAR_read_enabled_STAR_ = true;
            return f.call(null, cursor_SINGLEQUOTE_, this$);
          } finally {
            om.core._STAR_read_enabled_STAR_ = _STAR_read_enabled_STAR_108504;
          }
        } : function(this$) {
          var _STAR_read_enabled_STAR_108505 = om.core._STAR_read_enabled_STAR_;
          try {
            om.core._STAR_read_enabled_STAR_ = true;
            return f.call(null, cursor_SINGLEQUOTE_, this$, opts);
          } finally {
            om.core._STAR_read_enabled_STAR_ = _STAR_read_enabled_STAR_108505;
          }
        }, "key":rkey, "__om_shared":shared, "__om_state":state, "__om_init_state":init_state, "__om_index":(new cljs.core.Keyword("om.core", "index", "om.core/index", 3166146514)).cljs$core$IFn$_invoke$arity$1(m), "__om_cursor":cursor_SINGLEQUOTE_});
        pure__14365__auto__.constructor = goog.getUid(f);
        return pure__14365__auto__;
      } else {
        return null;
      }
    }
  };
  build = function(f, cursor, m) {
    switch(arguments.length) {
      case 2:
        return build__2.call(this, f, cursor);
      case 3:
        return build__3.call(this, f, cursor, m);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  build.cljs$core$IFn$_invoke$arity$2 = build__2;
  build.cljs$core$IFn$_invoke$arity$3 = build__3;
  return build;
}();
om.core.build_all = function() {
  var build_all = null;
  var build_all__2 = function(f, xs) {
    return build_all.call(null, f, xs, null);
  };
  var build_all__3 = function(f, xs, m) {
    return cljs.core.map.call(null, function(x, i) {
      return om.core.build.call(null, f, x, cljs.core.assoc.call(null, m, new cljs.core.Keyword("om.core", "index", "om.core/index", 3166146514), i));
    }, xs, cljs.core.range.call(null));
  };
  build_all = function(f, xs, m) {
    switch(arguments.length) {
      case 2:
        return build_all__2.call(this, f, xs);
      case 3:
        return build_all__3.call(this, f, xs, m);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  build_all.cljs$core$IFn$_invoke$arity$2 = build_all__2;
  build_all.cljs$core$IFn$_invoke$arity$3 = build_all__3;
  return build_all;
}();
om.core.root = function root(f, value, p__108506) {
  var map__108509 = p__108506;
  var map__108509__$1 = cljs.core.seq_QMARK_.call(null, map__108509) ? cljs.core.apply.call(null, cljs.core.hash_map, map__108509) : map__108509;
  var options = map__108509__$1;
  var path = cljs.core.get.call(null, map__108509__$1, new cljs.core.Keyword(null, "path", "path", 1017337751));
  var tx_listen = cljs.core.get.call(null, map__108509__$1, new cljs.core.Keyword(null, "tx-listen", "tx-listen", 666878114));
  var shared = cljs.core.get.call(null, map__108509__$1, new cljs.core.Keyword(null, "shared", "shared", 4405305303));
  var target = cljs.core.get.call(null, map__108509__$1, new cljs.core.Keyword(null, "target", "target", 4427965699));
  if (!(target == null)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("No target specified to om.core/root"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", -1640422260, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", -1637150201, null), new cljs.core.Symbol(null, "target", "target", 1773529930, null)))))].join(""));
  }
  var roots_SINGLEQUOTE__108511 = cljs.core.deref.call(null, om.core.roots);
  if (cljs.core.contains_QMARK_.call(null, roots_SINGLEQUOTE__108511, target)) {
    cljs.core.get.call(null, roots_SINGLEQUOTE__108511, target).call(null);
  } else {
  }
  var state = value instanceof cljs.core.Atom ? value : cljs.core.atom.call(null, value);
  var state__$1 = function() {
    var x108510 = state;
    x108510.om$core$INotify$ = true;
    x108510.om$core$INotify$_notify$arity$3 = function(x108510, state) {
      return function(_, tx_data, root_cursor) {
        var ___$1 = this;
        if (tx_listen == null) {
          return null;
        } else {
          return tx_listen.call(null, tx_data, root_cursor);
        }
      };
    }(x108510, state);
    return x108510;
  }();
  var m = cljs.core.dissoc.call(null, options, new cljs.core.Keyword(null, "target", "target", 4427965699), new cljs.core.Keyword(null, "tx-listen", "tx-listen", 666878114), new cljs.core.Keyword(null, "path", "path", 1017337751));
  var rootf = function(state, state__$1, m) {
    return function rootf() {
      cljs.core.swap_BANG_.call(null, om.core.refresh_set, cljs.core.disj, rootf);
      var value__$1 = cljs.core.deref.call(null, state__$1);
      var cursor = path == null ? om.core.to_cursor.call(null, value__$1, state__$1, cljs.core.PersistentVector.EMPTY) : om.core.to_cursor.call(null, cljs.core.get_in.call(null, value__$1, path), state__$1, path);
      return om.dom.render.call(null, om.core.build.call(null, f, cursor, m), target);
    };
  }(state, state__$1, m);
  var watch_key = cljs.core.gensym.call(null);
  cljs.core.add_watch.call(null, state__$1, watch_key, function(_, ___$1, ___$2, ___$3) {
    if (cljs.core.contains_QMARK_.call(null, cljs.core.deref.call(null, om.core.refresh_set), rootf)) {
    } else {
      cljs.core.swap_BANG_.call(null, om.core.refresh_set, cljs.core.conj, rootf);
    }
    if (cljs.core.truth_(om.core.refresh_queued)) {
      return null;
    } else {
      om.core.refresh_queued = true;
      if (typeof requestAnimationFrame !== "undefined") {
        return requestAnimationFrame(om.core.render_all);
      } else {
        return setTimeout(om.core.render_all, 16);
      }
    }
  });
  cljs.core.swap_BANG_.call(null, om.core.roots, cljs.core.assoc, target, function() {
    cljs.core.remove_watch.call(null, state__$1, watch_key);
    cljs.core.swap_BANG_.call(null, om.core.roots, cljs.core.dissoc, target);
    return React.unmountComponentAtNode(target);
  });
  return rootf.call(null);
};
om.core.transact_BANG_ = function() {
  var transact_BANG_ = null;
  var transact_BANG___2 = function(cursor, f) {
    return transact_BANG_.call(null, cursor, cljs.core.PersistentVector.EMPTY, f, null);
  };
  var transact_BANG___3 = function(cursor, korks, f) {
    return transact_BANG_.call(null, cursor, korks, f, null);
  };
  var transact_BANG___4 = function(cursor, korks, f, tag) {
    var korks__$1 = korks == null ? cljs.core.PersistentVector.EMPTY : cljs.core.sequential_QMARK_.call(null, korks) ? korks : new cljs.core.Keyword(null, "else", "else", 1017020587) ? new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [korks], null) : null;
    var tx_data = om.core._transact_BANG_.call(null, cursor, korks__$1, f);
    if (!(tag == null)) {
      return om.core.notify_STAR_.call(null, cursor, cljs.core.assoc.call(null, tx_data, new cljs.core.Keyword(null, "tag", "tag", 1014018828), tag));
    } else {
      return om.core.notify_STAR_.call(null, cursor, tx_data);
    }
  };
  transact_BANG_ = function(cursor, korks, f, tag) {
    switch(arguments.length) {
      case 2:
        return transact_BANG___2.call(this, cursor, korks);
      case 3:
        return transact_BANG___3.call(this, cursor, korks, f);
      case 4:
        return transact_BANG___4.call(this, cursor, korks, f, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  transact_BANG_.cljs$core$IFn$_invoke$arity$2 = transact_BANG___2;
  transact_BANG_.cljs$core$IFn$_invoke$arity$3 = transact_BANG___3;
  transact_BANG_.cljs$core$IFn$_invoke$arity$4 = transact_BANG___4;
  return transact_BANG_;
}();
om.core.update_BANG_ = function() {
  var update_BANG_ = null;
  var update_BANG___2 = function(cursor, v) {
    return om.core.transact_BANG_.call(null, cursor, cljs.core.PersistentVector.EMPTY, function(_) {
      return v;
    }, null);
  };
  var update_BANG___3 = function(cursor, korks, v) {
    return om.core.transact_BANG_.call(null, cursor, korks, function(_) {
      return v;
    }, null);
  };
  var update_BANG___4 = function(cursor, korks, v, tag) {
    return om.core.transact_BANG_.call(null, cursor, korks, function(_) {
      return v;
    }, tag);
  };
  update_BANG_ = function(cursor, korks, v, tag) {
    switch(arguments.length) {
      case 2:
        return update_BANG___2.call(this, cursor, korks);
      case 3:
        return update_BANG___3.call(this, cursor, korks, v);
      case 4:
        return update_BANG___4.call(this, cursor, korks, v, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  update_BANG_.cljs$core$IFn$_invoke$arity$2 = update_BANG___2;
  update_BANG_.cljs$core$IFn$_invoke$arity$3 = update_BANG___3;
  update_BANG_.cljs$core$IFn$_invoke$arity$4 = update_BANG___4;
  return update_BANG_;
}();
om.core.get_node = function() {
  var get_node = null;
  var get_node__1 = function(owner) {
    return owner.getDOMNode();
  };
  var get_node__2 = function(owner, name) {
    var temp__4092__auto__ = owner.refs;
    if (cljs.core.truth_(temp__4092__auto__)) {
      var refs = temp__4092__auto__;
      return refs[name].getDOMNode();
    } else {
      return null;
    }
  };
  get_node = function(owner, name) {
    switch(arguments.length) {
      case 1:
        return get_node__1.call(this, owner);
      case 2:
        return get_node__2.call(this, owner, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_node.cljs$core$IFn$_invoke$arity$1 = get_node__1;
  get_node.cljs$core$IFn$_invoke$arity$2 = get_node__2;
  return get_node;
}();
om.core.set_state_BANG_ = function set_state_BANG_(owner, korks, v) {
  var _STAR_read_enabled_STAR_108513 = om.core._STAR_read_enabled_STAR_;
  try {
    om.core._STAR_read_enabled_STAR_ = true;
    var props = owner.props;
    var state = owner.state;
    var cursor = props["__om_cursor"];
    var path = om.core._path.call(null, cursor);
    var pstate = function() {
      var or__12830__auto__ = state["__om_pending_state"];
      if (cljs.core.truth_(or__12830__auto__)) {
        return or__12830__auto__;
      } else {
        return state["__om_state"];
      }
    }();
    if (!cljs.core.sequential_QMARK_.call(null, korks)) {
      state["__om_pending_state"] = cljs.core.assoc.call(null, pstate, korks, v);
    } else {
      state["__om_pending_state"] = cljs.core.assoc_in.call(null, pstate, korks, v);
    }
    if (cljs.core.empty_QMARK_.call(null, path)) {
      return cljs.core.swap_BANG_.call(null, om.core._state.call(null, cursor), cljs.core.clone);
    } else {
      return cljs.core.swap_BANG_.call(null, om.core._state.call(null, cursor), cljs.core.update_in, path, cljs.core.clone);
    }
  } finally {
    om.core._STAR_read_enabled_STAR_ = _STAR_read_enabled_STAR_108513;
  }
};
om.core.get_render_state = function() {
  var get_render_state = null;
  var get_render_state__1 = function(owner) {
    return owner.state["__om_state"];
  };
  var get_render_state__2 = function(owner, korks) {
    if (!cljs.core.sequential_QMARK_.call(null, korks)) {
      return cljs.core.get.call(null, get_render_state.call(null, owner), korks);
    } else {
      if (cljs.core.empty_QMARK_.call(null, korks)) {
        return get_render_state.call(null, owner);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return cljs.core.get_in.call(null, get_render_state.call(null, owner), korks);
        } else {
          return null;
        }
      }
    }
  };
  get_render_state = function(owner, korks) {
    switch(arguments.length) {
      case 1:
        return get_render_state__1.call(this, owner);
      case 2:
        return get_render_state__2.call(this, owner, korks);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_render_state.cljs$core$IFn$_invoke$arity$1 = get_render_state__1;
  get_render_state.cljs$core$IFn$_invoke$arity$2 = get_render_state__2;
  return get_render_state;
}();
om.core.graft = function graft(value, cursor) {
  var state = om.core._state.call(null, cursor);
  var path = om.core._path.call(null, cursor);
  if (om.core.cursor_QMARK_.call(null, value)) {
    throw new Error([cljs.core.str(value), cljs.core.str(" is already a cursor.")].join(""));
  } else {
    var x108515 = cljs.core.clone.call(null, value);
    x108515.om$core$ICursor$ = true;
    x108515.om$core$ICursor$_state$arity$1 = function(_) {
      var ___$1 = this;
      return state;
    };
    x108515.om$core$ICursor$_path$arity$1 = function(_) {
      var ___$1 = this;
      return path;
    };
    x108515.om$core$ITransact$ = true;
    x108515.om$core$ITransact$_transact_BANG_$arity$3 = function(_, ___$1, ___$2) {
      var ___$3 = this;
      throw new Error("Cannot transact on graft");
    };
    return x108515;
  }
};
goog.provide("goog.dom.classes");
goog.require("goog.array");
goog.dom.classes.set = function(element, className) {
  element.className = className;
};
goog.dom.classes.get = function(element) {
  var className = element.className;
  return goog.isString(className) && className.match(/\S+/g) || [];
};
goog.dom.classes.add = function(element, var_args) {
  var classes = goog.dom.classes.get(element);
  var args = goog.array.slice(arguments, 1);
  var expectedCount = classes.length + args.length;
  goog.dom.classes.add_(classes, args);
  goog.dom.classes.set(element, classes.join(" "));
  return classes.length == expectedCount;
};
goog.dom.classes.remove = function(element, var_args) {
  var classes = goog.dom.classes.get(element);
  var args = goog.array.slice(arguments, 1);
  var newClasses = goog.dom.classes.getDifference_(classes, args);
  goog.dom.classes.set(element, newClasses.join(" "));
  return newClasses.length == classes.length - args.length;
};
goog.dom.classes.add_ = function(classes, args) {
  for (var i = 0;i < args.length;i++) {
    if (!goog.array.contains(classes, args[i])) {
      classes.push(args[i]);
    }
  }
};
goog.dom.classes.getDifference_ = function(arr1, arr2) {
  return goog.array.filter(arr1, function(item) {
    return!goog.array.contains(arr2, item);
  });
};
goog.dom.classes.swap = function(element, fromClass, toClass) {
  var classes = goog.dom.classes.get(element);
  var removed = false;
  for (var i = 0;i < classes.length;i++) {
    if (classes[i] == fromClass) {
      goog.array.splice(classes, i--, 1);
      removed = true;
    }
  }
  if (removed) {
    classes.push(toClass);
    goog.dom.classes.set(element, classes.join(" "));
  }
  return removed;
};
goog.dom.classes.addRemove = function(element, classesToRemove, classesToAdd) {
  var classes = goog.dom.classes.get(element);
  if (goog.isString(classesToRemove)) {
    goog.array.remove(classes, classesToRemove);
  } else {
    if (goog.isArray(classesToRemove)) {
      classes = goog.dom.classes.getDifference_(classes, classesToRemove);
    }
  }
  if (goog.isString(classesToAdd) && !goog.array.contains(classes, classesToAdd)) {
    classes.push(classesToAdd);
  } else {
    if (goog.isArray(classesToAdd)) {
      goog.dom.classes.add_(classes, classesToAdd);
    }
  }
  goog.dom.classes.set(element, classes.join(" "));
};
goog.dom.classes.has = function(element, className) {
  return goog.array.contains(goog.dom.classes.get(element), className);
};
goog.dom.classes.enable = function(element, className, enabled) {
  if (enabled) {
    goog.dom.classes.add(element, className);
  } else {
    goog.dom.classes.remove(element, className);
  }
};
goog.dom.classes.toggle = function(element, className) {
  var add = !goog.dom.classes.has(element, className);
  goog.dom.classes.enable(element, className, add);
  return add;
};
goog.provide("goog.dom.BrowserFeature");
goog.require("goog.userAgent");
goog.dom.BrowserFeature = {CAN_ADD_NAME_OR_TYPE_ATTRIBUTES:!goog.userAgent.IE || goog.userAgent.isDocumentMode(9), CAN_USE_CHILDREN_ATTRIBUTE:!goog.userAgent.GECKO && !goog.userAgent.IE || (goog.userAgent.IE && goog.userAgent.isDocumentMode(9) || goog.userAgent.GECKO && goog.userAgent.isVersion("1.9.1")), CAN_USE_INNER_TEXT:goog.userAgent.IE && !goog.userAgent.isVersion("9"), CAN_USE_PARENT_ELEMENT_PROPERTY:goog.userAgent.IE || (goog.userAgent.OPERA || goog.userAgent.WEBKIT), INNER_HTML_NEEDS_SCOPED_ELEMENT:goog.userAgent.IE};
goog.provide("goog.dom.TagName");
goog.dom.TagName = {A:"A", ABBR:"ABBR", ACRONYM:"ACRONYM", ADDRESS:"ADDRESS", APPLET:"APPLET", AREA:"AREA", ARTICLE:"ARTICLE", ASIDE:"ASIDE", AUDIO:"AUDIO", B:"B", BASE:"BASE", BASEFONT:"BASEFONT", BDI:"BDI", BDO:"BDO", BIG:"BIG", BLOCKQUOTE:"BLOCKQUOTE", BODY:"BODY", BR:"BR", BUTTON:"BUTTON", CANVAS:"CANVAS", CAPTION:"CAPTION", CENTER:"CENTER", CITE:"CITE", CODE:"CODE", COL:"COL", COLGROUP:"COLGROUP", COMMAND:"COMMAND", DATA:"DATA", DATALIST:"DATALIST", DD:"DD", DEL:"DEL", DETAILS:"DETAILS", DFN:"DFN", 
DIALOG:"DIALOG", DIR:"DIR", DIV:"DIV", DL:"DL", DT:"DT", EM:"EM", EMBED:"EMBED", FIELDSET:"FIELDSET", FIGCAPTION:"FIGCAPTION", FIGURE:"FIGURE", FONT:"FONT", FOOTER:"FOOTER", FORM:"FORM", FRAME:"FRAME", FRAMESET:"FRAMESET", H1:"H1", H2:"H2", H3:"H3", H4:"H4", H5:"H5", H6:"H6", HEAD:"HEAD", HEADER:"HEADER", HGROUP:"HGROUP", HR:"HR", HTML:"HTML", I:"I", IFRAME:"IFRAME", IMG:"IMG", INPUT:"INPUT", INS:"INS", ISINDEX:"ISINDEX", KBD:"KBD", KEYGEN:"KEYGEN", LABEL:"LABEL", LEGEND:"LEGEND", LI:"LI", LINK:"LINK", 
MAP:"MAP", MARK:"MARK", MATH:"MATH", MENU:"MENU", META:"META", METER:"METER", NAV:"NAV", NOFRAMES:"NOFRAMES", NOSCRIPT:"NOSCRIPT", OBJECT:"OBJECT", OL:"OL", OPTGROUP:"OPTGROUP", OPTION:"OPTION", OUTPUT:"OUTPUT", P:"P", PARAM:"PARAM", PRE:"PRE", PROGRESS:"PROGRESS", Q:"Q", RP:"RP", RT:"RT", RUBY:"RUBY", S:"S", SAMP:"SAMP", SCRIPT:"SCRIPT", SECTION:"SECTION", SELECT:"SELECT", SMALL:"SMALL", SOURCE:"SOURCE", SPAN:"SPAN", STRIKE:"STRIKE", STRONG:"STRONG", STYLE:"STYLE", SUB:"SUB", SUMMARY:"SUMMARY", 
SUP:"SUP", SVG:"SVG", TABLE:"TABLE", TBODY:"TBODY", TD:"TD", TEXTAREA:"TEXTAREA", TFOOT:"TFOOT", TH:"TH", THEAD:"THEAD", TIME:"TIME", TITLE:"TITLE", TR:"TR", TRACK:"TRACK", TT:"TT", U:"U", UL:"UL", VAR:"VAR", VIDEO:"VIDEO", WBR:"WBR"};
goog.provide("goog.math");
goog.require("goog.array");
goog.require("goog.asserts");
goog.math.randomInt = function(a) {
  return Math.floor(Math.random() * a);
};
goog.math.uniformRandom = function(a, b) {
  return a + Math.random() * (b - a);
};
goog.math.clamp = function(value, min, max) {
  return Math.min(Math.max(value, min), max);
};
goog.math.modulo = function(a, b) {
  var r = a % b;
  return r * b < 0 ? r + b : r;
};
goog.math.lerp = function(a, b, x) {
  return a + x * (b - a);
};
goog.math.nearlyEquals = function(a, b, opt_tolerance) {
  return Math.abs(a - b) <= (opt_tolerance || 1E-6);
};
goog.math.standardAngle = function(angle) {
  return goog.math.modulo(angle, 360);
};
goog.math.toRadians = function(angleDegrees) {
  return angleDegrees * Math.PI / 180;
};
goog.math.toDegrees = function(angleRadians) {
  return angleRadians * 180 / Math.PI;
};
goog.math.angleDx = function(degrees, radius) {
  return radius * Math.cos(goog.math.toRadians(degrees));
};
goog.math.angleDy = function(degrees, radius) {
  return radius * Math.sin(goog.math.toRadians(degrees));
};
goog.math.angle = function(x1, y1, x2, y2) {
  return goog.math.standardAngle(goog.math.toDegrees(Math.atan2(y2 - y1, x2 - x1)));
};
goog.math.angleDifference = function(startAngle, endAngle) {
  var d = goog.math.standardAngle(endAngle) - goog.math.standardAngle(startAngle);
  if (d > 180) {
    d = d - 360;
  } else {
    if (d <= -180) {
      d = 360 + d;
    }
  }
  return d;
};
goog.math.sign = function(x) {
  return x == 0 ? 0 : x < 0 ? -1 : 1;
};
goog.math.longestCommonSubsequence = function(array1, array2, opt_compareFn, opt_collectorFn) {
  var compare = opt_compareFn || function(a, b) {
    return a == b;
  };
  var collect = opt_collectorFn || function(i1, i2) {
    return array1[i1];
  };
  var length1 = array1.length;
  var length2 = array2.length;
  var arr = [];
  for (var i = 0;i < length1 + 1;i++) {
    arr[i] = [];
    arr[i][0] = 0;
  }
  for (var j = 0;j < length2 + 1;j++) {
    arr[0][j] = 0;
  }
  for (i = 1;i <= length1;i++) {
    for (j = 1;j <= length1;j++) {
      if (compare(array1[i - 1], array2[j - 1])) {
        arr[i][j] = arr[i - 1][j - 1] + 1;
      } else {
        arr[i][j] = Math.max(arr[i - 1][j], arr[i][j - 1]);
      }
    }
  }
  var result = [];
  var i = length1, j = length2;
  while (i > 0 && j > 0) {
    if (compare(array1[i - 1], array2[j - 1])) {
      result.unshift(collect(i - 1, j - 1));
      i--;
      j--;
    } else {
      if (arr[i - 1][j] > arr[i][j - 1]) {
        i--;
      } else {
        j--;
      }
    }
  }
  return result;
};
goog.math.sum = function(var_args) {
  return(goog.array.reduce(arguments, function(sum, value) {
    return sum + value;
  }, 0));
};
goog.math.average = function(var_args) {
  return goog.math.sum.apply(null, arguments) / arguments.length;
};
goog.math.standardDeviation = function(var_args) {
  var sampleSize = arguments.length;
  if (sampleSize < 2) {
    return 0;
  }
  var mean = goog.math.average.apply(null, arguments);
  var variance = goog.math.sum.apply(null, goog.array.map(arguments, function(val) {
    return Math.pow(val - mean, 2);
  })) / (sampleSize - 1);
  return Math.sqrt(variance);
};
goog.math.isInt = function(num) {
  return isFinite(num) && num % 1 == 0;
};
goog.math.isFiniteNumber = function(num) {
  return isFinite(num) && !isNaN(num);
};
goog.math.safeFloor = function(num, opt_epsilon) {
  goog.asserts.assert(!goog.isDef(opt_epsilon) || opt_epsilon > 0);
  return Math.floor(num + (opt_epsilon || 2E-15));
};
goog.math.safeCeil = function(num, opt_epsilon) {
  goog.asserts.assert(!goog.isDef(opt_epsilon) || opt_epsilon > 0);
  return Math.ceil(num - (opt_epsilon || 2E-15));
};
goog.provide("goog.math.Coordinate");
goog.require("goog.math");
goog.math.Coordinate = function(opt_x, opt_y) {
  this.x = goog.isDef(opt_x) ? opt_x : 0;
  this.y = goog.isDef(opt_y) ? opt_y : 0;
};
goog.math.Coordinate.prototype.clone = function() {
  return new goog.math.Coordinate(this.x, this.y);
};
if (goog.DEBUG) {
  goog.math.Coordinate.prototype.toString = function() {
    return "(" + this.x + ", " + this.y + ")";
  };
}
goog.math.Coordinate.equals = function(a, b) {
  if (a == b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  return a.x == b.x && a.y == b.y;
};
goog.math.Coordinate.distance = function(a, b) {
  var dx = a.x - b.x;
  var dy = a.y - b.y;
  return Math.sqrt(dx * dx + dy * dy);
};
goog.math.Coordinate.magnitude = function(a) {
  return Math.sqrt(a.x * a.x + a.y * a.y);
};
goog.math.Coordinate.azimuth = function(a) {
  return goog.math.angle(0, 0, a.x, a.y);
};
goog.math.Coordinate.squaredDistance = function(a, b) {
  var dx = a.x - b.x;
  var dy = a.y - b.y;
  return dx * dx + dy * dy;
};
goog.math.Coordinate.difference = function(a, b) {
  return new goog.math.Coordinate(a.x - b.x, a.y - b.y);
};
goog.math.Coordinate.sum = function(a, b) {
  return new goog.math.Coordinate(a.x + b.x, a.y + b.y);
};
goog.math.Coordinate.prototype.ceil = function() {
  this.x = Math.ceil(this.x);
  this.y = Math.ceil(this.y);
  return this;
};
goog.math.Coordinate.prototype.floor = function() {
  this.x = Math.floor(this.x);
  this.y = Math.floor(this.y);
  return this;
};
goog.math.Coordinate.prototype.round = function() {
  this.x = Math.round(this.x);
  this.y = Math.round(this.y);
  return this;
};
goog.math.Coordinate.prototype.translate = function(tx, opt_ty) {
  if (tx instanceof goog.math.Coordinate) {
    this.x += tx.x;
    this.y += tx.y;
  } else {
    this.x += tx;
    if (goog.isNumber(opt_ty)) {
      this.y += opt_ty;
    }
  }
  return this;
};
goog.math.Coordinate.prototype.scale = function(sx, opt_sy) {
  var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
  this.x *= sx;
  this.y *= sy;
  return this;
};
goog.provide("goog.math.Size");
goog.math.Size = function(width, height) {
  this.width = width;
  this.height = height;
};
goog.math.Size.equals = function(a, b) {
  if (a == b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  return a.width == b.width && a.height == b.height;
};
goog.math.Size.prototype.clone = function() {
  return new goog.math.Size(this.width, this.height);
};
if (goog.DEBUG) {
  goog.math.Size.prototype.toString = function() {
    return "(" + this.width + " x " + this.height + ")";
  };
}
goog.math.Size.prototype.getLongest = function() {
  return Math.max(this.width, this.height);
};
goog.math.Size.prototype.getShortest = function() {
  return Math.min(this.width, this.height);
};
goog.math.Size.prototype.area = function() {
  return this.width * this.height;
};
goog.math.Size.prototype.perimeter = function() {
  return(this.width + this.height) * 2;
};
goog.math.Size.prototype.aspectRatio = function() {
  return this.width / this.height;
};
goog.math.Size.prototype.isEmpty = function() {
  return!this.area();
};
goog.math.Size.prototype.ceil = function() {
  this.width = Math.ceil(this.width);
  this.height = Math.ceil(this.height);
  return this;
};
goog.math.Size.prototype.fitsInside = function(target) {
  return this.width <= target.width && this.height <= target.height;
};
goog.math.Size.prototype.floor = function() {
  this.width = Math.floor(this.width);
  this.height = Math.floor(this.height);
  return this;
};
goog.math.Size.prototype.round = function() {
  this.width = Math.round(this.width);
  this.height = Math.round(this.height);
  return this;
};
goog.math.Size.prototype.scale = function(sx, opt_sy) {
  var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
  this.width *= sx;
  this.height *= sy;
  return this;
};
goog.math.Size.prototype.scaleToFit = function(target) {
  var s = this.aspectRatio() > target.aspectRatio() ? target.width / this.width : target.height / this.height;
  return this.scale(s);
};
goog.provide("goog.dom");
goog.provide("goog.dom.DomHelper");
goog.provide("goog.dom.NodeType");
goog.require("goog.array");
goog.require("goog.dom.BrowserFeature");
goog.require("goog.dom.TagName");
goog.require("goog.dom.classes");
goog.require("goog.math.Coordinate");
goog.require("goog.math.Size");
goog.require("goog.object");
goog.require("goog.string");
goog.require("goog.userAgent");
goog.dom.ASSUME_QUIRKS_MODE = false;
goog.dom.ASSUME_STANDARDS_MODE = false;
goog.dom.COMPAT_MODE_KNOWN_ = goog.dom.ASSUME_QUIRKS_MODE || goog.dom.ASSUME_STANDARDS_MODE;
goog.dom.NodeType = {ELEMENT:1, ATTRIBUTE:2, TEXT:3, CDATA_SECTION:4, ENTITY_REFERENCE:5, ENTITY:6, PROCESSING_INSTRUCTION:7, COMMENT:8, DOCUMENT:9, DOCUMENT_TYPE:10, DOCUMENT_FRAGMENT:11, NOTATION:12};
goog.dom.getDomHelper = function(opt_element) {
  return opt_element ? new goog.dom.DomHelper(goog.dom.getOwnerDocument(opt_element)) : goog.dom.defaultDomHelper_ || (goog.dom.defaultDomHelper_ = new goog.dom.DomHelper);
};
goog.dom.defaultDomHelper_;
goog.dom.getDocument = function() {
  return document;
};
goog.dom.getElement = function(element) {
  return goog.isString(element) ? document.getElementById(element) : element;
};
goog.dom.$ = goog.dom.getElement;
goog.dom.getElementsByTagNameAndClass = function(opt_tag, opt_class, opt_el) {
  return goog.dom.getElementsByTagNameAndClass_(document, opt_tag, opt_class, opt_el);
};
goog.dom.getElementsByClass = function(className, opt_el) {
  var parent = opt_el || document;
  if (goog.dom.canUseQuerySelector_(parent)) {
    return parent.querySelectorAll("." + className);
  } else {
    if (parent.getElementsByClassName) {
      return parent.getElementsByClassName(className);
    }
  }
  return goog.dom.getElementsByTagNameAndClass_(document, "*", className, opt_el);
};
goog.dom.getElementByClass = function(className, opt_el) {
  var parent = opt_el || document;
  var retVal = null;
  if (goog.dom.canUseQuerySelector_(parent)) {
    retVal = parent.querySelector("." + className);
  } else {
    retVal = goog.dom.getElementsByClass(className, opt_el)[0];
  }
  return retVal || null;
};
goog.dom.canUseQuerySelector_ = function(parent) {
  return!!(parent.querySelectorAll && parent.querySelector);
};
goog.dom.getElementsByTagNameAndClass_ = function(doc, opt_tag, opt_class, opt_el) {
  var parent = opt_el || doc;
  var tagName = opt_tag && opt_tag != "*" ? opt_tag.toUpperCase() : "";
  if (goog.dom.canUseQuerySelector_(parent) && (tagName || opt_class)) {
    var query = tagName + (opt_class ? "." + opt_class : "");
    return parent.querySelectorAll(query);
  }
  if (opt_class && parent.getElementsByClassName) {
    var els = parent.getElementsByClassName(opt_class);
    if (tagName) {
      var arrayLike = {};
      var len = 0;
      for (var i = 0, el;el = els[i];i++) {
        if (tagName == el.nodeName) {
          arrayLike[len++] = el;
        }
      }
      arrayLike.length = len;
      return arrayLike;
    } else {
      return els;
    }
  }
  var els = parent.getElementsByTagName(tagName || "*");
  if (opt_class) {
    var arrayLike = {};
    var len = 0;
    for (var i = 0, el;el = els[i];i++) {
      var className = el.className;
      if (typeof className.split == "function" && goog.array.contains(className.split(/\s+/), opt_class)) {
        arrayLike[len++] = el;
      }
    }
    arrayLike.length = len;
    return arrayLike;
  } else {
    return els;
  }
};
goog.dom.$$ = goog.dom.getElementsByTagNameAndClass;
goog.dom.setProperties = function(element, properties) {
  goog.object.forEach(properties, function(val, key) {
    if (key == "style") {
      element.style.cssText = val;
    } else {
      if (key == "class") {
        element.className = val;
      } else {
        if (key == "for") {
          element.htmlFor = val;
        } else {
          if (key in goog.dom.DIRECT_ATTRIBUTE_MAP_) {
            element.setAttribute(goog.dom.DIRECT_ATTRIBUTE_MAP_[key], val);
          } else {
            if (goog.string.startsWith(key, "aria-") || goog.string.startsWith(key, "data-")) {
              element.setAttribute(key, val);
            } else {
              element[key] = val;
            }
          }
        }
      }
    }
  });
};
goog.dom.DIRECT_ATTRIBUTE_MAP_ = {"cellpadding":"cellPadding", "cellspacing":"cellSpacing", "colspan":"colSpan", "frameborder":"frameBorder", "height":"height", "maxlength":"maxLength", "role":"role", "rowspan":"rowSpan", "type":"type", "usemap":"useMap", "valign":"vAlign", "width":"width"};
goog.dom.getViewportSize = function(opt_window) {
  return goog.dom.getViewportSize_(opt_window || window);
};
goog.dom.getViewportSize_ = function(win) {
  var doc = win.document;
  var el = goog.dom.isCss1CompatMode_(doc) ? doc.documentElement : doc.body;
  return new goog.math.Size(el.clientWidth, el.clientHeight);
};
goog.dom.getDocumentHeight = function() {
  return goog.dom.getDocumentHeight_(window);
};
goog.dom.getDocumentHeight_ = function(win) {
  var doc = win.document;
  var height = 0;
  if (doc) {
    var vh = goog.dom.getViewportSize_(win).height;
    var body = doc.body;
    var docEl = doc.documentElement;
    if (goog.dom.isCss1CompatMode_(doc) && docEl.scrollHeight) {
      height = docEl.scrollHeight != vh ? docEl.scrollHeight : docEl.offsetHeight;
    } else {
      var sh = docEl.scrollHeight;
      var oh = docEl.offsetHeight;
      if (docEl.clientHeight != oh) {
        sh = body.scrollHeight;
        oh = body.offsetHeight;
      }
      if (sh > vh) {
        height = sh > oh ? sh : oh;
      } else {
        height = sh < oh ? sh : oh;
      }
    }
  }
  return height;
};
goog.dom.getPageScroll = function(opt_window) {
  var win = opt_window || (goog.global || window);
  return goog.dom.getDomHelper(win.document).getDocumentScroll();
};
goog.dom.getDocumentScroll = function() {
  return goog.dom.getDocumentScroll_(document);
};
goog.dom.getDocumentScroll_ = function(doc) {
  var el = goog.dom.getDocumentScrollElement_(doc);
  var win = goog.dom.getWindow_(doc);
  return new goog.math.Coordinate(win.pageXOffset || el.scrollLeft, win.pageYOffset || el.scrollTop);
};
goog.dom.getDocumentScrollElement = function() {
  return goog.dom.getDocumentScrollElement_(document);
};
goog.dom.getDocumentScrollElement_ = function(doc) {
  return!goog.userAgent.WEBKIT && goog.dom.isCss1CompatMode_(doc) ? doc.documentElement : doc.body;
};
goog.dom.getWindow = function(opt_doc) {
  return opt_doc ? goog.dom.getWindow_(opt_doc) : window;
};
goog.dom.getWindow_ = function(doc) {
  return doc.parentWindow || doc.defaultView;
};
goog.dom.createDom = function(tagName, opt_attributes, var_args) {
  return goog.dom.createDom_(document, arguments);
};
goog.dom.createDom_ = function(doc, args) {
  var tagName = args[0];
  var attributes = args[1];
  if (!goog.dom.BrowserFeature.CAN_ADD_NAME_OR_TYPE_ATTRIBUTES && (attributes && (attributes.name || attributes.type))) {
    var tagNameArr = ["\x3c", tagName];
    if (attributes.name) {
      tagNameArr.push(' name\x3d"', goog.string.htmlEscape(attributes.name), '"');
    }
    if (attributes.type) {
      tagNameArr.push(' type\x3d"', goog.string.htmlEscape(attributes.type), '"');
      var clone = {};
      goog.object.extend(clone, attributes);
      delete clone["type"];
      attributes = clone;
    }
    tagNameArr.push("\x3e");
    tagName = tagNameArr.join("");
  }
  var element = doc.createElement(tagName);
  if (attributes) {
    if (goog.isString(attributes)) {
      element.className = attributes;
    } else {
      if (goog.isArray(attributes)) {
        goog.dom.classes.add.apply(null, [element].concat(attributes));
      } else {
        goog.dom.setProperties(element, attributes);
      }
    }
  }
  if (args.length > 2) {
    goog.dom.append_(doc, element, args, 2);
  }
  return element;
};
goog.dom.append_ = function(doc, parent, args, startIndex) {
  function childHandler(child) {
    if (child) {
      parent.appendChild(goog.isString(child) ? doc.createTextNode(child) : child);
    }
  }
  for (var i = startIndex;i < args.length;i++) {
    var arg = args[i];
    if (goog.isArrayLike(arg) && !goog.dom.isNodeLike(arg)) {
      goog.array.forEach(goog.dom.isNodeList(arg) ? goog.array.toArray(arg) : arg, childHandler);
    } else {
      childHandler(arg);
    }
  }
};
goog.dom.$dom = goog.dom.createDom;
goog.dom.createElement = function(name) {
  return document.createElement(name);
};
goog.dom.createTextNode = function(content) {
  return document.createTextNode(String(content));
};
goog.dom.createTable = function(rows, columns, opt_fillWithNbsp) {
  return goog.dom.createTable_(document, rows, columns, !!opt_fillWithNbsp);
};
goog.dom.createTable_ = function(doc, rows, columns, fillWithNbsp) {
  var rowHtml = ["\x3ctr\x3e"];
  for (var i = 0;i < columns;i++) {
    rowHtml.push(fillWithNbsp ? "\x3ctd\x3e\x26nbsp;\x3c/td\x3e" : "\x3ctd\x3e\x3c/td\x3e");
  }
  rowHtml.push("\x3c/tr\x3e");
  rowHtml = rowHtml.join("");
  var totalHtml = ["\x3ctable\x3e"];
  for (i = 0;i < rows;i++) {
    totalHtml.push(rowHtml);
  }
  totalHtml.push("\x3c/table\x3e");
  var elem = doc.createElement(goog.dom.TagName.DIV);
  elem.innerHTML = totalHtml.join("");
  return(elem.removeChild(elem.firstChild));
};
goog.dom.htmlToDocumentFragment = function(htmlString) {
  return goog.dom.htmlToDocumentFragment_(document, htmlString);
};
goog.dom.htmlToDocumentFragment_ = function(doc, htmlString) {
  var tempDiv = doc.createElement("div");
  if (goog.dom.BrowserFeature.INNER_HTML_NEEDS_SCOPED_ELEMENT) {
    tempDiv.innerHTML = "\x3cbr\x3e" + htmlString;
    tempDiv.removeChild(tempDiv.firstChild);
  } else {
    tempDiv.innerHTML = htmlString;
  }
  if (tempDiv.childNodes.length == 1) {
    return(tempDiv.removeChild(tempDiv.firstChild));
  } else {
    var fragment = doc.createDocumentFragment();
    while (tempDiv.firstChild) {
      fragment.appendChild(tempDiv.firstChild);
    }
    return fragment;
  }
};
goog.dom.getCompatMode = function() {
  return goog.dom.isCss1CompatMode() ? "CSS1Compat" : "BackCompat";
};
goog.dom.isCss1CompatMode = function() {
  return goog.dom.isCss1CompatMode_(document);
};
goog.dom.isCss1CompatMode_ = function(doc) {
  if (goog.dom.COMPAT_MODE_KNOWN_) {
    return goog.dom.ASSUME_STANDARDS_MODE;
  }
  return doc.compatMode == "CSS1Compat";
};
goog.dom.canHaveChildren = function(node) {
  if (node.nodeType != goog.dom.NodeType.ELEMENT) {
    return false;
  }
  switch(node.tagName) {
    case goog.dom.TagName.APPLET:
    ;
    case goog.dom.TagName.AREA:
    ;
    case goog.dom.TagName.BASE:
    ;
    case goog.dom.TagName.BR:
    ;
    case goog.dom.TagName.COL:
    ;
    case goog.dom.TagName.COMMAND:
    ;
    case goog.dom.TagName.EMBED:
    ;
    case goog.dom.TagName.FRAME:
    ;
    case goog.dom.TagName.HR:
    ;
    case goog.dom.TagName.IMG:
    ;
    case goog.dom.TagName.INPUT:
    ;
    case goog.dom.TagName.IFRAME:
    ;
    case goog.dom.TagName.ISINDEX:
    ;
    case goog.dom.TagName.KEYGEN:
    ;
    case goog.dom.TagName.LINK:
    ;
    case goog.dom.TagName.NOFRAMES:
    ;
    case goog.dom.TagName.NOSCRIPT:
    ;
    case goog.dom.TagName.META:
    ;
    case goog.dom.TagName.OBJECT:
    ;
    case goog.dom.TagName.PARAM:
    ;
    case goog.dom.TagName.SCRIPT:
    ;
    case goog.dom.TagName.SOURCE:
    ;
    case goog.dom.TagName.STYLE:
    ;
    case goog.dom.TagName.TRACK:
    ;
    case goog.dom.TagName.WBR:
      return false;
  }
  return true;
};
goog.dom.appendChild = function(parent, child) {
  parent.appendChild(child);
};
goog.dom.append = function(parent, var_args) {
  goog.dom.append_(goog.dom.getOwnerDocument(parent), parent, arguments, 1);
};
goog.dom.removeChildren = function(node) {
  var child;
  while (child = node.firstChild) {
    node.removeChild(child);
  }
};
goog.dom.insertSiblingBefore = function(newNode, refNode) {
  if (refNode.parentNode) {
    refNode.parentNode.insertBefore(newNode, refNode);
  }
};
goog.dom.insertSiblingAfter = function(newNode, refNode) {
  if (refNode.parentNode) {
    refNode.parentNode.insertBefore(newNode, refNode.nextSibling);
  }
};
goog.dom.insertChildAt = function(parent, child, index) {
  parent.insertBefore(child, parent.childNodes[index] || null);
};
goog.dom.removeNode = function(node) {
  return node && node.parentNode ? node.parentNode.removeChild(node) : null;
};
goog.dom.replaceNode = function(newNode, oldNode) {
  var parent = oldNode.parentNode;
  if (parent) {
    parent.replaceChild(newNode, oldNode);
  }
};
goog.dom.flattenElement = function(element) {
  var child, parent = element.parentNode;
  if (parent && parent.nodeType != goog.dom.NodeType.DOCUMENT_FRAGMENT) {
    if (element.removeNode) {
      return(element.removeNode(false));
    } else {
      while (child = element.firstChild) {
        parent.insertBefore(child, element);
      }
      return(goog.dom.removeNode(element));
    }
  }
};
goog.dom.getChildren = function(element) {
  if (goog.dom.BrowserFeature.CAN_USE_CHILDREN_ATTRIBUTE && element.children != undefined) {
    return element.children;
  }
  return goog.array.filter(element.childNodes, function(node) {
    return node.nodeType == goog.dom.NodeType.ELEMENT;
  });
};
goog.dom.getFirstElementChild = function(node) {
  if (node.firstElementChild != undefined) {
    return(node).firstElementChild;
  }
  return goog.dom.getNextElementNode_(node.firstChild, true);
};
goog.dom.getLastElementChild = function(node) {
  if (node.lastElementChild != undefined) {
    return(node).lastElementChild;
  }
  return goog.dom.getNextElementNode_(node.lastChild, false);
};
goog.dom.getNextElementSibling = function(node) {
  if (node.nextElementSibling != undefined) {
    return(node).nextElementSibling;
  }
  return goog.dom.getNextElementNode_(node.nextSibling, true);
};
goog.dom.getPreviousElementSibling = function(node) {
  if (node.previousElementSibling != undefined) {
    return(node).previousElementSibling;
  }
  return goog.dom.getNextElementNode_(node.previousSibling, false);
};
goog.dom.getNextElementNode_ = function(node, forward) {
  while (node && node.nodeType != goog.dom.NodeType.ELEMENT) {
    node = forward ? node.nextSibling : node.previousSibling;
  }
  return(node);
};
goog.dom.getNextNode = function(node) {
  if (!node) {
    return null;
  }
  if (node.firstChild) {
    return node.firstChild;
  }
  while (node && !node.nextSibling) {
    node = node.parentNode;
  }
  return node ? node.nextSibling : null;
};
goog.dom.getPreviousNode = function(node) {
  if (!node) {
    return null;
  }
  if (!node.previousSibling) {
    return node.parentNode;
  }
  node = node.previousSibling;
  while (node && node.lastChild) {
    node = node.lastChild;
  }
  return node;
};
goog.dom.isNodeLike = function(obj) {
  return goog.isObject(obj) && obj.nodeType > 0;
};
goog.dom.isElement = function(obj) {
  return goog.isObject(obj) && obj.nodeType == goog.dom.NodeType.ELEMENT;
};
goog.dom.isWindow = function(obj) {
  return goog.isObject(obj) && obj["window"] == obj;
};
goog.dom.getParentElement = function(element) {
  if (goog.dom.BrowserFeature.CAN_USE_PARENT_ELEMENT_PROPERTY) {
    return element.parentElement;
  }
  var parent = element.parentNode;
  return goog.dom.isElement(parent) ? (parent) : null;
};
goog.dom.contains = function(parent, descendant) {
  if (parent.contains && descendant.nodeType == goog.dom.NodeType.ELEMENT) {
    return parent == descendant || parent.contains(descendant);
  }
  if (typeof parent.compareDocumentPosition != "undefined") {
    return parent == descendant || Boolean(parent.compareDocumentPosition(descendant) & 16);
  }
  while (descendant && parent != descendant) {
    descendant = descendant.parentNode;
  }
  return descendant == parent;
};
goog.dom.compareNodeOrder = function(node1, node2) {
  if (node1 == node2) {
    return 0;
  }
  if (node1.compareDocumentPosition) {
    return node1.compareDocumentPosition(node2) & 2 ? 1 : -1;
  }
  if (goog.userAgent.IE && !goog.userAgent.isDocumentMode(9)) {
    if (node1.nodeType == goog.dom.NodeType.DOCUMENT) {
      return-1;
    }
    if (node2.nodeType == goog.dom.NodeType.DOCUMENT) {
      return 1;
    }
  }
  if ("sourceIndex" in node1 || node1.parentNode && "sourceIndex" in node1.parentNode) {
    var isElement1 = node1.nodeType == goog.dom.NodeType.ELEMENT;
    var isElement2 = node2.nodeType == goog.dom.NodeType.ELEMENT;
    if (isElement1 && isElement2) {
      return node1.sourceIndex - node2.sourceIndex;
    } else {
      var parent1 = node1.parentNode;
      var parent2 = node2.parentNode;
      if (parent1 == parent2) {
        return goog.dom.compareSiblingOrder_(node1, node2);
      }
      if (!isElement1 && goog.dom.contains(parent1, node2)) {
        return-1 * goog.dom.compareParentsDescendantNodeIe_(node1, node2);
      }
      if (!isElement2 && goog.dom.contains(parent2, node1)) {
        return goog.dom.compareParentsDescendantNodeIe_(node2, node1);
      }
      return(isElement1 ? node1.sourceIndex : parent1.sourceIndex) - (isElement2 ? node2.sourceIndex : parent2.sourceIndex);
    }
  }
  var doc = goog.dom.getOwnerDocument(node1);
  var range1, range2;
  range1 = doc.createRange();
  range1.selectNode(node1);
  range1.collapse(true);
  range2 = doc.createRange();
  range2.selectNode(node2);
  range2.collapse(true);
  return range1.compareBoundaryPoints(goog.global["Range"].START_TO_END, range2);
};
goog.dom.compareParentsDescendantNodeIe_ = function(textNode, node) {
  var parent = textNode.parentNode;
  if (parent == node) {
    return-1;
  }
  var sibling = node;
  while (sibling.parentNode != parent) {
    sibling = sibling.parentNode;
  }
  return goog.dom.compareSiblingOrder_(sibling, textNode);
};
goog.dom.compareSiblingOrder_ = function(node1, node2) {
  var s = node2;
  while (s = s.previousSibling) {
    if (s == node1) {
      return-1;
    }
  }
  return 1;
};
goog.dom.findCommonAncestor = function(var_args) {
  var i, count = arguments.length;
  if (!count) {
    return null;
  } else {
    if (count == 1) {
      return arguments[0];
    }
  }
  var paths = [];
  var minLength = Infinity;
  for (i = 0;i < count;i++) {
    var ancestors = [];
    var node = arguments[i];
    while (node) {
      ancestors.unshift(node);
      node = node.parentNode;
    }
    paths.push(ancestors);
    minLength = Math.min(minLength, ancestors.length);
  }
  var output = null;
  for (i = 0;i < minLength;i++) {
    var first = paths[0][i];
    for (var j = 1;j < count;j++) {
      if (first != paths[j][i]) {
        return output;
      }
    }
    output = first;
  }
  return output;
};
goog.dom.getOwnerDocument = function(node) {
  return(node.nodeType == goog.dom.NodeType.DOCUMENT ? node : node.ownerDocument || node.document);
};
goog.dom.getFrameContentDocument = function(frame) {
  var doc = frame.contentDocument || frame.contentWindow.document;
  return doc;
};
goog.dom.getFrameContentWindow = function(frame) {
  return frame.contentWindow || goog.dom.getWindow_(goog.dom.getFrameContentDocument(frame));
};
goog.dom.setTextContent = function(element, text) {
  if ("textContent" in element) {
    element.textContent = text;
  } else {
    if (element.firstChild && element.firstChild.nodeType == goog.dom.NodeType.TEXT) {
      while (element.lastChild != element.firstChild) {
        element.removeChild(element.lastChild);
      }
      element.firstChild.data = text;
    } else {
      goog.dom.removeChildren(element);
      var doc = goog.dom.getOwnerDocument(element);
      element.appendChild(doc.createTextNode(String(text)));
    }
  }
};
goog.dom.getOuterHtml = function(element) {
  if ("outerHTML" in element) {
    return element.outerHTML;
  } else {
    var doc = goog.dom.getOwnerDocument(element);
    var div = doc.createElement("div");
    div.appendChild(element.cloneNode(true));
    return div.innerHTML;
  }
};
goog.dom.findNode = function(root, p) {
  var rv = [];
  var found = goog.dom.findNodes_(root, p, rv, true);
  return found ? rv[0] : undefined;
};
goog.dom.findNodes = function(root, p) {
  var rv = [];
  goog.dom.findNodes_(root, p, rv, false);
  return rv;
};
goog.dom.findNodes_ = function(root, p, rv, findOne) {
  if (root != null) {
    var child = root.firstChild;
    while (child) {
      if (p(child)) {
        rv.push(child);
        if (findOne) {
          return true;
        }
      }
      if (goog.dom.findNodes_(child, p, rv, findOne)) {
        return true;
      }
      child = child.nextSibling;
    }
  }
  return false;
};
goog.dom.TAGS_TO_IGNORE_ = {"SCRIPT":1, "STYLE":1, "HEAD":1, "IFRAME":1, "OBJECT":1};
goog.dom.PREDEFINED_TAG_VALUES_ = {"IMG":" ", "BR":"\n"};
goog.dom.isFocusableTabIndex = function(element) {
  var attrNode = element.getAttributeNode("tabindex");
  if (attrNode && attrNode.specified) {
    var index = element.tabIndex;
    return goog.isNumber(index) && (index >= 0 && index < 32768);
  }
  return false;
};
goog.dom.setFocusableTabIndex = function(element, enable) {
  if (enable) {
    element.tabIndex = 0;
  } else {
    element.tabIndex = -1;
    element.removeAttribute("tabIndex");
  }
};
goog.dom.getTextContent = function(node) {
  var textContent;
  if (goog.dom.BrowserFeature.CAN_USE_INNER_TEXT && "innerText" in node) {
    textContent = goog.string.canonicalizeNewlines(node.innerText);
  } else {
    var buf = [];
    goog.dom.getTextContent_(node, buf, true);
    textContent = buf.join("");
  }
  textContent = textContent.replace(/ \xAD /g, " ").replace(/\xAD/g, "");
  textContent = textContent.replace(/\u200B/g, "");
  if (!goog.dom.BrowserFeature.CAN_USE_INNER_TEXT) {
    textContent = textContent.replace(/ +/g, " ");
  }
  if (textContent != " ") {
    textContent = textContent.replace(/^\s*/, "");
  }
  return textContent;
};
goog.dom.getRawTextContent = function(node) {
  var buf = [];
  goog.dom.getTextContent_(node, buf, false);
  return buf.join("");
};
goog.dom.getTextContent_ = function(node, buf, normalizeWhitespace) {
  if (node.nodeName in goog.dom.TAGS_TO_IGNORE_) {
  } else {
    if (node.nodeType == goog.dom.NodeType.TEXT) {
      if (normalizeWhitespace) {
        buf.push(String(node.nodeValue).replace(/(\r\n|\r|\n)/g, ""));
      } else {
        buf.push(node.nodeValue);
      }
    } else {
      if (node.nodeName in goog.dom.PREDEFINED_TAG_VALUES_) {
        buf.push(goog.dom.PREDEFINED_TAG_VALUES_[node.nodeName]);
      } else {
        var child = node.firstChild;
        while (child) {
          goog.dom.getTextContent_(child, buf, normalizeWhitespace);
          child = child.nextSibling;
        }
      }
    }
  }
};
goog.dom.getNodeTextLength = function(node) {
  return goog.dom.getTextContent(node).length;
};
goog.dom.getNodeTextOffset = function(node, opt_offsetParent) {
  var root = opt_offsetParent || goog.dom.getOwnerDocument(node).body;
  var buf = [];
  while (node && node != root) {
    var cur = node;
    while (cur = cur.previousSibling) {
      buf.unshift(goog.dom.getTextContent(cur));
    }
    node = node.parentNode;
  }
  return goog.string.trimLeft(buf.join("")).replace(/ +/g, " ").length;
};
goog.dom.getNodeAtOffset = function(parent, offset, opt_result) {
  var stack = [parent], pos = 0, cur = null;
  while (stack.length > 0 && pos < offset) {
    cur = stack.pop();
    if (cur.nodeName in goog.dom.TAGS_TO_IGNORE_) {
    } else {
      if (cur.nodeType == goog.dom.NodeType.TEXT) {
        var text = cur.nodeValue.replace(/(\r\n|\r|\n)/g, "").replace(/ +/g, " ");
        pos += text.length;
      } else {
        if (cur.nodeName in goog.dom.PREDEFINED_TAG_VALUES_) {
          pos += goog.dom.PREDEFINED_TAG_VALUES_[cur.nodeName].length;
        } else {
          for (var i = cur.childNodes.length - 1;i >= 0;i--) {
            stack.push(cur.childNodes[i]);
          }
        }
      }
    }
  }
  if (goog.isObject(opt_result)) {
    opt_result.remainder = cur ? cur.nodeValue.length + offset - pos - 1 : 0;
    opt_result.node = cur;
  }
  return cur;
};
goog.dom.isNodeList = function(val) {
  if (val && typeof val.length == "number") {
    if (goog.isObject(val)) {
      return typeof val.item == "function" || typeof val.item == "string";
    } else {
      if (goog.isFunction(val)) {
        return typeof val.item == "function";
      }
    }
  }
  return false;
};
goog.dom.getAncestorByTagNameAndClass = function(element, opt_tag, opt_class) {
  if (!opt_tag && !opt_class) {
    return null;
  }
  var tagName = opt_tag ? opt_tag.toUpperCase() : null;
  return(goog.dom.getAncestor(element, function(node) {
    return(!tagName || node.nodeName == tagName) && (!opt_class || goog.dom.classes.has(node, opt_class));
  }, true));
};
goog.dom.getAncestorByClass = function(element, className) {
  return goog.dom.getAncestorByTagNameAndClass(element, null, className);
};
goog.dom.getAncestor = function(element, matcher, opt_includeNode, opt_maxSearchSteps) {
  if (!opt_includeNode) {
    element = element.parentNode;
  }
  var ignoreSearchSteps = opt_maxSearchSteps == null;
  var steps = 0;
  while (element && (ignoreSearchSteps || steps <= opt_maxSearchSteps)) {
    if (matcher(element)) {
      return element;
    }
    element = element.parentNode;
    steps++;
  }
  return null;
};
goog.dom.getActiveElement = function(doc) {
  try {
    return doc && doc.activeElement;
  } catch (e) {
  }
  return null;
};
goog.dom.DomHelper = function(opt_document) {
  this.document_ = opt_document || (goog.global.document || document);
};
goog.dom.DomHelper.prototype.getDomHelper = goog.dom.getDomHelper;
goog.dom.DomHelper.prototype.setDocument = function(document) {
  this.document_ = document;
};
goog.dom.DomHelper.prototype.getDocument = function() {
  return this.document_;
};
goog.dom.DomHelper.prototype.getElement = function(element) {
  if (goog.isString(element)) {
    return this.document_.getElementById(element);
  } else {
    return element;
  }
};
goog.dom.DomHelper.prototype.$ = goog.dom.DomHelper.prototype.getElement;
goog.dom.DomHelper.prototype.getElementsByTagNameAndClass = function(opt_tag, opt_class, opt_el) {
  return goog.dom.getElementsByTagNameAndClass_(this.document_, opt_tag, opt_class, opt_el);
};
goog.dom.DomHelper.prototype.getElementsByClass = function(className, opt_el) {
  var doc = opt_el || this.document_;
  return goog.dom.getElementsByClass(className, doc);
};
goog.dom.DomHelper.prototype.getElementByClass = function(className, opt_el) {
  var doc = opt_el || this.document_;
  return goog.dom.getElementByClass(className, doc);
};
goog.dom.DomHelper.prototype.$$ = goog.dom.DomHelper.prototype.getElementsByTagNameAndClass;
goog.dom.DomHelper.prototype.setProperties = goog.dom.setProperties;
goog.dom.DomHelper.prototype.getViewportSize = function(opt_window) {
  return goog.dom.getViewportSize(opt_window || this.getWindow());
};
goog.dom.DomHelper.prototype.getDocumentHeight = function() {
  return goog.dom.getDocumentHeight_(this.getWindow());
};
goog.dom.Appendable;
goog.dom.DomHelper.prototype.createDom = function(tagName, opt_attributes, var_args) {
  return goog.dom.createDom_(this.document_, arguments);
};
goog.dom.DomHelper.prototype.$dom = goog.dom.DomHelper.prototype.createDom;
goog.dom.DomHelper.prototype.createElement = function(name) {
  return this.document_.createElement(name);
};
goog.dom.DomHelper.prototype.createTextNode = function(content) {
  return this.document_.createTextNode(String(content));
};
goog.dom.DomHelper.prototype.createTable = function(rows, columns, opt_fillWithNbsp) {
  return goog.dom.createTable_(this.document_, rows, columns, !!opt_fillWithNbsp);
};
goog.dom.DomHelper.prototype.htmlToDocumentFragment = function(htmlString) {
  return goog.dom.htmlToDocumentFragment_(this.document_, htmlString);
};
goog.dom.DomHelper.prototype.getCompatMode = function() {
  return this.isCss1CompatMode() ? "CSS1Compat" : "BackCompat";
};
goog.dom.DomHelper.prototype.isCss1CompatMode = function() {
  return goog.dom.isCss1CompatMode_(this.document_);
};
goog.dom.DomHelper.prototype.getWindow = function() {
  return goog.dom.getWindow_(this.document_);
};
goog.dom.DomHelper.prototype.getDocumentScrollElement = function() {
  return goog.dom.getDocumentScrollElement_(this.document_);
};
goog.dom.DomHelper.prototype.getDocumentScroll = function() {
  return goog.dom.getDocumentScroll_(this.document_);
};
goog.dom.DomHelper.prototype.getActiveElement = function(opt_doc) {
  return goog.dom.getActiveElement(opt_doc || this.document_);
};
goog.dom.DomHelper.prototype.appendChild = goog.dom.appendChild;
goog.dom.DomHelper.prototype.append = goog.dom.append;
goog.dom.DomHelper.prototype.canHaveChildren = goog.dom.canHaveChildren;
goog.dom.DomHelper.prototype.removeChildren = goog.dom.removeChildren;
goog.dom.DomHelper.prototype.insertSiblingBefore = goog.dom.insertSiblingBefore;
goog.dom.DomHelper.prototype.insertSiblingAfter = goog.dom.insertSiblingAfter;
goog.dom.DomHelper.prototype.insertChildAt = goog.dom.insertChildAt;
goog.dom.DomHelper.prototype.removeNode = goog.dom.removeNode;
goog.dom.DomHelper.prototype.replaceNode = goog.dom.replaceNode;
goog.dom.DomHelper.prototype.flattenElement = goog.dom.flattenElement;
goog.dom.DomHelper.prototype.getChildren = goog.dom.getChildren;
goog.dom.DomHelper.prototype.getFirstElementChild = goog.dom.getFirstElementChild;
goog.dom.DomHelper.prototype.getLastElementChild = goog.dom.getLastElementChild;
goog.dom.DomHelper.prototype.getNextElementSibling = goog.dom.getNextElementSibling;
goog.dom.DomHelper.prototype.getPreviousElementSibling = goog.dom.getPreviousElementSibling;
goog.dom.DomHelper.prototype.getNextNode = goog.dom.getNextNode;
goog.dom.DomHelper.prototype.getPreviousNode = goog.dom.getPreviousNode;
goog.dom.DomHelper.prototype.isNodeLike = goog.dom.isNodeLike;
goog.dom.DomHelper.prototype.isElement = goog.dom.isElement;
goog.dom.DomHelper.prototype.isWindow = goog.dom.isWindow;
goog.dom.DomHelper.prototype.getParentElement = goog.dom.getParentElement;
goog.dom.DomHelper.prototype.contains = goog.dom.contains;
goog.dom.DomHelper.prototype.compareNodeOrder = goog.dom.compareNodeOrder;
goog.dom.DomHelper.prototype.findCommonAncestor = goog.dom.findCommonAncestor;
goog.dom.DomHelper.prototype.getOwnerDocument = goog.dom.getOwnerDocument;
goog.dom.DomHelper.prototype.getFrameContentDocument = goog.dom.getFrameContentDocument;
goog.dom.DomHelper.prototype.getFrameContentWindow = goog.dom.getFrameContentWindow;
goog.dom.DomHelper.prototype.setTextContent = goog.dom.setTextContent;
goog.dom.DomHelper.prototype.getOuterHtml = goog.dom.getOuterHtml;
goog.dom.DomHelper.prototype.findNode = goog.dom.findNode;
goog.dom.DomHelper.prototype.findNodes = goog.dom.findNodes;
goog.dom.DomHelper.prototype.isFocusableTabIndex = goog.dom.isFocusableTabIndex;
goog.dom.DomHelper.prototype.setFocusableTabIndex = goog.dom.setFocusableTabIndex;
goog.dom.DomHelper.prototype.getTextContent = goog.dom.getTextContent;
goog.dom.DomHelper.prototype.getNodeTextLength = goog.dom.getNodeTextLength;
goog.dom.DomHelper.prototype.getNodeTextOffset = goog.dom.getNodeTextOffset;
goog.dom.DomHelper.prototype.getNodeAtOffset = goog.dom.getNodeAtOffset;
goog.dom.DomHelper.prototype.isNodeList = goog.dom.isNodeList;
goog.dom.DomHelper.prototype.getAncestorByTagNameAndClass = goog.dom.getAncestorByTagNameAndClass;
goog.dom.DomHelper.prototype.getAncestorByClass = goog.dom.getAncestorByClass;
goog.dom.DomHelper.prototype.getAncestor = goog.dom.getAncestor;
goog.provide("goog.dom.xml");
goog.require("goog.dom");
goog.require("goog.dom.NodeType");
goog.dom.xml.MAX_XML_SIZE_KB = 2 * 1024;
goog.dom.xml.MAX_ELEMENT_DEPTH = 256;
goog.dom.xml.createDocument = function(opt_rootTagName, opt_namespaceUri) {
  if (opt_namespaceUri && !opt_rootTagName) {
    throw Error("Can't create document with namespace and no root tag");
  }
  if (document.implementation && document.implementation.createDocument) {
    return document.implementation.createDocument(opt_namespaceUri || "", opt_rootTagName || "", null);
  } else {
    if (typeof ActiveXObject != "undefined") {
      var doc = goog.dom.xml.createMsXmlDocument_();
      if (doc) {
        if (opt_rootTagName) {
          doc.appendChild(doc.createNode(goog.dom.NodeType.ELEMENT, opt_rootTagName, opt_namespaceUri || ""));
        }
        return doc;
      }
    }
  }
  throw Error("Your browser does not support creating new documents");
};
goog.dom.xml.loadXml = function(xml) {
  if (typeof DOMParser != "undefined") {
    return(new DOMParser).parseFromString(xml, "application/xml");
  } else {
    if (typeof ActiveXObject != "undefined") {
      var doc = goog.dom.xml.createMsXmlDocument_();
      doc.loadXML(xml);
      return doc;
    }
  }
  throw Error("Your browser does not support loading xml documents");
};
goog.dom.xml.serialize = function(xml) {
  if (typeof XMLSerializer != "undefined") {
    return(new XMLSerializer).serializeToString(xml);
  }
  var text = xml.xml;
  if (text) {
    return text;
  }
  throw Error("Your browser does not support serializing XML documents");
};
goog.dom.xml.selectSingleNode = function(node, path) {
  if (typeof node.selectSingleNode != "undefined") {
    var doc = goog.dom.getOwnerDocument(node);
    if (typeof doc.setProperty != "undefined") {
      doc.setProperty("SelectionLanguage", "XPath");
    }
    return node.selectSingleNode(path);
  } else {
    if (document.implementation.hasFeature("XPath", "3.0")) {
      var doc = goog.dom.getOwnerDocument(node);
      var resolver = doc.createNSResolver(doc.documentElement);
      var result = doc.evaluate(path, node, resolver, XPathResult.FIRST_ORDERED_NODE_TYPE, null);
      return result.singleNodeValue;
    }
  }
  return null;
};
goog.dom.xml.selectNodes = function(node, path) {
  if (typeof node.selectNodes != "undefined") {
    var doc = goog.dom.getOwnerDocument(node);
    if (typeof doc.setProperty != "undefined") {
      doc.setProperty("SelectionLanguage", "XPath");
    }
    return node.selectNodes(path);
  } else {
    if (document.implementation.hasFeature("XPath", "3.0")) {
      var doc = goog.dom.getOwnerDocument(node);
      var resolver = doc.createNSResolver(doc.documentElement);
      var nodes = doc.evaluate(path, node, resolver, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null);
      var results = [];
      var count = nodes.snapshotLength;
      for (var i = 0;i < count;i++) {
        results.push(nodes.snapshotItem(i));
      }
      return results;
    } else {
      return[];
    }
  }
};
goog.dom.xml.setAttributes = function(element, attributes) {
  for (var key in attributes) {
    if (attributes.hasOwnProperty(key)) {
      element.setAttribute(key, attributes[key]);
    }
  }
};
goog.dom.xml.createMsXmlDocument_ = function() {
  var doc = new ActiveXObject("MSXML2.DOMDocument");
  if (doc) {
    doc.resolveExternals = false;
    doc.validateOnParse = false;
    try {
      doc.setProperty("ProhibitDTD", true);
      doc.setProperty("MaxXMLSize", goog.dom.xml.MAX_XML_SIZE_KB);
      doc.setProperty("MaxElementDepth", goog.dom.xml.MAX_ELEMENT_DEPTH);
    } catch (e) {
    }
  }
  return doc;
};
goog.provide("goog.dom.vendor");
goog.require("goog.userAgent");
goog.dom.vendor.getVendorJsPrefix = function() {
  if (goog.userAgent.WEBKIT) {
    return "Webkit";
  } else {
    if (goog.userAgent.GECKO) {
      return "Moz";
    } else {
      if (goog.userAgent.IE) {
        return "ms";
      } else {
        if (goog.userAgent.OPERA) {
          return "O";
        }
      }
    }
  }
  return null;
};
goog.dom.vendor.getVendorPrefix = function() {
  if (goog.userAgent.WEBKIT) {
    return "-webkit";
  } else {
    if (goog.userAgent.GECKO) {
      return "-moz";
    } else {
      if (goog.userAgent.IE) {
        return "-ms";
      } else {
        if (goog.userAgent.OPERA) {
          return "-o";
        }
      }
    }
  }
  return null;
};
goog.provide("goog.math.Box");
goog.require("goog.math.Coordinate");
goog.math.Box = function(top, right, bottom, left) {
  this.top = top;
  this.right = right;
  this.bottom = bottom;
  this.left = left;
};
goog.math.Box.boundingBox = function(var_args) {
  var box = new goog.math.Box(arguments[0].y, arguments[0].x, arguments[0].y, arguments[0].x);
  for (var i = 1;i < arguments.length;i++) {
    var coord = arguments[i];
    box.top = Math.min(box.top, coord.y);
    box.right = Math.max(box.right, coord.x);
    box.bottom = Math.max(box.bottom, coord.y);
    box.left = Math.min(box.left, coord.x);
  }
  return box;
};
goog.math.Box.prototype.clone = function() {
  return new goog.math.Box(this.top, this.right, this.bottom, this.left);
};
if (goog.DEBUG) {
  goog.math.Box.prototype.toString = function() {
    return "(" + this.top + "t, " + this.right + "r, " + this.bottom + "b, " + this.left + "l)";
  };
}
goog.math.Box.prototype.contains = function(other) {
  return goog.math.Box.contains(this, other);
};
goog.math.Box.prototype.expand = function(top, opt_right, opt_bottom, opt_left) {
  if (goog.isObject(top)) {
    this.top -= top.top;
    this.right += top.right;
    this.bottom += top.bottom;
    this.left -= top.left;
  } else {
    this.top -= top;
    this.right += opt_right;
    this.bottom += opt_bottom;
    this.left -= opt_left;
  }
  return this;
};
goog.math.Box.prototype.expandToInclude = function(box) {
  this.left = Math.min(this.left, box.left);
  this.top = Math.min(this.top, box.top);
  this.right = Math.max(this.right, box.right);
  this.bottom = Math.max(this.bottom, box.bottom);
};
goog.math.Box.equals = function(a, b) {
  if (a == b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  return a.top == b.top && (a.right == b.right && (a.bottom == b.bottom && a.left == b.left));
};
goog.math.Box.contains = function(box, other) {
  if (!box || !other) {
    return false;
  }
  if (other instanceof goog.math.Box) {
    return other.left >= box.left && (other.right <= box.right && (other.top >= box.top && other.bottom <= box.bottom));
  }
  return other.x >= box.left && (other.x <= box.right && (other.y >= box.top && other.y <= box.bottom));
};
goog.math.Box.relativePositionX = function(box, coord) {
  if (coord.x < box.left) {
    return coord.x - box.left;
  } else {
    if (coord.x > box.right) {
      return coord.x - box.right;
    }
  }
  return 0;
};
goog.math.Box.relativePositionY = function(box, coord) {
  if (coord.y < box.top) {
    return coord.y - box.top;
  } else {
    if (coord.y > box.bottom) {
      return coord.y - box.bottom;
    }
  }
  return 0;
};
goog.math.Box.distance = function(box, coord) {
  var x = goog.math.Box.relativePositionX(box, coord);
  var y = goog.math.Box.relativePositionY(box, coord);
  return Math.sqrt(x * x + y * y);
};
goog.math.Box.intersects = function(a, b) {
  return a.left <= b.right && (b.left <= a.right && (a.top <= b.bottom && b.top <= a.bottom));
};
goog.math.Box.intersectsWithPadding = function(a, b, padding) {
  return a.left <= b.right + padding && (b.left <= a.right + padding && (a.top <= b.bottom + padding && b.top <= a.bottom + padding));
};
goog.math.Box.prototype.ceil = function() {
  this.top = Math.ceil(this.top);
  this.right = Math.ceil(this.right);
  this.bottom = Math.ceil(this.bottom);
  this.left = Math.ceil(this.left);
  return this;
};
goog.math.Box.prototype.floor = function() {
  this.top = Math.floor(this.top);
  this.right = Math.floor(this.right);
  this.bottom = Math.floor(this.bottom);
  this.left = Math.floor(this.left);
  return this;
};
goog.math.Box.prototype.round = function() {
  this.top = Math.round(this.top);
  this.right = Math.round(this.right);
  this.bottom = Math.round(this.bottom);
  this.left = Math.round(this.left);
  return this;
};
goog.math.Box.prototype.translate = function(tx, opt_ty) {
  if (tx instanceof goog.math.Coordinate) {
    this.left += tx.x;
    this.right += tx.x;
    this.top += tx.y;
    this.bottom += tx.y;
  } else {
    this.left += tx;
    this.right += tx;
    if (goog.isNumber(opt_ty)) {
      this.top += opt_ty;
      this.bottom += opt_ty;
    }
  }
  return this;
};
goog.math.Box.prototype.scale = function(sx, opt_sy) {
  var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
  this.left *= sx;
  this.right *= sx;
  this.top *= sy;
  this.bottom *= sy;
  return this;
};
goog.provide("goog.math.Rect");
goog.require("goog.math.Box");
goog.require("goog.math.Coordinate");
goog.require("goog.math.Size");
goog.math.Rect = function(x, y, w, h) {
  this.left = x;
  this.top = y;
  this.width = w;
  this.height = h;
};
goog.math.Rect.prototype.clone = function() {
  return new goog.math.Rect(this.left, this.top, this.width, this.height);
};
goog.math.Rect.prototype.toBox = function() {
  var right = this.left + this.width;
  var bottom = this.top + this.height;
  return new goog.math.Box(this.top, right, bottom, this.left);
};
goog.math.Rect.createFromBox = function(box) {
  return new goog.math.Rect(box.left, box.top, box.right - box.left, box.bottom - box.top);
};
if (goog.DEBUG) {
  goog.math.Rect.prototype.toString = function() {
    return "(" + this.left + ", " + this.top + " - " + this.width + "w x " + this.height + "h)";
  };
}
goog.math.Rect.equals = function(a, b) {
  if (a == b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  return a.left == b.left && (a.width == b.width && (a.top == b.top && a.height == b.height));
};
goog.math.Rect.prototype.intersection = function(rect) {
  var x0 = Math.max(this.left, rect.left);
  var x1 = Math.min(this.left + this.width, rect.left + rect.width);
  if (x0 <= x1) {
    var y0 = Math.max(this.top, rect.top);
    var y1 = Math.min(this.top + this.height, rect.top + rect.height);
    if (y0 <= y1) {
      this.left = x0;
      this.top = y0;
      this.width = x1 - x0;
      this.height = y1 - y0;
      return true;
    }
  }
  return false;
};
goog.math.Rect.intersection = function(a, b) {
  var x0 = Math.max(a.left, b.left);
  var x1 = Math.min(a.left + a.width, b.left + b.width);
  if (x0 <= x1) {
    var y0 = Math.max(a.top, b.top);
    var y1 = Math.min(a.top + a.height, b.top + b.height);
    if (y0 <= y1) {
      return new goog.math.Rect(x0, y0, x1 - x0, y1 - y0);
    }
  }
  return null;
};
goog.math.Rect.intersects = function(a, b) {
  return a.left <= b.left + b.width && (b.left <= a.left + a.width && (a.top <= b.top + b.height && b.top <= a.top + a.height));
};
goog.math.Rect.prototype.intersects = function(rect) {
  return goog.math.Rect.intersects(this, rect);
};
goog.math.Rect.difference = function(a, b) {
  var intersection = goog.math.Rect.intersection(a, b);
  if (!intersection || (!intersection.height || !intersection.width)) {
    return[a.clone()];
  }
  var result = [];
  var top = a.top;
  var height = a.height;
  var ar = a.left + a.width;
  var ab = a.top + a.height;
  var br = b.left + b.width;
  var bb = b.top + b.height;
  if (b.top > a.top) {
    result.push(new goog.math.Rect(a.left, a.top, a.width, b.top - a.top));
    top = b.top;
    height -= b.top - a.top;
  }
  if (bb < ab) {
    result.push(new goog.math.Rect(a.left, bb, a.width, ab - bb));
    height = bb - top;
  }
  if (b.left > a.left) {
    result.push(new goog.math.Rect(a.left, top, b.left - a.left, height));
  }
  if (br < ar) {
    result.push(new goog.math.Rect(br, top, ar - br, height));
  }
  return result;
};
goog.math.Rect.prototype.difference = function(rect) {
  return goog.math.Rect.difference(this, rect);
};
goog.math.Rect.prototype.boundingRect = function(rect) {
  var right = Math.max(this.left + this.width, rect.left + rect.width);
  var bottom = Math.max(this.top + this.height, rect.top + rect.height);
  this.left = Math.min(this.left, rect.left);
  this.top = Math.min(this.top, rect.top);
  this.width = right - this.left;
  this.height = bottom - this.top;
};
goog.math.Rect.boundingRect = function(a, b) {
  if (!a || !b) {
    return null;
  }
  var clone = a.clone();
  clone.boundingRect(b);
  return clone;
};
goog.math.Rect.prototype.contains = function(another) {
  if (another instanceof goog.math.Rect) {
    return this.left <= another.left && (this.left + this.width >= another.left + another.width && (this.top <= another.top && this.top + this.height >= another.top + another.height));
  } else {
    return another.x >= this.left && (another.x <= this.left + this.width && (another.y >= this.top && another.y <= this.top + this.height));
  }
};
goog.math.Rect.prototype.getSize = function() {
  return new goog.math.Size(this.width, this.height);
};
goog.math.Rect.prototype.ceil = function() {
  this.left = Math.ceil(this.left);
  this.top = Math.ceil(this.top);
  this.width = Math.ceil(this.width);
  this.height = Math.ceil(this.height);
  return this;
};
goog.math.Rect.prototype.floor = function() {
  this.left = Math.floor(this.left);
  this.top = Math.floor(this.top);
  this.width = Math.floor(this.width);
  this.height = Math.floor(this.height);
  return this;
};
goog.math.Rect.prototype.round = function() {
  this.left = Math.round(this.left);
  this.top = Math.round(this.top);
  this.width = Math.round(this.width);
  this.height = Math.round(this.height);
  return this;
};
goog.math.Rect.prototype.translate = function(tx, opt_ty) {
  if (tx instanceof goog.math.Coordinate) {
    this.left += tx.x;
    this.top += tx.y;
  } else {
    this.left += tx;
    if (goog.isNumber(opt_ty)) {
      this.top += opt_ty;
    }
  }
  return this;
};
goog.math.Rect.prototype.scale = function(sx, opt_sy) {
  var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
  this.left *= sx;
  this.width *= sx;
  this.top *= sy;
  this.height *= sy;
  return this;
};
goog.provide("goog.style");
goog.require("goog.array");
goog.require("goog.dom");
goog.require("goog.dom.vendor");
goog.require("goog.math.Box");
goog.require("goog.math.Coordinate");
goog.require("goog.math.Rect");
goog.require("goog.math.Size");
goog.require("goog.object");
goog.require("goog.string");
goog.require("goog.userAgent");
goog.style.setStyle = function(element, style, opt_value) {
  if (goog.isString(style)) {
    goog.style.setStyle_(element, opt_value, style);
  } else {
    goog.object.forEach(style, goog.partial(goog.style.setStyle_, element));
  }
};
goog.style.setStyle_ = function(element, value, style) {
  var propertyName = goog.style.getVendorJsStyleName_(element, style);
  if (propertyName) {
    element.style[propertyName] = value;
  }
};
goog.style.getVendorJsStyleName_ = function(element, style) {
  var camelStyle = goog.string.toCamelCase(style);
  if (element.style[camelStyle] === undefined) {
    var prefixedStyle = goog.dom.vendor.getVendorJsPrefix() + goog.string.toTitleCase(style);
    if (element.style[prefixedStyle] !== undefined) {
      return prefixedStyle;
    }
  }
  return camelStyle;
};
goog.style.getVendorStyleName_ = function(element, style) {
  var camelStyle = goog.string.toCamelCase(style);
  if (element.style[camelStyle] === undefined) {
    var prefixedStyle = goog.dom.vendor.getVendorJsPrefix() + goog.string.toTitleCase(style);
    if (element.style[prefixedStyle] !== undefined) {
      return goog.dom.vendor.getVendorPrefix() + "-" + style;
    }
  }
  return style;
};
goog.style.getStyle = function(element, property) {
  var styleValue = element.style[goog.string.toCamelCase(property)];
  if (typeof styleValue !== "undefined") {
    return styleValue;
  }
  return element.style[goog.style.getVendorJsStyleName_(element, property)] || "";
};
goog.style.getComputedStyle = function(element, property) {
  var doc = goog.dom.getOwnerDocument(element);
  if (doc.defaultView && doc.defaultView.getComputedStyle) {
    var styles = doc.defaultView.getComputedStyle(element, null);
    if (styles) {
      return styles[property] || (styles.getPropertyValue(property) || "");
    }
  }
  return "";
};
goog.style.getCascadedStyle = function(element, style) {
  return element.currentStyle ? element.currentStyle[style] : null;
};
goog.style.getStyle_ = function(element, style) {
  return goog.style.getComputedStyle(element, style) || (goog.style.getCascadedStyle(element, style) || element.style && element.style[style]);
};
goog.style.getComputedPosition = function(element) {
  return goog.style.getStyle_(element, "position");
};
goog.style.getBackgroundColor = function(element) {
  return goog.style.getStyle_(element, "backgroundColor");
};
goog.style.getComputedOverflowX = function(element) {
  return goog.style.getStyle_(element, "overflowX");
};
goog.style.getComputedOverflowY = function(element) {
  return goog.style.getStyle_(element, "overflowY");
};
goog.style.getComputedZIndex = function(element) {
  return goog.style.getStyle_(element, "zIndex");
};
goog.style.getComputedTextAlign = function(element) {
  return goog.style.getStyle_(element, "textAlign");
};
goog.style.getComputedCursor = function(element) {
  return goog.style.getStyle_(element, "cursor");
};
goog.style.setPosition = function(el, arg1, opt_arg2) {
  var x, y;
  var buggyGeckoSubPixelPos = goog.userAgent.GECKO && ((goog.userAgent.MAC || goog.userAgent.X11) && goog.userAgent.isVersion("1.9"));
  if (arg1 instanceof goog.math.Coordinate) {
    x = arg1.x;
    y = arg1.y;
  } else {
    x = arg1;
    y = opt_arg2;
  }
  el.style.left = goog.style.getPixelStyleValue_((x), buggyGeckoSubPixelPos);
  el.style.top = goog.style.getPixelStyleValue_((y), buggyGeckoSubPixelPos);
};
goog.style.getPosition = function(element) {
  return new goog.math.Coordinate(element.offsetLeft, element.offsetTop);
};
goog.style.getClientViewportElement = function(opt_node) {
  var doc;
  if (opt_node) {
    doc = goog.dom.getOwnerDocument(opt_node);
  } else {
    doc = goog.dom.getDocument();
  }
  if (goog.userAgent.IE && (!goog.userAgent.isDocumentMode(9) && !goog.dom.getDomHelper(doc).isCss1CompatMode())) {
    return doc.body;
  }
  return doc.documentElement;
};
goog.style.getViewportPageOffset = function(doc) {
  var body = doc.body;
  var documentElement = doc.documentElement;
  var scrollLeft = body.scrollLeft || documentElement.scrollLeft;
  var scrollTop = body.scrollTop || documentElement.scrollTop;
  return new goog.math.Coordinate(scrollLeft, scrollTop);
};
goog.style.getBoundingClientRect_ = function(el) {
  var rect = el.getBoundingClientRect();
  if (goog.userAgent.IE) {
    var doc = el.ownerDocument;
    rect.left -= doc.documentElement.clientLeft + doc.body.clientLeft;
    rect.top -= doc.documentElement.clientTop + doc.body.clientTop;
  }
  return(rect);
};
goog.style.getOffsetParent = function(element) {
  if (goog.userAgent.IE && !goog.userAgent.isDocumentMode(8)) {
    return element.offsetParent;
  }
  var doc = goog.dom.getOwnerDocument(element);
  var positionStyle = goog.style.getStyle_(element, "position");
  var skipStatic = positionStyle == "fixed" || positionStyle == "absolute";
  for (var parent = element.parentNode;parent && parent != doc;parent = parent.parentNode) {
    positionStyle = goog.style.getStyle_((parent), "position");
    skipStatic = skipStatic && (positionStyle == "static" && (parent != doc.documentElement && parent != doc.body));
    if (!skipStatic && (parent.scrollWidth > parent.clientWidth || (parent.scrollHeight > parent.clientHeight || (positionStyle == "fixed" || (positionStyle == "absolute" || positionStyle == "relative"))))) {
      return(parent);
    }
  }
  return null;
};
goog.style.getVisibleRectForElement = function(element) {
  var visibleRect = new goog.math.Box(0, Infinity, Infinity, 0);
  var dom = goog.dom.getDomHelper(element);
  var body = dom.getDocument().body;
  var documentElement = dom.getDocument().documentElement;
  var scrollEl = dom.getDocumentScrollElement();
  for (var el = element;el = goog.style.getOffsetParent(el);) {
    if ((!goog.userAgent.IE || el.clientWidth != 0) && ((!goog.userAgent.WEBKIT || (el.clientHeight != 0 || el != body)) && (el != body && (el != documentElement && goog.style.getStyle_(el, "overflow") != "visible")))) {
      var pos = goog.style.getPageOffset(el);
      var client = goog.style.getClientLeftTop(el);
      pos.x += client.x;
      pos.y += client.y;
      visibleRect.top = Math.max(visibleRect.top, pos.y);
      visibleRect.right = Math.min(visibleRect.right, pos.x + el.clientWidth);
      visibleRect.bottom = Math.min(visibleRect.bottom, pos.y + el.clientHeight);
      visibleRect.left = Math.max(visibleRect.left, pos.x);
    }
  }
  var scrollX = scrollEl.scrollLeft, scrollY = scrollEl.scrollTop;
  visibleRect.left = Math.max(visibleRect.left, scrollX);
  visibleRect.top = Math.max(visibleRect.top, scrollY);
  var winSize = dom.getViewportSize();
  visibleRect.right = Math.min(visibleRect.right, scrollX + winSize.width);
  visibleRect.bottom = Math.min(visibleRect.bottom, scrollY + winSize.height);
  return visibleRect.top >= 0 && (visibleRect.left >= 0 && (visibleRect.bottom > visibleRect.top && visibleRect.right > visibleRect.left)) ? visibleRect : null;
};
goog.style.getContainerOffsetToScrollInto = function(element, container, opt_center) {
  var elementPos = goog.style.getPageOffset(element);
  var containerPos = goog.style.getPageOffset(container);
  var containerBorder = goog.style.getBorderBox(container);
  var relX = elementPos.x - containerPos.x - containerBorder.left;
  var relY = elementPos.y - containerPos.y - containerBorder.top;
  var spaceX = container.clientWidth - element.offsetWidth;
  var spaceY = container.clientHeight - element.offsetHeight;
  var scrollLeft = container.scrollLeft;
  var scrollTop = container.scrollTop;
  if (opt_center) {
    scrollLeft += relX - spaceX / 2;
    scrollTop += relY - spaceY / 2;
  } else {
    scrollLeft += Math.min(relX, Math.max(relX - spaceX, 0));
    scrollTop += Math.min(relY, Math.max(relY - spaceY, 0));
  }
  return new goog.math.Coordinate(scrollLeft, scrollTop);
};
goog.style.scrollIntoContainerView = function(element, container, opt_center) {
  var offset = goog.style.getContainerOffsetToScrollInto(element, container, opt_center);
  container.scrollLeft = offset.x;
  container.scrollTop = offset.y;
};
goog.style.getClientLeftTop = function(el) {
  if (goog.userAgent.GECKO && !goog.userAgent.isVersion("1.9")) {
    var left = parseFloat(goog.style.getComputedStyle(el, "borderLeftWidth"));
    if (goog.style.isRightToLeft(el)) {
      var scrollbarWidth = el.offsetWidth - el.clientWidth - left - parseFloat(goog.style.getComputedStyle(el, "borderRightWidth"));
      left += scrollbarWidth;
    }
    return new goog.math.Coordinate(left, parseFloat(goog.style.getComputedStyle(el, "borderTopWidth")));
  }
  return new goog.math.Coordinate(el.clientLeft, el.clientTop);
};
goog.style.getPageOffset = function(el) {
  var box, doc = goog.dom.getOwnerDocument(el);
  var positionStyle = goog.style.getStyle_(el, "position");
  goog.asserts.assertObject(el, "Parameter is required");
  var BUGGY_GECKO_BOX_OBJECT = goog.userAgent.GECKO && (doc.getBoxObjectFor && (!el.getBoundingClientRect && (positionStyle == "absolute" && ((box = doc.getBoxObjectFor(el)) && (box.screenX < 0 || box.screenY < 0)))));
  var pos = new goog.math.Coordinate(0, 0);
  var viewportElement = goog.style.getClientViewportElement(doc);
  if (el == viewportElement) {
    return pos;
  }
  if (el.getBoundingClientRect) {
    box = goog.style.getBoundingClientRect_(el);
    var scrollCoord = goog.dom.getDomHelper(doc).getDocumentScroll();
    pos.x = box.left + scrollCoord.x;
    pos.y = box.top + scrollCoord.y;
  } else {
    if (doc.getBoxObjectFor && !BUGGY_GECKO_BOX_OBJECT) {
      box = doc.getBoxObjectFor(el);
      var vpBox = doc.getBoxObjectFor(viewportElement);
      pos.x = box.screenX - vpBox.screenX;
      pos.y = box.screenY - vpBox.screenY;
    } else {
      var parent = el;
      do {
        pos.x += parent.offsetLeft;
        pos.y += parent.offsetTop;
        if (parent != el) {
          pos.x += parent.clientLeft || 0;
          pos.y += parent.clientTop || 0;
        }
        if (goog.userAgent.WEBKIT && goog.style.getComputedPosition(parent) == "fixed") {
          pos.x += doc.body.scrollLeft;
          pos.y += doc.body.scrollTop;
          break;
        }
        parent = parent.offsetParent;
      } while (parent && parent != el);
      if (goog.userAgent.OPERA || goog.userAgent.WEBKIT && positionStyle == "absolute") {
        pos.y -= doc.body.offsetTop;
      }
      for (parent = el;(parent = goog.style.getOffsetParent(parent)) && (parent != doc.body && parent != viewportElement);) {
        pos.x -= parent.scrollLeft;
        if (!goog.userAgent.OPERA || parent.tagName != "TR") {
          pos.y -= parent.scrollTop;
        }
      }
    }
  }
  return pos;
};
goog.style.getPageOffsetLeft = function(el) {
  return goog.style.getPageOffset(el).x;
};
goog.style.getPageOffsetTop = function(el) {
  return goog.style.getPageOffset(el).y;
};
goog.style.getFramedPageOffset = function(el, relativeWin) {
  var position = new goog.math.Coordinate(0, 0);
  var currentWin = goog.dom.getWindow(goog.dom.getOwnerDocument(el));
  var currentEl = el;
  do {
    var offset = currentWin == relativeWin ? goog.style.getPageOffset(currentEl) : goog.style.getClientPosition(currentEl);
    position.x += offset.x;
    position.y += offset.y;
  } while (currentWin && (currentWin != relativeWin && ((currentEl = currentWin.frameElement) && (currentWin = currentWin.parent))));
  return position;
};
goog.style.translateRectForAnotherFrame = function(rect, origBase, newBase) {
  if (origBase.getDocument() != newBase.getDocument()) {
    var body = origBase.getDocument().body;
    var pos = goog.style.getFramedPageOffset(body, newBase.getWindow());
    pos = goog.math.Coordinate.difference(pos, goog.style.getPageOffset(body));
    if (goog.userAgent.IE && !origBase.isCss1CompatMode()) {
      pos = goog.math.Coordinate.difference(pos, origBase.getDocumentScroll());
    }
    rect.left += pos.x;
    rect.top += pos.y;
  }
};
goog.style.getRelativePosition = function(a, b) {
  var ap = goog.style.getClientPosition(a);
  var bp = goog.style.getClientPosition(b);
  return new goog.math.Coordinate(ap.x - bp.x, ap.y - bp.y);
};
goog.style.getClientPosition = function(el) {
  var pos = new goog.math.Coordinate;
  if (el.nodeType == goog.dom.NodeType.ELEMENT) {
    el = (el);
    if (el.getBoundingClientRect) {
      var box = goog.style.getBoundingClientRect_(el);
      pos.x = box.left;
      pos.y = box.top;
    } else {
      var scrollCoord = goog.dom.getDomHelper(el).getDocumentScroll();
      var pageCoord = goog.style.getPageOffset(el);
      pos.x = pageCoord.x - scrollCoord.x;
      pos.y = pageCoord.y - scrollCoord.y;
    }
    if (goog.userAgent.GECKO && !goog.userAgent.isVersion(12)) {
      pos = goog.math.Coordinate.sum(pos, goog.style.getCssTranslation(el));
    }
  } else {
    var isAbstractedEvent = goog.isFunction(el.getBrowserEvent);
    var targetEvent = el;
    if (el.targetTouches) {
      targetEvent = el.targetTouches[0];
    } else {
      if (isAbstractedEvent && el.getBrowserEvent().targetTouches) {
        targetEvent = el.getBrowserEvent().targetTouches[0];
      }
    }
    pos.x = targetEvent.clientX;
    pos.y = targetEvent.clientY;
  }
  return pos;
};
goog.style.setPageOffset = function(el, x, opt_y) {
  var cur = goog.style.getPageOffset(el);
  if (x instanceof goog.math.Coordinate) {
    opt_y = x.y;
    x = x.x;
  }
  var dx = x - cur.x;
  var dy = opt_y - cur.y;
  goog.style.setPosition(el, el.offsetLeft + dx, el.offsetTop + dy);
};
goog.style.setSize = function(element, w, opt_h) {
  var h;
  if (w instanceof goog.math.Size) {
    h = w.height;
    w = w.width;
  } else {
    if (opt_h == undefined) {
      throw Error("missing height argument");
    }
    h = opt_h;
  }
  goog.style.setWidth(element, (w));
  goog.style.setHeight(element, (h));
};
goog.style.getPixelStyleValue_ = function(value, round) {
  if (typeof value == "number") {
    value = (round ? Math.round(value) : value) + "px";
  }
  return value;
};
goog.style.setHeight = function(element, height) {
  element.style.height = goog.style.getPixelStyleValue_(height, true);
};
goog.style.setWidth = function(element, width) {
  element.style.width = goog.style.getPixelStyleValue_(width, true);
};
goog.style.getSize = function(element) {
  if (goog.style.getStyle_(element, "display") != "none") {
    return goog.style.getSizeWithDisplay_(element);
  }
  var style = element.style;
  var originalDisplay = style.display;
  var originalVisibility = style.visibility;
  var originalPosition = style.position;
  style.visibility = "hidden";
  style.position = "absolute";
  style.display = "inline";
  var size = goog.style.getSizeWithDisplay_(element);
  style.display = originalDisplay;
  style.position = originalPosition;
  style.visibility = originalVisibility;
  return size;
};
goog.style.getSizeWithDisplay_ = function(element) {
  var offsetWidth = element.offsetWidth;
  var offsetHeight = element.offsetHeight;
  var webkitOffsetsZero = goog.userAgent.WEBKIT && (!offsetWidth && !offsetHeight);
  if ((!goog.isDef(offsetWidth) || webkitOffsetsZero) && element.getBoundingClientRect) {
    var clientRect = goog.style.getBoundingClientRect_(element);
    return new goog.math.Size(clientRect.right - clientRect.left, clientRect.bottom - clientRect.top);
  }
  return new goog.math.Size(offsetWidth, offsetHeight);
};
goog.style.getBounds = function(element) {
  var o = goog.style.getPageOffset(element);
  var s = goog.style.getSize(element);
  return new goog.math.Rect(o.x, o.y, s.width, s.height);
};
goog.style.toCamelCase = function(selector) {
  return goog.string.toCamelCase(String(selector));
};
goog.style.toSelectorCase = function(selector) {
  return goog.string.toSelectorCase(selector);
};
goog.style.getOpacity = function(el) {
  var style = el.style;
  var result = "";
  if ("opacity" in style) {
    result = style.opacity;
  } else {
    if ("MozOpacity" in style) {
      result = style.MozOpacity;
    } else {
      if ("filter" in style) {
        var match = style.filter.match(/alpha\(opacity=([\d.]+)\)/);
        if (match) {
          result = String(match[1] / 100);
        }
      }
    }
  }
  return result == "" ? result : Number(result);
};
goog.style.setOpacity = function(el, alpha) {
  var style = el.style;
  if ("opacity" in style) {
    style.opacity = alpha;
  } else {
    if ("MozOpacity" in style) {
      style.MozOpacity = alpha;
    } else {
      if ("filter" in style) {
        if (alpha === "") {
          style.filter = "";
        } else {
          style.filter = "alpha(opacity\x3d" + alpha * 100 + ")";
        }
      }
    }
  }
};
goog.style.setTransparentBackgroundImage = function(el, src) {
  var style = el.style;
  if (goog.userAgent.IE && !goog.userAgent.isVersion("8")) {
    style.filter = "progid:DXImageTransform.Microsoft.AlphaImageLoader(" + 'src\x3d"' + src + '", sizingMethod\x3d"crop")';
  } else {
    style.backgroundImage = "url(" + src + ")";
    style.backgroundPosition = "top left";
    style.backgroundRepeat = "no-repeat";
  }
};
goog.style.clearTransparentBackgroundImage = function(el) {
  var style = el.style;
  if ("filter" in style) {
    style.filter = "";
  } else {
    style.backgroundImage = "none";
  }
};
goog.style.showElement = function(el, display) {
  el.style.display = display ? "" : "none";
};
goog.style.isElementShown = function(el) {
  return el.style.display != "none";
};
goog.style.installStyles = function(stylesString, opt_node) {
  var dh = goog.dom.getDomHelper(opt_node);
  var styleSheet = null;
  if (goog.userAgent.IE) {
    styleSheet = dh.getDocument().createStyleSheet();
    goog.style.setStyles(styleSheet, stylesString);
  } else {
    var head = dh.getElementsByTagNameAndClass("head")[0];
    if (!head) {
      var body = dh.getElementsByTagNameAndClass("body")[0];
      head = dh.createDom("head");
      body.parentNode.insertBefore(head, body);
    }
    styleSheet = dh.createDom("style");
    goog.style.setStyles(styleSheet, stylesString);
    dh.appendChild(head, styleSheet);
  }
  return styleSheet;
};
goog.style.uninstallStyles = function(styleSheet) {
  var node = styleSheet.ownerNode || (styleSheet.owningElement || (styleSheet));
  goog.dom.removeNode(node);
};
goog.style.setStyles = function(element, stylesString) {
  if (goog.userAgent.IE) {
    element.cssText = stylesString;
  } else {
    element.innerHTML = stylesString;
  }
};
goog.style.setPreWrap = function(el) {
  var style = el.style;
  if (goog.userAgent.IE && !goog.userAgent.isVersion("8")) {
    style.whiteSpace = "pre";
    style.wordWrap = "break-word";
  } else {
    if (goog.userAgent.GECKO) {
      style.whiteSpace = "-moz-pre-wrap";
    } else {
      style.whiteSpace = "pre-wrap";
    }
  }
};
goog.style.setInlineBlock = function(el) {
  var style = el.style;
  style.position = "relative";
  if (goog.userAgent.IE && !goog.userAgent.isVersion("8")) {
    style.zoom = "1";
    style.display = "inline";
  } else {
    if (goog.userAgent.GECKO) {
      style.display = goog.userAgent.isVersion("1.9a") ? "inline-block" : "-moz-inline-box";
    } else {
      style.display = "inline-block";
    }
  }
};
goog.style.isRightToLeft = function(el) {
  return "rtl" == goog.style.getStyle_(el, "direction");
};
goog.style.unselectableStyle_ = goog.userAgent.GECKO ? "MozUserSelect" : goog.userAgent.WEBKIT ? "WebkitUserSelect" : null;
goog.style.isUnselectable = function(el) {
  if (goog.style.unselectableStyle_) {
    return el.style[goog.style.unselectableStyle_].toLowerCase() == "none";
  } else {
    if (goog.userAgent.IE || goog.userAgent.OPERA) {
      return el.getAttribute("unselectable") == "on";
    }
  }
  return false;
};
goog.style.setUnselectable = function(el, unselectable, opt_noRecurse) {
  var descendants = !opt_noRecurse ? el.getElementsByTagName("*") : null;
  var name = goog.style.unselectableStyle_;
  if (name) {
    var value = unselectable ? "none" : "";
    el.style[name] = value;
    if (descendants) {
      for (var i = 0, descendant;descendant = descendants[i];i++) {
        descendant.style[name] = value;
      }
    }
  } else {
    if (goog.userAgent.IE || goog.userAgent.OPERA) {
      var value = unselectable ? "on" : "";
      el.setAttribute("unselectable", value);
      if (descendants) {
        for (var i = 0, descendant;descendant = descendants[i];i++) {
          descendant.setAttribute("unselectable", value);
        }
      }
    }
  }
};
goog.style.getBorderBoxSize = function(element) {
  return new goog.math.Size(element.offsetWidth, element.offsetHeight);
};
goog.style.setBorderBoxSize = function(element, size) {
  var doc = goog.dom.getOwnerDocument(element);
  var isCss1CompatMode = goog.dom.getDomHelper(doc).isCss1CompatMode();
  if (goog.userAgent.IE && (!isCss1CompatMode || !goog.userAgent.isVersion("8"))) {
    var style = element.style;
    if (isCss1CompatMode) {
      var paddingBox = goog.style.getPaddingBox(element);
      var borderBox = goog.style.getBorderBox(element);
      style.pixelWidth = size.width - borderBox.left - paddingBox.left - paddingBox.right - borderBox.right;
      style.pixelHeight = size.height - borderBox.top - paddingBox.top - paddingBox.bottom - borderBox.bottom;
    } else {
      style.pixelWidth = size.width;
      style.pixelHeight = size.height;
    }
  } else {
    goog.style.setBoxSizingSize_(element, size, "border-box");
  }
};
goog.style.getContentBoxSize = function(element) {
  var doc = goog.dom.getOwnerDocument(element);
  var ieCurrentStyle = goog.userAgent.IE && element.currentStyle;
  if (ieCurrentStyle && (goog.dom.getDomHelper(doc).isCss1CompatMode() && (ieCurrentStyle.width != "auto" && (ieCurrentStyle.height != "auto" && !ieCurrentStyle.boxSizing)))) {
    var width = goog.style.getIePixelValue_(element, ieCurrentStyle.width, "width", "pixelWidth");
    var height = goog.style.getIePixelValue_(element, ieCurrentStyle.height, "height", "pixelHeight");
    return new goog.math.Size(width, height);
  } else {
    var borderBoxSize = goog.style.getBorderBoxSize(element);
    var paddingBox = goog.style.getPaddingBox(element);
    var borderBox = goog.style.getBorderBox(element);
    return new goog.math.Size(borderBoxSize.width - borderBox.left - paddingBox.left - paddingBox.right - borderBox.right, borderBoxSize.height - borderBox.top - paddingBox.top - paddingBox.bottom - borderBox.bottom);
  }
};
goog.style.setContentBoxSize = function(element, size) {
  var doc = goog.dom.getOwnerDocument(element);
  var isCss1CompatMode = goog.dom.getDomHelper(doc).isCss1CompatMode();
  if (goog.userAgent.IE && (!isCss1CompatMode || !goog.userAgent.isVersion("8"))) {
    var style = element.style;
    if (isCss1CompatMode) {
      style.pixelWidth = size.width;
      style.pixelHeight = size.height;
    } else {
      var paddingBox = goog.style.getPaddingBox(element);
      var borderBox = goog.style.getBorderBox(element);
      style.pixelWidth = size.width + borderBox.left + paddingBox.left + paddingBox.right + borderBox.right;
      style.pixelHeight = size.height + borderBox.top + paddingBox.top + paddingBox.bottom + borderBox.bottom;
    }
  } else {
    goog.style.setBoxSizingSize_(element, size, "content-box");
  }
};
goog.style.setBoxSizingSize_ = function(element, size, boxSizing) {
  var style = element.style;
  if (goog.userAgent.GECKO) {
    style.MozBoxSizing = boxSizing;
  } else {
    if (goog.userAgent.WEBKIT) {
      style.WebkitBoxSizing = boxSizing;
    } else {
      style.boxSizing = boxSizing;
    }
  }
  style.width = Math.max(size.width, 0) + "px";
  style.height = Math.max(size.height, 0) + "px";
};
goog.style.getIePixelValue_ = function(element, value, name, pixelName) {
  if (/^\d+px?$/.test(value)) {
    return parseInt(value, 10);
  } else {
    var oldStyleValue = element.style[name];
    var oldRuntimeValue = element.runtimeStyle[name];
    element.runtimeStyle[name] = element.currentStyle[name];
    element.style[name] = value;
    var pixelValue = element.style[pixelName];
    element.style[name] = oldStyleValue;
    element.runtimeStyle[name] = oldRuntimeValue;
    return pixelValue;
  }
};
goog.style.getIePixelDistance_ = function(element, propName) {
  var value = goog.style.getCascadedStyle(element, propName);
  return value ? goog.style.getIePixelValue_(element, value, "left", "pixelLeft") : 0;
};
goog.style.getBox_ = function(element, stylePrefix) {
  if (goog.userAgent.IE) {
    var left = goog.style.getIePixelDistance_(element, stylePrefix + "Left");
    var right = goog.style.getIePixelDistance_(element, stylePrefix + "Right");
    var top = goog.style.getIePixelDistance_(element, stylePrefix + "Top");
    var bottom = goog.style.getIePixelDistance_(element, stylePrefix + "Bottom");
    return new goog.math.Box(top, right, bottom, left);
  } else {
    var left = (goog.style.getComputedStyle(element, stylePrefix + "Left"));
    var right = (goog.style.getComputedStyle(element, stylePrefix + "Right"));
    var top = (goog.style.getComputedStyle(element, stylePrefix + "Top"));
    var bottom = (goog.style.getComputedStyle(element, stylePrefix + "Bottom"));
    return new goog.math.Box(parseFloat(top), parseFloat(right), parseFloat(bottom), parseFloat(left));
  }
};
goog.style.getPaddingBox = function(element) {
  return goog.style.getBox_(element, "padding");
};
goog.style.getMarginBox = function(element) {
  return goog.style.getBox_(element, "margin");
};
goog.style.ieBorderWidthKeywords_ = {"thin":2, "medium":4, "thick":6};
goog.style.getIePixelBorder_ = function(element, prop) {
  if (goog.style.getCascadedStyle(element, prop + "Style") == "none") {
    return 0;
  }
  var width = goog.style.getCascadedStyle(element, prop + "Width");
  if (width in goog.style.ieBorderWidthKeywords_) {
    return goog.style.ieBorderWidthKeywords_[width];
  }
  return goog.style.getIePixelValue_(element, width, "left", "pixelLeft");
};
goog.style.getBorderBox = function(element) {
  if (goog.userAgent.IE) {
    var left = goog.style.getIePixelBorder_(element, "borderLeft");
    var right = goog.style.getIePixelBorder_(element, "borderRight");
    var top = goog.style.getIePixelBorder_(element, "borderTop");
    var bottom = goog.style.getIePixelBorder_(element, "borderBottom");
    return new goog.math.Box(top, right, bottom, left);
  } else {
    var left = (goog.style.getComputedStyle(element, "borderLeftWidth"));
    var right = (goog.style.getComputedStyle(element, "borderRightWidth"));
    var top = (goog.style.getComputedStyle(element, "borderTopWidth"));
    var bottom = (goog.style.getComputedStyle(element, "borderBottomWidth"));
    return new goog.math.Box(parseFloat(top), parseFloat(right), parseFloat(bottom), parseFloat(left));
  }
};
goog.style.getFontFamily = function(el) {
  var doc = goog.dom.getOwnerDocument(el);
  var font = "";
  if (doc.body.createTextRange) {
    var range = doc.body.createTextRange();
    range.moveToElementText(el);
    try {
      font = range.queryCommandValue("FontName");
    } catch (e) {
      font = "";
    }
  }
  if (!font) {
    font = goog.style.getStyle_(el, "fontFamily");
  }
  var fontsArray = font.split(",");
  if (fontsArray.length > 1) {
    font = fontsArray[0];
  }
  return goog.string.stripQuotes(font, "\"'");
};
goog.style.lengthUnitRegex_ = /[^\d]+$/;
goog.style.getLengthUnits = function(value) {
  var units = value.match(goog.style.lengthUnitRegex_);
  return units && units[0] || null;
};
goog.style.ABSOLUTE_CSS_LENGTH_UNITS_ = {"cm":1, "in":1, "mm":1, "pc":1, "pt":1};
goog.style.CONVERTIBLE_RELATIVE_CSS_UNITS_ = {"em":1, "ex":1};
goog.style.getFontSize = function(el) {
  var fontSize = goog.style.getStyle_(el, "fontSize");
  var sizeUnits = goog.style.getLengthUnits(fontSize);
  if (fontSize && "px" == sizeUnits) {
    return parseInt(fontSize, 10);
  }
  if (goog.userAgent.IE) {
    if (sizeUnits in goog.style.ABSOLUTE_CSS_LENGTH_UNITS_) {
      return goog.style.getIePixelValue_(el, fontSize, "left", "pixelLeft");
    } else {
      if (el.parentNode && (el.parentNode.nodeType == goog.dom.NodeType.ELEMENT && sizeUnits in goog.style.CONVERTIBLE_RELATIVE_CSS_UNITS_)) {
        var parentElement = (el.parentNode);
        var parentSize = goog.style.getStyle_(parentElement, "fontSize");
        return goog.style.getIePixelValue_(parentElement, fontSize == parentSize ? "1em" : fontSize, "left", "pixelLeft");
      }
    }
  }
  var sizeElement = goog.dom.createDom("span", {"style":"visibility:hidden;position:absolute;" + "line-height:0;padding:0;margin:0;border:0;height:1em;"});
  goog.dom.appendChild(el, sizeElement);
  fontSize = sizeElement.offsetHeight;
  goog.dom.removeNode(sizeElement);
  return fontSize;
};
goog.style.parseStyleAttribute = function(value) {
  var result = {};
  goog.array.forEach(value.split(/\s*;\s*/), function(pair) {
    var keyValue = pair.split(/\s*:\s*/);
    if (keyValue.length == 2) {
      result[goog.string.toCamelCase(keyValue[0].toLowerCase())] = keyValue[1];
    }
  });
  return result;
};
goog.style.toStyleAttribute = function(obj) {
  var buffer = [];
  goog.object.forEach(obj, function(value, key) {
    buffer.push(goog.string.toSelectorCase(key), ":", value, ";");
  });
  return buffer.join("");
};
goog.style.setFloat = function(el, value) {
  el.style[goog.userAgent.IE ? "styleFloat" : "cssFloat"] = value;
};
goog.style.getFloat = function(el) {
  return el.style[goog.userAgent.IE ? "styleFloat" : "cssFloat"] || "";
};
goog.style.getScrollbarWidth = function(opt_className) {
  var outerDiv = goog.dom.createElement("div");
  if (opt_className) {
    outerDiv.className = opt_className;
  }
  outerDiv.style.cssText = "overflow:auto;" + "position:absolute;top:0;width:100px;height:100px";
  var innerDiv = goog.dom.createElement("div");
  goog.style.setSize(innerDiv, "200px", "200px");
  outerDiv.appendChild(innerDiv);
  goog.dom.appendChild(goog.dom.getDocument().body, outerDiv);
  var width = outerDiv.offsetWidth - outerDiv.clientWidth;
  goog.dom.removeNode(outerDiv);
  return width;
};
goog.style.MATRIX_TRANSLATION_REGEX_ = new RegExp("matrix\\([0-9\\.\\-]+, [0-9\\.\\-]+, " + "[0-9\\.\\-]+, [0-9\\.\\-]+, " + "([0-9\\.\\-]+)p?x?, ([0-9\\.\\-]+)p?x?\\)");
goog.style.getCssTranslation = function(element) {
  var property;
  if (goog.userAgent.IE) {
    property = "-ms-transform";
  } else {
    if (goog.userAgent.WEBKIT) {
      property = "-webkit-transform";
    } else {
      if (goog.userAgent.OPERA) {
        property = "-o-transform";
      } else {
        if (goog.userAgent.GECKO) {
          property = "-moz-transform";
        }
      }
    }
  }
  var transform;
  if (property) {
    transform = goog.style.getStyle_(element, property);
  }
  if (!transform) {
    transform = goog.style.getStyle_(element, "transform");
  }
  if (!transform) {
    return new goog.math.Coordinate(0, 0);
  }
  var matches = transform.match(goog.style.MATRIX_TRANSLATION_REGEX_);
  if (!matches) {
    return new goog.math.Coordinate(0, 0);
  }
  return new goog.math.Coordinate(parseFloat(matches[1]), parseFloat(matches[2]));
};
goog.provide("goog.dom.forms");
goog.require("goog.structs.Map");
goog.dom.forms.getFormDataMap = function(form) {
  var map = new goog.structs.Map;
  goog.dom.forms.getFormDataHelper_(form, map, goog.dom.forms.addFormDataToMap_);
  return map;
};
goog.dom.forms.getFormDataString = function(form) {
  var sb = [];
  goog.dom.forms.getFormDataHelper_(form, sb, goog.dom.forms.addFormDataToStringBuffer_);
  return sb.join("\x26");
};
goog.dom.forms.getFormDataHelper_ = function(form, result, fnAppend) {
  var els = form.elements;
  for (var el, i = 0;el = els[i];i++) {
    if (el.form != form || (el.disabled || el.tagName.toLowerCase() == "fieldset")) {
      continue;
    }
    var name = el.name;
    switch(el.type.toLowerCase()) {
      case "file":
      ;
      case "submit":
      ;
      case "reset":
      ;
      case "button":
        break;
      case "select-multiple":
        var values = goog.dom.forms.getValue(el);
        if (values != null) {
          for (var value, j = 0;value = values[j];j++) {
            fnAppend(result, name, value);
          }
        }
        break;
      default:
        var value = goog.dom.forms.getValue(el);
        if (value != null) {
          fnAppend(result, name, value);
        }
      ;
    }
  }
  var inputs = form.getElementsByTagName("input");
  for (var input, i = 0;input = inputs[i];i++) {
    if (input.form == form && input.type.toLowerCase() == "image") {
      name = input.name;
      fnAppend(result, name, input.value);
      fnAppend(result, name + ".x", "0");
      fnAppend(result, name + ".y", "0");
    }
  }
};
goog.dom.forms.addFormDataToMap_ = function(map, name, value) {
  var array = map.get(name);
  if (!array) {
    array = [];
    map.set(name, array);
  }
  array.push(value);
};
goog.dom.forms.addFormDataToStringBuffer_ = function(sb, name, value) {
  sb.push(encodeURIComponent(name) + "\x3d" + encodeURIComponent(value));
};
goog.dom.forms.hasFileInput = function(form) {
  var els = form.elements;
  for (var el, i = 0;el = els[i];i++) {
    if (!el.disabled && (el.type && el.type.toLowerCase() == "file")) {
      return true;
    }
  }
  return false;
};
goog.dom.forms.setDisabled = function(el, disabled) {
  if (el.tagName == "FORM") {
    var els = el.elements;
    for (var i = 0;el = els[i];i++) {
      goog.dom.forms.setDisabled(el, disabled);
    }
  } else {
    if (disabled == true) {
      el.blur();
    }
    el.disabled = disabled;
  }
};
goog.dom.forms.focusAndSelect = function(el) {
  el.focus();
  if (el.select) {
    el.select();
  }
};
goog.dom.forms.hasValue = function(el) {
  var value = goog.dom.forms.getValue(el);
  return!!value;
};
goog.dom.forms.hasValueByName = function(form, name) {
  var value = goog.dom.forms.getValueByName(form, name);
  return!!value;
};
goog.dom.forms.getValue = function(el) {
  var type = el.type;
  if (!goog.isDef(type)) {
    return null;
  }
  switch(type.toLowerCase()) {
    case "checkbox":
    ;
    case "radio":
      return goog.dom.forms.getInputChecked_(el);
    case "select-one":
      return goog.dom.forms.getSelectSingle_(el);
    case "select-multiple":
      return goog.dom.forms.getSelectMultiple_(el);
    default:
      return goog.isDef(el.value) ? el.value : null;
  }
};
goog.dom.$F = goog.dom.forms.getValue;
goog.dom.forms.getValueByName = function(form, name) {
  var els = form.elements[name];
  if (els.type) {
    return goog.dom.forms.getValue(els);
  } else {
    for (var i = 0;i < els.length;i++) {
      var val = goog.dom.forms.getValue(els[i]);
      if (val) {
        return val;
      }
    }
    return null;
  }
};
goog.dom.forms.getInputChecked_ = function(el) {
  return el.checked ? el.value : null;
};
goog.dom.forms.getSelectSingle_ = function(el) {
  var selectedIndex = el.selectedIndex;
  return selectedIndex >= 0 ? el.options[selectedIndex].value : null;
};
goog.dom.forms.getSelectMultiple_ = function(el) {
  var values = [];
  for (var option, i = 0;option = el.options[i];i++) {
    if (option.selected) {
      values.push(option.value);
    }
  }
  return values.length ? values : null;
};
goog.dom.forms.setValue = function(el, opt_value) {
  var type = el.type;
  if (goog.isDef(type)) {
    switch(type.toLowerCase()) {
      case "checkbox":
      ;
      case "radio":
        goog.dom.forms.setInputChecked_(el, (opt_value));
        break;
      case "select-one":
        goog.dom.forms.setSelectSingle_(el, (opt_value));
        break;
      case "select-multiple":
        goog.dom.forms.setSelectMultiple_(el, (opt_value));
        break;
      default:
        el.value = goog.isDefAndNotNull(opt_value) ? opt_value : "";
    }
  }
};
goog.dom.forms.setInputChecked_ = function(el, opt_value) {
  el.checked = opt_value ? "checked" : null;
};
goog.dom.forms.setSelectSingle_ = function(el, opt_value) {
  el.selectedIndex = -1;
  if (goog.isString(opt_value)) {
    for (var option, i = 0;option = el.options[i];i++) {
      if (option.value == opt_value) {
        option.selected = true;
        break;
      }
    }
  }
};
goog.dom.forms.setSelectMultiple_ = function(el, opt_value) {
  if (goog.isString(opt_value)) {
    opt_value = [opt_value];
  }
  for (var option, i = 0;option = el.options[i];i++) {
    option.selected = false;
    if (opt_value) {
      for (var value, j = 0;value = opt_value[j];j++) {
        if (option.value == value) {
          option.selected = true;
        }
      }
    }
  }
};
goog.provide("domina.support");
goog.require("cljs.core");
goog.require("goog.events");
goog.require("goog.events");
goog.require("goog.dom");
goog.require("goog.dom");
var div_108980 = document.createElement("div");
var test_html_108981 = "   \x3clink/\x3e\x3ctable\x3e\x3c/table\x3e\x3ca href\x3d'/a' style\x3d'top:1px;float:left;opacity:.55;'\x3ea\x3c/a\x3e\x3cinput type\x3d'checkbox'/\x3e";
div_108980.innerHTML = test_html_108981;
domina.support.leading_whitespace_QMARK_ = cljs.core._EQ_.call(null, div_108980.firstChild.nodeType, 3);
domina.support.extraneous_tbody_QMARK_ = cljs.core._EQ_.call(null, div_108980.getElementsByTagName("tbody").length, 0);
domina.support.unscoped_html_elements_QMARK_ = cljs.core._EQ_.call(null, div_108980.getElementsByTagName("link").length, 0);
goog.provide("domina");
goog.require("cljs.core");
goog.require("goog.dom.classes");
goog.require("domina.support");
goog.require("goog.dom.classes");
goog.require("cljs.core");
goog.require("goog.events");
goog.require("goog.string");
goog.require("goog.dom.xml");
goog.require("goog.dom");
goog.require("goog.dom.forms");
goog.require("goog.dom");
goog.require("goog.string");
goog.require("clojure.string");
goog.require("goog.style");
goog.require("clojure.string");
goog.require("goog.dom.xml");
goog.require("goog.style");
goog.require("goog.dom.forms");
goog.require("domina.support");
goog.require("goog.events");
goog.require("cljs.core");
domina.re_html = /<|&#?\w+;/;
domina.re_leading_whitespace = /^\s+/;
domina.re_xhtml_tag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/i;
domina.re_tag_name = /<([\w:]+)/;
domina.re_no_inner_html = /<(?:script|style)/i;
domina.re_tbody = /<tbody/i;
var opt_wrapper_108530 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, "\x3cselect multiple\x3d'multiple'\x3e", "\x3c/select\x3e"], null);
var table_section_wrapper_108531 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, "\x3ctable\x3e", "\x3c/table\x3e"], null);
var cell_wrapper_108532 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [3, "\x3ctable\x3e\x3ctbody\x3e\x3ctr\x3e", "\x3c/tr\x3e\x3c/tbody\x3e\x3c/table\x3e"], null);
domina.wrap_map = cljs.core.PersistentHashMap.fromArrays(["col", new cljs.core.Keyword(null, "default", "default", 2558708147), "tfoot", "caption", "optgroup", "legend", "area", "td", "thead", "th", "option", "tbody", "tr", "colgroup"], [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [2, "\x3ctable\x3e\x3ctbody\x3e\x3c/tbody\x3e\x3ccolgroup\x3e", "\x3c/colgroup\x3e\x3c/table\x3e"], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, 
[0, "", ""], null), table_section_wrapper_108531, table_section_wrapper_108531, opt_wrapper_108530, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, "\x3cfieldset\x3e", "\x3c/fieldset\x3e"], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, "\x3cmap\x3e", "\x3c/map\x3e"], null), cell_wrapper_108532, table_section_wrapper_108531, cell_wrapper_108532, opt_wrapper_108530, table_section_wrapper_108531, new cljs.core.PersistentVector(null, 
3, 5, cljs.core.PersistentVector.EMPTY_NODE, [2, "\x3ctable\x3e\x3ctbody\x3e", "\x3c/tbody\x3e\x3c/table\x3e"], null), table_section_wrapper_108531]);
domina.remove_extraneous_tbody_BANG_ = function remove_extraneous_tbody_BANG_(div, html, tag_name, start_wrap) {
  var no_tbody_QMARK_ = cljs.core.not.call(null, cljs.core.re_find.call(null, domina.re_tbody, html));
  var tbody = cljs.core._EQ_.call(null, tag_name, "table") && no_tbody_QMARK_ ? function() {
    var and__12818__auto__ = div.firstChild;
    if (cljs.core.truth_(and__12818__auto__)) {
      return div.firstChild.childNodes;
    } else {
      return and__12818__auto__;
    }
  }() : cljs.core._EQ_.call(null, start_wrap, "\x3ctable\x3e") && no_tbody_QMARK_ ? divchildNodes : cljs.core.PersistentVector.EMPTY;
  var seq__108537 = cljs.core.seq.call(null, tbody);
  var chunk__108538 = null;
  var count__108539 = 0;
  var i__108540 = 0;
  while (true) {
    if (i__108540 < count__108539) {
      var child = cljs.core._nth.call(null, chunk__108538, i__108540);
      if (cljs.core._EQ_.call(null, child.nodeName, "tbody") && cljs.core._EQ_.call(null, child.childNodes.length, 0)) {
        child.parentNode.removeChild(child);
      } else {
      }
      var G__108541 = seq__108537;
      var G__108542 = chunk__108538;
      var G__108543 = count__108539;
      var G__108544 = i__108540 + 1;
      seq__108537 = G__108541;
      chunk__108538 = G__108542;
      count__108539 = G__108543;
      i__108540 = G__108544;
      continue;
    } else {
      var temp__4092__auto__ = cljs.core.seq.call(null, seq__108537);
      if (temp__4092__auto__) {
        var seq__108537__$1 = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__108537__$1)) {
          var c__13578__auto__ = cljs.core.chunk_first.call(null, seq__108537__$1);
          var G__108545 = cljs.core.chunk_rest.call(null, seq__108537__$1);
          var G__108546 = c__13578__auto__;
          var G__108547 = cljs.core.count.call(null, c__13578__auto__);
          var G__108548 = 0;
          seq__108537 = G__108545;
          chunk__108538 = G__108546;
          count__108539 = G__108547;
          i__108540 = G__108548;
          continue;
        } else {
          var child = cljs.core.first.call(null, seq__108537__$1);
          if (cljs.core._EQ_.call(null, child.nodeName, "tbody") && cljs.core._EQ_.call(null, child.childNodes.length, 0)) {
            child.parentNode.removeChild(child);
          } else {
          }
          var G__108549 = cljs.core.next.call(null, seq__108537__$1);
          var G__108550 = null;
          var G__108551 = 0;
          var G__108552 = 0;
          seq__108537 = G__108549;
          chunk__108538 = G__108550;
          count__108539 = G__108551;
          i__108540 = G__108552;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
domina.restore_leading_whitespace_BANG_ = function restore_leading_whitespace_BANG_(div, html) {
  return div.insertBefore(document.createTextNode(cljs.core.first.call(null, cljs.core.re_find.call(null, domina.re_leading_whitespace, html))), div.firstChild);
};
domina.html_to_dom = function html_to_dom(html) {
  var html__$1 = clojure.string.replace.call(null, html, domina.re_xhtml_tag, "\x3c$1\x3e\x3c/$2\x3e");
  var tag_name = [cljs.core.str(cljs.core.second.call(null, cljs.core.re_find.call(null, domina.re_tag_name, html__$1)))].join("").toLowerCase();
  var vec__108554 = cljs.core.get.call(null, domina.wrap_map, tag_name, (new cljs.core.Keyword(null, "default", "default", 2558708147)).cljs$core$IFn$_invoke$arity$1(domina.wrap_map));
  var depth = cljs.core.nth.call(null, vec__108554, 0, null);
  var start_wrap = cljs.core.nth.call(null, vec__108554, 1, null);
  var end_wrap = cljs.core.nth.call(null, vec__108554, 2, null);
  var div = function() {
    var wrapper = function() {
      var div = document.createElement("div");
      div.innerHTML = [cljs.core.str(start_wrap), cljs.core.str(html__$1), cljs.core.str(end_wrap)].join("");
      return div;
    }();
    var level = depth;
    while (true) {
      if (level > 0) {
        var G__108555 = wrapper.lastChild;
        var G__108556 = level - 1;
        wrapper = G__108555;
        level = G__108556;
        continue;
      } else {
        return wrapper;
      }
      break;
    }
  }();
  if (cljs.core.truth_(domina.support.extraneous_tbody_QMARK_)) {
    domina.remove_extraneous_tbody_BANG_.call(null, div, html__$1, tag_name, start_wrap);
  } else {
  }
  if (cljs.core.truth_(function() {
    var and__12818__auto__ = cljs.core.not.call(null, domina.support.leading_whitespace_QMARK_);
    if (and__12818__auto__) {
      return cljs.core.re_find.call(null, domina.re_leading_whitespace, html__$1);
    } else {
      return and__12818__auto__;
    }
  }())) {
    domina.restore_leading_whitespace_BANG_.call(null, div, html__$1);
  } else {
  }
  return div.childNodes;
};
domina.string_to_dom = function string_to_dom(s) {
  if (cljs.core.truth_(cljs.core.re_find.call(null, domina.re_html, s))) {
    return domina.html_to_dom.call(null, s);
  } else {
    return document.createTextNode(s);
  }
};
domina.DomContent = function() {
  var obj108558 = {};
  return obj108558;
}();
domina.nodes = function nodes(content) {
  if (function() {
    var and__12818__auto__ = content;
    if (and__12818__auto__) {
      return content.domina$DomContent$nodes$arity$1;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return content.domina$DomContent$nodes$arity$1(content);
  } else {
    var x__13457__auto__ = content == null ? null : content;
    return function() {
      var or__12830__auto__ = domina.nodes[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = domina.nodes["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "DomContent.nodes", content);
        }
      }
    }().call(null, content);
  }
};
domina.single_node = function single_node(nodeseq) {
  if (function() {
    var and__12818__auto__ = nodeseq;
    if (and__12818__auto__) {
      return nodeseq.domina$DomContent$single_node$arity$1;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return nodeseq.domina$DomContent$single_node$arity$1(nodeseq);
  } else {
    var x__13457__auto__ = nodeseq == null ? null : nodeseq;
    return function() {
      var or__12830__auto__ = domina.single_node[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = domina.single_node["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "DomContent.single-node", nodeseq);
        }
      }
    }().call(null, nodeseq);
  }
};
domina._STAR_debug_STAR_ = true;
domina.log_debug = function() {
  var log_debug__delegate = function(mesg) {
    if (cljs.core.truth_(function() {
      var and__12818__auto__ = domina._STAR_debug_STAR_;
      if (cljs.core.truth_(and__12818__auto__)) {
        return!cljs.core._EQ_.call(null, window.console, undefined);
      } else {
        return and__12818__auto__;
      }
    }())) {
      return console.log(cljs.core.apply.call(null, cljs.core.str, mesg));
    } else {
      return null;
    }
  };
  var log_debug = function(var_args) {
    var mesg = null;
    if (arguments.length > 0) {
      mesg = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return log_debug__delegate.call(this, mesg);
  };
  log_debug.cljs$lang$maxFixedArity = 0;
  log_debug.cljs$lang$applyTo = function(arglist__108559) {
    var mesg = cljs.core.seq(arglist__108559);
    return log_debug__delegate(mesg);
  };
  log_debug.cljs$core$IFn$_invoke$arity$variadic = log_debug__delegate;
  return log_debug;
}();
domina.log = function() {
  var log__delegate = function(mesg) {
    if (cljs.core.truth_(window.console)) {
      return console.log(cljs.core.apply.call(null, cljs.core.str, mesg));
    } else {
      return null;
    }
  };
  var log = function(var_args) {
    var mesg = null;
    if (arguments.length > 0) {
      mesg = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return log__delegate.call(this, mesg);
  };
  log.cljs$lang$maxFixedArity = 0;
  log.cljs$lang$applyTo = function(arglist__108560) {
    var mesg = cljs.core.seq(arglist__108560);
    return log__delegate(mesg);
  };
  log.cljs$core$IFn$_invoke$arity$variadic = log__delegate;
  return log;
}();
domina.by_id = function by_id(id) {
  return goog.dom.getElement(cljs.core.name.call(null, id));
};
domina.by_class = function by_class(class_name) {
  return domina.normalize_seq.call(null, goog.dom.getElementsByClass(cljs.core.name.call(null, class_name)));
};
domina.children = function children(content) {
  return cljs.core.doall.call(null, cljs.core.mapcat.call(null, goog.dom.getChildren, domina.nodes.call(null, content)));
};
domina.common_ancestor = function() {
  var common_ancestor__delegate = function(contents) {
    return cljs.core.apply.call(null, goog.dom.findCommonAncestor, cljs.core.map.call(null, domina.single_node, contents));
  };
  var common_ancestor = function(var_args) {
    var contents = null;
    if (arguments.length > 0) {
      contents = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return common_ancestor__delegate.call(this, contents);
  };
  common_ancestor.cljs$lang$maxFixedArity = 0;
  common_ancestor.cljs$lang$applyTo = function(arglist__108561) {
    var contents = cljs.core.seq(arglist__108561);
    return common_ancestor__delegate(contents);
  };
  common_ancestor.cljs$core$IFn$_invoke$arity$variadic = common_ancestor__delegate;
  return common_ancestor;
}();
domina.ancestor_QMARK_ = function ancestor_QMARK_(ancestor_content, descendant_content) {
  return cljs.core._EQ_.call(null, domina.common_ancestor.call(null, ancestor_content, descendant_content), domina.single_node.call(null, ancestor_content));
};
domina.clone = function clone(content) {
  return cljs.core.map.call(null, function(p1__108562_SHARP_) {
    return p1__108562_SHARP_.cloneNode(true);
  }, domina.nodes.call(null, content));
};
domina.append_BANG_ = function append_BANG_(parent_content, child_content) {
  domina.apply_with_cloning.call(null, goog.dom.appendChild, parent_content, child_content);
  return parent_content;
};
domina.insert_BANG_ = function insert_BANG_(parent_content, child_content, idx) {
  domina.apply_with_cloning.call(null, function(p1__108563_SHARP_, p2__108564_SHARP_) {
    return goog.dom.insertChildAt(p1__108563_SHARP_, p2__108564_SHARP_, idx);
  }, parent_content, child_content);
  return parent_content;
};
domina.prepend_BANG_ = function prepend_BANG_(parent_content, child_content) {
  domina.insert_BANG_.call(null, parent_content, child_content, 0);
  return parent_content;
};
domina.insert_before_BANG_ = function insert_before_BANG_(content, new_content) {
  domina.apply_with_cloning.call(null, function(p1__108566_SHARP_, p2__108565_SHARP_) {
    return goog.dom.insertSiblingBefore(p2__108565_SHARP_, p1__108566_SHARP_);
  }, content, new_content);
  return content;
};
domina.insert_after_BANG_ = function insert_after_BANG_(content, new_content) {
  domina.apply_with_cloning.call(null, function(p1__108568_SHARP_, p2__108567_SHARP_) {
    return goog.dom.insertSiblingAfter(p2__108567_SHARP_, p1__108568_SHARP_);
  }, content, new_content);
  return content;
};
domina.swap_content_BANG_ = function swap_content_BANG_(old_content, new_content) {
  domina.apply_with_cloning.call(null, function(p1__108570_SHARP_, p2__108569_SHARP_) {
    return goog.dom.replaceNode(p2__108569_SHARP_, p1__108570_SHARP_);
  }, old_content, new_content);
  return old_content;
};
domina.detach_BANG_ = function detach_BANG_(content) {
  return cljs.core.doall.call(null, cljs.core.map.call(null, goog.dom.removeNode, domina.nodes.call(null, content)));
};
domina.destroy_BANG_ = function destroy_BANG_(content) {
  return cljs.core.dorun.call(null, cljs.core.map.call(null, goog.dom.removeNode, domina.nodes.call(null, content)));
};
domina.destroy_children_BANG_ = function destroy_children_BANG_(content) {
  cljs.core.dorun.call(null, cljs.core.map.call(null, goog.dom.removeChildren, domina.nodes.call(null, content)));
  return content;
};
domina.style = function style(content, name) {
  var s = goog.style.getStyle(domina.single_node.call(null, content), cljs.core.name.call(null, name));
  if (cljs.core.truth_(clojure.string.blank_QMARK_.call(null, s))) {
    return null;
  } else {
    return s;
  }
};
domina.attr = function attr(content, name) {
  return domina.single_node.call(null, content).getAttribute(cljs.core.name.call(null, name));
};
domina.set_style_BANG_ = function() {
  var set_style_BANG___delegate = function(content, name, value) {
    var seq__108575_108579 = cljs.core.seq.call(null, domina.nodes.call(null, content));
    var chunk__108576_108580 = null;
    var count__108577_108581 = 0;
    var i__108578_108582 = 0;
    while (true) {
      if (i__108578_108582 < count__108577_108581) {
        var n_108583 = cljs.core._nth.call(null, chunk__108576_108580, i__108578_108582);
        goog.style.setStyle(n_108583, cljs.core.name.call(null, name), cljs.core.apply.call(null, cljs.core.str, value));
        var G__108584 = seq__108575_108579;
        var G__108585 = chunk__108576_108580;
        var G__108586 = count__108577_108581;
        var G__108587 = i__108578_108582 + 1;
        seq__108575_108579 = G__108584;
        chunk__108576_108580 = G__108585;
        count__108577_108581 = G__108586;
        i__108578_108582 = G__108587;
        continue;
      } else {
        var temp__4092__auto___108588 = cljs.core.seq.call(null, seq__108575_108579);
        if (temp__4092__auto___108588) {
          var seq__108575_108589__$1 = temp__4092__auto___108588;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__108575_108589__$1)) {
            var c__13578__auto___108590 = cljs.core.chunk_first.call(null, seq__108575_108589__$1);
            var G__108591 = cljs.core.chunk_rest.call(null, seq__108575_108589__$1);
            var G__108592 = c__13578__auto___108590;
            var G__108593 = cljs.core.count.call(null, c__13578__auto___108590);
            var G__108594 = 0;
            seq__108575_108579 = G__108591;
            chunk__108576_108580 = G__108592;
            count__108577_108581 = G__108593;
            i__108578_108582 = G__108594;
            continue;
          } else {
            var n_108595 = cljs.core.first.call(null, seq__108575_108589__$1);
            goog.style.setStyle(n_108595, cljs.core.name.call(null, name), cljs.core.apply.call(null, cljs.core.str, value));
            var G__108596 = cljs.core.next.call(null, seq__108575_108589__$1);
            var G__108597 = null;
            var G__108598 = 0;
            var G__108599 = 0;
            seq__108575_108579 = G__108596;
            chunk__108576_108580 = G__108597;
            count__108577_108581 = G__108598;
            i__108578_108582 = G__108599;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return content;
  };
  var set_style_BANG_ = function(content, name, var_args) {
    var value = null;
    if (arguments.length > 2) {
      value = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return set_style_BANG___delegate.call(this, content, name, value);
  };
  set_style_BANG_.cljs$lang$maxFixedArity = 2;
  set_style_BANG_.cljs$lang$applyTo = function(arglist__108600) {
    var content = cljs.core.first(arglist__108600);
    arglist__108600 = cljs.core.next(arglist__108600);
    var name = cljs.core.first(arglist__108600);
    var value = cljs.core.rest(arglist__108600);
    return set_style_BANG___delegate(content, name, value);
  };
  set_style_BANG_.cljs$core$IFn$_invoke$arity$variadic = set_style_BANG___delegate;
  return set_style_BANG_;
}();
domina.set_attr_BANG_ = function() {
  var set_attr_BANG___delegate = function(content, name, value) {
    var seq__108605_108609 = cljs.core.seq.call(null, domina.nodes.call(null, content));
    var chunk__108606_108610 = null;
    var count__108607_108611 = 0;
    var i__108608_108612 = 0;
    while (true) {
      if (i__108608_108612 < count__108607_108611) {
        var n_108613 = cljs.core._nth.call(null, chunk__108606_108610, i__108608_108612);
        n_108613.setAttribute(cljs.core.name.call(null, name), cljs.core.apply.call(null, cljs.core.str, value));
        var G__108614 = seq__108605_108609;
        var G__108615 = chunk__108606_108610;
        var G__108616 = count__108607_108611;
        var G__108617 = i__108608_108612 + 1;
        seq__108605_108609 = G__108614;
        chunk__108606_108610 = G__108615;
        count__108607_108611 = G__108616;
        i__108608_108612 = G__108617;
        continue;
      } else {
        var temp__4092__auto___108618 = cljs.core.seq.call(null, seq__108605_108609);
        if (temp__4092__auto___108618) {
          var seq__108605_108619__$1 = temp__4092__auto___108618;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__108605_108619__$1)) {
            var c__13578__auto___108620 = cljs.core.chunk_first.call(null, seq__108605_108619__$1);
            var G__108621 = cljs.core.chunk_rest.call(null, seq__108605_108619__$1);
            var G__108622 = c__13578__auto___108620;
            var G__108623 = cljs.core.count.call(null, c__13578__auto___108620);
            var G__108624 = 0;
            seq__108605_108609 = G__108621;
            chunk__108606_108610 = G__108622;
            count__108607_108611 = G__108623;
            i__108608_108612 = G__108624;
            continue;
          } else {
            var n_108625 = cljs.core.first.call(null, seq__108605_108619__$1);
            n_108625.setAttribute(cljs.core.name.call(null, name), cljs.core.apply.call(null, cljs.core.str, value));
            var G__108626 = cljs.core.next.call(null, seq__108605_108619__$1);
            var G__108627 = null;
            var G__108628 = 0;
            var G__108629 = 0;
            seq__108605_108609 = G__108626;
            chunk__108606_108610 = G__108627;
            count__108607_108611 = G__108628;
            i__108608_108612 = G__108629;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return content;
  };
  var set_attr_BANG_ = function(content, name, var_args) {
    var value = null;
    if (arguments.length > 2) {
      value = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return set_attr_BANG___delegate.call(this, content, name, value);
  };
  set_attr_BANG_.cljs$lang$maxFixedArity = 2;
  set_attr_BANG_.cljs$lang$applyTo = function(arglist__108630) {
    var content = cljs.core.first(arglist__108630);
    arglist__108630 = cljs.core.next(arglist__108630);
    var name = cljs.core.first(arglist__108630);
    var value = cljs.core.rest(arglist__108630);
    return set_attr_BANG___delegate(content, name, value);
  };
  set_attr_BANG_.cljs$core$IFn$_invoke$arity$variadic = set_attr_BANG___delegate;
  return set_attr_BANG_;
}();
domina.remove_attr_BANG_ = function remove_attr_BANG_(content, name) {
  var seq__108635_108639 = cljs.core.seq.call(null, domina.nodes.call(null, content));
  var chunk__108636_108640 = null;
  var count__108637_108641 = 0;
  var i__108638_108642 = 0;
  while (true) {
    if (i__108638_108642 < count__108637_108641) {
      var n_108643 = cljs.core._nth.call(null, chunk__108636_108640, i__108638_108642);
      n_108643.removeAttribute(cljs.core.name.call(null, name));
      var G__108644 = seq__108635_108639;
      var G__108645 = chunk__108636_108640;
      var G__108646 = count__108637_108641;
      var G__108647 = i__108638_108642 + 1;
      seq__108635_108639 = G__108644;
      chunk__108636_108640 = G__108645;
      count__108637_108641 = G__108646;
      i__108638_108642 = G__108647;
      continue;
    } else {
      var temp__4092__auto___108648 = cljs.core.seq.call(null, seq__108635_108639);
      if (temp__4092__auto___108648) {
        var seq__108635_108649__$1 = temp__4092__auto___108648;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__108635_108649__$1)) {
          var c__13578__auto___108650 = cljs.core.chunk_first.call(null, seq__108635_108649__$1);
          var G__108651 = cljs.core.chunk_rest.call(null, seq__108635_108649__$1);
          var G__108652 = c__13578__auto___108650;
          var G__108653 = cljs.core.count.call(null, c__13578__auto___108650);
          var G__108654 = 0;
          seq__108635_108639 = G__108651;
          chunk__108636_108640 = G__108652;
          count__108637_108641 = G__108653;
          i__108638_108642 = G__108654;
          continue;
        } else {
          var n_108655 = cljs.core.first.call(null, seq__108635_108649__$1);
          n_108655.removeAttribute(cljs.core.name.call(null, name));
          var G__108656 = cljs.core.next.call(null, seq__108635_108649__$1);
          var G__108657 = null;
          var G__108658 = 0;
          var G__108659 = 0;
          seq__108635_108639 = G__108656;
          chunk__108636_108640 = G__108657;
          count__108637_108641 = G__108658;
          i__108638_108642 = G__108659;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return content;
};
domina.parse_style_attributes = function parse_style_attributes(style) {
  return cljs.core.reduce.call(null, function(acc, pair) {
    var vec__108661 = pair.split(/\s*:\s*/);
    var k = cljs.core.nth.call(null, vec__108661, 0, null);
    var v = cljs.core.nth.call(null, vec__108661, 1, null);
    if (cljs.core.truth_(function() {
      var and__12818__auto__ = k;
      if (cljs.core.truth_(and__12818__auto__)) {
        return v;
      } else {
        return and__12818__auto__;
      }
    }())) {
      return cljs.core.assoc.call(null, acc, cljs.core.keyword.call(null, k.toLowerCase()), v);
    } else {
      return acc;
    }
  }, cljs.core.PersistentArrayMap.EMPTY, style.split(/\s*;\s*/));
};
domina.styles = function styles(content) {
  var style = domina.attr.call(null, content, "style");
  if (typeof style === "string") {
    return domina.parse_style_attributes.call(null, style);
  } else {
    if (style == null) {
      return cljs.core.PersistentArrayMap.EMPTY;
    } else {
      if (cljs.core.truth_(style.cssText)) {
        return domina.parse_style_attributes.call(null, style.cssText);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return cljs.core.PersistentArrayMap.EMPTY;
        } else {
          return null;
        }
      }
    }
  }
};
domina.attrs = function attrs(content) {
  var node = domina.single_node.call(null, content);
  var attrs__$1 = node.attributes;
  return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.filter.call(null, cljs.core.complement.call(null, cljs.core.nil_QMARK_), cljs.core.map.call(null, function(p1__108662_SHARP_) {
    var attr = attrs__$1.item(p1__108662_SHARP_);
    var value = attr.nodeValue;
    if (cljs.core.not_EQ_.call(null, null, value) && cljs.core.not_EQ_.call(null, "", value)) {
      return new cljs.core.PersistentArrayMap.fromArray([cljs.core.keyword.call(null, attr.nodeName.toLowerCase()), attr.nodeValue], true, false);
    } else {
      return null;
    }
  }, cljs.core.range.call(null, attrs__$1.length))));
};
domina.set_styles_BANG_ = function set_styles_BANG_(content, styles) {
  var seq__108669_108675 = cljs.core.seq.call(null, styles);
  var chunk__108670_108676 = null;
  var count__108671_108677 = 0;
  var i__108672_108678 = 0;
  while (true) {
    if (i__108672_108678 < count__108671_108677) {
      var vec__108673_108679 = cljs.core._nth.call(null, chunk__108670_108676, i__108672_108678);
      var name_108680 = cljs.core.nth.call(null, vec__108673_108679, 0, null);
      var value_108681 = cljs.core.nth.call(null, vec__108673_108679, 1, null);
      domina.set_style_BANG_.call(null, content, name_108680, value_108681);
      var G__108682 = seq__108669_108675;
      var G__108683 = chunk__108670_108676;
      var G__108684 = count__108671_108677;
      var G__108685 = i__108672_108678 + 1;
      seq__108669_108675 = G__108682;
      chunk__108670_108676 = G__108683;
      count__108671_108677 = G__108684;
      i__108672_108678 = G__108685;
      continue;
    } else {
      var temp__4092__auto___108686 = cljs.core.seq.call(null, seq__108669_108675);
      if (temp__4092__auto___108686) {
        var seq__108669_108687__$1 = temp__4092__auto___108686;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__108669_108687__$1)) {
          var c__13578__auto___108688 = cljs.core.chunk_first.call(null, seq__108669_108687__$1);
          var G__108689 = cljs.core.chunk_rest.call(null, seq__108669_108687__$1);
          var G__108690 = c__13578__auto___108688;
          var G__108691 = cljs.core.count.call(null, c__13578__auto___108688);
          var G__108692 = 0;
          seq__108669_108675 = G__108689;
          chunk__108670_108676 = G__108690;
          count__108671_108677 = G__108691;
          i__108672_108678 = G__108692;
          continue;
        } else {
          var vec__108674_108693 = cljs.core.first.call(null, seq__108669_108687__$1);
          var name_108694 = cljs.core.nth.call(null, vec__108674_108693, 0, null);
          var value_108695 = cljs.core.nth.call(null, vec__108674_108693, 1, null);
          domina.set_style_BANG_.call(null, content, name_108694, value_108695);
          var G__108696 = cljs.core.next.call(null, seq__108669_108687__$1);
          var G__108697 = null;
          var G__108698 = 0;
          var G__108699 = 0;
          seq__108669_108675 = G__108696;
          chunk__108670_108676 = G__108697;
          count__108671_108677 = G__108698;
          i__108672_108678 = G__108699;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return content;
};
domina.set_attrs_BANG_ = function set_attrs_BANG_(content, attrs) {
  var seq__108706_108712 = cljs.core.seq.call(null, attrs);
  var chunk__108707_108713 = null;
  var count__108708_108714 = 0;
  var i__108709_108715 = 0;
  while (true) {
    if (i__108709_108715 < count__108708_108714) {
      var vec__108710_108716 = cljs.core._nth.call(null, chunk__108707_108713, i__108709_108715);
      var name_108717 = cljs.core.nth.call(null, vec__108710_108716, 0, null);
      var value_108718 = cljs.core.nth.call(null, vec__108710_108716, 1, null);
      domina.set_attr_BANG_.call(null, content, name_108717, value_108718);
      var G__108719 = seq__108706_108712;
      var G__108720 = chunk__108707_108713;
      var G__108721 = count__108708_108714;
      var G__108722 = i__108709_108715 + 1;
      seq__108706_108712 = G__108719;
      chunk__108707_108713 = G__108720;
      count__108708_108714 = G__108721;
      i__108709_108715 = G__108722;
      continue;
    } else {
      var temp__4092__auto___108723 = cljs.core.seq.call(null, seq__108706_108712);
      if (temp__4092__auto___108723) {
        var seq__108706_108724__$1 = temp__4092__auto___108723;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__108706_108724__$1)) {
          var c__13578__auto___108725 = cljs.core.chunk_first.call(null, seq__108706_108724__$1);
          var G__108726 = cljs.core.chunk_rest.call(null, seq__108706_108724__$1);
          var G__108727 = c__13578__auto___108725;
          var G__108728 = cljs.core.count.call(null, c__13578__auto___108725);
          var G__108729 = 0;
          seq__108706_108712 = G__108726;
          chunk__108707_108713 = G__108727;
          count__108708_108714 = G__108728;
          i__108709_108715 = G__108729;
          continue;
        } else {
          var vec__108711_108730 = cljs.core.first.call(null, seq__108706_108724__$1);
          var name_108731 = cljs.core.nth.call(null, vec__108711_108730, 0, null);
          var value_108732 = cljs.core.nth.call(null, vec__108711_108730, 1, null);
          domina.set_attr_BANG_.call(null, content, name_108731, value_108732);
          var G__108733 = cljs.core.next.call(null, seq__108706_108724__$1);
          var G__108734 = null;
          var G__108735 = 0;
          var G__108736 = 0;
          seq__108706_108712 = G__108733;
          chunk__108707_108713 = G__108734;
          count__108708_108714 = G__108735;
          i__108709_108715 = G__108736;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return content;
};
domina.has_class_QMARK_ = function has_class_QMARK_(content, class$) {
  return goog.dom.classes.has(domina.single_node.call(null, content), class$);
};
domina.add_class_BANG_ = function add_class_BANG_(content, class$) {
  var seq__108741_108745 = cljs.core.seq.call(null, domina.nodes.call(null, content));
  var chunk__108742_108746 = null;
  var count__108743_108747 = 0;
  var i__108744_108748 = 0;
  while (true) {
    if (i__108744_108748 < count__108743_108747) {
      var node_108749 = cljs.core._nth.call(null, chunk__108742_108746, i__108744_108748);
      goog.dom.classes.add(node_108749, class$);
      var G__108750 = seq__108741_108745;
      var G__108751 = chunk__108742_108746;
      var G__108752 = count__108743_108747;
      var G__108753 = i__108744_108748 + 1;
      seq__108741_108745 = G__108750;
      chunk__108742_108746 = G__108751;
      count__108743_108747 = G__108752;
      i__108744_108748 = G__108753;
      continue;
    } else {
      var temp__4092__auto___108754 = cljs.core.seq.call(null, seq__108741_108745);
      if (temp__4092__auto___108754) {
        var seq__108741_108755__$1 = temp__4092__auto___108754;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__108741_108755__$1)) {
          var c__13578__auto___108756 = cljs.core.chunk_first.call(null, seq__108741_108755__$1);
          var G__108757 = cljs.core.chunk_rest.call(null, seq__108741_108755__$1);
          var G__108758 = c__13578__auto___108756;
          var G__108759 = cljs.core.count.call(null, c__13578__auto___108756);
          var G__108760 = 0;
          seq__108741_108745 = G__108757;
          chunk__108742_108746 = G__108758;
          count__108743_108747 = G__108759;
          i__108744_108748 = G__108760;
          continue;
        } else {
          var node_108761 = cljs.core.first.call(null, seq__108741_108755__$1);
          goog.dom.classes.add(node_108761, class$);
          var G__108762 = cljs.core.next.call(null, seq__108741_108755__$1);
          var G__108763 = null;
          var G__108764 = 0;
          var G__108765 = 0;
          seq__108741_108745 = G__108762;
          chunk__108742_108746 = G__108763;
          count__108743_108747 = G__108764;
          i__108744_108748 = G__108765;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return content;
};
domina.remove_class_BANG_ = function remove_class_BANG_(content, class$) {
  var seq__108770_108774 = cljs.core.seq.call(null, domina.nodes.call(null, content));
  var chunk__108771_108775 = null;
  var count__108772_108776 = 0;
  var i__108773_108777 = 0;
  while (true) {
    if (i__108773_108777 < count__108772_108776) {
      var node_108778 = cljs.core._nth.call(null, chunk__108771_108775, i__108773_108777);
      goog.dom.classes.remove(node_108778, class$);
      var G__108779 = seq__108770_108774;
      var G__108780 = chunk__108771_108775;
      var G__108781 = count__108772_108776;
      var G__108782 = i__108773_108777 + 1;
      seq__108770_108774 = G__108779;
      chunk__108771_108775 = G__108780;
      count__108772_108776 = G__108781;
      i__108773_108777 = G__108782;
      continue;
    } else {
      var temp__4092__auto___108783 = cljs.core.seq.call(null, seq__108770_108774);
      if (temp__4092__auto___108783) {
        var seq__108770_108784__$1 = temp__4092__auto___108783;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__108770_108784__$1)) {
          var c__13578__auto___108785 = cljs.core.chunk_first.call(null, seq__108770_108784__$1);
          var G__108786 = cljs.core.chunk_rest.call(null, seq__108770_108784__$1);
          var G__108787 = c__13578__auto___108785;
          var G__108788 = cljs.core.count.call(null, c__13578__auto___108785);
          var G__108789 = 0;
          seq__108770_108774 = G__108786;
          chunk__108771_108775 = G__108787;
          count__108772_108776 = G__108788;
          i__108773_108777 = G__108789;
          continue;
        } else {
          var node_108790 = cljs.core.first.call(null, seq__108770_108784__$1);
          goog.dom.classes.remove(node_108790, class$);
          var G__108791 = cljs.core.next.call(null, seq__108770_108784__$1);
          var G__108792 = null;
          var G__108793 = 0;
          var G__108794 = 0;
          seq__108770_108774 = G__108791;
          chunk__108771_108775 = G__108792;
          count__108772_108776 = G__108793;
          i__108773_108777 = G__108794;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return content;
};
domina.toggle_class_BANG_ = function toggle_class_BANG_(content, class$) {
  var seq__108799_108803 = cljs.core.seq.call(null, domina.nodes.call(null, content));
  var chunk__108800_108804 = null;
  var count__108801_108805 = 0;
  var i__108802_108806 = 0;
  while (true) {
    if (i__108802_108806 < count__108801_108805) {
      var node_108807 = cljs.core._nth.call(null, chunk__108800_108804, i__108802_108806);
      goog.dom.classes.toggle(node_108807, class$);
      var G__108808 = seq__108799_108803;
      var G__108809 = chunk__108800_108804;
      var G__108810 = count__108801_108805;
      var G__108811 = i__108802_108806 + 1;
      seq__108799_108803 = G__108808;
      chunk__108800_108804 = G__108809;
      count__108801_108805 = G__108810;
      i__108802_108806 = G__108811;
      continue;
    } else {
      var temp__4092__auto___108812 = cljs.core.seq.call(null, seq__108799_108803);
      if (temp__4092__auto___108812) {
        var seq__108799_108813__$1 = temp__4092__auto___108812;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__108799_108813__$1)) {
          var c__13578__auto___108814 = cljs.core.chunk_first.call(null, seq__108799_108813__$1);
          var G__108815 = cljs.core.chunk_rest.call(null, seq__108799_108813__$1);
          var G__108816 = c__13578__auto___108814;
          var G__108817 = cljs.core.count.call(null, c__13578__auto___108814);
          var G__108818 = 0;
          seq__108799_108803 = G__108815;
          chunk__108800_108804 = G__108816;
          count__108801_108805 = G__108817;
          i__108802_108806 = G__108818;
          continue;
        } else {
          var node_108819 = cljs.core.first.call(null, seq__108799_108813__$1);
          goog.dom.classes.toggle(node_108819, class$);
          var G__108820 = cljs.core.next.call(null, seq__108799_108813__$1);
          var G__108821 = null;
          var G__108822 = 0;
          var G__108823 = 0;
          seq__108799_108803 = G__108820;
          chunk__108800_108804 = G__108821;
          count__108801_108805 = G__108822;
          i__108802_108806 = G__108823;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return content;
};
domina.classes = function classes(content) {
  return cljs.core.seq.call(null, goog.dom.classes.get(domina.single_node.call(null, content)));
};
domina.set_classes_BANG_ = function set_classes_BANG_(content, classes) {
  var classes_108832__$1 = cljs.core.coll_QMARK_.call(null, classes) ? clojure.string.join.call(null, " ", classes) : classes;
  var seq__108828_108833 = cljs.core.seq.call(null, domina.nodes.call(null, content));
  var chunk__108829_108834 = null;
  var count__108830_108835 = 0;
  var i__108831_108836 = 0;
  while (true) {
    if (i__108831_108836 < count__108830_108835) {
      var node_108837 = cljs.core._nth.call(null, chunk__108829_108834, i__108831_108836);
      goog.dom.classes.set(node_108837, classes_108832__$1);
      var G__108838 = seq__108828_108833;
      var G__108839 = chunk__108829_108834;
      var G__108840 = count__108830_108835;
      var G__108841 = i__108831_108836 + 1;
      seq__108828_108833 = G__108838;
      chunk__108829_108834 = G__108839;
      count__108830_108835 = G__108840;
      i__108831_108836 = G__108841;
      continue;
    } else {
      var temp__4092__auto___108842 = cljs.core.seq.call(null, seq__108828_108833);
      if (temp__4092__auto___108842) {
        var seq__108828_108843__$1 = temp__4092__auto___108842;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__108828_108843__$1)) {
          var c__13578__auto___108844 = cljs.core.chunk_first.call(null, seq__108828_108843__$1);
          var G__108845 = cljs.core.chunk_rest.call(null, seq__108828_108843__$1);
          var G__108846 = c__13578__auto___108844;
          var G__108847 = cljs.core.count.call(null, c__13578__auto___108844);
          var G__108848 = 0;
          seq__108828_108833 = G__108845;
          chunk__108829_108834 = G__108846;
          count__108830_108835 = G__108847;
          i__108831_108836 = G__108848;
          continue;
        } else {
          var node_108849 = cljs.core.first.call(null, seq__108828_108843__$1);
          goog.dom.classes.set(node_108849, classes_108832__$1);
          var G__108850 = cljs.core.next.call(null, seq__108828_108843__$1);
          var G__108851 = null;
          var G__108852 = 0;
          var G__108853 = 0;
          seq__108828_108833 = G__108850;
          chunk__108829_108834 = G__108851;
          count__108830_108835 = G__108852;
          i__108831_108836 = G__108853;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return content;
};
domina.text = function text(content) {
  return goog.string.trim(goog.dom.getTextContent(domina.single_node.call(null, content)));
};
domina.set_text_BANG_ = function set_text_BANG_(content, value) {
  var seq__108858_108862 = cljs.core.seq.call(null, domina.nodes.call(null, content));
  var chunk__108859_108863 = null;
  var count__108860_108864 = 0;
  var i__108861_108865 = 0;
  while (true) {
    if (i__108861_108865 < count__108860_108864) {
      var node_108866 = cljs.core._nth.call(null, chunk__108859_108863, i__108861_108865);
      goog.dom.setTextContent(node_108866, value);
      var G__108867 = seq__108858_108862;
      var G__108868 = chunk__108859_108863;
      var G__108869 = count__108860_108864;
      var G__108870 = i__108861_108865 + 1;
      seq__108858_108862 = G__108867;
      chunk__108859_108863 = G__108868;
      count__108860_108864 = G__108869;
      i__108861_108865 = G__108870;
      continue;
    } else {
      var temp__4092__auto___108871 = cljs.core.seq.call(null, seq__108858_108862);
      if (temp__4092__auto___108871) {
        var seq__108858_108872__$1 = temp__4092__auto___108871;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__108858_108872__$1)) {
          var c__13578__auto___108873 = cljs.core.chunk_first.call(null, seq__108858_108872__$1);
          var G__108874 = cljs.core.chunk_rest.call(null, seq__108858_108872__$1);
          var G__108875 = c__13578__auto___108873;
          var G__108876 = cljs.core.count.call(null, c__13578__auto___108873);
          var G__108877 = 0;
          seq__108858_108862 = G__108874;
          chunk__108859_108863 = G__108875;
          count__108860_108864 = G__108876;
          i__108861_108865 = G__108877;
          continue;
        } else {
          var node_108878 = cljs.core.first.call(null, seq__108858_108872__$1);
          goog.dom.setTextContent(node_108878, value);
          var G__108879 = cljs.core.next.call(null, seq__108858_108872__$1);
          var G__108880 = null;
          var G__108881 = 0;
          var G__108882 = 0;
          seq__108858_108862 = G__108879;
          chunk__108859_108863 = G__108880;
          count__108860_108864 = G__108881;
          i__108861_108865 = G__108882;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return content;
};
domina.value = function value(content) {
  return goog.dom.forms.getValue(domina.single_node.call(null, content));
};
domina.set_value_BANG_ = function set_value_BANG_(content, value) {
  var seq__108887_108891 = cljs.core.seq.call(null, domina.nodes.call(null, content));
  var chunk__108888_108892 = null;
  var count__108889_108893 = 0;
  var i__108890_108894 = 0;
  while (true) {
    if (i__108890_108894 < count__108889_108893) {
      var node_108895 = cljs.core._nth.call(null, chunk__108888_108892, i__108890_108894);
      goog.dom.forms.setValue(node_108895, value);
      var G__108896 = seq__108887_108891;
      var G__108897 = chunk__108888_108892;
      var G__108898 = count__108889_108893;
      var G__108899 = i__108890_108894 + 1;
      seq__108887_108891 = G__108896;
      chunk__108888_108892 = G__108897;
      count__108889_108893 = G__108898;
      i__108890_108894 = G__108899;
      continue;
    } else {
      var temp__4092__auto___108900 = cljs.core.seq.call(null, seq__108887_108891);
      if (temp__4092__auto___108900) {
        var seq__108887_108901__$1 = temp__4092__auto___108900;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__108887_108901__$1)) {
          var c__13578__auto___108902 = cljs.core.chunk_first.call(null, seq__108887_108901__$1);
          var G__108903 = cljs.core.chunk_rest.call(null, seq__108887_108901__$1);
          var G__108904 = c__13578__auto___108902;
          var G__108905 = cljs.core.count.call(null, c__13578__auto___108902);
          var G__108906 = 0;
          seq__108887_108891 = G__108903;
          chunk__108888_108892 = G__108904;
          count__108889_108893 = G__108905;
          i__108890_108894 = G__108906;
          continue;
        } else {
          var node_108907 = cljs.core.first.call(null, seq__108887_108901__$1);
          goog.dom.forms.setValue(node_108907, value);
          var G__108908 = cljs.core.next.call(null, seq__108887_108901__$1);
          var G__108909 = null;
          var G__108910 = 0;
          var G__108911 = 0;
          seq__108887_108891 = G__108908;
          chunk__108888_108892 = G__108909;
          count__108889_108893 = G__108910;
          i__108890_108894 = G__108911;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return content;
};
domina.html = function html(content) {
  return domina.single_node.call(null, content).innerHTML;
};
domina.replace_children_BANG_ = function replace_children_BANG_(content, inner_content) {
  return domina.append_BANG_.call(null, domina.destroy_children_BANG_.call(null, content), inner_content);
};
domina.set_inner_html_BANG_ = function set_inner_html_BANG_(content, html_string) {
  var allows_inner_html_QMARK_ = cljs.core.not.call(null, cljs.core.re_find.call(null, domina.re_no_inner_html, html_string));
  var leading_whitespace_QMARK_ = cljs.core.re_find.call(null, domina.re_leading_whitespace, html_string);
  var tag_name = [cljs.core.str(cljs.core.second.call(null, cljs.core.re_find.call(null, domina.re_tag_name, html_string)))].join("").toLowerCase();
  var special_tag_QMARK_ = cljs.core.contains_QMARK_.call(null, domina.wrap_map, tag_name);
  if (cljs.core.truth_(function() {
    var and__12818__auto__ = allows_inner_html_QMARK_;
    if (and__12818__auto__) {
      var and__12818__auto____$1 = function() {
        var or__12830__auto__ = domina.support.leading_whitespace_QMARK_;
        if (cljs.core.truth_(or__12830__auto__)) {
          return or__12830__auto__;
        } else {
          return cljs.core.not.call(null, leading_whitespace_QMARK_);
        }
      }();
      if (cljs.core.truth_(and__12818__auto____$1)) {
        return!special_tag_QMARK_;
      } else {
        return and__12818__auto____$1;
      }
    } else {
      return and__12818__auto__;
    }
  }())) {
    var value_108922 = clojure.string.replace.call(null, html_string, domina.re_xhtml_tag, "\x3c$1\x3e\x3c/$2\x3e");
    try {
      var seq__108918_108923 = cljs.core.seq.call(null, domina.nodes.call(null, content));
      var chunk__108919_108924 = null;
      var count__108920_108925 = 0;
      var i__108921_108926 = 0;
      while (true) {
        if (i__108921_108926 < count__108920_108925) {
          var node_108927 = cljs.core._nth.call(null, chunk__108919_108924, i__108921_108926);
          node_108927.innerHTML = value_108922;
          var G__108928 = seq__108918_108923;
          var G__108929 = chunk__108919_108924;
          var G__108930 = count__108920_108925;
          var G__108931 = i__108921_108926 + 1;
          seq__108918_108923 = G__108928;
          chunk__108919_108924 = G__108929;
          count__108920_108925 = G__108930;
          i__108921_108926 = G__108931;
          continue;
        } else {
          var temp__4092__auto___108932 = cljs.core.seq.call(null, seq__108918_108923);
          if (temp__4092__auto___108932) {
            var seq__108918_108933__$1 = temp__4092__auto___108932;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__108918_108933__$1)) {
              var c__13578__auto___108934 = cljs.core.chunk_first.call(null, seq__108918_108933__$1);
              var G__108935 = cljs.core.chunk_rest.call(null, seq__108918_108933__$1);
              var G__108936 = c__13578__auto___108934;
              var G__108937 = cljs.core.count.call(null, c__13578__auto___108934);
              var G__108938 = 0;
              seq__108918_108923 = G__108935;
              chunk__108919_108924 = G__108936;
              count__108920_108925 = G__108937;
              i__108921_108926 = G__108938;
              continue;
            } else {
              var node_108939 = cljs.core.first.call(null, seq__108918_108933__$1);
              node_108939.innerHTML = value_108922;
              var G__108940 = cljs.core.next.call(null, seq__108918_108933__$1);
              var G__108941 = null;
              var G__108942 = 0;
              var G__108943 = 0;
              seq__108918_108923 = G__108940;
              chunk__108919_108924 = G__108941;
              count__108920_108925 = G__108942;
              i__108921_108926 = G__108943;
              continue;
            }
          } else {
          }
        }
        break;
      }
    } catch (e108917) {
      if (e108917 instanceof Error) {
        var e_108944 = e108917;
        domina.replace_children_BANG_.call(null, content, value_108922);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw e108917;
        } else {
        }
      }
    }
  } else {
    domina.replace_children_BANG_.call(null, content, html_string);
  }
  return content;
};
domina.set_html_BANG_ = function set_html_BANG_(content, inner_content) {
  if (typeof inner_content === "string") {
    return domina.set_inner_html_BANG_.call(null, content, inner_content);
  } else {
    return domina.replace_children_BANG_.call(null, content, inner_content);
  }
};
domina.get_data = function() {
  var get_data = null;
  var get_data__2 = function(node, key) {
    return get_data.call(null, node, key, false);
  };
  var get_data__3 = function(node, key, bubble) {
    var m = domina.single_node.call(null, node).__domina_data;
    var value = cljs.core.truth_(m) ? cljs.core.get.call(null, m, key) : null;
    if (cljs.core.truth_(function() {
      var and__12818__auto__ = bubble;
      if (cljs.core.truth_(and__12818__auto__)) {
        return value == null;
      } else {
        return and__12818__auto__;
      }
    }())) {
      var temp__4092__auto__ = domina.single_node.call(null, node).parentNode;
      if (cljs.core.truth_(temp__4092__auto__)) {
        var parent = temp__4092__auto__;
        return get_data.call(null, parent, key, true);
      } else {
        return null;
      }
    } else {
      return value;
    }
  };
  get_data = function(node, key, bubble) {
    switch(arguments.length) {
      case 2:
        return get_data__2.call(this, node, key);
      case 3:
        return get_data__3.call(this, node, key, bubble);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_data.cljs$core$IFn$_invoke$arity$2 = get_data__2;
  get_data.cljs$core$IFn$_invoke$arity$3 = get_data__3;
  return get_data;
}();
domina.set_data_BANG_ = function set_data_BANG_(node, key, value) {
  var m = function() {
    var or__12830__auto__ = domina.single_node.call(null, node).__domina_data;
    if (cljs.core.truth_(or__12830__auto__)) {
      return or__12830__auto__;
    } else {
      return cljs.core.PersistentArrayMap.EMPTY;
    }
  }();
  return domina.single_node.call(null, node).__domina_data = cljs.core.assoc.call(null, m, key, value);
};
domina.apply_with_cloning = function apply_with_cloning(f, parent_content, child_content) {
  var parents = domina.nodes.call(null, parent_content);
  var children = domina.nodes.call(null, child_content);
  var first_child = function() {
    var frag = document.createDocumentFragment();
    var seq__108951_108955 = cljs.core.seq.call(null, children);
    var chunk__108952_108956 = null;
    var count__108953_108957 = 0;
    var i__108954_108958 = 0;
    while (true) {
      if (i__108954_108958 < count__108953_108957) {
        var child_108959 = cljs.core._nth.call(null, chunk__108952_108956, i__108954_108958);
        frag.appendChild(child_108959);
        var G__108960 = seq__108951_108955;
        var G__108961 = chunk__108952_108956;
        var G__108962 = count__108953_108957;
        var G__108963 = i__108954_108958 + 1;
        seq__108951_108955 = G__108960;
        chunk__108952_108956 = G__108961;
        count__108953_108957 = G__108962;
        i__108954_108958 = G__108963;
        continue;
      } else {
        var temp__4092__auto___108964 = cljs.core.seq.call(null, seq__108951_108955);
        if (temp__4092__auto___108964) {
          var seq__108951_108965__$1 = temp__4092__auto___108964;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__108951_108965__$1)) {
            var c__13578__auto___108966 = cljs.core.chunk_first.call(null, seq__108951_108965__$1);
            var G__108967 = cljs.core.chunk_rest.call(null, seq__108951_108965__$1);
            var G__108968 = c__13578__auto___108966;
            var G__108969 = cljs.core.count.call(null, c__13578__auto___108966);
            var G__108970 = 0;
            seq__108951_108955 = G__108967;
            chunk__108952_108956 = G__108968;
            count__108953_108957 = G__108969;
            i__108954_108958 = G__108970;
            continue;
          } else {
            var child_108971 = cljs.core.first.call(null, seq__108951_108965__$1);
            frag.appendChild(child_108971);
            var G__108972 = cljs.core.next.call(null, seq__108951_108965__$1);
            var G__108973 = null;
            var G__108974 = 0;
            var G__108975 = 0;
            seq__108951_108955 = G__108972;
            chunk__108952_108956 = G__108973;
            count__108953_108957 = G__108974;
            i__108954_108958 = G__108975;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return frag;
  }();
  var other_children = cljs.core.doall.call(null, cljs.core.repeatedly.call(null, cljs.core.count.call(null, parents) - 1, function(parents, children, first_child) {
    return function() {
      return first_child.cloneNode(true);
    };
  }(parents, children, first_child)));
  if (cljs.core.seq.call(null, parents)) {
    f.call(null, cljs.core.first.call(null, parents), first_child);
    return cljs.core.doall.call(null, cljs.core.map.call(null, function(p1__108945_SHARP_, p2__108946_SHARP_) {
      return f.call(null, p1__108945_SHARP_, p2__108946_SHARP_);
    }, cljs.core.rest.call(null, parents), other_children));
  } else {
    return null;
  }
};
domina.lazy_nl_via_item = function() {
  var lazy_nl_via_item = null;
  var lazy_nl_via_item__1 = function(nl) {
    return lazy_nl_via_item.call(null, nl, 0);
  };
  var lazy_nl_via_item__2 = function(nl, n) {
    if (n < nl.length) {
      return new cljs.core.LazySeq(null, function() {
        return cljs.core.cons.call(null, nl.item(n), lazy_nl_via_item.call(null, nl, n + 1));
      }, null, null);
    } else {
      return null;
    }
  };
  lazy_nl_via_item = function(nl, n) {
    switch(arguments.length) {
      case 1:
        return lazy_nl_via_item__1.call(this, nl);
      case 2:
        return lazy_nl_via_item__2.call(this, nl, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  lazy_nl_via_item.cljs$core$IFn$_invoke$arity$1 = lazy_nl_via_item__1;
  lazy_nl_via_item.cljs$core$IFn$_invoke$arity$2 = lazy_nl_via_item__2;
  return lazy_nl_via_item;
}();
domina.lazy_nl_via_array_ref = function() {
  var lazy_nl_via_array_ref = null;
  var lazy_nl_via_array_ref__1 = function(nl) {
    return lazy_nl_via_array_ref.call(null, nl, 0);
  };
  var lazy_nl_via_array_ref__2 = function(nl, n) {
    if (n < nl.length) {
      return new cljs.core.LazySeq(null, function() {
        return cljs.core.cons.call(null, nl[n], lazy_nl_via_array_ref.call(null, nl, n + 1));
      }, null, null);
    } else {
      return null;
    }
  };
  lazy_nl_via_array_ref = function(nl, n) {
    switch(arguments.length) {
      case 1:
        return lazy_nl_via_array_ref__1.call(this, nl);
      case 2:
        return lazy_nl_via_array_ref__2.call(this, nl, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  lazy_nl_via_array_ref.cljs$core$IFn$_invoke$arity$1 = lazy_nl_via_array_ref__1;
  lazy_nl_via_array_ref.cljs$core$IFn$_invoke$arity$2 = lazy_nl_via_array_ref__2;
  return lazy_nl_via_array_ref;
}();
domina.lazy_nodelist = function lazy_nodelist(nl) {
  if (cljs.core.truth_(nl.item)) {
    return domina.lazy_nl_via_item.call(null, nl);
  } else {
    return domina.lazy_nl_via_array_ref.call(null, nl);
  }
};
domina.array_like_QMARK_ = function array_like_QMARK_(obj) {
  var and__12818__auto__ = obj;
  if (cljs.core.truth_(and__12818__auto__)) {
    var and__12818__auto____$1 = cljs.core.not.call(null, obj.nodeName);
    if (and__12818__auto____$1) {
      return obj.length;
    } else {
      return and__12818__auto____$1;
    }
  } else {
    return and__12818__auto__;
  }
};
domina.normalize_seq = function normalize_seq(list_thing) {
  if (list_thing == null) {
    return cljs.core.List.EMPTY;
  } else {
    if (function() {
      var G__108977 = list_thing;
      if (G__108977) {
        var bit__13480__auto__ = G__108977.cljs$lang$protocol_mask$partition0$ & 8388608;
        if (bit__13480__auto__ || G__108977.cljs$core$ISeqable$) {
          return true;
        } else {
          if (!G__108977.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__108977);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__108977);
      }
    }()) {
      return cljs.core.seq.call(null, list_thing);
    } else {
      if (cljs.core.truth_(domina.array_like_QMARK_.call(null, list_thing))) {
        return domina.lazy_nodelist.call(null, list_thing);
      } else {
        if (new cljs.core.Keyword(null, "default", "default", 2558708147)) {
          return cljs.core.seq.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [list_thing], null));
        } else {
          return null;
        }
      }
    }
  }
};
domina.DomContent["_"] = true;
domina.nodes["_"] = function(content) {
  if (content == null) {
    return cljs.core.List.EMPTY;
  } else {
    if (function() {
      var G__108978 = content;
      if (G__108978) {
        var bit__13480__auto__ = G__108978.cljs$lang$protocol_mask$partition0$ & 8388608;
        if (bit__13480__auto__ || G__108978.cljs$core$ISeqable$) {
          return true;
        } else {
          if (!G__108978.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__108978);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__108978);
      }
    }()) {
      return cljs.core.seq.call(null, content);
    } else {
      if (cljs.core.truth_(domina.array_like_QMARK_.call(null, content))) {
        return domina.lazy_nodelist.call(null, content);
      } else {
        if (new cljs.core.Keyword(null, "default", "default", 2558708147)) {
          return cljs.core.seq.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [content], null));
        } else {
          return null;
        }
      }
    }
  }
};
domina.single_node["_"] = function(content) {
  if (content == null) {
    return null;
  } else {
    if (function() {
      var G__108979 = content;
      if (G__108979) {
        var bit__13480__auto__ = G__108979.cljs$lang$protocol_mask$partition0$ & 8388608;
        if (bit__13480__auto__ || G__108979.cljs$core$ISeqable$) {
          return true;
        } else {
          if (!G__108979.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__108979);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__108979);
      }
    }()) {
      return cljs.core.first.call(null, content);
    } else {
      if (cljs.core.truth_(domina.array_like_QMARK_.call(null, content))) {
        return content.item(0);
      } else {
        if (new cljs.core.Keyword(null, "default", "default", 2558708147)) {
          return content;
        } else {
          return null;
        }
      }
    }
  }
};
domina.DomContent["string"] = true;
domina.nodes["string"] = function(s) {
  return cljs.core.doall.call(null, domina.nodes.call(null, domina.string_to_dom.call(null, s)));
};
domina.single_node["string"] = function(s) {
  return domina.single_node.call(null, domina.string_to_dom.call(null, s));
};
if (cljs.core.truth_(typeof NodeList != "undefined")) {
  NodeList.prototype.cljs$core$ISeqable$ = true;
  NodeList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(nodelist) {
    var nodelist__$1 = this;
    return domina.lazy_nodelist.call(null, nodelist__$1);
  };
  NodeList.prototype.cljs$core$IIndexed$ = true;
  NodeList.prototype.cljs$core$IIndexed$_nth$arity$2 = function(nodelist, n) {
    var nodelist__$1 = this;
    return nodelist__$1.item(n);
  };
  NodeList.prototype.cljs$core$IIndexed$_nth$arity$3 = function(nodelist, n, not_found) {
    var nodelist__$1 = this;
    if (nodelist__$1.length <= n) {
      return not_found;
    } else {
      return cljs.core.nth.call(null, nodelist__$1, n);
    }
  };
  NodeList.prototype.cljs$core$ICounted$ = true;
  NodeList.prototype.cljs$core$ICounted$_count$arity$1 = function(nodelist) {
    var nodelist__$1 = this;
    return nodelist__$1.length;
  };
} else {
}
if (cljs.core.truth_(typeof StaticNodeList != "undefined")) {
  StaticNodeList.prototype.cljs$core$ISeqable$ = true;
  StaticNodeList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(nodelist) {
    var nodelist__$1 = this;
    return domina.lazy_nodelist.call(null, nodelist__$1);
  };
  StaticNodeList.prototype.cljs$core$IIndexed$ = true;
  StaticNodeList.prototype.cljs$core$IIndexed$_nth$arity$2 = function(nodelist, n) {
    var nodelist__$1 = this;
    return nodelist__$1.item(n);
  };
  StaticNodeList.prototype.cljs$core$IIndexed$_nth$arity$3 = function(nodelist, n, not_found) {
    var nodelist__$1 = this;
    if (nodelist__$1.length <= n) {
      return not_found;
    } else {
      return cljs.core.nth.call(null, nodelist__$1, n);
    }
  };
  StaticNodeList.prototype.cljs$core$ICounted$ = true;
  StaticNodeList.prototype.cljs$core$ICounted$_count$arity$1 = function(nodelist) {
    var nodelist__$1 = this;
    return nodelist__$1.length;
  };
} else {
}
if (cljs.core.truth_(typeof HTMLCollection != "undefined")) {
  HTMLCollection.prototype.cljs$core$ISeqable$ = true;
  HTMLCollection.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
    var coll__$1 = this;
    return domina.lazy_nodelist.call(null, coll__$1);
  };
  HTMLCollection.prototype.cljs$core$IIndexed$ = true;
  HTMLCollection.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
    var coll__$1 = this;
    return coll__$1.item(n);
  };
  HTMLCollection.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
    var coll__$1 = this;
    if (coll__$1.length <= n) {
      return not_found;
    } else {
      return cljs.core.nth.call(null, coll__$1, n);
    }
  };
  HTMLCollection.prototype.cljs$core$ICounted$ = true;
  HTMLCollection.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
    var coll__$1 = this;
    return coll__$1.length;
  };
} else {
}
;goog.provide("clojure.browser.event");
goog.require("cljs.core");
goog.require("goog.events.EventType");
goog.require("goog.events.EventType");
goog.require("goog.events.EventTarget");
goog.require("goog.events.EventTarget");
goog.require("goog.events");
goog.require("goog.events");
clojure.browser.event.EventType = function() {
  var obj109222 = {};
  return obj109222;
}();
clojure.browser.event.event_types = function event_types(this$) {
  if (function() {
    var and__12818__auto__ = this$;
    if (and__12818__auto__) {
      return this$.clojure$browser$event$EventType$event_types$arity$1;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return this$.clojure$browser$event$EventType$event_types$arity$1(this$);
  } else {
    var x__13457__auto__ = this$ == null ? null : this$;
    return function() {
      var or__12830__auto__ = clojure.browser.event.event_types[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = clojure.browser.event.event_types["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "EventType.event-types", this$);
        }
      }
    }().call(null, this$);
  }
};
Element.prototype.clojure$browser$event$EventType$ = true;
Element.prototype.clojure$browser$event$EventType$event_types$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(p__109223) {
    var vec__109224 = p__109223;
    var k = cljs.core.nth.call(null, vec__109224, 0, null);
    var v = cljs.core.nth.call(null, vec__109224, 1, null);
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k.toLowerCase()), v], null);
  }, cljs.core.merge.call(null, cljs.core.js__GT_clj.call(null, goog.events.EventType))));
};
goog.events.EventTarget.prototype.clojure$browser$event$EventType$ = true;
goog.events.EventTarget.prototype.clojure$browser$event$EventType$event_types$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(p__109225) {
    var vec__109226 = p__109225;
    var k = cljs.core.nth.call(null, vec__109226, 0, null);
    var v = cljs.core.nth.call(null, vec__109226, 1, null);
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k.toLowerCase()), v], null);
  }, cljs.core.merge.call(null, cljs.core.js__GT_clj.call(null, goog.events.EventType))));
};
clojure.browser.event.listen = function() {
  var listen = null;
  var listen__3 = function(src, type, fn) {
    return listen.call(null, src, type, fn, false);
  };
  var listen__4 = function(src, type, fn, capture_QMARK_) {
    return goog.events.listen(src, cljs.core.get.call(null, clojure.browser.event.event_types.call(null, src), type, type), fn, capture_QMARK_);
  };
  listen = function(src, type, fn, capture_QMARK_) {
    switch(arguments.length) {
      case 3:
        return listen__3.call(this, src, type, fn);
      case 4:
        return listen__4.call(this, src, type, fn, capture_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  listen.cljs$core$IFn$_invoke$arity$3 = listen__3;
  listen.cljs$core$IFn$_invoke$arity$4 = listen__4;
  return listen;
}();
clojure.browser.event.listen_once = function() {
  var listen_once = null;
  var listen_once__3 = function(src, type, fn) {
    return listen_once.call(null, src, type, fn, false);
  };
  var listen_once__4 = function(src, type, fn, capture_QMARK_) {
    return goog.events.listenOnce(src, cljs.core.get.call(null, clojure.browser.event.event_types.call(null, src), type, type), fn, capture_QMARK_);
  };
  listen_once = function(src, type, fn, capture_QMARK_) {
    switch(arguments.length) {
      case 3:
        return listen_once__3.call(this, src, type, fn);
      case 4:
        return listen_once__4.call(this, src, type, fn, capture_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  listen_once.cljs$core$IFn$_invoke$arity$3 = listen_once__3;
  listen_once.cljs$core$IFn$_invoke$arity$4 = listen_once__4;
  return listen_once;
}();
clojure.browser.event.unlisten = function() {
  var unlisten = null;
  var unlisten__3 = function(src, type, fn) {
    return unlisten.call(null, src, type, fn, false);
  };
  var unlisten__4 = function(src, type, fn, capture_QMARK_) {
    return goog.events.unlisten(src, cljs.core.get.call(null, clojure.browser.event.event_types.call(null, src), type, type), fn, capture_QMARK_);
  };
  unlisten = function(src, type, fn, capture_QMARK_) {
    switch(arguments.length) {
      case 3:
        return unlisten__3.call(this, src, type, fn);
      case 4:
        return unlisten__4.call(this, src, type, fn, capture_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unlisten.cljs$core$IFn$_invoke$arity$3 = unlisten__3;
  unlisten.cljs$core$IFn$_invoke$arity$4 = unlisten__4;
  return unlisten;
}();
clojure.browser.event.unlisten_by_key = function unlisten_by_key(key) {
  return goog.events.unlistenByKey(key);
};
clojure.browser.event.dispatch_event = function dispatch_event(src, event) {
  return goog.events.dispatchEvent(src, event);
};
clojure.browser.event.expose = function expose(e) {
  return goog.events.expose(e);
};
clojure.browser.event.fire_listeners = function fire_listeners(obj, type, capture, event) {
  return null;
};
clojure.browser.event.total_listener_count = function total_listener_count() {
  return goog.events.getTotalListenerCount();
};
clojure.browser.event.get_listener = function get_listener(src, type, listener, opt_capt, opt_handler) {
  return null;
};
clojure.browser.event.all_listeners = function all_listeners(obj, type, capture) {
  return null;
};
clojure.browser.event.unique_event_id = function unique_event_id(event_type) {
  return null;
};
clojure.browser.event.has_listener = function has_listener(obj, opt_type, opt_capture) {
  return null;
};
clojure.browser.event.remove_all = function remove_all(opt_obj, opt_type, opt_capt) {
  return null;
};
/*
 Portions of this code are from MochiKit, received by
 The Closure Authors under the MIT license. All other code is Copyright
 2005-2009 The Closure Authors. All Rights Reserved.
*/
goog.provide("goog.async.Deferred");
goog.provide("goog.async.Deferred.AlreadyCalledError");
goog.provide("goog.async.Deferred.CancelledError");
goog.provide("goog.async.Deferred.UnhandledError");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.debug.Error");
goog.async.Deferred = function(opt_canceller, opt_defaultScope) {
  this.chain_ = [];
  this.canceller_ = opt_canceller;
  this.defaultScope_ = opt_defaultScope || null;
};
goog.async.Deferred.prototype.fired_ = false;
goog.async.Deferred.prototype.hadError_ = false;
goog.async.Deferred.prototype.result_;
goog.async.Deferred.prototype.paused_ = 0;
goog.async.Deferred.prototype.silentlyCancelled_ = false;
goog.async.Deferred.prototype.chained_ = false;
goog.async.Deferred.prototype.unhandledExceptionTimeoutId_;
goog.async.Deferred.prototype.parent_;
goog.async.Deferred.prototype.branches_ = 0;
goog.async.Deferred.prototype.cancel = function(opt_deepCancel) {
  if (!this.hasFired()) {
    if (this.parent_) {
      var parent = this.parent_;
      delete this.parent_;
      if (opt_deepCancel) {
        parent.cancel(opt_deepCancel);
      } else {
        parent.branchCancel_();
      }
    }
    if (this.canceller_) {
      this.canceller_.call(this.defaultScope_, this);
    } else {
      this.silentlyCancelled_ = true;
    }
    if (!this.hasFired()) {
      this.errback(new goog.async.Deferred.CancelledError(this));
    }
  } else {
    if (this.result_ instanceof goog.async.Deferred) {
      this.result_.cancel();
    }
  }
};
goog.async.Deferred.prototype.branchCancel_ = function() {
  this.branches_--;
  if (this.branches_ <= 0) {
    this.cancel();
  }
};
goog.async.Deferred.prototype.pause_ = function() {
  this.paused_++;
};
goog.async.Deferred.prototype.unpause_ = function() {
  this.paused_--;
  if (this.paused_ == 0 && this.hasFired()) {
    this.fire_();
  }
};
goog.async.Deferred.prototype.continue_ = function(isSuccess, res) {
  this.resback_(isSuccess, res);
  this.unpause_();
};
goog.async.Deferred.prototype.resback_ = function(isSuccess, res) {
  this.fired_ = true;
  this.result_ = res;
  this.hadError_ = !isSuccess;
  this.fire_();
};
goog.async.Deferred.prototype.check_ = function() {
  if (this.hasFired()) {
    if (!this.silentlyCancelled_) {
      throw new goog.async.Deferred.AlreadyCalledError(this);
    }
    this.silentlyCancelled_ = false;
  }
};
goog.async.Deferred.prototype.callback = function(result) {
  this.check_();
  this.assertNotDeferred_(result);
  this.resback_(true, result);
};
goog.async.Deferred.prototype.errback = function(result) {
  this.check_();
  this.assertNotDeferred_(result);
  this.resback_(false, result);
};
goog.async.Deferred.prototype.assertNotDeferred_ = function(obj) {
  goog.asserts.assert(!(obj instanceof goog.async.Deferred), "Deferred instances can only be chained if they are the result of a " + "callback");
};
goog.async.Deferred.prototype.addCallback = function(cb, opt_scope) {
  return this.addCallbacks(cb, null, opt_scope);
};
goog.async.Deferred.prototype.addErrback = function(eb, opt_scope) {
  return this.addCallbacks(null, eb, opt_scope);
};
goog.async.Deferred.prototype.addCallbacks = function(cb, eb, opt_scope) {
  goog.asserts.assert(!this.chained_, "Chained Deferreds can not be re-used");
  this.chain_.push([cb, eb, opt_scope]);
  if (this.hasFired()) {
    this.fire_();
  }
  return this;
};
goog.async.Deferred.prototype.chainDeferred = function(otherDeferred) {
  this.addCallbacks(otherDeferred.callback, otherDeferred.errback, otherDeferred);
  return this;
};
goog.async.Deferred.prototype.awaitDeferred = function(otherDeferred) {
  return this.addCallback(goog.bind(otherDeferred.branch, otherDeferred));
};
goog.async.Deferred.prototype.branch = function(opt_propagateCancel) {
  var d = new goog.async.Deferred;
  this.chainDeferred(d);
  if (opt_propagateCancel) {
    d.parent_ = this;
    this.branches_++;
  }
  return d;
};
goog.async.Deferred.prototype.addBoth = function(f, opt_scope) {
  return this.addCallbacks(f, f, opt_scope);
};
goog.async.Deferred.prototype.hasFired = function() {
  return this.fired_;
};
goog.async.Deferred.prototype.isError = function(res) {
  return res instanceof Error;
};
goog.async.Deferred.prototype.hasErrback_ = function() {
  return goog.array.some(this.chain_, function(chainRow) {
    return goog.isFunction(chainRow[1]);
  });
};
goog.async.Deferred.prototype.fire_ = function() {
  if (this.unhandledExceptionTimeoutId_ && (this.hasFired() && this.hasErrback_())) {
    goog.global.clearTimeout(this.unhandledExceptionTimeoutId_);
    delete this.unhandledExceptionTimeoutId_;
  }
  if (this.parent_) {
    this.parent_.branches_--;
    delete this.parent_;
  }
  var res = this.result_;
  var unhandledException = false;
  var isChained = false;
  while (this.chain_.length && this.paused_ == 0) {
    var chainEntry = this.chain_.shift();
    var callback = chainEntry[0];
    var errback = chainEntry[1];
    var scope = chainEntry[2];
    var f = this.hadError_ ? errback : callback;
    if (f) {
      try {
        var ret = f.call(scope || this.defaultScope_, res);
        if (goog.isDef(ret)) {
          this.hadError_ = this.hadError_ && (ret == res || this.isError(ret));
          this.result_ = res = ret;
        }
        if (res instanceof goog.async.Deferred) {
          isChained = true;
          this.pause_();
        }
      } catch (ex) {
        res = ex;
        this.hadError_ = true;
        if (!this.hasErrback_()) {
          unhandledException = true;
        }
      }
    }
  }
  this.result_ = res;
  if (isChained && this.paused_) {
    res.addCallbacks(goog.bind(this.continue_, this, true), goog.bind(this.continue_, this, false));
    res.chained_ = true;
  }
  if (unhandledException) {
    this.unhandledExceptionTimeoutId_ = goog.global.setTimeout(function() {
      throw new goog.async.Deferred.UnhandledError((res));
    }, 0);
  }
};
goog.async.Deferred.succeed = function(res) {
  var d = new goog.async.Deferred;
  d.callback(res);
  return d;
};
goog.async.Deferred.fail = function(res) {
  var d = new goog.async.Deferred;
  d.errback(res);
  return d;
};
goog.async.Deferred.cancelled = function() {
  var d = new goog.async.Deferred;
  d.cancel();
  return d;
};
goog.async.Deferred.when = function(value, callback, opt_scope) {
  if (value instanceof goog.async.Deferred) {
    return value.branch(true).addCallback(callback, opt_scope);
  } else {
    return goog.async.Deferred.succeed(value).addCallback(callback, opt_scope);
  }
};
goog.async.Deferred.AlreadyCalledError = function(deferred) {
  goog.debug.Error.call(this);
  this.deferred = deferred;
};
goog.inherits(goog.async.Deferred.AlreadyCalledError, goog.debug.Error);
goog.async.Deferred.AlreadyCalledError.prototype.message = "Already called";
goog.async.Deferred.CancelledError = function(deferred) {
  goog.debug.Error.call(this);
  this.deferred = deferred;
};
goog.inherits(goog.async.Deferred.CancelledError, goog.debug.Error);
goog.async.Deferred.CancelledError.prototype.message = "Deferred was cancelled";
goog.async.Deferred.UnhandledError = function(cause) {
  goog.debug.Error.call(this);
  this.cause = cause;
  this.message = "Unhandled Error in Deferred: " + (cause.message || "[No message]");
};
goog.inherits(goog.async.Deferred.UnhandledError, goog.debug.Error);
goog.provide("goog.Delay");
goog.provide("goog.async.Delay");
goog.require("goog.Disposable");
goog.require("goog.Timer");
goog.async.Delay = function(listener, opt_interval, opt_handler) {
  goog.Disposable.call(this);
  this.listener_ = listener;
  this.interval_ = opt_interval || 0;
  this.handler_ = opt_handler;
  this.callback_ = goog.bind(this.doAction_, this);
};
goog.inherits(goog.async.Delay, goog.Disposable);
goog.Delay = goog.async.Delay;
goog.async.Delay.prototype.id_ = 0;
goog.async.Delay.prototype.disposeInternal = function() {
  goog.async.Delay.superClass_.disposeInternal.call(this);
  this.stop();
  delete this.listener_;
  delete this.handler_;
};
goog.async.Delay.prototype.start = function(opt_interval) {
  this.stop();
  this.id_ = goog.Timer.callOnce(this.callback_, goog.isDef(opt_interval) ? opt_interval : this.interval_);
};
goog.async.Delay.prototype.stop = function() {
  if (this.isActive()) {
    goog.Timer.clear(this.id_);
  }
  this.id_ = 0;
};
goog.async.Delay.prototype.fire = function() {
  this.stop();
  this.doAction_();
};
goog.async.Delay.prototype.fireIfActive = function() {
  if (this.isActive()) {
    this.fire();
  }
};
goog.async.Delay.prototype.isActive = function() {
  return this.id_ != 0;
};
goog.async.Delay.prototype.doAction_ = function() {
  this.id_ = 0;
  if (this.listener_) {
    this.listener_.call(this.handler_);
  }
};
goog.provide("goog.messaging.MessageChannel");
goog.messaging.MessageChannel = function() {
};
goog.messaging.MessageChannel.prototype.connect = function(opt_connectCb) {
};
goog.messaging.MessageChannel.prototype.isConnected = function() {
};
goog.messaging.MessageChannel.prototype.registerService = function(serviceName, callback, opt_objectPayload) {
};
goog.messaging.MessageChannel.prototype.registerDefaultService = function(callback) {
};
goog.messaging.MessageChannel.prototype.send = function(serviceName, payload) {
};
goog.provide("goog.messaging.AbstractChannel");
goog.require("goog.Disposable");
goog.require("goog.debug");
goog.require("goog.debug.Logger");
goog.require("goog.json");
goog.require("goog.messaging.MessageChannel");
goog.messaging.AbstractChannel = function() {
  goog.base(this);
  this.services_ = {};
};
goog.inherits(goog.messaging.AbstractChannel, goog.Disposable);
goog.messaging.AbstractChannel.prototype.defaultService_;
goog.messaging.AbstractChannel.prototype.logger = goog.debug.Logger.getLogger("goog.messaging.AbstractChannel");
goog.messaging.AbstractChannel.prototype.connect = function(opt_connectCb) {
  if (opt_connectCb) {
    opt_connectCb();
  }
};
goog.messaging.AbstractChannel.prototype.isConnected = function() {
  return true;
};
goog.messaging.AbstractChannel.prototype.registerService = function(serviceName, callback, opt_objectPayload) {
  this.services_[serviceName] = {callback:callback, objectPayload:!!opt_objectPayload};
};
goog.messaging.AbstractChannel.prototype.registerDefaultService = function(callback) {
  this.defaultService_ = callback;
};
goog.messaging.AbstractChannel.prototype.send = goog.abstractMethod;
goog.messaging.AbstractChannel.prototype.deliver = function(serviceName, payload) {
  var service = this.getService(serviceName, payload);
  if (!service) {
    return;
  }
  var decodedPayload = this.decodePayload(serviceName, payload, service.objectPayload);
  if (goog.isDefAndNotNull(decodedPayload)) {
    service.callback(decodedPayload);
  }
};
goog.messaging.AbstractChannel.prototype.getService = function(serviceName, payload) {
  var service = this.services_[serviceName];
  if (service) {
    return service;
  } else {
    if (this.defaultService_) {
      var callback = goog.partial(this.defaultService_, serviceName);
      var objectPayload = goog.isObject(payload);
      return{callback:callback, objectPayload:objectPayload};
    }
  }
  this.logger.warning('Unknown service name "' + serviceName + '"');
  return null;
};
goog.messaging.AbstractChannel.prototype.decodePayload = function(serviceName, payload, objectPayload) {
  if (objectPayload && goog.isString(payload)) {
    try {
      return goog.json.parse(payload);
    } catch (err) {
      this.logger.warning("Expected JSON payload for " + serviceName + ', was "' + payload + '"');
      return null;
    }
  } else {
    if (!objectPayload && !goog.isString(payload)) {
      return goog.json.serialize(payload);
    }
  }
  return payload;
};
goog.messaging.AbstractChannel.prototype.disposeInternal = function() {
  goog.base(this, "disposeInternal");
  delete this.logger;
  delete this.services_;
  delete this.defaultService_;
};
goog.provide("goog.net.xpc");
goog.provide("goog.net.xpc.CfgFields");
goog.provide("goog.net.xpc.ChannelStates");
goog.provide("goog.net.xpc.TransportNames");
goog.provide("goog.net.xpc.TransportTypes");
goog.provide("goog.net.xpc.UriCfgFields");
goog.require("goog.debug.Logger");
goog.net.xpc.TransportTypes = {NATIVE_MESSAGING:1, FRAME_ELEMENT_METHOD:2, IFRAME_RELAY:3, IFRAME_POLLING:4, FLASH:5, NIX:6};
goog.net.xpc.TransportNames = {1:"NativeMessagingTransport", 2:"FrameElementMethodTransport", 3:"IframeRelayTransport", 4:"IframePollingTransport", 5:"FlashTransport", 6:"NixTransport"};
goog.net.xpc.CfgFields = {CHANNEL_NAME:"cn", AUTH_TOKEN:"at", REMOTE_AUTH_TOKEN:"rat", PEER_URI:"pu", IFRAME_ID:"ifrid", TRANSPORT:"tp", LOCAL_RELAY_URI:"lru", PEER_RELAY_URI:"pru", LOCAL_POLL_URI:"lpu", PEER_POLL_URI:"ppu", PEER_HOSTNAME:"ph", ONE_SIDED_HANDSHAKE:"osh", ROLE:"role", NATIVE_TRANSPORT_PROTOCOL_VERSION:"nativeProtocolVersion"};
goog.net.xpc.UriCfgFields = [goog.net.xpc.CfgFields.PEER_URI, goog.net.xpc.CfgFields.LOCAL_RELAY_URI, goog.net.xpc.CfgFields.PEER_RELAY_URI, goog.net.xpc.CfgFields.LOCAL_POLL_URI, goog.net.xpc.CfgFields.PEER_POLL_URI];
goog.net.xpc.ChannelStates = {NOT_CONNECTED:1, CONNECTED:2, CLOSED:3};
goog.net.xpc.TRANSPORT_SERVICE_ = "tp";
goog.net.xpc.SETUP = "SETUP";
goog.net.xpc.SETUP_NTPV2 = "SETUP_NTPV2";
goog.net.xpc.SETUP_ACK_ = "SETUP_ACK";
goog.net.xpc.SETUP_ACK_NTPV2 = "SETUP_ACK_NTPV2";
goog.net.xpc.channels = {};
goog.net.xpc.getRandomString = function(length, opt_characters) {
  var chars = opt_characters || goog.net.xpc.randomStringCharacters_;
  var charsLength = chars.length;
  var s = "";
  while (length-- > 0) {
    s += chars.charAt(Math.floor(Math.random() * charsLength));
  }
  return s;
};
goog.net.xpc.randomStringCharacters_ = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
goog.net.xpc.logger = goog.debug.Logger.getLogger("goog.net.xpc");
goog.provide("goog.net.xpc.CrossPageChannelRole");
goog.net.xpc.CrossPageChannelRole = {OUTER:0, INNER:1};
goog.provide("goog.net.xpc.Transport");
goog.require("goog.Disposable");
goog.require("goog.dom");
goog.require("goog.net.xpc");
goog.net.xpc.Transport = function(opt_domHelper) {
  goog.Disposable.call(this);
  this.domHelper_ = opt_domHelper || goog.dom.getDomHelper();
};
goog.inherits(goog.net.xpc.Transport, goog.Disposable);
goog.net.xpc.Transport.prototype.transportType = 0;
goog.net.xpc.Transport.prototype.getType = function() {
  return this.transportType;
};
goog.net.xpc.Transport.prototype.getWindow = function() {
  return this.domHelper_.getWindow();
};
goog.net.xpc.Transport.prototype.getName = function() {
  return goog.net.xpc.TransportNames[this.transportType] || "";
};
goog.net.xpc.Transport.prototype.transportServiceHandler = goog.abstractMethod;
goog.net.xpc.Transport.prototype.connect = goog.abstractMethod;
goog.net.xpc.Transport.prototype.send = goog.abstractMethod;
goog.provide("goog.net.xpc.FrameElementMethodTransport");
goog.require("goog.net.xpc");
goog.require("goog.net.xpc.CrossPageChannelRole");
goog.require("goog.net.xpc.Transport");
goog.net.xpc.FrameElementMethodTransport = function(channel, opt_domHelper) {
  goog.base(this, opt_domHelper);
  this.channel_ = channel;
  this.queue_ = [];
  this.deliverQueuedCb_ = goog.bind(this.deliverQueued_, this);
};
goog.inherits(goog.net.xpc.FrameElementMethodTransport, goog.net.xpc.Transport);
goog.net.xpc.FrameElementMethodTransport.prototype.transportType = goog.net.xpc.TransportTypes.FRAME_ELEMENT_METHOD;
goog.net.xpc.FrameElementMethodTransport.prototype.recursive_ = false;
goog.net.xpc.FrameElementMethodTransport.prototype.timer_ = 0;
goog.net.xpc.FrameElementMethodTransport.outgoing_ = null;
goog.net.xpc.FrameElementMethodTransport.prototype.connect = function() {
  if (this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.OUTER) {
    this.iframeElm_ = this.channel_.getIframeElement();
    this.iframeElm_["XPC_toOuter"] = goog.bind(this.incoming_, this);
  } else {
    this.attemptSetup_();
  }
};
goog.net.xpc.FrameElementMethodTransport.prototype.attemptSetup_ = function() {
  var retry = true;
  try {
    if (!this.iframeElm_) {
      this.iframeElm_ = this.getWindow().frameElement;
    }
    if (this.iframeElm_ && this.iframeElm_["XPC_toOuter"]) {
      this.outgoing_ = this.iframeElm_["XPC_toOuter"];
      this.iframeElm_["XPC_toOuter"]["XPC_toInner"] = goog.bind(this.incoming_, this);
      retry = false;
      this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP_ACK_);
      this.channel_.notifyConnected();
    }
  } catch (e) {
    goog.net.xpc.logger.severe("exception caught while attempting setup: " + e);
  }
  if (retry) {
    if (!this.attemptSetupCb_) {
      this.attemptSetupCb_ = goog.bind(this.attemptSetup_, this);
    }
    this.getWindow().setTimeout(this.attemptSetupCb_, 100);
  }
};
goog.net.xpc.FrameElementMethodTransport.prototype.transportServiceHandler = function(payload) {
  if (this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.OUTER && (!this.channel_.isConnected() && payload == goog.net.xpc.SETUP_ACK_)) {
    this.outgoing_ = this.iframeElm_["XPC_toOuter"]["XPC_toInner"];
    this.channel_.notifyConnected();
  } else {
    throw Error("Got unexpected transport message.");
  }
};
goog.net.xpc.FrameElementMethodTransport.prototype.incoming_ = function(serviceName, payload) {
  if (!this.recursive_ && this.queue_.length == 0) {
    this.channel_.xpcDeliver(serviceName, payload);
  } else {
    this.queue_.push({serviceName:serviceName, payload:payload});
    if (this.queue_.length == 1) {
      this.timer_ = this.getWindow().setTimeout(this.deliverQueuedCb_, 1);
    }
  }
};
goog.net.xpc.FrameElementMethodTransport.prototype.deliverQueued_ = function() {
  while (this.queue_.length) {
    var msg = this.queue_.shift();
    this.channel_.xpcDeliver(msg.serviceName, msg.payload);
  }
};
goog.net.xpc.FrameElementMethodTransport.prototype.send = function(service, payload) {
  this.recursive_ = true;
  this.outgoing_(service, payload);
  this.recursive_ = false;
};
goog.net.xpc.FrameElementMethodTransport.prototype.disposeInternal = function() {
  goog.net.xpc.FrameElementMethodTransport.superClass_.disposeInternal.call(this);
  this.outgoing_ = null;
  this.iframeElm_ = null;
};
goog.provide("goog.net.xpc.IframePollingTransport");
goog.provide("goog.net.xpc.IframePollingTransport.Receiver");
goog.provide("goog.net.xpc.IframePollingTransport.Sender");
goog.require("goog.array");
goog.require("goog.dom");
goog.require("goog.net.xpc");
goog.require("goog.net.xpc.CrossPageChannelRole");
goog.require("goog.net.xpc.Transport");
goog.require("goog.userAgent");
goog.net.xpc.IframePollingTransport = function(channel, opt_domHelper) {
  goog.base(this, opt_domHelper);
  this.channel_ = channel;
  this.sendUri_ = this.channel_.getConfig()[goog.net.xpc.CfgFields.PEER_POLL_URI];
  this.rcvUri_ = this.channel_.getConfig()[goog.net.xpc.CfgFields.LOCAL_POLL_URI];
  this.sendQueue_ = [];
};
goog.inherits(goog.net.xpc.IframePollingTransport, goog.net.xpc.Transport);
goog.net.xpc.IframePollingTransport.prototype.pollsBeforeReconnect_ = 5;
goog.net.xpc.IframePollingTransport.prototype.transportType = goog.net.xpc.TransportTypes.IFRAME_POLLING;
goog.net.xpc.IframePollingTransport.prototype.sequence_ = 0;
goog.net.xpc.IframePollingTransport.prototype.waitForAck_ = false;
goog.net.xpc.IframePollingTransport.prototype.initialized_ = false;
goog.net.xpc.IframePollingTransport.prototype.reconnectFrame_ = null;
goog.net.xpc.IframePollingTransport.IFRAME_PREFIX = "googlexpc";
goog.net.xpc.IframePollingTransport.prototype.getMsgFrameName_ = function() {
  return goog.net.xpc.IframePollingTransport.IFRAME_PREFIX + "_" + this.channel_.name + "_msg";
};
goog.net.xpc.IframePollingTransport.prototype.getAckFrameName_ = function() {
  return goog.net.xpc.IframePollingTransport.IFRAME_PREFIX + "_" + this.channel_.name + "_ack";
};
goog.net.xpc.IframePollingTransport.prototype.isChannelAvailable = function() {
  return!this.isDisposed() && this.channel_.isPeerAvailable();
};
goog.net.xpc.IframePollingTransport.prototype.getPeerFrames_ = function() {
  try {
    if (this.isChannelAvailable()) {
      return this.channel_.getPeerWindowObject().frames || {};
    }
  } catch (e) {
    goog.net.xpc.logger.fine("error retrieving peer frames");
  }
  return{};
};
goog.net.xpc.IframePollingTransport.prototype.getPeerFrame_ = function(frameName) {
  return this.getPeerFrames_()[frameName];
};
goog.net.xpc.IframePollingTransport.prototype.connect = function() {
  if (!this.isChannelAvailable()) {
    return;
  }
  goog.net.xpc.logger.fine("transport connect called");
  if (!this.initialized_) {
    goog.net.xpc.logger.fine("initializing...");
    this.constructSenderFrames_();
    this.initialized_ = true;
  }
  this.checkForeignFramesReady_();
};
goog.net.xpc.IframePollingTransport.prototype.constructSenderFrames_ = function() {
  var name = this.getMsgFrameName_();
  this.msgIframeElm_ = this.constructSenderFrame_(name);
  this.msgWinObj_ = this.getWindow().frames[name];
  name = this.getAckFrameName_();
  this.ackIframeElm_ = this.constructSenderFrame_(name);
  this.ackWinObj_ = this.getWindow().frames[name];
};
goog.net.xpc.IframePollingTransport.prototype.constructSenderFrame_ = function(id) {
  goog.net.xpc.logger.finest("constructing sender frame: " + id);
  var ifr = goog.dom.createElement("iframe");
  var s = ifr.style;
  s.position = "absolute";
  s.top = "-10px";
  s.left = "10px";
  s.width = "1px";
  s.height = "1px";
  ifr.id = ifr.name = id;
  ifr.src = this.sendUri_ + "#INITIAL";
  this.getWindow().document.body.appendChild(ifr);
  return ifr;
};
goog.net.xpc.IframePollingTransport.prototype.maybeInnerPeerReconnect_ = function() {
  if (this.reconnectFrame_ || this.pollsBeforeReconnect_-- > 0) {
    return;
  }
  goog.net.xpc.logger.finest("Inner peer reconnect triggered.");
  this.channel_.name = goog.net.xpc.getRandomString(10);
  goog.net.xpc.logger.finest("switching channels: " + this.channel_.name);
  this.deconstructSenderFrames_();
  this.initialized_ = false;
  this.reconnectFrame_ = this.constructSenderFrame_(goog.net.xpc.IframePollingTransport.IFRAME_PREFIX + "_reconnect_" + this.channel_.name);
};
goog.net.xpc.IframePollingTransport.prototype.outerPeerReconnect_ = function() {
  goog.net.xpc.logger.finest("outerPeerReconnect called");
  var frames = this.getPeerFrames_();
  var length = frames.length;
  for (var i = 0;i < length;i++) {
    var frameName;
    try {
      if (frames[i] && frames[i].name) {
        frameName = frames[i].name;
      }
    } catch (e) {
    }
    if (!frameName) {
      continue;
    }
    var message = frameName.split("_");
    if (message.length == 3 && (message[0] == goog.net.xpc.IframePollingTransport.IFRAME_PREFIX && message[1] == "reconnect")) {
      this.channel_.name = message[2];
      this.deconstructSenderFrames_();
      this.initialized_ = false;
      break;
    }
  }
};
goog.net.xpc.IframePollingTransport.prototype.deconstructSenderFrames_ = function() {
  goog.net.xpc.logger.finest("deconstructSenderFrames called");
  if (this.msgIframeElm_) {
    this.msgIframeElm_.parentNode.removeChild(this.msgIframeElm_);
    this.msgIframeElm_ = null;
    this.msgWinObj_ = null;
  }
  if (this.ackIframeElm_) {
    this.ackIframeElm_.parentNode.removeChild(this.ackIframeElm_);
    this.ackIframeElm_ = null;
    this.ackWinObj_ = null;
  }
};
goog.net.xpc.IframePollingTransport.prototype.checkForeignFramesReady_ = function() {
  if (!(this.isRcvFrameReady_(this.getMsgFrameName_()) && this.isRcvFrameReady_(this.getAckFrameName_()))) {
    goog.net.xpc.logger.finest("foreign frames not (yet) present");
    if (this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.INNER) {
      this.maybeInnerPeerReconnect_();
    } else {
      if (this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.OUTER) {
        this.outerPeerReconnect_();
      }
    }
    this.getWindow().setTimeout(goog.bind(this.connect, this), 100);
  } else {
    goog.net.xpc.logger.fine("foreign frames present");
    this.msgReceiver_ = new goog.net.xpc.IframePollingTransport.Receiver(this, this.getPeerFrame_(this.getMsgFrameName_()), goog.bind(this.processIncomingMsg, this));
    this.ackReceiver_ = new goog.net.xpc.IframePollingTransport.Receiver(this, this.getPeerFrame_(this.getAckFrameName_()), goog.bind(this.processIncomingAck, this));
    this.checkLocalFramesPresent_();
  }
};
goog.net.xpc.IframePollingTransport.prototype.isRcvFrameReady_ = function(frameName) {
  goog.net.xpc.logger.finest("checking for receive frame: " + frameName);
  try {
    var winObj = this.getPeerFrame_(frameName);
    if (!winObj || winObj.location.href.indexOf(this.rcvUri_) != 0) {
      return false;
    }
  } catch (e) {
    return false;
  }
  return true;
};
goog.net.xpc.IframePollingTransport.prototype.checkLocalFramesPresent_ = function() {
  var frames = this.getPeerFrames_();
  if (!(frames[this.getAckFrameName_()] && frames[this.getMsgFrameName_()])) {
    if (!this.checkLocalFramesPresentCb_) {
      this.checkLocalFramesPresentCb_ = goog.bind(this.checkLocalFramesPresent_, this);
    }
    this.getWindow().setTimeout(this.checkLocalFramesPresentCb_, 100);
    goog.net.xpc.logger.fine("local frames not (yet) present");
  } else {
    this.msgSender_ = new goog.net.xpc.IframePollingTransport.Sender(this.sendUri_, this.msgWinObj_);
    this.ackSender_ = new goog.net.xpc.IframePollingTransport.Sender(this.sendUri_, this.ackWinObj_);
    goog.net.xpc.logger.fine("local frames ready");
    this.getWindow().setTimeout(goog.bind(function() {
      this.msgSender_.send(goog.net.xpc.SETUP);
      this.sentConnectionSetup_ = true;
      this.waitForAck_ = true;
      goog.net.xpc.logger.fine("SETUP sent");
    }, this), 100);
  }
};
goog.net.xpc.IframePollingTransport.prototype.checkIfConnected_ = function() {
  if (this.sentConnectionSetupAck_ && this.rcvdConnectionSetupAck_) {
    this.channel_.notifyConnected();
    if (this.deliveryQueue_) {
      goog.net.xpc.logger.fine("delivering queued messages " + "(" + this.deliveryQueue_.length + ")");
      for (var i = 0, m;i < this.deliveryQueue_.length;i++) {
        m = this.deliveryQueue_[i];
        this.channel_.xpcDeliver(m.service, m.payload);
      }
      delete this.deliveryQueue_;
    }
  } else {
    goog.net.xpc.logger.finest("checking if connected: " + "ack sent:" + this.sentConnectionSetupAck_ + ", ack rcvd: " + this.rcvdConnectionSetupAck_);
  }
};
goog.net.xpc.IframePollingTransport.prototype.processIncomingMsg = function(raw) {
  goog.net.xpc.logger.finest("msg received: " + raw);
  if (raw == goog.net.xpc.SETUP) {
    if (!this.ackSender_) {
      return;
    }
    this.ackSender_.send(goog.net.xpc.SETUP_ACK_);
    goog.net.xpc.logger.finest("SETUP_ACK sent");
    this.sentConnectionSetupAck_ = true;
    this.checkIfConnected_();
  } else {
    if (this.channel_.isConnected() || this.sentConnectionSetupAck_) {
      var pos = raw.indexOf("|");
      var head = raw.substring(0, pos);
      var frame = raw.substring(pos + 1);
      pos = head.indexOf(",");
      if (pos == -1) {
        var seq = head;
        this.ackSender_.send("ACK:" + seq);
        this.deliverPayload_(frame);
      } else {
        var seq = head.substring(0, pos);
        this.ackSender_.send("ACK:" + seq);
        var partInfo = head.substring(pos + 1).split("/");
        var part0 = parseInt(partInfo[0], 10);
        var part1 = parseInt(partInfo[1], 10);
        if (part0 == 1) {
          this.parts_ = [];
        }
        this.parts_.push(frame);
        if (part0 == part1) {
          this.deliverPayload_(this.parts_.join(""));
          delete this.parts_;
        }
      }
    } else {
      goog.net.xpc.logger.warning("received msg, but channel is not connected");
    }
  }
};
goog.net.xpc.IframePollingTransport.prototype.processIncomingAck = function(msgStr) {
  goog.net.xpc.logger.finest("ack received: " + msgStr);
  if (msgStr == goog.net.xpc.SETUP_ACK_) {
    this.waitForAck_ = false;
    this.rcvdConnectionSetupAck_ = true;
    this.checkIfConnected_();
  } else {
    if (this.channel_.isConnected()) {
      if (!this.waitForAck_) {
        goog.net.xpc.logger.warning("got unexpected ack");
        return;
      }
      var seq = parseInt(msgStr.split(":")[1], 10);
      if (seq == this.sequence_) {
        this.waitForAck_ = false;
        this.sendNextFrame_();
      } else {
        goog.net.xpc.logger.warning("got ack with wrong sequence");
      }
    } else {
      goog.net.xpc.logger.warning("received ack, but channel not connected");
    }
  }
};
goog.net.xpc.IframePollingTransport.prototype.sendNextFrame_ = function() {
  if (this.waitForAck_ || !this.sendQueue_.length) {
    return;
  }
  var s = this.sendQueue_.shift();
  ++this.sequence_;
  this.msgSender_.send(this.sequence_ + s);
  goog.net.xpc.logger.finest("msg sent: " + this.sequence_ + s);
  this.waitForAck_ = true;
};
goog.net.xpc.IframePollingTransport.prototype.deliverPayload_ = function(s) {
  var pos = s.indexOf(":");
  var service = s.substr(0, pos);
  var payload = s.substring(pos + 1);
  if (!this.channel_.isConnected()) {
    (this.deliveryQueue_ || (this.deliveryQueue_ = [])).push({service:service, payload:payload});
    goog.net.xpc.logger.finest("queued delivery");
  } else {
    this.channel_.xpcDeliver(service, payload);
  }
};
goog.net.xpc.IframePollingTransport.prototype.MAX_FRAME_LENGTH_ = 3800;
goog.net.xpc.IframePollingTransport.prototype.send = function(service, payload) {
  var frame = service + ":" + payload;
  if (!goog.userAgent.IE || payload.length <= this.MAX_FRAME_LENGTH_) {
    this.sendQueue_.push("|" + frame);
  } else {
    var l = payload.length;
    var num = Math.ceil(l / this.MAX_FRAME_LENGTH_);
    var pos = 0;
    var i = 1;
    while (pos < l) {
      this.sendQueue_.push("," + i + "/" + num + "|" + frame.substr(pos, this.MAX_FRAME_LENGTH_));
      i++;
      pos += this.MAX_FRAME_LENGTH_;
    }
  }
  this.sendNextFrame_();
};
goog.net.xpc.IframePollingTransport.prototype.disposeInternal = function() {
  goog.base(this, "disposeInternal");
  var receivers = goog.net.xpc.IframePollingTransport.receivers_;
  goog.array.remove(receivers, this.msgReceiver_);
  goog.array.remove(receivers, this.ackReceiver_);
  this.msgReceiver_ = this.ackReceiver_ = null;
  goog.dom.removeNode(this.msgIframeElm_);
  goog.dom.removeNode(this.ackIframeElm_);
  this.msgIframeElm_ = this.ackIframeElm_ = null;
  this.msgWinObj_ = this.ackWinObj_ = null;
};
goog.net.xpc.IframePollingTransport.receivers_ = [];
goog.net.xpc.IframePollingTransport.TIME_POLL_SHORT_ = 10;
goog.net.xpc.IframePollingTransport.TIME_POLL_LONG_ = 100;
goog.net.xpc.IframePollingTransport.TIME_SHORT_POLL_AFTER_ACTIVITY_ = 1E3;
goog.net.xpc.IframePollingTransport.receive_ = function() {
  var receivers = goog.net.xpc.IframePollingTransport.receivers_;
  var receiver;
  var rcvd = false;
  try {
    for (var i = 0;receiver = receivers[i];i++) {
      rcvd = rcvd || receiver.receive();
    }
  } catch (e) {
    goog.net.xpc.logger.info("receive_() failed: " + e);
    receiver.transport_.channel_.notifyTransportError();
    if (!receivers.length) {
      return;
    }
  }
  var now = goog.now();
  if (rcvd) {
    goog.net.xpc.IframePollingTransport.lastActivity_ = now;
  }
  var t = now - goog.net.xpc.IframePollingTransport.lastActivity_ < goog.net.xpc.IframePollingTransport.TIME_SHORT_POLL_AFTER_ACTIVITY_ ? goog.net.xpc.IframePollingTransport.TIME_POLL_SHORT_ : goog.net.xpc.IframePollingTransport.TIME_POLL_LONG_;
  goog.net.xpc.IframePollingTransport.rcvTimer_ = window.setTimeout(goog.net.xpc.IframePollingTransport.receiveCb_, t);
};
goog.net.xpc.IframePollingTransport.receiveCb_ = goog.bind(goog.net.xpc.IframePollingTransport.receive_, goog.net.xpc.IframePollingTransport);
goog.net.xpc.IframePollingTransport.startRcvTimer_ = function() {
  goog.net.xpc.logger.fine("starting receive-timer");
  goog.net.xpc.IframePollingTransport.lastActivity_ = goog.now();
  if (goog.net.xpc.IframePollingTransport.rcvTimer_) {
    window.clearTimeout(goog.net.xpc.IframePollingTransport.rcvTimer_);
  }
  goog.net.xpc.IframePollingTransport.rcvTimer_ = window.setTimeout(goog.net.xpc.IframePollingTransport.receiveCb_, goog.net.xpc.IframePollingTransport.TIME_POLL_SHORT_);
};
goog.net.xpc.IframePollingTransport.Sender = function(url, windowObj) {
  this.sendUri_ = url;
  this.sendFrame_ = windowObj;
  this.cycle_ = 0;
};
goog.net.xpc.IframePollingTransport.Sender.prototype.send = function(payload) {
  this.cycle_ = ++this.cycle_ % 2;
  var url = this.sendUri_ + "#" + this.cycle_ + encodeURIComponent(payload);
  try {
    if (goog.userAgent.WEBKIT) {
      this.sendFrame_.location.href = url;
    } else {
      this.sendFrame_.location.replace(url);
    }
  } catch (e) {
    goog.net.xpc.logger.severe("sending failed", e);
  }
  goog.net.xpc.IframePollingTransport.startRcvTimer_();
};
goog.net.xpc.IframePollingTransport.Receiver = function(transport, windowObj, callback) {
  this.transport_ = transport;
  this.rcvFrame_ = windowObj;
  this.cb_ = callback;
  this.currentLoc_ = this.rcvFrame_.location.href.split("#")[0] + "#INITIAL";
  goog.net.xpc.IframePollingTransport.receivers_.push(this);
  goog.net.xpc.IframePollingTransport.startRcvTimer_();
};
goog.net.xpc.IframePollingTransport.Receiver.prototype.receive = function() {
  var loc = this.rcvFrame_.location.href;
  if (loc != this.currentLoc_) {
    this.currentLoc_ = loc;
    var payload = loc.split("#")[1];
    if (payload) {
      payload = payload.substr(1);
      this.cb_(decodeURIComponent(payload));
    }
    return true;
  } else {
    return false;
  }
};
goog.provide("goog.net.xpc.IframeRelayTransport");
goog.require("goog.dom");
goog.require("goog.events");
goog.require("goog.net.xpc");
goog.require("goog.net.xpc.Transport");
goog.require("goog.userAgent");
goog.net.xpc.IframeRelayTransport = function(channel, opt_domHelper) {
  goog.base(this, opt_domHelper);
  this.channel_ = channel;
  this.peerRelayUri_ = this.channel_.getConfig()[goog.net.xpc.CfgFields.PEER_RELAY_URI];
  this.peerIframeId_ = this.channel_.getConfig()[goog.net.xpc.CfgFields.IFRAME_ID];
  if (goog.userAgent.WEBKIT) {
    goog.net.xpc.IframeRelayTransport.startCleanupTimer_();
  }
};
goog.inherits(goog.net.xpc.IframeRelayTransport, goog.net.xpc.Transport);
if (goog.userAgent.WEBKIT) {
  goog.net.xpc.IframeRelayTransport.iframeRefs_ = [];
  goog.net.xpc.IframeRelayTransport.CLEANUP_INTERVAL_ = 1E3;
  goog.net.xpc.IframeRelayTransport.IFRAME_MAX_AGE_ = 3E3;
  goog.net.xpc.IframeRelayTransport.cleanupTimer_ = 0;
  goog.net.xpc.IframeRelayTransport.startCleanupTimer_ = function() {
    if (!goog.net.xpc.IframeRelayTransport.cleanupTimer_) {
      goog.net.xpc.IframeRelayTransport.cleanupTimer_ = window.setTimeout(function() {
        goog.net.xpc.IframeRelayTransport.cleanup_();
      }, goog.net.xpc.IframeRelayTransport.CLEANUP_INTERVAL_);
    }
  };
  goog.net.xpc.IframeRelayTransport.cleanup_ = function(opt_maxAge) {
    var now = goog.now();
    var maxAge = opt_maxAge || goog.net.xpc.IframeRelayTransport.IFRAME_MAX_AGE_;
    while (goog.net.xpc.IframeRelayTransport.iframeRefs_.length && now - goog.net.xpc.IframeRelayTransport.iframeRefs_[0].timestamp >= maxAge) {
      var ifr = goog.net.xpc.IframeRelayTransport.iframeRefs_.shift().iframeElement;
      goog.dom.removeNode(ifr);
      goog.net.xpc.logger.finest("iframe removed");
    }
    goog.net.xpc.IframeRelayTransport.cleanupTimer_ = window.setTimeout(goog.net.xpc.IframeRelayTransport.cleanupCb_, goog.net.xpc.IframeRelayTransport.CLEANUP_INTERVAL_);
  };
  goog.net.xpc.IframeRelayTransport.cleanupCb_ = function() {
    goog.net.xpc.IframeRelayTransport.cleanup_();
  };
}
goog.net.xpc.IframeRelayTransport.IE_PAYLOAD_MAX_SIZE_ = 1800;
goog.net.xpc.IframeRelayTransport.FragmentInfo;
goog.net.xpc.IframeRelayTransport.fragmentMap_ = {};
goog.net.xpc.IframeRelayTransport.prototype.transportType = goog.net.xpc.TransportTypes.IFRAME_RELAY;
goog.net.xpc.IframeRelayTransport.prototype.connect = function() {
  if (!this.getWindow()["xpcRelay"]) {
    this.getWindow()["xpcRelay"] = goog.net.xpc.IframeRelayTransport.receiveMessage_;
  }
  this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP);
};
goog.net.xpc.IframeRelayTransport.receiveMessage_ = function(channelName, frame) {
  var pos = frame.indexOf(":");
  var header = frame.substr(0, pos);
  var payload = frame.substr(pos + 1);
  if (!goog.userAgent.IE || (pos = header.indexOf("|")) == -1) {
    var service = header
  } else {
    var service = header.substr(0, pos);
    var fragmentIdStr = header.substr(pos + 1);
    pos = fragmentIdStr.indexOf("+");
    var messageIdStr = fragmentIdStr.substr(0, pos);
    var fragmentNum = parseInt(fragmentIdStr.substr(pos + 1), 10);
    var fragmentInfo = goog.net.xpc.IframeRelayTransport.fragmentMap_[messageIdStr];
    if (!fragmentInfo) {
      fragmentInfo = goog.net.xpc.IframeRelayTransport.fragmentMap_[messageIdStr] = {fragments:[], received:0, expected:0};
    }
    if (goog.string.contains(fragmentIdStr, "++")) {
      fragmentInfo.expected = fragmentNum + 1;
    }
    fragmentInfo.fragments[fragmentNum] = payload;
    fragmentInfo.received++;
    if (fragmentInfo.received != fragmentInfo.expected) {
      return;
    }
    payload = fragmentInfo.fragments.join("");
    delete goog.net.xpc.IframeRelayTransport.fragmentMap_[messageIdStr];
  }
  goog.net.xpc.channels[channelName].xpcDeliver(service, decodeURIComponent(payload));
};
goog.net.xpc.IframeRelayTransport.prototype.transportServiceHandler = function(payload) {
  if (payload == goog.net.xpc.SETUP) {
    this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP_ACK_);
    this.channel_.notifyConnected();
  } else {
    if (payload == goog.net.xpc.SETUP_ACK_) {
      this.channel_.notifyConnected();
    }
  }
};
goog.net.xpc.IframeRelayTransport.prototype.send = function(service, payload) {
  var encodedPayload = encodeURIComponent(payload);
  var encodedLen = encodedPayload.length;
  var maxSize = goog.net.xpc.IframeRelayTransport.IE_PAYLOAD_MAX_SIZE_;
  if (goog.userAgent.IE && encodedLen > maxSize) {
    var messageIdStr = goog.string.getRandomString();
    for (var startIndex = 0, fragmentNum = 0;startIndex < encodedLen;fragmentNum++) {
      var payloadFragment = encodedPayload.substr(startIndex, maxSize);
      startIndex += maxSize;
      var fragmentIdStr = messageIdStr + (startIndex >= encodedLen ? "++" : "+") + fragmentNum;
      this.send_(service, payloadFragment, fragmentIdStr);
    }
  } else {
    this.send_(service, encodedPayload);
  }
};
goog.net.xpc.IframeRelayTransport.prototype.send_ = function(service, encodedPayload, opt_fragmentIdStr) {
  if (goog.userAgent.IE) {
    var div = this.getWindow().document.createElement("div");
    div.innerHTML = '\x3ciframe onload\x3d"this.xpcOnload()"\x3e\x3c/iframe\x3e';
    var ifr = div.childNodes[0];
    div = null;
    ifr["xpcOnload"] = goog.net.xpc.IframeRelayTransport.iframeLoadHandler_;
  } else {
    var ifr = this.getWindow().document.createElement("iframe");
    if (goog.userAgent.WEBKIT) {
      goog.net.xpc.IframeRelayTransport.iframeRefs_.push({timestamp:goog.now(), iframeElement:ifr});
    } else {
      goog.events.listen(ifr, "load", goog.net.xpc.IframeRelayTransport.iframeLoadHandler_);
    }
  }
  var style = ifr.style;
  style.visibility = "hidden";
  style.width = ifr.style.height = "0px";
  style.position = "absolute";
  var url = this.peerRelayUri_;
  url += "#" + this.channel_.name;
  if (this.peerIframeId_) {
    url += "," + this.peerIframeId_;
  }
  url += "|" + service;
  if (opt_fragmentIdStr) {
    url += "|" + opt_fragmentIdStr;
  }
  url += ":" + encodedPayload;
  ifr.src = url;
  this.getWindow().document.body.appendChild(ifr);
  goog.net.xpc.logger.finest("msg sent: " + url);
};
goog.net.xpc.IframeRelayTransport.iframeLoadHandler_ = function() {
  goog.net.xpc.logger.finest("iframe-load");
  goog.dom.removeNode(this);
  this.xpcOnload = null;
};
goog.net.xpc.IframeRelayTransport.prototype.disposeInternal = function() {
  goog.base(this, "disposeInternal");
  if (goog.userAgent.WEBKIT) {
    goog.net.xpc.IframeRelayTransport.cleanup_(0);
  }
};
goog.provide("goog.net.xpc.NativeMessagingTransport");
goog.require("goog.Timer");
goog.require("goog.asserts");
goog.require("goog.async.Deferred");
goog.require("goog.events");
goog.require("goog.events.EventHandler");
goog.require("goog.net.xpc");
goog.require("goog.net.xpc.CrossPageChannelRole");
goog.require("goog.net.xpc.Transport");
goog.net.xpc.NativeMessagingTransport = function(channel, peerHostname, opt_domHelper, opt_oneSidedHandshake, opt_protocolVersion) {
  goog.base(this, opt_domHelper);
  this.channel_ = channel;
  this.protocolVersion_ = opt_protocolVersion || 2;
  goog.asserts.assert(this.protocolVersion_ >= 1);
  goog.asserts.assert(this.protocolVersion_ <= 2);
  this.peerHostname_ = peerHostname || "*";
  this.eventHandler_ = new goog.events.EventHandler(this);
  this.maybeAttemptToConnectTimer_ = new goog.Timer(100, this.getWindow());
  this.oneSidedHandshake_ = !!opt_oneSidedHandshake;
  this.setupAckReceived_ = new goog.async.Deferred;
  this.setupAckSent_ = new goog.async.Deferred;
  this.connected_ = new goog.async.Deferred;
  this.endpointId_ = goog.net.xpc.getRandomString(10);
  this.peerEndpointId_ = null;
  if (this.oneSidedHandshake_) {
    if (this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.INNER) {
      this.connected_.awaitDeferred(this.setupAckReceived_);
    } else {
      this.connected_.awaitDeferred(this.setupAckSent_);
    }
  } else {
    this.connected_.awaitDeferred(this.setupAckReceived_);
    if (this.protocolVersion_ == 2) {
      this.connected_.awaitDeferred(this.setupAckSent_);
    }
  }
  this.connected_.addCallback(this.notifyConnected_, this);
  this.connected_.callback(true);
  this.eventHandler_.listen(this.maybeAttemptToConnectTimer_, goog.Timer.TICK, this.maybeAttemptToConnect_);
  goog.net.xpc.logger.info("NativeMessagingTransport created.  " + "protocolVersion\x3d" + this.protocolVersion_ + ", oneSidedHandshake\x3d" + this.oneSidedHandshake_ + ", role\x3d" + this.channel_.getRole());
};
goog.inherits(goog.net.xpc.NativeMessagingTransport, goog.net.xpc.Transport);
goog.net.xpc.NativeMessagingTransport.CONNECTION_DELAY_MS_ = 200;
goog.net.xpc.NativeMessagingTransport.prototype.peerProtocolVersion_ = null;
goog.net.xpc.NativeMessagingTransport.prototype.initialized_ = false;
goog.net.xpc.NativeMessagingTransport.prototype.transportType = goog.net.xpc.TransportTypes.NATIVE_MESSAGING;
goog.net.xpc.NativeMessagingTransport.MESSAGE_DELIMITER_ = ",";
goog.net.xpc.NativeMessagingTransport.activeCount_ = {};
goog.net.xpc.NativeMessagingTransport.sendTimerId_ = 0;
goog.net.xpc.NativeMessagingTransport.prototype.couldPeerVersionBe_ = function(version) {
  return this.peerProtocolVersion_ == null || this.peerProtocolVersion_ == version;
};
goog.net.xpc.NativeMessagingTransport.initialize_ = function(listenWindow) {
  var uid = goog.getUid(listenWindow);
  var value = goog.net.xpc.NativeMessagingTransport.activeCount_[uid];
  if (!goog.isNumber(value)) {
    value = 0;
  }
  if (value == 0) {
    goog.events.listen(listenWindow.postMessage ? listenWindow : listenWindow.document, "message", goog.net.xpc.NativeMessagingTransport.messageReceived_, false, goog.net.xpc.NativeMessagingTransport);
  }
  goog.net.xpc.NativeMessagingTransport.activeCount_[uid] = value + 1;
};
goog.net.xpc.NativeMessagingTransport.messageReceived_ = function(msgEvt) {
  var data = msgEvt.getBrowserEvent().data;
  if (!goog.isString(data)) {
    return false;
  }
  var headDelim = data.indexOf("|");
  var serviceDelim = data.indexOf(":");
  if (headDelim == -1 || serviceDelim == -1) {
    return false;
  }
  var channelName = data.substring(0, headDelim);
  var service = data.substring(headDelim + 1, serviceDelim);
  var payload = data.substring(serviceDelim + 1);
  goog.net.xpc.logger.fine("messageReceived: channel\x3d" + channelName + ", service\x3d" + service + ", payload\x3d" + payload);
  var channel = goog.net.xpc.channels[channelName];
  if (channel) {
    channel.xpcDeliver(service, payload, msgEvt.getBrowserEvent().origin);
    return true;
  }
  var transportMessageType = goog.net.xpc.NativeMessagingTransport.parseTransportPayload_(payload)[0];
  for (var staleChannelName in goog.net.xpc.channels) {
    var staleChannel = goog.net.xpc.channels[staleChannelName];
    if (staleChannel.getRole() == goog.net.xpc.CrossPageChannelRole.INNER && (!staleChannel.isConnected() && (service == goog.net.xpc.TRANSPORT_SERVICE_ && (transportMessageType == goog.net.xpc.SETUP || transportMessageType == goog.net.xpc.SETUP_NTPV2)))) {
      goog.net.xpc.logger.fine("changing channel name to " + channelName);
      staleChannel.name = channelName;
      delete goog.net.xpc.channels[staleChannelName];
      goog.net.xpc.channels[channelName] = staleChannel;
      staleChannel.xpcDeliver(service, payload);
      return true;
    }
  }
  goog.net.xpc.logger.info('channel name mismatch; message ignored"');
  return false;
};
goog.net.xpc.NativeMessagingTransport.prototype.transportServiceHandler = function(payload) {
  var transportParts = goog.net.xpc.NativeMessagingTransport.parseTransportPayload_(payload);
  var transportMessageType = transportParts[0];
  var peerEndpointId = transportParts[1];
  switch(transportMessageType) {
    case goog.net.xpc.SETUP_ACK_:
      this.setPeerProtocolVersion_(1);
      if (!this.setupAckReceived_.hasFired()) {
        this.setupAckReceived_.callback(true);
      }
      break;
    case goog.net.xpc.SETUP_ACK_NTPV2:
      if (this.protocolVersion_ == 2) {
        this.setPeerProtocolVersion_(2);
        if (!this.setupAckReceived_.hasFired()) {
          this.setupAckReceived_.callback(true);
        }
      }
      break;
    case goog.net.xpc.SETUP:
      this.setPeerProtocolVersion_(1);
      this.sendSetupAckMessage_(1);
      break;
    case goog.net.xpc.SETUP_NTPV2:
      if (this.protocolVersion_ == 2) {
        var prevPeerProtocolVersion = this.peerProtocolVersion_;
        this.setPeerProtocolVersion_(2);
        this.sendSetupAckMessage_(2);
        if ((prevPeerProtocolVersion == 1 || this.peerEndpointId_ != null) && this.peerEndpointId_ != peerEndpointId) {
          goog.net.xpc.logger.info("Sending SETUP and changing peer ID to: " + peerEndpointId);
          this.sendSetupMessage_();
        }
        this.peerEndpointId_ = peerEndpointId;
      }
      break;
  }
};
goog.net.xpc.NativeMessagingTransport.prototype.sendSetupMessage_ = function() {
  goog.asserts.assert(!(this.protocolVersion_ == 1 && this.peerProtocolVersion_ == 2));
  if (this.protocolVersion_ == 2 && this.couldPeerVersionBe_(2)) {
    var payload = goog.net.xpc.SETUP_NTPV2;
    payload += goog.net.xpc.NativeMessagingTransport.MESSAGE_DELIMITER_;
    payload += this.endpointId_;
    this.send(goog.net.xpc.TRANSPORT_SERVICE_, payload);
  }
  if (this.couldPeerVersionBe_(1)) {
    this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP);
  }
};
goog.net.xpc.NativeMessagingTransport.prototype.sendSetupAckMessage_ = function(protocolVersion) {
  goog.asserts.assert(this.protocolVersion_ != 1 || protocolVersion != 2, "Shouldn't try to send a v2 setup ack in v1 mode.");
  if (this.protocolVersion_ == 2 && (this.couldPeerVersionBe_(2) && protocolVersion == 2)) {
    this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP_ACK_NTPV2);
  } else {
    if (this.couldPeerVersionBe_(1) && protocolVersion == 1) {
      this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP_ACK_);
    } else {
      return;
    }
  }
  if (!this.setupAckSent_.hasFired()) {
    this.setupAckSent_.callback(true);
  }
};
goog.net.xpc.NativeMessagingTransport.prototype.setPeerProtocolVersion_ = function(version) {
  if (version > this.peerProtocolVersion_) {
    this.peerProtocolVersion_ = version;
  }
  if (this.peerProtocolVersion_ == 1) {
    if (!this.setupAckSent_.hasFired() && !this.oneSidedHandshake_) {
      this.setupAckSent_.callback(true);
    }
    this.peerEndpointId_ = null;
  }
};
goog.net.xpc.NativeMessagingTransport.prototype.connect = function() {
  goog.net.xpc.NativeMessagingTransport.initialize_(this.getWindow());
  this.initialized_ = true;
  this.maybeAttemptToConnect_();
};
goog.net.xpc.NativeMessagingTransport.prototype.maybeAttemptToConnect_ = function() {
  var outerFrame = this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.OUTER;
  if (this.oneSidedHandshake_ && outerFrame || (this.channel_.isConnected() || this.isDisposed())) {
    this.maybeAttemptToConnectTimer_.stop();
    return;
  }
  this.maybeAttemptToConnectTimer_.start();
  this.sendSetupMessage_();
};
goog.net.xpc.NativeMessagingTransport.prototype.send = function(service, payload) {
  var win = this.channel_.getPeerWindowObject();
  if (!win) {
    goog.net.xpc.logger.fine("send(): window not ready");
    return;
  }
  this.send = function(service, payload) {
    var transport = this;
    var channelName = this.channel_.name;
    var sendFunctor = function() {
      transport.sendTimerId_ = 0;
      try {
        var obj = win.postMessage ? win : win.document;
        if (!obj.postMessage) {
          goog.net.xpc.logger.warning("Peer window had no postMessage " + "function.");
          return;
        }
        obj.postMessage(channelName + "|" + service + ":" + payload, transport.peerHostname_);
        goog.net.xpc.logger.fine("send(): service\x3d" + service + " payload\x3d" + payload + " to hostname\x3d" + transport.peerHostname_);
      } catch (error) {
        goog.net.xpc.logger.warning("Error performing postMessage, ignoring.", error);
      }
    };
    this.sendTimerId_ = goog.Timer.callOnce(sendFunctor, 0);
  };
  this.send(service, payload);
};
goog.net.xpc.NativeMessagingTransport.prototype.notifyConnected_ = function() {
  var delay = this.protocolVersion_ == 1 || this.peerProtocolVersion_ == 1 ? goog.net.xpc.NativeMessagingTransport.CONNECTION_DELAY_MS_ : undefined;
  this.channel_.notifyConnected(delay);
};
goog.net.xpc.NativeMessagingTransport.prototype.disposeInternal = function() {
  if (this.initialized_) {
    var listenWindow = this.getWindow();
    var uid = goog.getUid(listenWindow);
    var value = goog.net.xpc.NativeMessagingTransport.activeCount_[uid];
    goog.net.xpc.NativeMessagingTransport.activeCount_[uid] = value - 1;
    if (value == 1) {
      goog.events.unlisten(listenWindow.postMessage ? listenWindow : listenWindow.document, "message", goog.net.xpc.NativeMessagingTransport.messageReceived_, false, goog.net.xpc.NativeMessagingTransport);
    }
  }
  if (this.sendTimerId_) {
    goog.Timer.clear(this.sendTimerId_);
    this.sendTimerId_ = 0;
  }
  goog.dispose(this.eventHandler_);
  delete this.eventHandler_;
  goog.dispose(this.maybeAttemptToConnectTimer_);
  delete this.maybeAttemptToConnectTimer_;
  this.setupAckReceived_.cancel();
  delete this.setupAckReceived_;
  this.setupAckSent_.cancel();
  delete this.setupAckSent_;
  this.connected_.cancel();
  delete this.connected_;
  delete this.send;
  goog.base(this, "disposeInternal");
};
goog.net.xpc.NativeMessagingTransport.parseTransportPayload_ = function(payload) {
  var transportParts = (payload.split(goog.net.xpc.NativeMessagingTransport.MESSAGE_DELIMITER_));
  transportParts[1] = transportParts[1] || null;
  return transportParts;
};
goog.provide("goog.net.xpc.NixTransport");
goog.require("goog.net.xpc");
goog.require("goog.net.xpc.CrossPageChannelRole");
goog.require("goog.net.xpc.Transport");
goog.require("goog.reflect");
goog.net.xpc.NixTransport = function(channel, opt_domHelper) {
  goog.base(this, opt_domHelper);
  this.channel_ = channel;
  this.authToken_ = channel[goog.net.xpc.CfgFields.AUTH_TOKEN] || "";
  this.remoteAuthToken_ = channel[goog.net.xpc.CfgFields.REMOTE_AUTH_TOKEN] || "";
  goog.net.xpc.NixTransport.conductGlobalSetup_(this.getWindow());
  this[goog.net.xpc.NixTransport.NIX_HANDLE_MESSAGE] = this.handleMessage_;
  this[goog.net.xpc.NixTransport.NIX_CREATE_CHANNEL] = this.createChannel_;
};
goog.inherits(goog.net.xpc.NixTransport, goog.net.xpc.Transport);
goog.net.xpc.NixTransport.NIX_WRAPPER = "GCXPC____NIXVBS_wrapper";
goog.net.xpc.NixTransport.NIX_GET_WRAPPER = "GCXPC____NIXVBS_get_wrapper";
goog.net.xpc.NixTransport.NIX_HANDLE_MESSAGE = "GCXPC____NIXJS_handle_message";
goog.net.xpc.NixTransport.NIX_CREATE_CHANNEL = "GCXPC____NIXJS_create_channel";
goog.net.xpc.NixTransport.NIX_ID_FIELD = "GCXPC____NIXVBS_container";
goog.net.xpc.NixTransport.isNixSupported = function() {
  var isSupported = false;
  try {
    var oldOpener = window.opener;
    window.opener = ({});
    isSupported = goog.reflect.canAccessProperty(window, "opener");
    window.opener = oldOpener;
  } catch (e) {
  }
  return isSupported;
};
goog.net.xpc.NixTransport.conductGlobalSetup_ = function(listenWindow) {
  if (listenWindow["nix_setup_complete"]) {
    return;
  }
  var vbscript = "Class " + goog.net.xpc.NixTransport.NIX_WRAPPER + "\n " + "Private m_Transport\n" + "Private m_Auth\n" + "Public Sub SetTransport(transport)\n" + "If isEmpty(m_Transport) Then\n" + "Set m_Transport \x3d transport\n" + "End If\n" + "End Sub\n" + "Public Sub SetAuth(auth)\n" + "If isEmpty(m_Auth) Then\n" + "m_Auth \x3d auth\n" + "End If\n" + "End Sub\n" + "Public Function GetAuthToken()\n " + "GetAuthToken \x3d m_Auth\n" + "End Function\n" + "Public Sub SendMessage(service, payload)\n " + 
  "Call m_Transport." + goog.net.xpc.NixTransport.NIX_HANDLE_MESSAGE + "(service, payload)\n" + "End Sub\n" + "Public Sub CreateChannel(channel)\n " + "Call m_Transport." + goog.net.xpc.NixTransport.NIX_CREATE_CHANNEL + "(channel)\n" + "End Sub\n" + "Public Sub " + goog.net.xpc.NixTransport.NIX_ID_FIELD + "()\n " + "End Sub\n" + "End Class\n " + "Function " + goog.net.xpc.NixTransport.NIX_GET_WRAPPER + "(transport, auth)\n" + "Dim wrap\n" + "Set wrap \x3d New " + goog.net.xpc.NixTransport.NIX_WRAPPER + 
  "\n" + "wrap.SetTransport transport\n" + "wrap.SetAuth auth\n" + "Set " + goog.net.xpc.NixTransport.NIX_GET_WRAPPER + " \x3d wrap\n" + "End Function";
  try {
    listenWindow.execScript(vbscript, "vbscript");
    listenWindow["nix_setup_complete"] = true;
  } catch (e) {
    goog.net.xpc.logger.severe("exception caught while attempting global setup: " + e);
  }
};
goog.net.xpc.NixTransport.prototype.transportType = goog.net.xpc.TransportTypes.NIX;
goog.net.xpc.NixTransport.prototype.localSetupCompleted_ = false;
goog.net.xpc.NixTransport.prototype.nixChannel_ = null;
goog.net.xpc.NixTransport.prototype.connect = function() {
  if (this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.OUTER) {
    this.attemptOuterSetup_();
  } else {
    this.attemptInnerSetup_();
  }
};
goog.net.xpc.NixTransport.prototype.attemptOuterSetup_ = function() {
  if (this.localSetupCompleted_) {
    return;
  }
  var innerFrame = this.channel_.getIframeElement();
  try {
    var theWindow = this.getWindow();
    var getWrapper = theWindow[goog.net.xpc.NixTransport.NIX_GET_WRAPPER];
    innerFrame.contentWindow.opener = getWrapper(this, this.authToken_);
    this.localSetupCompleted_ = true;
  } catch (e) {
    goog.net.xpc.logger.severe("exception caught while attempting setup: " + e);
  }
  if (!this.localSetupCompleted_) {
    this.getWindow().setTimeout(goog.bind(this.attemptOuterSetup_, this), 100);
  }
};
goog.net.xpc.NixTransport.prototype.attemptInnerSetup_ = function() {
  if (this.localSetupCompleted_) {
    return;
  }
  try {
    var opener = this.getWindow().opener;
    if (opener && goog.net.xpc.NixTransport.NIX_ID_FIELD in opener) {
      this.nixChannel_ = opener;
      var remoteAuthToken = this.nixChannel_["GetAuthToken"]();
      if (remoteAuthToken != this.remoteAuthToken_) {
        goog.net.xpc.logger.severe("Invalid auth token from other party");
        return;
      }
      var theWindow = this.getWindow();
      var getWrapper = theWindow[goog.net.xpc.NixTransport.NIX_GET_WRAPPER];
      this.nixChannel_["CreateChannel"](getWrapper(this, this.authToken_));
      this.localSetupCompleted_ = true;
      this.channel_.notifyConnected();
    }
  } catch (e) {
    goog.net.xpc.logger.severe("exception caught while attempting setup: " + e);
    return;
  }
  if (!this.localSetupCompleted_) {
    this.getWindow().setTimeout(goog.bind(this.attemptInnerSetup_, this), 100);
  }
};
goog.net.xpc.NixTransport.prototype.createChannel_ = function(channel) {
  if (typeof channel != "unknown" || !(goog.net.xpc.NixTransport.NIX_ID_FIELD in channel)) {
    goog.net.xpc.logger.severe("Invalid NIX channel given to createChannel_");
  }
  this.nixChannel_ = channel;
  var remoteAuthToken = this.nixChannel_["GetAuthToken"]();
  if (remoteAuthToken != this.remoteAuthToken_) {
    goog.net.xpc.logger.severe("Invalid auth token from other party");
    return;
  }
  this.channel_.notifyConnected();
};
goog.net.xpc.NixTransport.prototype.handleMessage_ = function(serviceName, payload) {
  var deliveryHandler = function() {
    this.channel_.xpcDeliver(serviceName, payload);
  };
  this.getWindow().setTimeout(goog.bind(deliveryHandler, this), 1);
};
goog.net.xpc.NixTransport.prototype.send = function(service, payload) {
  if (typeof this.nixChannel_ !== "unknown") {
    goog.net.xpc.logger.severe("NIX channel not connected");
  }
  this.nixChannel_["SendMessage"](service, payload);
};
goog.net.xpc.NixTransport.prototype.disposeInternal = function() {
  goog.base(this, "disposeInternal");
  this.nixChannel_ = null;
};
goog.provide("goog.net.xpc.CrossPageChannel");
goog.require("goog.Disposable");
goog.require("goog.Uri");
goog.require("goog.async.Deferred");
goog.require("goog.async.Delay");
goog.require("goog.dom");
goog.require("goog.events");
goog.require("goog.events.EventHandler");
goog.require("goog.json");
goog.require("goog.messaging.AbstractChannel");
goog.require("goog.net.xpc");
goog.require("goog.net.xpc.CrossPageChannelRole");
goog.require("goog.net.xpc.FrameElementMethodTransport");
goog.require("goog.net.xpc.IframePollingTransport");
goog.require("goog.net.xpc.IframeRelayTransport");
goog.require("goog.net.xpc.NativeMessagingTransport");
goog.require("goog.net.xpc.NixTransport");
goog.require("goog.net.xpc.Transport");
goog.require("goog.userAgent");
goog.net.xpc.CrossPageChannel = function(cfg, opt_domHelper) {
  goog.base(this);
  for (var i = 0, uriField;uriField = goog.net.xpc.UriCfgFields[i];i++) {
    if (uriField in cfg && !/^https?:\/\//.test(cfg[uriField])) {
      throw Error("URI " + cfg[uriField] + " is invalid for field " + uriField);
    }
  }
  this.cfg_ = cfg;
  this.name = this.cfg_[goog.net.xpc.CfgFields.CHANNEL_NAME] || goog.net.xpc.getRandomString(10);
  this.domHelper_ = opt_domHelper || goog.dom.getDomHelper();
  this.deferredDeliveries_ = [];
  this.peerLoadHandler_ = new goog.events.EventHandler(this);
  cfg[goog.net.xpc.CfgFields.LOCAL_POLL_URI] = cfg[goog.net.xpc.CfgFields.LOCAL_POLL_URI] || goog.uri.utils.getHost(this.domHelper_.getWindow().location.href) + "/robots.txt";
  cfg[goog.net.xpc.CfgFields.PEER_POLL_URI] = cfg[goog.net.xpc.CfgFields.PEER_POLL_URI] || goog.uri.utils.getHost(cfg[goog.net.xpc.CfgFields.PEER_URI] || "") + "/robots.txt";
  goog.net.xpc.channels[this.name] = this;
  goog.events.listen(window, "unload", goog.net.xpc.CrossPageChannel.disposeAll_);
  goog.net.xpc.logger.info("CrossPageChannel created: " + this.name);
};
goog.inherits(goog.net.xpc.CrossPageChannel, goog.messaging.AbstractChannel);
goog.net.xpc.CrossPageChannel.TRANSPORT_SERVICE_ESCAPE_RE_ = new RegExp("^%*" + goog.net.xpc.TRANSPORT_SERVICE_ + "$");
goog.net.xpc.CrossPageChannel.TRANSPORT_SERVICE_UNESCAPE_RE_ = new RegExp("^%+" + goog.net.xpc.TRANSPORT_SERVICE_ + "$");
goog.net.xpc.CrossPageChannel.prototype.connectionDelay_ = null;
goog.net.xpc.CrossPageChannel.prototype.peerWindowDeferred_ = null;
goog.net.xpc.CrossPageChannel.prototype.transport_ = null;
goog.net.xpc.CrossPageChannel.prototype.state_ = goog.net.xpc.ChannelStates.NOT_CONNECTED;
goog.net.xpc.CrossPageChannel.prototype.isConnected = function() {
  return this.state_ == goog.net.xpc.ChannelStates.CONNECTED;
};
goog.net.xpc.CrossPageChannel.prototype.peerWindowObject_ = null;
goog.net.xpc.CrossPageChannel.prototype.iframeElement_ = null;
goog.net.xpc.CrossPageChannel.prototype.getConfig = function() {
  return this.cfg_;
};
goog.net.xpc.CrossPageChannel.prototype.getIframeElement = function() {
  return this.iframeElement_;
};
goog.net.xpc.CrossPageChannel.prototype.setPeerWindowObject = function(peerWindowObject) {
  this.peerWindowObject_ = peerWindowObject;
};
goog.net.xpc.CrossPageChannel.prototype.getPeerWindowObject = function() {
  return this.peerWindowObject_;
};
goog.net.xpc.CrossPageChannel.prototype.isPeerAvailable = function() {
  try {
    return!!this.peerWindowObject_ && !Boolean(this.peerWindowObject_.closed);
  } catch (e) {
    return false;
  }
};
goog.net.xpc.CrossPageChannel.prototype.determineTransportType_ = function() {
  var transportType;
  if (goog.isFunction(document.postMessage) || (goog.isFunction(window.postMessage) || goog.userAgent.IE && window.postMessage)) {
    transportType = goog.net.xpc.TransportTypes.NATIVE_MESSAGING;
  } else {
    if (goog.userAgent.GECKO) {
      transportType = goog.net.xpc.TransportTypes.FRAME_ELEMENT_METHOD;
    } else {
      if (goog.userAgent.IE && this.cfg_[goog.net.xpc.CfgFields.PEER_RELAY_URI]) {
        transportType = goog.net.xpc.TransportTypes.IFRAME_RELAY;
      } else {
        if (goog.userAgent.IE && goog.net.xpc.NixTransport.isNixSupported()) {
          transportType = goog.net.xpc.TransportTypes.NIX;
        } else {
          transportType = goog.net.xpc.TransportTypes.IFRAME_POLLING;
        }
      }
    }
  }
  return transportType;
};
goog.net.xpc.CrossPageChannel.prototype.createTransport_ = function() {
  if (this.transport_) {
    return;
  }
  if (!this.cfg_[goog.net.xpc.CfgFields.TRANSPORT]) {
    this.cfg_[goog.net.xpc.CfgFields.TRANSPORT] = this.determineTransportType_();
  }
  switch(this.cfg_[goog.net.xpc.CfgFields.TRANSPORT]) {
    case goog.net.xpc.TransportTypes.NATIVE_MESSAGING:
      var protocolVersion = this.cfg_[goog.net.xpc.CfgFields.NATIVE_TRANSPORT_PROTOCOL_VERSION] || 2;
      this.transport_ = new goog.net.xpc.NativeMessagingTransport(this, this.cfg_[goog.net.xpc.CfgFields.PEER_HOSTNAME], this.domHelper_, !!this.cfg_[goog.net.xpc.CfgFields.ONE_SIDED_HANDSHAKE], protocolVersion);
      break;
    case goog.net.xpc.TransportTypes.NIX:
      this.transport_ = new goog.net.xpc.NixTransport(this, this.domHelper_);
      break;
    case goog.net.xpc.TransportTypes.FRAME_ELEMENT_METHOD:
      this.transport_ = new goog.net.xpc.FrameElementMethodTransport(this, this.domHelper_);
      break;
    case goog.net.xpc.TransportTypes.IFRAME_RELAY:
      this.transport_ = new goog.net.xpc.IframeRelayTransport(this, this.domHelper_);
      break;
    case goog.net.xpc.TransportTypes.IFRAME_POLLING:
      this.transport_ = new goog.net.xpc.IframePollingTransport(this, this.domHelper_);
      break;
  }
  if (this.transport_) {
    goog.net.xpc.logger.info("Transport created: " + this.transport_.getName());
  } else {
    throw Error("CrossPageChannel: No suitable transport found!");
  }
};
goog.net.xpc.CrossPageChannel.prototype.getTransportType = function() {
  return this.transport_.getType();
};
goog.net.xpc.CrossPageChannel.prototype.getTransportName = function() {
  return this.transport_.getName();
};
goog.net.xpc.CrossPageChannel.prototype.getPeerConfiguration = function() {
  var peerCfg = {};
  peerCfg[goog.net.xpc.CfgFields.CHANNEL_NAME] = this.name;
  peerCfg[goog.net.xpc.CfgFields.TRANSPORT] = this.cfg_[goog.net.xpc.CfgFields.TRANSPORT];
  peerCfg[goog.net.xpc.CfgFields.ONE_SIDED_HANDSHAKE] = this.cfg_[goog.net.xpc.CfgFields.ONE_SIDED_HANDSHAKE];
  if (this.cfg_[goog.net.xpc.CfgFields.LOCAL_RELAY_URI]) {
    peerCfg[goog.net.xpc.CfgFields.PEER_RELAY_URI] = this.cfg_[goog.net.xpc.CfgFields.LOCAL_RELAY_URI];
  }
  if (this.cfg_[goog.net.xpc.CfgFields.LOCAL_POLL_URI]) {
    peerCfg[goog.net.xpc.CfgFields.PEER_POLL_URI] = this.cfg_[goog.net.xpc.CfgFields.LOCAL_POLL_URI];
  }
  if (this.cfg_[goog.net.xpc.CfgFields.PEER_POLL_URI]) {
    peerCfg[goog.net.xpc.CfgFields.LOCAL_POLL_URI] = this.cfg_[goog.net.xpc.CfgFields.PEER_POLL_URI];
  }
  var role = this.cfg_[goog.net.xpc.CfgFields.ROLE];
  if (role) {
    peerCfg[goog.net.xpc.CfgFields.ROLE] = role == goog.net.xpc.CrossPageChannelRole.INNER ? goog.net.xpc.CrossPageChannelRole.OUTER : goog.net.xpc.CrossPageChannelRole.INNER;
  }
  return peerCfg;
};
goog.net.xpc.CrossPageChannel.prototype.createPeerIframe = function(parentElm, opt_configureIframeCb, opt_addCfgParam) {
  goog.net.xpc.logger.info("createPeerIframe()");
  var iframeId = this.cfg_[goog.net.xpc.CfgFields.IFRAME_ID];
  if (!iframeId) {
    iframeId = this.cfg_[goog.net.xpc.CfgFields.IFRAME_ID] = "xpcpeer" + goog.net.xpc.getRandomString(4);
  }
  var iframeElm = goog.dom.getDomHelper(parentElm).createElement("IFRAME");
  iframeElm.id = iframeElm.name = iframeId;
  if (opt_configureIframeCb) {
    opt_configureIframeCb(iframeElm);
  } else {
    iframeElm.style.width = iframeElm.style.height = "100%";
  }
  this.cleanUpIncompleteConnection_();
  this.peerWindowDeferred_ = new goog.async.Deferred(undefined, this);
  var peerUri = this.getPeerUri(opt_addCfgParam);
  this.peerLoadHandler_.listenOnce(iframeElm, "load", this.peerWindowDeferred_.callback, false, this.peerWindowDeferred_);
  if (goog.userAgent.GECKO || goog.userAgent.WEBKIT) {
    window.setTimeout(goog.bind(function() {
      parentElm.appendChild(iframeElm);
      iframeElm.src = peerUri.toString();
      goog.net.xpc.logger.info("peer iframe created (" + iframeId + ")");
    }, this), 1);
  } else {
    iframeElm.src = peerUri.toString();
    parentElm.appendChild(iframeElm);
    goog.net.xpc.logger.info("peer iframe created (" + iframeId + ")");
  }
  return(iframeElm);
};
goog.net.xpc.CrossPageChannel.prototype.cleanUpIncompleteConnection_ = function() {
  if (this.peerWindowDeferred_) {
    this.peerWindowDeferred_.cancel();
    this.peerWindowDeferred_ = null;
  }
  this.deferredDeliveries_.length = 0;
  this.peerLoadHandler_.removeAll();
};
goog.net.xpc.CrossPageChannel.prototype.getPeerUri = function(opt_addCfgParam) {
  var peerUri = this.cfg_[goog.net.xpc.CfgFields.PEER_URI];
  if (goog.isString(peerUri)) {
    peerUri = this.cfg_[goog.net.xpc.CfgFields.PEER_URI] = new goog.Uri(peerUri);
  }
  if (opt_addCfgParam !== false) {
    peerUri.setParameterValue("xpc", goog.json.serialize(this.getPeerConfiguration()));
  }
  return peerUri;
};
goog.net.xpc.CrossPageChannel.prototype.connect = function(opt_connectCb) {
  this.connectCb_ = opt_connectCb || goog.nullFunction;
  if (this.peerWindowDeferred_) {
    this.peerWindowDeferred_.addCallback(this.continueConnection_);
  } else {
    this.continueConnection_();
  }
};
goog.net.xpc.CrossPageChannel.prototype.continueConnection_ = function() {
  goog.net.xpc.logger.info("continueConnection_()");
  this.peerWindowDeferred_ = null;
  if (this.cfg_[goog.net.xpc.CfgFields.IFRAME_ID]) {
    this.iframeElement_ = this.domHelper_.getElement(this.cfg_[goog.net.xpc.CfgFields.IFRAME_ID]);
  }
  if (this.iframeElement_) {
    var winObj = this.iframeElement_.contentWindow;
    if (!winObj) {
      winObj = window.frames[this.cfg_[goog.net.xpc.CfgFields.IFRAME_ID]];
    }
    this.setPeerWindowObject(winObj);
  }
  if (!this.peerWindowObject_) {
    if (window == window.top) {
      throw Error("CrossPageChannel: Can't connect, peer window-object not set.");
    } else {
      this.setPeerWindowObject(window.parent);
    }
  }
  this.createTransport_();
  this.transport_.connect();
  while (this.deferredDeliveries_.length > 0) {
    this.deferredDeliveries_.shift()();
  }
};
goog.net.xpc.CrossPageChannel.prototype.close = function() {
  this.cleanUpIncompleteConnection_();
  this.state_ = goog.net.xpc.ChannelStates.CLOSED;
  goog.dispose(this.transport_);
  this.transport_ = null;
  this.connectCb_ = null;
  goog.dispose(this.connectionDelay_);
  this.connectionDelay_ = null;
  goog.net.xpc.logger.info('Channel "' + this.name + '" closed');
};
goog.net.xpc.CrossPageChannel.prototype.notifyConnected = function(opt_delay) {
  if (this.isConnected() || this.connectionDelay_ && this.connectionDelay_.isActive()) {
    return;
  }
  this.state_ = goog.net.xpc.ChannelStates.CONNECTED;
  goog.net.xpc.logger.info('Channel "' + this.name + '" connected');
  goog.dispose(this.connectionDelay_);
  if (opt_delay) {
    this.connectionDelay_ = new goog.async.Delay(this.connectCb_, opt_delay);
    this.connectionDelay_.start();
  } else {
    this.connectionDelay_ = null;
    this.connectCb_();
  }
};
goog.net.xpc.CrossPageChannel.prototype.notifyConnected_ = goog.net.xpc.CrossPageChannel.prototype.notifyConnected;
goog.net.xpc.CrossPageChannel.prototype.notifyTransportError = function() {
  goog.net.xpc.logger.info("Transport Error");
  this.close();
};
goog.net.xpc.CrossPageChannel.prototype.send = function(serviceName, payload) {
  if (!this.isConnected()) {
    goog.net.xpc.logger.severe("Can't send. Channel not connected.");
    return;
  }
  if (!this.isPeerAvailable()) {
    goog.net.xpc.logger.severe("Peer has disappeared.");
    this.close();
    return;
  }
  if (goog.isObject(payload)) {
    payload = goog.json.serialize(payload);
  }
  this.transport_.send(this.escapeServiceName_(serviceName), payload);
};
goog.net.xpc.CrossPageChannel.prototype.xpcDeliver = function(serviceName, payload, opt_origin) {
  if (this.peerWindowDeferred_) {
    this.deferredDeliveries_.push(goog.bind(this.xpcDeliver, this, serviceName, payload, opt_origin));
    return;
  }
  if (!this.isMessageOriginAcceptable_(opt_origin)) {
    goog.net.xpc.logger.warning('Message received from unapproved origin "' + opt_origin + '" - rejected.');
    return;
  }
  if (this.isDisposed()) {
    goog.net.xpc.logger.warning("CrossPageChannel::xpcDeliver(): Disposed.");
  } else {
    if (!serviceName || serviceName == goog.net.xpc.TRANSPORT_SERVICE_) {
      this.transport_.transportServiceHandler(payload);
    } else {
      if (this.isConnected()) {
        this.deliver(this.unescapeServiceName_(serviceName), payload);
      } else {
        goog.net.xpc.logger.info("CrossPageChannel::xpcDeliver(): Not connected.");
      }
    }
  }
};
goog.net.xpc.CrossPageChannel.prototype.escapeServiceName_ = function(name) {
  if (goog.net.xpc.CrossPageChannel.TRANSPORT_SERVICE_ESCAPE_RE_.test(name)) {
    name = "%" + name;
  }
  return name.replace(/[%:|]/g, encodeURIComponent);
};
goog.net.xpc.CrossPageChannel.prototype.unescapeServiceName_ = function(name) {
  name = name.replace(/%[0-9a-f]{2}/gi, decodeURIComponent);
  if (goog.net.xpc.CrossPageChannel.TRANSPORT_SERVICE_UNESCAPE_RE_.test(name)) {
    return name.substring(1);
  } else {
    return name;
  }
};
goog.net.xpc.CrossPageChannel.prototype.getRole = function() {
  var role = this.cfg_[goog.net.xpc.CfgFields.ROLE];
  if (role) {
    return role;
  } else {
    return window.parent == this.peerWindowObject_ ? goog.net.xpc.CrossPageChannelRole.INNER : goog.net.xpc.CrossPageChannelRole.OUTER;
  }
};
goog.net.xpc.CrossPageChannel.prototype.isMessageOriginAcceptable_ = function(opt_origin) {
  var peerHostname = this.cfg_[goog.net.xpc.CfgFields.PEER_HOSTNAME];
  return goog.string.isEmptySafe(opt_origin) || (goog.string.isEmptySafe(peerHostname) || opt_origin == this.cfg_[goog.net.xpc.CfgFields.PEER_HOSTNAME]);
};
goog.net.xpc.CrossPageChannel.prototype.disposeInternal = function() {
  this.close();
  this.peerWindowObject_ = null;
  this.iframeElement_ = null;
  delete goog.net.xpc.channels[this.name];
  goog.dispose(this.peerLoadHandler_);
  delete this.peerLoadHandler_;
  goog.base(this, "disposeInternal");
};
goog.net.xpc.CrossPageChannel.disposeAll_ = function() {
  for (var name in goog.net.xpc.channels) {
    goog.dispose(goog.net.xpc.channels[name]);
  }
};
goog.provide("clojure.browser.net");
goog.require("cljs.core");
goog.require("goog.net.XhrIo");
goog.require("goog.net.xpc.CrossPageChannel");
goog.require("clojure.browser.event");
goog.require("goog.json");
goog.require("goog.net.xpc.CfgFields");
goog.require("clojure.browser.event");
goog.require("goog.net.EventType");
goog.require("goog.net.EventType");
goog.require("goog.net.xpc.CrossPageChannel");
goog.require("goog.json");
goog.require("goog.net.XhrIo");
goog.require("goog.net.xpc.CfgFields");
clojure.browser.net._STAR_timeout_STAR_ = 1E4;
clojure.browser.net.event_types = cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(p__109201) {
  var vec__109202 = p__109201;
  var k = cljs.core.nth.call(null, vec__109202, 0, null);
  var v = cljs.core.nth.call(null, vec__109202, 1, null);
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k.toLowerCase()), v], null);
}, cljs.core.merge.call(null, cljs.core.js__GT_clj.call(null, goog.net.EventType))));
clojure.browser.net.IConnection = function() {
  var obj109204 = {};
  return obj109204;
}();
clojure.browser.net.connect = function() {
  var connect = null;
  var connect__1 = function(this$) {
    if (function() {
      var and__12818__auto__ = this$;
      if (and__12818__auto__) {
        return this$.clojure$browser$net$IConnection$connect$arity$1;
      } else {
        return and__12818__auto__;
      }
    }()) {
      return this$.clojure$browser$net$IConnection$connect$arity$1(this$);
    } else {
      var x__13457__auto__ = this$ == null ? null : this$;
      return function() {
        var or__12830__auto__ = clojure.browser.net.connect[goog.typeOf(x__13457__auto__)];
        if (or__12830__auto__) {
          return or__12830__auto__;
        } else {
          var or__12830__auto____$1 = clojure.browser.net.connect["_"];
          if (or__12830__auto____$1) {
            return or__12830__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IConnection.connect", this$);
          }
        }
      }().call(null, this$);
    }
  };
  var connect__2 = function(this$, opt1) {
    if (function() {
      var and__12818__auto__ = this$;
      if (and__12818__auto__) {
        return this$.clojure$browser$net$IConnection$connect$arity$2;
      } else {
        return and__12818__auto__;
      }
    }()) {
      return this$.clojure$browser$net$IConnection$connect$arity$2(this$, opt1);
    } else {
      var x__13457__auto__ = this$ == null ? null : this$;
      return function() {
        var or__12830__auto__ = clojure.browser.net.connect[goog.typeOf(x__13457__auto__)];
        if (or__12830__auto__) {
          return or__12830__auto__;
        } else {
          var or__12830__auto____$1 = clojure.browser.net.connect["_"];
          if (or__12830__auto____$1) {
            return or__12830__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IConnection.connect", this$);
          }
        }
      }().call(null, this$, opt1);
    }
  };
  var connect__3 = function(this$, opt1, opt2) {
    if (function() {
      var and__12818__auto__ = this$;
      if (and__12818__auto__) {
        return this$.clojure$browser$net$IConnection$connect$arity$3;
      } else {
        return and__12818__auto__;
      }
    }()) {
      return this$.clojure$browser$net$IConnection$connect$arity$3(this$, opt1, opt2);
    } else {
      var x__13457__auto__ = this$ == null ? null : this$;
      return function() {
        var or__12830__auto__ = clojure.browser.net.connect[goog.typeOf(x__13457__auto__)];
        if (or__12830__auto__) {
          return or__12830__auto__;
        } else {
          var or__12830__auto____$1 = clojure.browser.net.connect["_"];
          if (or__12830__auto____$1) {
            return or__12830__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IConnection.connect", this$);
          }
        }
      }().call(null, this$, opt1, opt2);
    }
  };
  var connect__4 = function(this$, opt1, opt2, opt3) {
    if (function() {
      var and__12818__auto__ = this$;
      if (and__12818__auto__) {
        return this$.clojure$browser$net$IConnection$connect$arity$4;
      } else {
        return and__12818__auto__;
      }
    }()) {
      return this$.clojure$browser$net$IConnection$connect$arity$4(this$, opt1, opt2, opt3);
    } else {
      var x__13457__auto__ = this$ == null ? null : this$;
      return function() {
        var or__12830__auto__ = clojure.browser.net.connect[goog.typeOf(x__13457__auto__)];
        if (or__12830__auto__) {
          return or__12830__auto__;
        } else {
          var or__12830__auto____$1 = clojure.browser.net.connect["_"];
          if (or__12830__auto____$1) {
            return or__12830__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IConnection.connect", this$);
          }
        }
      }().call(null, this$, opt1, opt2, opt3);
    }
  };
  connect = function(this$, opt1, opt2, opt3) {
    switch(arguments.length) {
      case 1:
        return connect__1.call(this, this$);
      case 2:
        return connect__2.call(this, this$, opt1);
      case 3:
        return connect__3.call(this, this$, opt1, opt2);
      case 4:
        return connect__4.call(this, this$, opt1, opt2, opt3);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  connect.cljs$core$IFn$_invoke$arity$1 = connect__1;
  connect.cljs$core$IFn$_invoke$arity$2 = connect__2;
  connect.cljs$core$IFn$_invoke$arity$3 = connect__3;
  connect.cljs$core$IFn$_invoke$arity$4 = connect__4;
  return connect;
}();
clojure.browser.net.transmit = function() {
  var transmit = null;
  var transmit__2 = function(this$, opt) {
    if (function() {
      var and__12818__auto__ = this$;
      if (and__12818__auto__) {
        return this$.clojure$browser$net$IConnection$transmit$arity$2;
      } else {
        return and__12818__auto__;
      }
    }()) {
      return this$.clojure$browser$net$IConnection$transmit$arity$2(this$, opt);
    } else {
      var x__13457__auto__ = this$ == null ? null : this$;
      return function() {
        var or__12830__auto__ = clojure.browser.net.transmit[goog.typeOf(x__13457__auto__)];
        if (or__12830__auto__) {
          return or__12830__auto__;
        } else {
          var or__12830__auto____$1 = clojure.browser.net.transmit["_"];
          if (or__12830__auto____$1) {
            return or__12830__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IConnection.transmit", this$);
          }
        }
      }().call(null, this$, opt);
    }
  };
  var transmit__3 = function(this$, opt, opt2) {
    if (function() {
      var and__12818__auto__ = this$;
      if (and__12818__auto__) {
        return this$.clojure$browser$net$IConnection$transmit$arity$3;
      } else {
        return and__12818__auto__;
      }
    }()) {
      return this$.clojure$browser$net$IConnection$transmit$arity$3(this$, opt, opt2);
    } else {
      var x__13457__auto__ = this$ == null ? null : this$;
      return function() {
        var or__12830__auto__ = clojure.browser.net.transmit[goog.typeOf(x__13457__auto__)];
        if (or__12830__auto__) {
          return or__12830__auto__;
        } else {
          var or__12830__auto____$1 = clojure.browser.net.transmit["_"];
          if (or__12830__auto____$1) {
            return or__12830__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IConnection.transmit", this$);
          }
        }
      }().call(null, this$, opt, opt2);
    }
  };
  var transmit__4 = function(this$, opt, opt2, opt3) {
    if (function() {
      var and__12818__auto__ = this$;
      if (and__12818__auto__) {
        return this$.clojure$browser$net$IConnection$transmit$arity$4;
      } else {
        return and__12818__auto__;
      }
    }()) {
      return this$.clojure$browser$net$IConnection$transmit$arity$4(this$, opt, opt2, opt3);
    } else {
      var x__13457__auto__ = this$ == null ? null : this$;
      return function() {
        var or__12830__auto__ = clojure.browser.net.transmit[goog.typeOf(x__13457__auto__)];
        if (or__12830__auto__) {
          return or__12830__auto__;
        } else {
          var or__12830__auto____$1 = clojure.browser.net.transmit["_"];
          if (or__12830__auto____$1) {
            return or__12830__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IConnection.transmit", this$);
          }
        }
      }().call(null, this$, opt, opt2, opt3);
    }
  };
  var transmit__5 = function(this$, opt, opt2, opt3, opt4) {
    if (function() {
      var and__12818__auto__ = this$;
      if (and__12818__auto__) {
        return this$.clojure$browser$net$IConnection$transmit$arity$5;
      } else {
        return and__12818__auto__;
      }
    }()) {
      return this$.clojure$browser$net$IConnection$transmit$arity$5(this$, opt, opt2, opt3, opt4);
    } else {
      var x__13457__auto__ = this$ == null ? null : this$;
      return function() {
        var or__12830__auto__ = clojure.browser.net.transmit[goog.typeOf(x__13457__auto__)];
        if (or__12830__auto__) {
          return or__12830__auto__;
        } else {
          var or__12830__auto____$1 = clojure.browser.net.transmit["_"];
          if (or__12830__auto____$1) {
            return or__12830__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IConnection.transmit", this$);
          }
        }
      }().call(null, this$, opt, opt2, opt3, opt4);
    }
  };
  var transmit__6 = function(this$, opt, opt2, opt3, opt4, opt5) {
    if (function() {
      var and__12818__auto__ = this$;
      if (and__12818__auto__) {
        return this$.clojure$browser$net$IConnection$transmit$arity$6;
      } else {
        return and__12818__auto__;
      }
    }()) {
      return this$.clojure$browser$net$IConnection$transmit$arity$6(this$, opt, opt2, opt3, opt4, opt5);
    } else {
      var x__13457__auto__ = this$ == null ? null : this$;
      return function() {
        var or__12830__auto__ = clojure.browser.net.transmit[goog.typeOf(x__13457__auto__)];
        if (or__12830__auto__) {
          return or__12830__auto__;
        } else {
          var or__12830__auto____$1 = clojure.browser.net.transmit["_"];
          if (or__12830__auto____$1) {
            return or__12830__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IConnection.transmit", this$);
          }
        }
      }().call(null, this$, opt, opt2, opt3, opt4, opt5);
    }
  };
  transmit = function(this$, opt, opt2, opt3, opt4, opt5) {
    switch(arguments.length) {
      case 2:
        return transmit__2.call(this, this$, opt);
      case 3:
        return transmit__3.call(this, this$, opt, opt2);
      case 4:
        return transmit__4.call(this, this$, opt, opt2, opt3);
      case 5:
        return transmit__5.call(this, this$, opt, opt2, opt3, opt4);
      case 6:
        return transmit__6.call(this, this$, opt, opt2, opt3, opt4, opt5);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  transmit.cljs$core$IFn$_invoke$arity$2 = transmit__2;
  transmit.cljs$core$IFn$_invoke$arity$3 = transmit__3;
  transmit.cljs$core$IFn$_invoke$arity$4 = transmit__4;
  transmit.cljs$core$IFn$_invoke$arity$5 = transmit__5;
  transmit.cljs$core$IFn$_invoke$arity$6 = transmit__6;
  return transmit;
}();
clojure.browser.net.close = function close(this$) {
  if (function() {
    var and__12818__auto__ = this$;
    if (and__12818__auto__) {
      return this$.clojure$browser$net$IConnection$close$arity$1;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return this$.clojure$browser$net$IConnection$close$arity$1(this$);
  } else {
    var x__13457__auto__ = this$ == null ? null : this$;
    return function() {
      var or__12830__auto__ = clojure.browser.net.close[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = clojure.browser.net.close["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IConnection.close", this$);
        }
      }
    }().call(null, this$);
  }
};
goog.net.XhrIo.prototype.clojure$browser$event$EventType$ = true;
goog.net.XhrIo.prototype.clojure$browser$event$EventType$event_types$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(p__109205) {
    var vec__109206 = p__109205;
    var k = cljs.core.nth.call(null, vec__109206, 0, null);
    var v = cljs.core.nth.call(null, vec__109206, 1, null);
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k.toLowerCase()), v], null);
  }, cljs.core.merge.call(null, cljs.core.js__GT_clj.call(null, goog.net.EventType))));
};
goog.net.XhrIo.prototype.clojure$browser$net$IConnection$ = true;
goog.net.XhrIo.prototype.clojure$browser$net$IConnection$transmit$arity$2 = function(this$, uri) {
  var this$__$1 = this;
  return clojure.browser.net.transmit.call(null, this$__$1, uri, "GET", null, null, clojure.browser.net._STAR_timeout_STAR_);
};
goog.net.XhrIo.prototype.clojure$browser$net$IConnection$transmit$arity$3 = function(this$, uri, method) {
  var this$__$1 = this;
  return clojure.browser.net.transmit.call(null, this$__$1, uri, method, null, null, clojure.browser.net._STAR_timeout_STAR_);
};
goog.net.XhrIo.prototype.clojure$browser$net$IConnection$transmit$arity$4 = function(this$, uri, method, content) {
  var this$__$1 = this;
  return clojure.browser.net.transmit.call(null, this$__$1, uri, method, content, null, clojure.browser.net._STAR_timeout_STAR_);
};
goog.net.XhrIo.prototype.clojure$browser$net$IConnection$transmit$arity$5 = function(this$, uri, method, content, headers) {
  var this$__$1 = this;
  return clojure.browser.net.transmit.call(null, this$__$1, uri, method, content, headers, clojure.browser.net._STAR_timeout_STAR_);
};
goog.net.XhrIo.prototype.clojure$browser$net$IConnection$transmit$arity$6 = function(this$, uri, method, content, headers, timeout) {
  var this$__$1 = this;
  this$__$1.setTimeoutInterval(timeout);
  return this$__$1.send(uri, method, content, headers);
};
clojure.browser.net.xpc_config_fields = cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(p__109207) {
  var vec__109208 = p__109207;
  var k = cljs.core.nth.call(null, vec__109208, 0, null);
  var v = cljs.core.nth.call(null, vec__109208, 1, null);
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k.toLowerCase()), v], null);
}, cljs.core.js__GT_clj.call(null, goog.net.xpc.CfgFields)));
clojure.browser.net.xhr_connection = function xhr_connection() {
  return new goog.net.XhrIo;
};
clojure.browser.net.ICrossPageChannel = function() {
  var obj109210 = {};
  return obj109210;
}();
clojure.browser.net.register_service = function() {
  var register_service = null;
  var register_service__3 = function(this$, service_name, fn) {
    if (function() {
      var and__12818__auto__ = this$;
      if (and__12818__auto__) {
        return this$.clojure$browser$net$ICrossPageChannel$register_service$arity$3;
      } else {
        return and__12818__auto__;
      }
    }()) {
      return this$.clojure$browser$net$ICrossPageChannel$register_service$arity$3(this$, service_name, fn);
    } else {
      var x__13457__auto__ = this$ == null ? null : this$;
      return function() {
        var or__12830__auto__ = clojure.browser.net.register_service[goog.typeOf(x__13457__auto__)];
        if (or__12830__auto__) {
          return or__12830__auto__;
        } else {
          var or__12830__auto____$1 = clojure.browser.net.register_service["_"];
          if (or__12830__auto____$1) {
            return or__12830__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ICrossPageChannel.register-service", this$);
          }
        }
      }().call(null, this$, service_name, fn);
    }
  };
  var register_service__4 = function(this$, service_name, fn, encode_json_QMARK_) {
    if (function() {
      var and__12818__auto__ = this$;
      if (and__12818__auto__) {
        return this$.clojure$browser$net$ICrossPageChannel$register_service$arity$4;
      } else {
        return and__12818__auto__;
      }
    }()) {
      return this$.clojure$browser$net$ICrossPageChannel$register_service$arity$4(this$, service_name, fn, encode_json_QMARK_);
    } else {
      var x__13457__auto__ = this$ == null ? null : this$;
      return function() {
        var or__12830__auto__ = clojure.browser.net.register_service[goog.typeOf(x__13457__auto__)];
        if (or__12830__auto__) {
          return or__12830__auto__;
        } else {
          var or__12830__auto____$1 = clojure.browser.net.register_service["_"];
          if (or__12830__auto____$1) {
            return or__12830__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ICrossPageChannel.register-service", this$);
          }
        }
      }().call(null, this$, service_name, fn, encode_json_QMARK_);
    }
  };
  register_service = function(this$, service_name, fn, encode_json_QMARK_) {
    switch(arguments.length) {
      case 3:
        return register_service__3.call(this, this$, service_name, fn);
      case 4:
        return register_service__4.call(this, this$, service_name, fn, encode_json_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  register_service.cljs$core$IFn$_invoke$arity$3 = register_service__3;
  register_service.cljs$core$IFn$_invoke$arity$4 = register_service__4;
  return register_service;
}();
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$ = true;
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$connect$arity$1 = function(this$) {
  var this$__$1 = this;
  return clojure.browser.net.connect.call(null, this$__$1, null);
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$connect$arity$2 = function(this$, on_connect_fn) {
  var this$__$1 = this;
  return this$__$1.connect(on_connect_fn);
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$connect$arity$3 = function(this$, on_connect_fn, config_iframe_fn) {
  var this$__$1 = this;
  return clojure.browser.net.connect.call(null, this$__$1, on_connect_fn, config_iframe_fn, document.body);
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$connect$arity$4 = function(this$, on_connect_fn, config_iframe_fn, iframe_parent) {
  var this$__$1 = this;
  this$__$1.createPeerIframe(iframe_parent, config_iframe_fn);
  return this$__$1.connect(on_connect_fn);
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$transmit$arity$3 = function(this$, service_name, payload) {
  var this$__$1 = this;
  return this$__$1.send(cljs.core.name.call(null, service_name), payload);
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$close$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.close(cljs.core.List.EMPTY);
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$ICrossPageChannel$ = true;
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$ICrossPageChannel$register_service$arity$3 = function(this$, service_name, fn) {
  var this$__$1 = this;
  return clojure.browser.net.register_service.call(null, this$__$1, service_name, fn, false);
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$ICrossPageChannel$register_service$arity$4 = function(this$, service_name, fn, encode_json_QMARK_) {
  var this$__$1 = this;
  return this$__$1.registerService(cljs.core.name.call(null, service_name), fn, encode_json_QMARK_);
};
clojure.browser.net.xpc_connection = function() {
  var xpc_connection = null;
  var xpc_connection__0 = function() {
    var temp__4092__auto__ = (new goog.Uri(window.location.href)).getParameterValue("xpc");
    if (cljs.core.truth_(temp__4092__auto__)) {
      var config = temp__4092__auto__;
      return new goog.net.xpc.CrossPageChannel(goog.json.parse(config));
    } else {
      return null;
    }
  };
  var xpc_connection__1 = function(config) {
    return new goog.net.xpc.CrossPageChannel(cljs.core.reduce.call(null, function(sum, p__109216) {
      var vec__109217 = p__109216;
      var k = cljs.core.nth.call(null, vec__109217, 0, null);
      var v = cljs.core.nth.call(null, vec__109217, 1, null);
      var temp__4090__auto__ = cljs.core.get.call(null, clojure.browser.net.xpc_config_fields, k);
      if (cljs.core.truth_(temp__4090__auto__)) {
        var field = temp__4090__auto__;
        var G__109218 = sum;
        G__109218[field] = v;
        return G__109218;
      } else {
        return sum;
      }
    }, function() {
      var obj109220 = {};
      return obj109220;
    }(), config));
  };
  xpc_connection = function(config) {
    switch(arguments.length) {
      case 0:
        return xpc_connection__0.call(this);
      case 1:
        return xpc_connection__1.call(this, config);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  xpc_connection.cljs$core$IFn$_invoke$arity$0 = xpc_connection__0;
  xpc_connection.cljs$core$IFn$_invoke$arity$1 = xpc_connection__1;
  return xpc_connection;
}();
goog.provide("clojure.browser.repl");
goog.require("cljs.core");
goog.require("clojure.browser.event");
goog.require("clojure.browser.event");
goog.require("clojure.browser.net");
goog.require("clojure.browser.net");
clojure.browser.repl.xpc_connection = cljs.core.atom.call(null, null);
clojure.browser.repl.repl_print = function repl_print(data) {
  var temp__4090__auto__ = cljs.core.deref.call(null, clojure.browser.repl.xpc_connection);
  if (cljs.core.truth_(temp__4090__auto__)) {
    var conn = temp__4090__auto__;
    return clojure.browser.net.transmit.call(null, conn, new cljs.core.Keyword(null, "print", "print", 1120839199), cljs.core.pr_str.call(null, data));
  } else {
    return null;
  }
};
clojure.browser.repl.evaluate_javascript = function evaluate_javascript(conn, block) {
  var result = function() {
    try {
      return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "status", "status", 4416389988), new cljs.core.Keyword(null, "success", "success", 3441701749), new cljs.core.Keyword(null, "value", "value", 1125876963), [cljs.core.str(eval(block))].join("")], null);
    } catch (e109200) {
      var e = e109200;
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "status", "status", 4416389988), new cljs.core.Keyword(null, "exception", "exception", 2495529921), new cljs.core.Keyword(null, "value", "value", 1125876963), cljs.core.pr_str.call(null, e), new cljs.core.Keyword(null, "stacktrace", "stacktrace", 3069736751), cljs.core.truth_(e.hasOwnProperty("stack")) ? e.stack : "No stacktrace available."], null);
    }
  }();
  return cljs.core.pr_str.call(null, result);
};
clojure.browser.repl.send_result = function send_result(connection, url, data) {
  return clojure.browser.net.transmit.call(null, connection, url, "POST", data, null, 0);
};
clojure.browser.repl.send_print = function() {
  var send_print = null;
  var send_print__2 = function(url, data) {
    return send_print.call(null, url, data, 0);
  };
  var send_print__3 = function(url, data, n) {
    var conn = clojure.browser.net.xhr_connection.call(null);
    clojure.browser.event.listen.call(null, conn, new cljs.core.Keyword(null, "error", "error", 1110689146), function(_) {
      if (n < 10) {
        return send_print.call(null, url, data, n + 1);
      } else {
        return console.log([cljs.core.str("Could not send "), cljs.core.str(data), cljs.core.str(" after "), cljs.core.str(n), cljs.core.str(" attempts.")].join(""));
      }
    });
    return clojure.browser.net.transmit.call(null, conn, url, "POST", data, null, 0);
  };
  send_print = function(url, data, n) {
    switch(arguments.length) {
      case 2:
        return send_print__2.call(this, url, data);
      case 3:
        return send_print__3.call(this, url, data, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  send_print.cljs$core$IFn$_invoke$arity$2 = send_print__2;
  send_print.cljs$core$IFn$_invoke$arity$3 = send_print__3;
  return send_print;
}();
clojure.browser.repl.order = cljs.core.atom.call(null, 0);
clojure.browser.repl.wrap_message = function wrap_message(t, data) {
  return cljs.core.pr_str.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "type", "type", 1017479852), t, new cljs.core.Keyword(null, "content", "content", 1965434859), data, new cljs.core.Keyword(null, "order", "order", 1119910592), cljs.core.swap_BANG_.call(null, clojure.browser.repl.order, cljs.core.inc)], null));
};
clojure.browser.repl.start_evaluator = function start_evaluator(url) {
  var temp__4090__auto__ = clojure.browser.net.xpc_connection.call(null);
  if (cljs.core.truth_(temp__4090__auto__)) {
    var repl_connection = temp__4090__auto__;
    var connection = clojure.browser.net.xhr_connection.call(null);
    clojure.browser.event.listen.call(null, connection, new cljs.core.Keyword(null, "success", "success", 3441701749), function(e) {
      return clojure.browser.net.transmit.call(null, repl_connection, new cljs.core.Keyword(null, "evaluate-javascript", "evaluate-javascript", 2953437843), e.currentTarget.getResponseText(cljs.core.List.EMPTY));
    });
    clojure.browser.net.register_service.call(null, repl_connection, new cljs.core.Keyword(null, "send-result", "send-result", 3729280372), function(data) {
      return clojure.browser.repl.send_result.call(null, connection, url, clojure.browser.repl.wrap_message.call(null, new cljs.core.Keyword(null, "result", "result", 4374444943), data));
    });
    clojure.browser.net.register_service.call(null, repl_connection, new cljs.core.Keyword(null, "print", "print", 1120839199), function(data) {
      return clojure.browser.repl.send_print.call(null, url, clojure.browser.repl.wrap_message.call(null, new cljs.core.Keyword(null, "print", "print", 1120839199), data));
    });
    clojure.browser.net.connect.call(null, repl_connection, cljs.core.constantly.call(null, null));
    return setTimeout(function() {
      return clojure.browser.repl.send_result.call(null, connection, url, clojure.browser.repl.wrap_message.call(null, new cljs.core.Keyword(null, "ready", "ready", 1122290965), "ready"));
    }, 50);
  } else {
    return alert("No 'xpc' param provided to child iframe.");
  }
};
clojure.browser.repl.connect = function connect(repl_server_url) {
  var repl_connection = clojure.browser.net.xpc_connection.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "peer_uri", "peer_uri", 1083496577), repl_server_url], null));
  cljs.core.swap_BANG_.call(null, clojure.browser.repl.xpc_connection, cljs.core.constantly.call(null, repl_connection));
  clojure.browser.net.register_service.call(null, repl_connection, new cljs.core.Keyword(null, "evaluate-javascript", "evaluate-javascript", 2953437843), function(js) {
    return clojure.browser.net.transmit.call(null, repl_connection, new cljs.core.Keyword(null, "send-result", "send-result", 3729280372), clojure.browser.repl.evaluate_javascript.call(null, repl_connection, js));
  });
  return clojure.browser.net.connect.call(null, repl_connection, cljs.core.constantly.call(null, null), function(iframe) {
    return iframe.style.display = "none";
  });
};
goog.provide("cljs.core.async.impl.protocols");
goog.require("cljs.core");
cljs.core.async.impl.protocols.MAX_QUEUE_SIZE = 1024;
cljs.core.async.impl.protocols.ReadPort = function() {
  var obj111806 = {};
  return obj111806;
}();
cljs.core.async.impl.protocols.take_BANG_ = function take_BANG_(port, fn1_handler) {
  if (function() {
    var and__12818__auto__ = port;
    if (and__12818__auto__) {
      return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2(port, fn1_handler);
  } else {
    var x__13457__auto__ = port == null ? null : port;
    return function() {
      var or__12830__auto__ = cljs.core.async.impl.protocols.take_BANG_[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = cljs.core.async.impl.protocols.take_BANG_["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ReadPort.take!", port);
        }
      }
    }().call(null, port, fn1_handler);
  }
};
cljs.core.async.impl.protocols.WritePort = function() {
  var obj111808 = {};
  return obj111808;
}();
cljs.core.async.impl.protocols.put_BANG_ = function put_BANG_(port, val, fn0_handler) {
  if (function() {
    var and__12818__auto__ = port;
    if (and__12818__auto__) {
      return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3(port, val, fn0_handler);
  } else {
    var x__13457__auto__ = port == null ? null : port;
    return function() {
      var or__12830__auto__ = cljs.core.async.impl.protocols.put_BANG_[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = cljs.core.async.impl.protocols.put_BANG_["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "WritePort.put!", port);
        }
      }
    }().call(null, port, val, fn0_handler);
  }
};
cljs.core.async.impl.protocols.Channel = function() {
  var obj111810 = {};
  return obj111810;
}();
cljs.core.async.impl.protocols.close_BANG_ = function close_BANG_(chan) {
  if (function() {
    var and__12818__auto__ = chan;
    if (and__12818__auto__) {
      return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1(chan);
  } else {
    var x__13457__auto__ = chan == null ? null : chan;
    return function() {
      var or__12830__auto__ = cljs.core.async.impl.protocols.close_BANG_[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = cljs.core.async.impl.protocols.close_BANG_["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Channel.close!", chan);
        }
      }
    }().call(null, chan);
  }
};
cljs.core.async.impl.protocols.Handler = function() {
  var obj111812 = {};
  return obj111812;
}();
cljs.core.async.impl.protocols.active_QMARK_ = function active_QMARK_(h) {
  if (function() {
    var and__12818__auto__ = h;
    if (and__12818__auto__) {
      return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1(h);
  } else {
    var x__13457__auto__ = h == null ? null : h;
    return function() {
      var or__12830__auto__ = cljs.core.async.impl.protocols.active_QMARK_[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = cljs.core.async.impl.protocols.active_QMARK_["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Handler.active?", h);
        }
      }
    }().call(null, h);
  }
};
cljs.core.async.impl.protocols.commit = function commit(h) {
  if (function() {
    var and__12818__auto__ = h;
    if (and__12818__auto__) {
      return h.cljs$core$async$impl$protocols$Handler$commit$arity$1;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return h.cljs$core$async$impl$protocols$Handler$commit$arity$1(h);
  } else {
    var x__13457__auto__ = h == null ? null : h;
    return function() {
      var or__12830__auto__ = cljs.core.async.impl.protocols.commit[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = cljs.core.async.impl.protocols.commit["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Handler.commit", h);
        }
      }
    }().call(null, h);
  }
};
cljs.core.async.impl.protocols.Buffer = function() {
  var obj111814 = {};
  return obj111814;
}();
cljs.core.async.impl.protocols.full_QMARK_ = function full_QMARK_(b) {
  if (function() {
    var and__12818__auto__ = b;
    if (and__12818__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1(b);
  } else {
    var x__13457__auto__ = b == null ? null : b;
    return function() {
      var or__12830__auto__ = cljs.core.async.impl.protocols.full_QMARK_[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = cljs.core.async.impl.protocols.full_QMARK_["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.full?", b);
        }
      }
    }().call(null, b);
  }
};
cljs.core.async.impl.protocols.remove_BANG_ = function remove_BANG_(b) {
  if (function() {
    var and__12818__auto__ = b;
    if (and__12818__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1(b);
  } else {
    var x__13457__auto__ = b == null ? null : b;
    return function() {
      var or__12830__auto__ = cljs.core.async.impl.protocols.remove_BANG_[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = cljs.core.async.impl.protocols.remove_BANG_["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.remove!", b);
        }
      }
    }().call(null, b);
  }
};
cljs.core.async.impl.protocols.add_BANG_ = function add_BANG_(b, itm) {
  if (function() {
    var and__12818__auto__ = b;
    if (and__12818__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2(b, itm);
  } else {
    var x__13457__auto__ = b == null ? null : b;
    return function() {
      var or__12830__auto__ = cljs.core.async.impl.protocols.add_BANG_[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = cljs.core.async.impl.protocols.add_BANG_["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.add!", b);
        }
      }
    }().call(null, b, itm);
  }
};
cljs.core.async.impl.protocols.UnblockingBuffer = function() {
  var obj111816 = {};
  return obj111816;
}();
goog.provide("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.ioc_helpers.FN_IDX = 0;
cljs.core.async.impl.ioc_helpers.STATE_IDX = 1;
cljs.core.async.impl.ioc_helpers.VALUE_IDX = 2;
cljs.core.async.impl.ioc_helpers.BINDINGS_IDX = 3;
cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES = 4;
cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION = 5;
cljs.core.async.impl.ioc_helpers.USER_START_IDX = 6;
cljs.core.async.impl.ioc_helpers.aset_object = function aset_object(arr, idx, o) {
  return arr[idx][o];
};
cljs.core.async.impl.ioc_helpers.aget_object = function aget_object(arr, idx) {
  return arr[idx];
};
cljs.core.async.impl.ioc_helpers.finished_QMARK_ = function finished_QMARK_(state_array) {
  return cljs.core.keyword_identical_QMARK_.call(null, state_array[cljs.core.async.impl.ioc_helpers.STATE_IDX], new cljs.core.Keyword(null, "finished", "finished", 4635210724));
};
cljs.core.async.impl.ioc_helpers.fn_handler = function fn_handler(f) {
  if (typeof cljs.core.async.impl.ioc_helpers.t111834 !== "undefined") {
  } else {
    cljs.core.async.impl.ioc_helpers.t111834 = function(f, fn_handler, meta111835) {
      this.f = f;
      this.fn_handler = fn_handler;
      this.meta111835 = meta111835;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.impl.ioc_helpers.t111834.cljs$lang$type = true;
    cljs.core.async.impl.ioc_helpers.t111834.cljs$lang$ctorStr = "cljs.core.async.impl.ioc-helpers/t111834";
    cljs.core.async.impl.ioc_helpers.t111834.cljs$lang$ctorPrWriter = function(this__13397__auto__, writer__13398__auto__, opt__13399__auto__) {
      return cljs.core._write.call(null, writer__13398__auto__, "cljs.core.async.impl.ioc-helpers/t111834");
    };
    cljs.core.async.impl.ioc_helpers.t111834.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.impl.ioc_helpers.t111834.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.impl.ioc_helpers.t111834.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.impl.ioc_helpers.t111834.prototype.cljs$core$IMeta$_meta$arity$1 = function(_111836) {
      var self__ = this;
      var _111836__$1 = this;
      return self__.meta111835;
    };
    cljs.core.async.impl.ioc_helpers.t111834.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_111836, meta111835__$1) {
      var self__ = this;
      var _111836__$1 = this;
      return new cljs.core.async.impl.ioc_helpers.t111834(self__.f, self__.fn_handler, meta111835__$1);
    };
    cljs.core.async.impl.ioc_helpers.__GT_t111834 = function __GT_t111834(f__$1, fn_handler__$1, meta111835) {
      return new cljs.core.async.impl.ioc_helpers.t111834(f__$1, fn_handler__$1, meta111835);
    };
  }
  return new cljs.core.async.impl.ioc_helpers.t111834(f, fn_handler, null);
};
cljs.core.async.impl.ioc_helpers.run_state_machine = function run_state_machine(state) {
  return cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.FN_IDX).call(null, state);
};
cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped = function run_state_machine_wrapped(state) {
  try {
    return cljs.core.async.impl.ioc_helpers.run_state_machine.call(null, state);
  } catch (e111838) {
    if (e111838 instanceof Object) {
      var ex = e111838;
      cljs.core.async.impl.protocols.close_BANG_.call(null, cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.USER_START_IDX));
      throw ex;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw e111838;
      } else {
        return null;
      }
    }
  }
};
cljs.core.async.impl.ioc_helpers.take_BANG_ = function take_BANG_(state, blk, c) {
  var temp__4090__auto__ = cljs.core.async.impl.protocols.take_BANG_.call(null, c, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(x) {
    var statearr_111841_111843 = state;
    statearr_111841_111843[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = x;
    statearr_111841_111843[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__4090__auto__)) {
    var cb = temp__4090__auto__;
    var statearr_111842_111844 = state;
    statearr_111842_111844[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_111842_111844[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.put_BANG_ = function put_BANG_(state, blk, c, val) {
  var temp__4090__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, c, val, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function() {
    var statearr_111847_111849 = state;
    statearr_111847_111849[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = null;
    statearr_111847_111849[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__4090__auto__)) {
    var cb = temp__4090__auto__;
    var statearr_111848_111850 = state;
    statearr_111848_111850[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_111848_111850[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_ = function() {
  var ioc_alts_BANG___delegate = function(state, cont_block, ports, p__111851) {
    var map__111856 = p__111851;
    var map__111856__$1 = cljs.core.seq_QMARK_.call(null, map__111856) ? cljs.core.apply.call(null, cljs.core.hash_map, map__111856) : map__111856;
    var opts = map__111856__$1;
    var statearr_111857_111860 = state;
    statearr_111857_111860[cljs.core.async.impl.ioc_helpers.STATE_IDX] = cont_block;
    var temp__4092__auto__ = cljs.core.async.do_alts.call(null, function(val) {
      var statearr_111858_111861 = state;
      statearr_111858_111861[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = val;
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
    }, ports, opts);
    if (cljs.core.truth_(temp__4092__auto__)) {
      var cb = temp__4092__auto__;
      var statearr_111859_111862 = state;
      statearr_111859_111862[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
    } else {
      return null;
    }
  };
  var ioc_alts_BANG_ = function(state, cont_block, ports, var_args) {
    var p__111851 = null;
    if (arguments.length > 3) {
      p__111851 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
    }
    return ioc_alts_BANG___delegate.call(this, state, cont_block, ports, p__111851);
  };
  ioc_alts_BANG_.cljs$lang$maxFixedArity = 3;
  ioc_alts_BANG_.cljs$lang$applyTo = function(arglist__111863) {
    var state = cljs.core.first(arglist__111863);
    arglist__111863 = cljs.core.next(arglist__111863);
    var cont_block = cljs.core.first(arglist__111863);
    arglist__111863 = cljs.core.next(arglist__111863);
    var ports = cljs.core.first(arglist__111863);
    var p__111851 = cljs.core.rest(arglist__111863);
    return ioc_alts_BANG___delegate(state, cont_block, ports, p__111851);
  };
  ioc_alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = ioc_alts_BANG___delegate;
  return ioc_alts_BANG_;
}();
cljs.core.async.impl.ioc_helpers.return_chan = function return_chan(state, value) {
  var c = state[cljs.core.async.impl.ioc_helpers.USER_START_IDX];
  if (value == null) {
  } else {
    cljs.core.async.impl.protocols.put_BANG_.call(null, c, value, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function() {
      return null;
    }));
  }
  cljs.core.async.impl.protocols.close_BANG_.call(null, c);
  return c;
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame = function(catch_block, catch_exception, finally_block, continue_block, prev, __meta, __extmap) {
  this.catch_block = catch_block;
  this.catch_exception = catch_exception;
  this.finally_block = finally_block;
  this.continue_block = continue_block;
  this.prev = prev;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 5) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IHash$_hash$arity$1 = function(this__13411__auto__) {
  var self__ = this;
  var this__13411__auto____$1 = this;
  var h__13241__auto__ = self__.__hash;
  if (!(h__13241__auto__ == null)) {
    return h__13241__auto__;
  } else {
    var h__13241__auto____$1 = cljs.core.hash_imap.call(null, this__13411__auto____$1);
    self__.__hash = h__13241__auto____$1;
    return h__13241__auto____$1;
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__13416__auto__, k__13417__auto__) {
  var self__ = this;
  var this__13416__auto____$1 = this;
  return cljs.core._lookup.call(null, this__13416__auto____$1, k__13417__auto__, null);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__13418__auto__, k111865, else__13419__auto__) {
  var self__ = this;
  var this__13418__auto____$1 = this;
  if (cljs.core.keyword_identical_QMARK_.call(null, k111865, new cljs.core.Keyword(null, "catch-block", "catch-block", 2343862893))) {
    return self__.catch_block;
  } else {
    if (cljs.core.keyword_identical_QMARK_.call(null, k111865, new cljs.core.Keyword(null, "catch-exception", "catch-exception", 1686480687))) {
      return self__.catch_exception;
    } else {
      if (cljs.core.keyword_identical_QMARK_.call(null, k111865, new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429))) {
        return self__.finally_block;
      } else {
        if (cljs.core.keyword_identical_QMARK_.call(null, k111865, new cljs.core.Keyword(null, "continue-block", "continue-block", 1486987097))) {
          return self__.continue_block;
        } else {
          if (cljs.core.keyword_identical_QMARK_.call(null, k111865, new cljs.core.Keyword(null, "prev", "prev", 1017353637))) {
            return self__.prev;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.get.call(null, self__.__extmap, k111865, else__13419__auto__);
            } else {
              return null;
            }
          }
        }
      }
    }
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__13423__auto__, k__13424__auto__, G__111864) {
  var self__ = this;
  var this__13423__auto____$1 = this;
  var pred__111867 = cljs.core.keyword_identical_QMARK_;
  var expr__111868 = k__13424__auto__;
  if (cljs.core.truth_(pred__111867.call(null, new cljs.core.Keyword(null, "catch-block", "catch-block", 2343862893), expr__111868))) {
    return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(G__111864, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__111867.call(null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", 1686480687), expr__111868))) {
      return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, G__111864, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__111867.call(null, new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429), expr__111868))) {
        return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, G__111864, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
      } else {
        if (cljs.core.truth_(pred__111867.call(null, new cljs.core.Keyword(null, "continue-block", "continue-block", 1486987097), expr__111868))) {
          return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, G__111864, self__.prev, self__.__meta, self__.__extmap, null);
        } else {
          if (cljs.core.truth_(pred__111867.call(null, new cljs.core.Keyword(null, "prev", "prev", 1017353637), expr__111868))) {
            return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, G__111864, self__.__meta, self__.__extmap, null);
          } else {
            return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__13424__auto__, G__111864), null);
          }
        }
      }
    }
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__13430__auto__, writer__13431__auto__, opts__13432__auto__) {
  var self__ = this;
  var this__13430__auto____$1 = this;
  var pr_pair__13433__auto__ = function(keyval__13434__auto__) {
    return cljs.core.pr_sequential_writer.call(null, writer__13431__auto__, cljs.core.pr_writer, "", " ", "", opts__13432__auto__, keyval__13434__auto__);
  };
  return cljs.core.pr_sequential_writer.call(null, writer__13431__auto__, pr_pair__13433__auto__, "#cljs.core.async.impl.ioc-helpers.ExceptionFrame{", ", ", "}", opts__13432__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-block", "catch-block", 2343862893), self__.catch_block], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-exception", "catch-exception", 1686480687), self__.catch_exception], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429), self__.finally_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "continue-block", "continue-block", 1486987097), 
  self__.continue_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "prev", "prev", 1017353637), self__.prev], null)], null), self__.__extmap));
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__13421__auto__, entry__13422__auto__) {
  var self__ = this;
  var this__13421__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__13422__auto__)) {
    return cljs.core._assoc.call(null, this__13421__auto____$1, cljs.core._nth.call(null, entry__13422__auto__, 0), cljs.core._nth.call(null, entry__13422__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__13421__auto____$1, entry__13422__auto__);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__13428__auto__) {
  var self__ = this;
  var this__13428__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-block", "catch-block", 2343862893), self__.catch_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-exception", "catch-exception", 1686480687), self__.catch_exception], 
  null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429), self__.finally_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "continue-block", "continue-block", 1486987097), self__.continue_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "prev", 
  "prev", 1017353637), self__.prev], null)], null), self__.__extmap));
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICounted$_count$arity$1 = function(this__13420__auto__) {
  var self__ = this;
  var this__13420__auto____$1 = this;
  return 5 + cljs.core.count.call(null, self__.__extmap);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__13412__auto__, other__13413__auto__) {
  var self__ = this;
  var this__13412__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__12818__auto__ = other__13413__auto__;
    if (cljs.core.truth_(and__12818__auto__)) {
      return this__13412__auto____$1.constructor === other__13413__auto__.constructor && cljs.core.equiv_map.call(null, this__13412__auto____$1, other__13413__auto__);
    } else {
      return and__12818__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__13415__auto__, G__111864) {
  var self__ = this;
  var this__13415__auto____$1 = this;
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, G__111864, self__.__extmap, self__.__hash);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__13410__auto__) {
  var self__ = this;
  var this__13410__auto____$1 = this;
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, self__.__hash);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__13414__auto__) {
  var self__ = this;
  var this__13414__auto____$1 = this;
  return self__.__meta;
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__13425__auto__, k__13426__auto__) {
  var self__ = this;
  var this__13425__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429), null, new cljs.core.Keyword(null, "catch-block", "catch-block", 2343862893), null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", 1686480687), null, new cljs.core.Keyword(null, "continue-block", "continue-block", 1486987097), null, new cljs.core.Keyword(null, "prev", "prev", 1017353637), 
  null], null), null), k__13426__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__13425__auto____$1), self__.__meta), k__13426__auto__);
  } else {
    return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__13426__auto__)), null);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$type = true;
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$ctorPrSeq = function(this__13450__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "cljs.core.async.impl.ioc-helpers/ExceptionFrame");
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$ctorPrWriter = function(this__13450__auto__, writer__13451__auto__) {
  return cljs.core._write.call(null, writer__13451__auto__, "cljs.core.async.impl.ioc-helpers/ExceptionFrame");
};
cljs.core.async.impl.ioc_helpers.__GT_ExceptionFrame = function __GT_ExceptionFrame(catch_block, catch_exception, finally_block, continue_block, prev) {
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(catch_block, catch_exception, finally_block, continue_block, prev);
};
cljs.core.async.impl.ioc_helpers.map__GT_ExceptionFrame = function map__GT_ExceptionFrame(G__111866) {
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame((new cljs.core.Keyword(null, "catch-block", "catch-block", 2343862893)).cljs$core$IFn$_invoke$arity$1(G__111866), (new cljs.core.Keyword(null, "catch-exception", "catch-exception", 1686480687)).cljs$core$IFn$_invoke$arity$1(G__111866), (new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429)).cljs$core$IFn$_invoke$arity$1(G__111866), (new cljs.core.Keyword(null, "continue-block", "continue-block", 1486987097)).cljs$core$IFn$_invoke$arity$1(G__111866), 
  (new cljs.core.Keyword(null, "prev", "prev", 1017353637)).cljs$core$IFn$_invoke$arity$1(G__111866), null, cljs.core.dissoc.call(null, G__111866, new cljs.core.Keyword(null, "catch-block", "catch-block", 2343862893), new cljs.core.Keyword(null, "catch-exception", "catch-exception", 1686480687), new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429), new cljs.core.Keyword(null, "continue-block", "continue-block", 1486987097), new cljs.core.Keyword(null, "prev", "prev", 1017353637)));
};
cljs.core.async.impl.ioc_helpers.add_exception_frame = function add_exception_frame(state, catch_block, catch_exception, finally_block, continue_block) {
  var statearr_111871 = state;
  statearr_111871[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.async.impl.ioc_helpers.__GT_ExceptionFrame.call(null, catch_block, catch_exception, finally_block, continue_block, cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES));
  return statearr_111871;
};
cljs.core.async.impl.ioc_helpers.process_exception = function process_exception(state) {
  while (true) {
    var exception_frame = cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES);
    var catch_block = (new cljs.core.Keyword(null, "catch-block", "catch-block", 2343862893)).cljs$core$IFn$_invoke$arity$1(exception_frame);
    var catch_exception = (new cljs.core.Keyword(null, "catch-exception", "catch-exception", 1686480687)).cljs$core$IFn$_invoke$arity$1(exception_frame);
    var exception = cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION);
    if (cljs.core.truth_(function() {
      var and__12818__auto__ = exception;
      if (cljs.core.truth_(and__12818__auto__)) {
        return cljs.core.not.call(null, exception_frame);
      } else {
        return and__12818__auto__;
      }
    }())) {
      throw exception;
    } else {
      if (cljs.core.truth_(function() {
        var and__12818__auto__ = exception;
        if (cljs.core.truth_(and__12818__auto__)) {
          var and__12818__auto____$1 = catch_block;
          if (cljs.core.truth_(and__12818__auto____$1)) {
            return exception instanceof catch_exception;
          } else {
            return and__12818__auto____$1;
          }
        } else {
          return and__12818__auto__;
        }
      }())) {
        var statearr_111877 = state;
        statearr_111877[cljs.core.async.impl.ioc_helpers.STATE_IDX] = catch_block;
        statearr_111877[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = exception;
        statearr_111877[cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION] = null;
        statearr_111877[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "catch-block", "catch-block", 2343862893), null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", 1686480687), null);
        return statearr_111877;
      } else {
        if (cljs.core.truth_(function() {
          var and__12818__auto__ = exception;
          if (cljs.core.truth_(and__12818__auto__)) {
            return cljs.core.not.call(null, catch_block) && cljs.core.not.call(null, (new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429)).cljs$core$IFn$_invoke$arity$1(exception_frame));
          } else {
            return and__12818__auto__;
          }
        }())) {
          var statearr_111878_111882 = state;
          statearr_111878_111882[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = (new cljs.core.Keyword(null, "prev", "prev", 1017353637)).cljs$core$IFn$_invoke$arity$1(exception_frame);
          var G__111883 = state;
          state = G__111883;
          continue;
        } else {
          if (cljs.core.truth_(function() {
            var and__12818__auto__ = exception;
            if (cljs.core.truth_(and__12818__auto__)) {
              var and__12818__auto____$1 = cljs.core.not.call(null, catch_block);
              if (and__12818__auto____$1) {
                return(new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              } else {
                return and__12818__auto____$1;
              }
            } else {
              return and__12818__auto__;
            }
          }())) {
            var statearr_111879 = state;
            statearr_111879[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429)).cljs$core$IFn$_invoke$arity$1(exception_frame);
            statearr_111879[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429), null);
            return statearr_111879;
          } else {
            if (cljs.core.truth_(function() {
              var and__12818__auto__ = cljs.core.not.call(null, exception);
              if (and__12818__auto__) {
                return(new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              } else {
                return and__12818__auto__;
              }
            }())) {
              var statearr_111880 = state;
              statearr_111880[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              statearr_111880[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429), null);
              return statearr_111880;
            } else {
              if (cljs.core.not.call(null, exception) && cljs.core.not.call(null, (new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429)).cljs$core$IFn$_invoke$arity$1(exception_frame))) {
                var statearr_111881 = state;
                statearr_111881[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "continue-block", "continue-block", 1486987097)).cljs$core$IFn$_invoke$arity$1(exception_frame);
                statearr_111881[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = (new cljs.core.Keyword(null, "prev", "prev", 1017353637)).cljs$core$IFn$_invoke$arity$1(exception_frame);
                return statearr_111881;
              } else {
                if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                  if (false) {
                    return null;
                  } else {
                    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("No matching clause"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, false))].join(""));
                  }
                } else {
                  return null;
                }
              }
            }
          }
        }
      }
    }
    break;
  }
};
goog.provide("cljs.core.async.impl.buffers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.buffers.acopy = function acopy(src, src_start, dest, dest_start, len) {
  var cnt = 0;
  while (true) {
    if (cnt < len) {
      dest[dest_start + cnt] = src[src_start + cnt];
      var G__111828 = cnt + 1;
      cnt = G__111828;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.RingBuffer = function(head, tail, length, arr) {
  this.head = head;
  this.tail = tail;
  this.length = length;
  this.arr = arr;
};
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/RingBuffer";
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorPrWriter = function(this__13397__auto__, writer__13398__auto__, opt__13399__auto__) {
  return cljs.core._write.call(null, writer__13398__auto__, "cljs.core.async.impl.buffers/RingBuffer");
};
cljs.core.async.impl.buffers.RingBuffer.prototype.pop = function() {
  var self__ = this;
  var _ = this;
  if (self__.length === 0) {
    return null;
  } else {
    var x = self__.arr[self__.tail];
    self__.arr[self__.tail] = null;
    self__.tail = (self__.tail + 1) % self__.arr.length;
    self__.length = self__.length - 1;
    return x;
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unshift = function(x) {
  var self__ = this;
  var _ = this;
  self__.arr[self__.head] = x;
  self__.head = (self__.head + 1) % self__.arr.length;
  self__.length = self__.length + 1;
  return null;
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unbounded_unshift = function(x) {
  var self__ = this;
  var this$ = this;
  if (self__.length + 1 === self__.arr.length) {
    this$.resize();
  } else {
  }
  return this$.unshift(x);
};
cljs.core.async.impl.buffers.RingBuffer.prototype.resize = function() {
  var self__ = this;
  var _ = this;
  var new_arr_size = self__.arr.length * 2;
  var new_arr = new Array(new_arr_size);
  if (self__.tail < self__.head) {
    cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.length);
    self__.tail = 0;
    self__.head = self__.length;
    return self__.arr = new_arr;
  } else {
    if (self__.tail > self__.head) {
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.arr.length - self__.tail);
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, 0, new_arr, self__.arr.length - self__.tail, self__.head);
      self__.tail = 0;
      self__.head = self__.length;
      return self__.arr = new_arr;
    } else {
      if (self__.tail === self__.head) {
        self__.tail = 0;
        self__.head = 0;
        return self__.arr = new_arr;
      } else {
        return null;
      }
    }
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.cleanup = function(keep_QMARK_) {
  var self__ = this;
  var this$ = this;
  var n__13678__auto__ = self__.length;
  var x = 0;
  while (true) {
    if (x < n__13678__auto__) {
      var v_111829 = this$.pop();
      if (keep_QMARK_.call(null, v_111829)) {
        this$.unshift(v_111829);
      } else {
      }
      var G__111830 = x + 1;
      x = G__111830;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.__GT_RingBuffer = function __GT_RingBuffer(head, tail, length, arr) {
  return new cljs.core.async.impl.buffers.RingBuffer(head, tail, length, arr);
};
cljs.core.async.impl.buffers.ring_buffer = function ring_buffer(n) {
  if (n > 0) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Can't create a ring buffer of size 0"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3e", "\x3e", -1640531465, null), new cljs.core.Symbol(null, "n", "n", -1640531417, null), 0)))].join(""));
  }
  return new cljs.core.async.impl.buffers.RingBuffer(0, 0, 0, new Array(n));
};
cljs.core.async.impl.buffers.FixedBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/FixedBuffer";
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorPrWriter = function(this__13397__auto__, writer__13398__auto__, opt__13399__auto__) {
  return cljs.core._write.call(null, writer__13398__auto__, "cljs.core.async.impl.buffers/FixedBuffer");
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length === self__.n;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core.not.call(null, cljs.core.async.impl.protocols.full_QMARK_.call(null, this$__$1))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Can't add to a full buffer"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", -1640422260, null), cljs.core.list(new cljs.core.Symbol("impl", "full?", "impl/full?", -1337857039, null), new cljs.core.Symbol(null, "this", "this", -1636972457, null)))))].join(""));
  }
  return self__.buf.unshift(itm);
};
cljs.core.async.impl.buffers.__GT_FixedBuffer = function __GT_FixedBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(buf, n);
};
cljs.core.async.impl.buffers.fixed_buffer = function fixed_buffer(n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.DroppingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/DroppingBuffer";
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorPrWriter = function(this__13397__auto__, writer__13398__auto__, opt__13399__auto__) {
  return cljs.core._write.call(null, writer__13398__auto__, "cljs.core.async.impl.buffers/DroppingBuffer");
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
    return null;
  } else {
    return self__.buf.unshift(itm);
  }
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$UnblockingBuffer$ = true;
cljs.core.async.impl.buffers.__GT_DroppingBuffer = function __GT_DroppingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(buf, n);
};
cljs.core.async.impl.buffers.dropping_buffer = function dropping_buffer(n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.SlidingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/SlidingBuffer";
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorPrWriter = function(this__13397__auto__, writer__13398__auto__, opt__13399__auto__) {
  return cljs.core._write.call(null, writer__13398__auto__, "cljs.core.async.impl.buffers/SlidingBuffer");
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
    cljs.core.async.impl.protocols.remove_BANG_.call(null, this$__$1);
  } else {
  }
  return self__.buf.unshift(itm);
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$UnblockingBuffer$ = true;
cljs.core.async.impl.buffers.__GT_SlidingBuffer = function __GT_SlidingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(buf, n);
};
cljs.core.async.impl.buffers.sliding_buffer = function sliding_buffer(n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
goog.provide("cljs.core.async.impl.dispatch");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.buffers");
cljs.core.async.impl.dispatch.message_channel = null;
cljs.core.async.impl.dispatch.tasks = cljs.core.async.impl.buffers.ring_buffer.call(null, 32);
cljs.core.async.impl.dispatch.running_QMARK_ = false;
cljs.core.async.impl.dispatch.queued_QMARK_ = false;
cljs.core.async.impl.dispatch.TASK_BATCH_SIZE = 1024;
cljs.core.async.impl.dispatch.process_messages = function process_messages() {
  cljs.core.async.impl.dispatch.running_QMARK_ = true;
  cljs.core.async.impl.dispatch.queued_QMARK_ = false;
  var count_111817 = 0;
  while (true) {
    var m_111818 = cljs.core.async.impl.dispatch.tasks.pop();
    if (m_111818 == null) {
    } else {
      m_111818.call(null);
      if (count_111817 < cljs.core.async.impl.dispatch.TASK_BATCH_SIZE) {
        var G__111819 = count_111817 + 1;
        count_111817 = G__111819;
        continue;
      } else {
      }
    }
    break;
  }
  cljs.core.async.impl.dispatch.running_QMARK_ = false;
  if (cljs.core.async.impl.dispatch.tasks.length > 0) {
    return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
  } else {
    return null;
  }
};
if (typeof MessageChannel !== "undefined") {
  cljs.core.async.impl.dispatch.message_channel = new MessageChannel;
  cljs.core.async.impl.dispatch.message_channel.port1.onmessage = function(msg) {
    return cljs.core.async.impl.dispatch.process_messages.call(null);
  };
} else {
}
cljs.core.async.impl.dispatch.queue_dispatcher = function queue_dispatcher() {
  if (cljs.core.truth_(function() {
    var and__12818__auto__ = cljs.core.async.impl.dispatch.queued_QMARK_;
    if (and__12818__auto__) {
      return cljs.core.async.impl.dispatch.running_QMARK_;
    } else {
      return and__12818__auto__;
    }
  }())) {
    return null;
  } else {
    cljs.core.async.impl.dispatch.queued_QMARK_ = true;
    if (typeof MessageChannel !== "undefined") {
      return cljs.core.async.impl.dispatch.message_channel.port2.postMessage(0);
    } else {
      if (typeof setImmediate !== "undefined") {
        return setImmediate(cljs.core.async.impl.dispatch.process_messages);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return setTimeout(cljs.core.async.impl.dispatch.process_messages, 0);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.async.impl.dispatch.run = function run(f) {
  cljs.core.async.impl.dispatch.tasks.unbounded_unshift(f);
  return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
};
cljs.core.async.impl.dispatch.queue_delay = function queue_delay(f, delay) {
  return setTimeout(f, delay);
};
goog.provide("cljs.core.async.impl.channels");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.channels.box = function box(val) {
  if (typeof cljs.core.async.impl.channels.t111823 !== "undefined") {
  } else {
    cljs.core.async.impl.channels.t111823 = function(val, box, meta111824) {
      this.val = val;
      this.box = box;
      this.meta111824 = meta111824;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 425984;
    };
    cljs.core.async.impl.channels.t111823.cljs$lang$type = true;
    cljs.core.async.impl.channels.t111823.cljs$lang$ctorStr = "cljs.core.async.impl.channels/t111823";
    cljs.core.async.impl.channels.t111823.cljs$lang$ctorPrWriter = function(this__13397__auto__, writer__13398__auto__, opt__13399__auto__) {
      return cljs.core._write.call(null, writer__13398__auto__, "cljs.core.async.impl.channels/t111823");
    };
    cljs.core.async.impl.channels.t111823.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.val;
    };
    cljs.core.async.impl.channels.t111823.prototype.cljs$core$IMeta$_meta$arity$1 = function(_111825) {
      var self__ = this;
      var _111825__$1 = this;
      return self__.meta111824;
    };
    cljs.core.async.impl.channels.t111823.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_111825, meta111824__$1) {
      var self__ = this;
      var _111825__$1 = this;
      return new cljs.core.async.impl.channels.t111823(self__.val, self__.box, meta111824__$1);
    };
    cljs.core.async.impl.channels.__GT_t111823 = function __GT_t111823(val__$1, box__$1, meta111824) {
      return new cljs.core.async.impl.channels.t111823(val__$1, box__$1, meta111824);
    };
  }
  return new cljs.core.async.impl.channels.t111823(val, box, null);
};
cljs.core.async.impl.channels.PutBox = function(handler, val) {
  this.handler = handler;
  this.val = val;
};
cljs.core.async.impl.channels.PutBox.cljs$lang$type = true;
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorStr = "cljs.core.async.impl.channels/PutBox";
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorPrWriter = function(this__13400__auto__, writer__13401__auto__, opts__13402__auto__) {
  return cljs.core._write.call(null, writer__13401__auto__, "cljs.core.async.impl.channels/PutBox");
};
cljs.core.async.impl.channels.__GT_PutBox = function __GT_PutBox(handler, val) {
  return new cljs.core.async.impl.channels.PutBox(handler, val);
};
cljs.core.async.impl.channels.put_active_QMARK_ = function put_active_QMARK_(box) {
  return cljs.core.async.impl.protocols.active_QMARK_.call(null, box.handler);
};
cljs.core.async.impl.channels.MAX_DIRTY = 64;
cljs.core.async.impl.channels.ManyToManyChannel = function(takes, dirty_takes, puts, dirty_puts, buf, closed) {
  this.takes = takes;
  this.dirty_takes = dirty_takes;
  this.puts = puts;
  this.dirty_puts = dirty_puts;
  this.buf = buf;
  this.closed = closed;
};
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$type = true;
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorStr = "cljs.core.async.impl.channels/ManyToManyChannel";
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorPrWriter = function(this__13397__auto__, writer__13398__auto__, opt__13399__auto__) {
  return cljs.core._write.call(null, writer__13398__auto__, "cljs.core.async.impl.channels/ManyToManyChannel");
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.closed) {
    return null;
  } else {
    self__.closed = true;
    while (true) {
      var taker_111826 = self__.takes.pop();
      if (taker_111826 == null) {
      } else {
        if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker_111826)) {
          var take_cb_111827 = cljs.core.async.impl.protocols.commit.call(null, taker_111826);
          cljs.core.async.impl.dispatch.run.call(null, function(take_cb_111827, taker_111826) {
            return function() {
              return take_cb_111827.call(null, null);
            };
          }(take_cb_111827, taker_111826));
        } else {
        }
        continue;
      }
      break;
    }
    return null;
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(this$, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return null;
  } else {
    if (!(self__.buf == null) && cljs.core.count.call(null, self__.buf) > 0) {
      var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
      return cljs.core.async.impl.channels.box.call(null, cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf));
    } else {
      while (true) {
        var putter = self__.puts.pop();
        if (!(putter == null)) {
          var put_handler = putter.handler;
          var val = putter.val;
          if (cljs.core.async.impl.protocols.active_QMARK_.call(null, put_handler)) {
            var put_cb = cljs.core.async.impl.protocols.commit.call(null, put_handler);
            var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
            cljs.core.async.impl.dispatch.run.call(null, put_cb);
            return cljs.core.async.impl.channels.box.call(null, val);
          } else {
            continue;
          }
        } else {
          if (self__.closed) {
            var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
            return cljs.core.async.impl.channels.box.call(null, null);
          } else {
            if (self__.dirty_takes > cljs.core.async.impl.channels.MAX_DIRTY) {
              self__.dirty_takes = 0;
              self__.takes.cleanup(cljs.core.async.impl.protocols.active_QMARK_);
            } else {
              self__.dirty_takes = self__.dirty_takes + 1;
            }
            if (self__.takes.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
            } else {
              throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("No more than "), cljs.core.str(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE), cljs.core.str(" pending takes are allowed on a single channel.")].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c", "\x3c", -1640531467, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", 1395928862, null), new cljs.core.Symbol(null, 
              "takes", "takes", -1530407291, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", -1989946393, null))))].join(""));
            }
            self__.takes.unbounded_unshift(handler);
            return null;
          }
        }
        break;
      }
    }
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(this$, val, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!(val == null)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Can't put nil in on a channel"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", -1640422260, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", -1637150201, null), new cljs.core.Symbol(null, "val", "val", -1640415014, null)))))].join(""));
  }
  var closed__$1 = self__.closed;
  if (closed__$1 || !cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return cljs.core.async.impl.channels.box.call(null, null);
  } else {
    while (true) {
      var taker = self__.takes.pop();
      if (!(taker == null)) {
        if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker)) {
          var take_cb = cljs.core.async.impl.protocols.commit.call(null, taker);
          var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
          cljs.core.async.impl.dispatch.run.call(null, function(take_cb, _, taker) {
            return function() {
              return take_cb.call(null, val);
            };
          }(take_cb, _, taker));
          return cljs.core.async.impl.channels.box.call(null, null);
        } else {
          continue;
        }
      } else {
        if (!(self__.buf == null || cljs.core.async.impl.protocols.full_QMARK_.call(null, self__.buf))) {
          var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
          cljs.core.async.impl.protocols.add_BANG_.call(null, self__.buf, val);
          return cljs.core.async.impl.channels.box.call(null, null);
        } else {
          if (self__.dirty_puts > cljs.core.async.impl.channels.MAX_DIRTY) {
            self__.dirty_puts = 0;
            self__.puts.cleanup(cljs.core.async.impl.channels.put_active_QMARK_);
          } else {
            self__.dirty_puts = self__.dirty_puts + 1;
          }
          if (self__.puts.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
          } else {
            throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("No more than "), cljs.core.str(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE), cljs.core.str(" pending puts are allowed on a single channel."), cljs.core.str(" Consider using a windowed buffer.")].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c", "\x3c", -1640531467, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", 
            1395928862, null), new cljs.core.Symbol(null, "puts", "puts", -1637078787, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", -1989946393, null))))].join(""));
          }
          self__.puts.unbounded_unshift(new cljs.core.async.impl.channels.PutBox(handler, val));
          return null;
        }
      }
      break;
    }
  }
};
cljs.core.async.impl.channels.__GT_ManyToManyChannel = function __GT_ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed) {
  return new cljs.core.async.impl.channels.ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed);
};
cljs.core.async.impl.channels.chan = function chan(buf) {
  return new cljs.core.async.impl.channels.ManyToManyChannel(cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, buf, null);
};
goog.provide("cljs.core.async.impl.timers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.timers.MAX_LEVEL = 15;
cljs.core.async.impl.timers.P = 1 / 2;
cljs.core.async.impl.timers.random_level = function() {
  var random_level = null;
  var random_level__0 = function() {
    return random_level.call(null, 0);
  };
  var random_level__1 = function(level) {
    while (true) {
      if (Math.random() < cljs.core.async.impl.timers.P && level < cljs.core.async.impl.timers.MAX_LEVEL) {
        var G__111781 = level + 1;
        level = G__111781;
        continue;
      } else {
        return level;
      }
      break;
    }
  };
  random_level = function(level) {
    switch(arguments.length) {
      case 0:
        return random_level__0.call(this);
      case 1:
        return random_level__1.call(this, level);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  random_level.cljs$core$IFn$_invoke$arity$0 = random_level__0;
  random_level.cljs$core$IFn$_invoke$arity$1 = random_level__1;
  return random_level;
}();
cljs.core.async.impl.timers.SkipListNode = function(key, val, forward) {
  this.key = key;
  this.val = val;
  this.forward = forward;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
};
cljs.core.async.impl.timers.SkipListNode.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipListNode";
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorPrWriter = function(this__13397__auto__, writer__13398__auto__, opt__13399__auto__) {
  return cljs.core._write.call(null, writer__13398__auto__, "cljs.core.async.impl.timers/SkipListNode");
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.async.impl.timers.__GT_SkipListNode = function __GT_SkipListNode(key, val, forward) {
  return new cljs.core.async.impl.timers.SkipListNode(key, val, forward);
};
cljs.core.async.impl.timers.skip_list_node = function() {
  var skip_list_node = null;
  var skip_list_node__1 = function(level) {
    return skip_list_node.call(null, null, null, level);
  };
  var skip_list_node__3 = function(k, v, level) {
    var arr = new Array(level + 1);
    var i_111782 = 0;
    while (true) {
      if (i_111782 < arr.length) {
        arr[i_111782] = null;
        var G__111783 = i_111782 + 1;
        i_111782 = G__111783;
        continue;
      } else {
      }
      break;
    }
    return new cljs.core.async.impl.timers.SkipListNode(k, v, arr);
  };
  skip_list_node = function(k, v, level) {
    switch(arguments.length) {
      case 1:
        return skip_list_node__1.call(this, k);
      case 3:
        return skip_list_node__3.call(this, k, v, level);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  skip_list_node.cljs$core$IFn$_invoke$arity$1 = skip_list_node__1;
  skip_list_node.cljs$core$IFn$_invoke$arity$3 = skip_list_node__3;
  return skip_list_node;
}();
cljs.core.async.impl.timers.least_greater_node = function() {
  var least_greater_node = null;
  var least_greater_node__3 = function(x, k, level) {
    return least_greater_node.call(null, x, k, level, null);
  };
  var least_greater_node__4 = function(x, k, level, update) {
    while (true) {
      if (!(level < 0)) {
        var x__$1 = function() {
          var x__$1 = x;
          while (true) {
            var temp__4090__auto__ = x__$1.forward[level];
            if (cljs.core.truth_(temp__4090__auto__)) {
              var x_SINGLEQUOTE_ = temp__4090__auto__;
              if (x_SINGLEQUOTE_.key < k) {
                var G__111784 = x_SINGLEQUOTE_;
                x__$1 = G__111784;
                continue;
              } else {
                return x__$1;
              }
            } else {
              return x__$1;
            }
            break;
          }
        }();
        if (update == null) {
        } else {
          update[level] = x__$1;
        }
        var G__111785 = x__$1;
        var G__111786 = k;
        var G__111787 = level - 1;
        var G__111788 = update;
        x = G__111785;
        k = G__111786;
        level = G__111787;
        update = G__111788;
        continue;
      } else {
        return x;
      }
      break;
    }
  };
  least_greater_node = function(x, k, level, update) {
    switch(arguments.length) {
      case 3:
        return least_greater_node__3.call(this, x, k, level);
      case 4:
        return least_greater_node__4.call(this, x, k, level, update);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  least_greater_node.cljs$core$IFn$_invoke$arity$3 = least_greater_node__3;
  least_greater_node.cljs$core$IFn$_invoke$arity$4 = least_greater_node__4;
  return least_greater_node;
}();
cljs.core.async.impl.timers.SkipList = function(header, level) {
  this.header = header;
  this.level = level;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
};
cljs.core.async.impl.timers.SkipList.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipList";
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorPrWriter = function(this__13397__auto__, writer__13398__auto__, opt__13399__auto__) {
  return cljs.core._write.call(null, writer__13398__auto__, "cljs.core.async.impl.timers/SkipList");
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  var pr_pair = function(keyval) {
    return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "", " ", "", opts, keyval);
  };
  return cljs.core.pr_sequential_writer.call(null, writer, pr_pair, "{", ", ", "}", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var iter = function iter(node) {
    return new cljs.core.LazySeq(null, function() {
      if (node == null) {
        return null;
      } else {
        return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [node.key, node.val], null), iter.call(null, node.forward[0]));
      }
    }, null, null);
  };
  return iter.call(null, self__.header.forward[0]);
};
cljs.core.async.impl.timers.SkipList.prototype.put = function(k, v) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    return x__$1.val = v;
  } else {
    var new_level = cljs.core.async.impl.timers.random_level.call(null);
    if (new_level > self__.level) {
      var i_111789 = self__.level + 1;
      while (true) {
        if (i_111789 <= new_level + 1) {
          update[i_111789] = self__.header;
          var G__111790 = i_111789 + 1;
          i_111789 = G__111790;
          continue;
        } else {
        }
        break;
      }
      self__.level = new_level;
    } else {
    }
    var x__$2 = cljs.core.async.impl.timers.skip_list_node.call(null, k, v, new Array(new_level));
    var i = 0;
    while (true) {
      if (i <= self__.level) {
        var links = update[i].forward;
        x__$2.forward[i] = links[i];
        return links[i] = x__$2;
      } else {
        return null;
      }
      break;
    }
  }
};
cljs.core.async.impl.timers.SkipList.prototype.remove = function(k) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    var i_111791 = 0;
    while (true) {
      if (i_111791 <= self__.level) {
        var links_111792 = update[i_111791].forward;
        if (links_111792[i_111791] === x__$1) {
          links_111792[i_111791] = x__$1.forward[i_111791];
          var G__111793 = i_111791 + 1;
          i_111791 = G__111793;
          continue;
        } else {
          var G__111794 = i_111791 + 1;
          i_111791 = G__111794;
          continue;
        }
      } else {
      }
      break;
    }
    while (true) {
      if (self__.level > 0 && self__.header.forward[self__.level] == null) {
        self__.level = self__.level - 1;
        continue;
      } else {
        return null;
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.ceilingEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if (x_SINGLEQUOTE_ == null) {
            return null;
          } else {
            if (x_SINGLEQUOTE_.key >= k) {
              return x_SINGLEQUOTE_;
            } else {
              var G__111795 = x_SINGLEQUOTE_;
              x__$1 = G__111795;
              continue;
            }
          }
          break;
        }
      }();
      if (!(nx == null)) {
        var G__111796 = nx;
        var G__111797 = level__$1 - 1;
        x = G__111796;
        level__$1 = G__111797;
        continue;
      } else {
        var G__111798 = x;
        var G__111799 = level__$1 - 1;
        x = G__111798;
        level__$1 = G__111799;
        continue;
      }
    } else {
      if (x === self__.header) {
        return null;
      } else {
        return x;
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.floorEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if (!(x_SINGLEQUOTE_ == null)) {
            if (x_SINGLEQUOTE_.key > k) {
              return x__$1;
            } else {
              var G__111800 = x_SINGLEQUOTE_;
              x__$1 = G__111800;
              continue;
            }
          } else {
            if (level__$1 === 0) {
              return x__$1;
            } else {
              return null;
            }
          }
          break;
        }
      }();
      if (cljs.core.truth_(nx)) {
        var G__111801 = nx;
        var G__111802 = level__$1 - 1;
        x = G__111801;
        level__$1 = G__111802;
        continue;
      } else {
        var G__111803 = x;
        var G__111804 = level__$1 - 1;
        x = G__111803;
        level__$1 = G__111804;
        continue;
      }
    } else {
      if (x === self__.header) {
        return null;
      } else {
        return x;
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.__GT_SkipList = function __GT_SkipList(header, level) {
  return new cljs.core.async.impl.timers.SkipList(header, level);
};
cljs.core.async.impl.timers.skip_list = function skip_list() {
  return new cljs.core.async.impl.timers.SkipList(cljs.core.async.impl.timers.skip_list_node.call(null, 0), 0);
};
cljs.core.async.impl.timers.timeouts_map = cljs.core.async.impl.timers.skip_list.call(null);
cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS = 10;
cljs.core.async.impl.timers.timeout = function timeout(msecs) {
  var timeout__$1 = (new Date).valueOf() + msecs;
  var me = cljs.core.async.impl.timers.timeouts_map.ceilingEntry(timeout__$1);
  var or__12830__auto__ = cljs.core.truth_(function() {
    var and__12818__auto__ = me;
    if (cljs.core.truth_(and__12818__auto__)) {
      return me.key < timeout__$1 + cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS;
    } else {
      return and__12818__auto__;
    }
  }()) ? me.val : null;
  if (cljs.core.truth_(or__12830__auto__)) {
    return or__12830__auto__;
  } else {
    var timeout_channel = cljs.core.async.impl.channels.chan.call(null, null);
    cljs.core.async.impl.timers.timeouts_map.put(timeout__$1, timeout_channel);
    cljs.core.async.impl.dispatch.queue_delay.call(null, function() {
      cljs.core.async.impl.timers.timeouts_map.remove(timeout__$1);
      return cljs.core.async.impl.protocols.close_BANG_.call(null, timeout_channel);
    }, msecs);
    return timeout_channel;
  }
};
goog.provide("cljs.core.async");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.timers");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.timers");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.ioc_helpers");
cljs.core.async.fn_handler = function fn_handler(f) {
  if (typeof cljs.core.async.t109230 !== "undefined") {
  } else {
    cljs.core.async.t109230 = function(f, fn_handler, meta109231) {
      this.f = f;
      this.fn_handler = fn_handler;
      this.meta109231 = meta109231;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t109230.cljs$lang$type = true;
    cljs.core.async.t109230.cljs$lang$ctorStr = "cljs.core.async/t109230";
    cljs.core.async.t109230.cljs$lang$ctorPrWriter = function(this__13397__auto__, writer__13398__auto__, opt__13399__auto__) {
      return cljs.core._write.call(null, writer__13398__auto__, "cljs.core.async/t109230");
    };
    cljs.core.async.t109230.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t109230.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.t109230.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.t109230.prototype.cljs$core$IMeta$_meta$arity$1 = function(_109232) {
      var self__ = this;
      var _109232__$1 = this;
      return self__.meta109231;
    };
    cljs.core.async.t109230.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_109232, meta109231__$1) {
      var self__ = this;
      var _109232__$1 = this;
      return new cljs.core.async.t109230(self__.f, self__.fn_handler, meta109231__$1);
    };
    cljs.core.async.__GT_t109230 = function __GT_t109230(f__$1, fn_handler__$1, meta109231) {
      return new cljs.core.async.t109230(f__$1, fn_handler__$1, meta109231);
    };
  }
  return new cljs.core.async.t109230(f, fn_handler, null);
};
cljs.core.async.buffer = function buffer(n) {
  return cljs.core.async.impl.buffers.fixed_buffer.call(null, n);
};
cljs.core.async.dropping_buffer = function dropping_buffer(n) {
  return cljs.core.async.impl.buffers.dropping_buffer.call(null, n);
};
cljs.core.async.sliding_buffer = function sliding_buffer(n) {
  return cljs.core.async.impl.buffers.sliding_buffer.call(null, n);
};
cljs.core.async.unblocking_buffer_QMARK_ = function unblocking_buffer_QMARK_(buff) {
  var G__109234 = buff;
  if (G__109234) {
    var bit__13480__auto__ = null;
    if (cljs.core.truth_(function() {
      var or__12830__auto__ = bit__13480__auto__;
      if (cljs.core.truth_(or__12830__auto__)) {
        return or__12830__auto__;
      } else {
        return G__109234.cljs$core$async$impl$protocols$UnblockingBuffer$;
      }
    }())) {
      return true;
    } else {
      if (!G__109234.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.async.impl.protocols.UnblockingBuffer, G__109234);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.async.impl.protocols.UnblockingBuffer, G__109234);
  }
};
cljs.core.async.chan = function() {
  var chan = null;
  var chan__0 = function() {
    return chan.call(null, null);
  };
  var chan__1 = function(buf_or_n) {
    var buf_or_n__$1 = cljs.core._EQ_.call(null, buf_or_n, 0) ? null : buf_or_n;
    return cljs.core.async.impl.channels.chan.call(null, typeof buf_or_n__$1 === "number" ? cljs.core.async.buffer.call(null, buf_or_n__$1) : buf_or_n__$1);
  };
  chan = function(buf_or_n) {
    switch(arguments.length) {
      case 0:
        return chan__0.call(this);
      case 1:
        return chan__1.call(this, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chan.cljs$core$IFn$_invoke$arity$0 = chan__0;
  chan.cljs$core$IFn$_invoke$arity$1 = chan__1;
  return chan;
}();
cljs.core.async.timeout = function timeout(msecs) {
  return cljs.core.async.impl.timers.timeout.call(null, msecs);
};
cljs.core.async._LT__BANG_ = function _LT__BANG_(port) {
  if (null) {
    return null;
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("\x3c! used not in (go ...) block"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, null))].join(""));
  }
};
cljs.core.async.take_BANG_ = function() {
  var take_BANG_ = null;
  var take_BANG___2 = function(port, fn1) {
    return take_BANG_.call(null, port, fn1, true);
  };
  var take_BANG___3 = function(port, fn1, on_caller_QMARK_) {
    var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.fn_handler.call(null, fn1));
    if (cljs.core.truth_(ret)) {
      var val_109235 = cljs.core.deref.call(null, ret);
      if (cljs.core.truth_(on_caller_QMARK_)) {
        fn1.call(null, val_109235);
      } else {
        cljs.core.async.impl.dispatch.run.call(null, function() {
          return fn1.call(null, val_109235);
        });
      }
    } else {
    }
    return null;
  };
  take_BANG_ = function(port, fn1, on_caller_QMARK_) {
    switch(arguments.length) {
      case 2:
        return take_BANG___2.call(this, port, fn1);
      case 3:
        return take_BANG___3.call(this, port, fn1, on_caller_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take_BANG_.cljs$core$IFn$_invoke$arity$2 = take_BANG___2;
  take_BANG_.cljs$core$IFn$_invoke$arity$3 = take_BANG___3;
  return take_BANG_;
}();
cljs.core.async.nop = function nop() {
  return null;
};
cljs.core.async._GT__BANG_ = function _GT__BANG_(port, val) {
  if (null) {
    return null;
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("\x3e! used not in (go ...) block"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, null))].join(""));
  }
};
cljs.core.async.put_BANG_ = function() {
  var put_BANG_ = null;
  var put_BANG___2 = function(port, val) {
    return put_BANG_.call(null, port, val, cljs.core.async.nop);
  };
  var put_BANG___3 = function(port, val, fn0) {
    return put_BANG_.call(null, port, val, fn0, true);
  };
  var put_BANG___4 = function(port, val, fn0, on_caller_QMARK_) {
    var ret = cljs.core.async.impl.protocols.put_BANG_.call(null, port, val, cljs.core.async.fn_handler.call(null, fn0));
    if (cljs.core.truth_(function() {
      var and__12818__auto__ = ret;
      if (cljs.core.truth_(and__12818__auto__)) {
        return cljs.core.not_EQ_.call(null, fn0, cljs.core.async.nop);
      } else {
        return and__12818__auto__;
      }
    }())) {
      if (cljs.core.truth_(on_caller_QMARK_)) {
        fn0.call(null);
      } else {
        cljs.core.async.impl.dispatch.run.call(null, fn0);
      }
    } else {
    }
    return null;
  };
  put_BANG_ = function(port, val, fn0, on_caller_QMARK_) {
    switch(arguments.length) {
      case 2:
        return put_BANG___2.call(this, port, val);
      case 3:
        return put_BANG___3.call(this, port, val, fn0);
      case 4:
        return put_BANG___4.call(this, port, val, fn0, on_caller_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  put_BANG_.cljs$core$IFn$_invoke$arity$2 = put_BANG___2;
  put_BANG_.cljs$core$IFn$_invoke$arity$3 = put_BANG___3;
  put_BANG_.cljs$core$IFn$_invoke$arity$4 = put_BANG___4;
  return put_BANG_;
}();
cljs.core.async.close_BANG_ = function close_BANG_(port) {
  return cljs.core.async.impl.protocols.close_BANG_.call(null, port);
};
cljs.core.async.random_array = function random_array(n) {
  var a = new Array(n);
  var n__13678__auto___109236 = n;
  var x_109237 = 0;
  while (true) {
    if (x_109237 < n__13678__auto___109236) {
      a[x_109237] = 0;
      var G__109238 = x_109237 + 1;
      x_109237 = G__109238;
      continue;
    } else {
    }
    break;
  }
  var i = 1;
  while (true) {
    if (cljs.core._EQ_.call(null, i, n)) {
      return a;
    } else {
      var j = cljs.core.rand_int.call(null, i);
      a[i] = a[j];
      a[j] = i;
      var G__109239 = i + 1;
      i = G__109239;
      continue;
    }
    break;
  }
};
cljs.core.async.alt_flag = function alt_flag() {
  var flag = cljs.core.atom.call(null, true);
  if (typeof cljs.core.async.t109243 !== "undefined") {
  } else {
    cljs.core.async.t109243 = function(flag, alt_flag, meta109244) {
      this.flag = flag;
      this.alt_flag = alt_flag;
      this.meta109244 = meta109244;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t109243.cljs$lang$type = true;
    cljs.core.async.t109243.cljs$lang$ctorStr = "cljs.core.async/t109243";
    cljs.core.async.t109243.cljs$lang$ctorPrWriter = function(this__13397__auto__, writer__13398__auto__, opt__13399__auto__) {
      return cljs.core._write.call(null, writer__13398__auto__, "cljs.core.async/t109243");
    };
    cljs.core.async.t109243.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t109243.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.deref.call(null, self__.flag);
    };
    cljs.core.async.t109243.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      cljs.core.reset_BANG_.call(null, self__.flag, null);
      return true;
    };
    cljs.core.async.t109243.prototype.cljs$core$IMeta$_meta$arity$1 = function(_109245) {
      var self__ = this;
      var _109245__$1 = this;
      return self__.meta109244;
    };
    cljs.core.async.t109243.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_109245, meta109244__$1) {
      var self__ = this;
      var _109245__$1 = this;
      return new cljs.core.async.t109243(self__.flag, self__.alt_flag, meta109244__$1);
    };
    cljs.core.async.__GT_t109243 = function __GT_t109243(flag__$1, alt_flag__$1, meta109244) {
      return new cljs.core.async.t109243(flag__$1, alt_flag__$1, meta109244);
    };
  }
  return new cljs.core.async.t109243(flag, alt_flag, null);
};
cljs.core.async.alt_handler = function alt_handler(flag, cb) {
  if (typeof cljs.core.async.t109249 !== "undefined") {
  } else {
    cljs.core.async.t109249 = function(cb, flag, alt_handler, meta109250) {
      this.cb = cb;
      this.flag = flag;
      this.alt_handler = alt_handler;
      this.meta109250 = meta109250;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t109249.cljs$lang$type = true;
    cljs.core.async.t109249.cljs$lang$ctorStr = "cljs.core.async/t109249";
    cljs.core.async.t109249.cljs$lang$ctorPrWriter = function(this__13397__auto__, writer__13398__auto__, opt__13399__auto__) {
      return cljs.core._write.call(null, writer__13398__auto__, "cljs.core.async/t109249");
    };
    cljs.core.async.t109249.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t109249.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.flag);
    };
    cljs.core.async.t109249.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      cljs.core.async.impl.protocols.commit.call(null, self__.flag);
      return self__.cb;
    };
    cljs.core.async.t109249.prototype.cljs$core$IMeta$_meta$arity$1 = function(_109251) {
      var self__ = this;
      var _109251__$1 = this;
      return self__.meta109250;
    };
    cljs.core.async.t109249.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_109251, meta109250__$1) {
      var self__ = this;
      var _109251__$1 = this;
      return new cljs.core.async.t109249(self__.cb, self__.flag, self__.alt_handler, meta109250__$1);
    };
    cljs.core.async.__GT_t109249 = function __GT_t109249(cb__$1, flag__$1, alt_handler__$1, meta109250) {
      return new cljs.core.async.t109249(cb__$1, flag__$1, alt_handler__$1, meta109250);
    };
  }
  return new cljs.core.async.t109249(cb, flag, alt_handler, null);
};
cljs.core.async.do_alts = function do_alts(fret, ports, opts) {
  var flag = cljs.core.async.alt_flag.call(null);
  var n = cljs.core.count.call(null, ports);
  var idxs = cljs.core.async.random_array.call(null, n);
  var priority = (new cljs.core.Keyword(null, "priority", "priority", 4143410454)).cljs$core$IFn$_invoke$arity$1(opts);
  var ret = function() {
    var i = 0;
    while (true) {
      if (i < n) {
        var idx = cljs.core.truth_(priority) ? i : idxs[i];
        var port = cljs.core.nth.call(null, ports, idx);
        var wport = cljs.core.vector_QMARK_.call(null, port) ? port.call(null, 0) : null;
        var vbox = cljs.core.truth_(wport) ? function() {
          var val = port.call(null, 1);
          return cljs.core.async.impl.protocols.put_BANG_.call(null, wport, val, cljs.core.async.alt_handler.call(null, flag, function(i, val, idx, port, wport, flag, n, idxs, priority) {
            return function() {
              return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, wport], null));
            };
          }(i, val, idx, port, wport, flag, n, idxs, priority)));
        }() : cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.alt_handler.call(null, flag, function(i, idx, port, wport, flag, n, idxs, priority) {
          return function(p1__109252_SHARP_) {
            return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__109252_SHARP_, port], null));
          };
        }(i, idx, port, wport, flag, n, idxs, priority)));
        if (cljs.core.truth_(vbox)) {
          return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.deref.call(null, vbox), function() {
            var or__12830__auto__ = wport;
            if (cljs.core.truth_(or__12830__auto__)) {
              return or__12830__auto__;
            } else {
              return port;
            }
          }()], null));
        } else {
          var G__109253 = i + 1;
          i = G__109253;
          continue;
        }
      } else {
        return null;
      }
      break;
    }
  }();
  var or__12830__auto__ = ret;
  if (cljs.core.truth_(or__12830__auto__)) {
    return or__12830__auto__;
  } else {
    if (cljs.core.contains_QMARK_.call(null, opts, new cljs.core.Keyword(null, "default", "default", 2558708147))) {
      var temp__4092__auto__ = function() {
        var and__12818__auto__ = cljs.core.async.impl.protocols.active_QMARK_.call(null, flag);
        if (cljs.core.truth_(and__12818__auto__)) {
          return cljs.core.async.impl.protocols.commit.call(null, flag);
        } else {
          return and__12818__auto__;
        }
      }();
      if (cljs.core.truth_(temp__4092__auto__)) {
        var got = temp__4092__auto__;
        return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.Keyword(null, "default", "default", 2558708147)).cljs$core$IFn$_invoke$arity$1(opts), new cljs.core.Keyword(null, "default", "default", 2558708147)], null));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }
};
cljs.core.async.alts_BANG_ = function() {
  var alts_BANG___delegate = function(ports, p__109254) {
    var map__109256 = p__109254;
    var map__109256__$1 = cljs.core.seq_QMARK_.call(null, map__109256) ? cljs.core.apply.call(null, cljs.core.hash_map, map__109256) : map__109256;
    var opts = map__109256__$1;
    if (null) {
      return null;
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("alts! used not in (go ...) block"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, null))].join(""));
    }
  };
  var alts_BANG_ = function(ports, var_args) {
    var p__109254 = null;
    if (arguments.length > 1) {
      p__109254 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return alts_BANG___delegate.call(this, ports, p__109254);
  };
  alts_BANG_.cljs$lang$maxFixedArity = 1;
  alts_BANG_.cljs$lang$applyTo = function(arglist__109257) {
    var ports = cljs.core.first(arglist__109257);
    var p__109254 = cljs.core.rest(arglist__109257);
    return alts_BANG___delegate(ports, p__109254);
  };
  alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = alts_BANG___delegate;
  return alts_BANG_;
}();
cljs.core.async.map_LT_ = function map_LT_(f, ch) {
  if (typeof cljs.core.async.t109265 !== "undefined") {
  } else {
    cljs.core.async.t109265 = function(ch, f, map_LT_, meta109266) {
      this.ch = ch;
      this.f = f;
      this.map_LT_ = map_LT_;
      this.meta109266 = meta109266;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t109265.cljs$lang$type = true;
    cljs.core.async.t109265.cljs$lang$ctorStr = "cljs.core.async/t109265";
    cljs.core.async.t109265.cljs$lang$ctorPrWriter = function(this__13397__auto__, writer__13398__auto__, opt__13399__auto__) {
      return cljs.core._write.call(null, writer__13398__auto__, "cljs.core.async/t109265");
    };
    cljs.core.async.t109265.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t109265.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn0) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn0);
    };
    cljs.core.async.t109265.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t109265.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, function() {
        if (typeof cljs.core.async.t109268 !== "undefined") {
        } else {
          cljs.core.async.t109268 = function(fn1, _, meta109266, ch, f, map_LT_, meta109269) {
            this.fn1 = fn1;
            this._ = _;
            this.meta109266 = meta109266;
            this.ch = ch;
            this.f = f;
            this.map_LT_ = map_LT_;
            this.meta109269 = meta109269;
            this.cljs$lang$protocol_mask$partition1$ = 0;
            this.cljs$lang$protocol_mask$partition0$ = 393216;
          };
          cljs.core.async.t109268.cljs$lang$type = true;
          cljs.core.async.t109268.cljs$lang$ctorStr = "cljs.core.async/t109268";
          cljs.core.async.t109268.cljs$lang$ctorPrWriter = function(this__13397__auto__, writer__13398__auto__, opt__13399__auto__) {
            return cljs.core._write.call(null, writer__13398__auto__, "cljs.core.async/t109268");
          };
          cljs.core.async.t109268.prototype.cljs$core$async$impl$protocols$Handler$ = true;
          cljs.core.async.t109268.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(___$3) {
            var self__ = this;
            var ___$4 = this;
            return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.fn1);
          };
          cljs.core.async.t109268.prototype.cljs$core$async$impl$protocols$Handler$lock_id$arity$1 = function(___$3) {
            var self__ = this;
            var ___$4 = this;
            return cljs.core.async.impl.protocols.lock_id.call(null, self__.fn1);
          };
          cljs.core.async.t109268.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(___$3) {
            var self__ = this;
            var ___$4 = this;
            var f1 = cljs.core.async.impl.protocols.commit.call(null, self__.fn1);
            return function(f1, ___$4) {
              return function(p1__109258_SHARP_) {
                return f1.call(null, p1__109258_SHARP_ == null ? null : self__.f.call(null, p1__109258_SHARP_));
              };
            }(f1, ___$4);
          };
          cljs.core.async.t109268.prototype.cljs$core$IMeta$_meta$arity$1 = function(_109270) {
            var self__ = this;
            var _109270__$1 = this;
            return self__.meta109269;
          };
          cljs.core.async.t109268.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_109270, meta109269__$1) {
            var self__ = this;
            var _109270__$1 = this;
            return new cljs.core.async.t109268(self__.fn1, self__._, self__.meta109266, self__.ch, self__.f, self__.map_LT_, meta109269__$1);
          };
          cljs.core.async.__GT_t109268 = function __GT_t109268(fn1__$1, ___$2, meta109266__$1, ch__$2, f__$2, map_LT___$2, meta109269) {
            return new cljs.core.async.t109268(fn1__$1, ___$2, meta109266__$1, ch__$2, f__$2, map_LT___$2, meta109269);
          };
        }
        return new cljs.core.async.t109268(fn1, ___$1, self__.meta109266, self__.ch, self__.f, self__.map_LT_, null);
      }());
      if (cljs.core.truth_(function() {
        var and__12818__auto__ = ret;
        if (cljs.core.truth_(and__12818__auto__)) {
          return!(cljs.core.deref.call(null, ret) == null);
        } else {
          return and__12818__auto__;
        }
      }())) {
        return cljs.core.async.impl.channels.box.call(null, self__.f.call(null, cljs.core.deref.call(null, ret)));
      } else {
        return ret;
      }
    };
    cljs.core.async.t109265.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t109265.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t109265.prototype.cljs$core$IMeta$_meta$arity$1 = function(_109267) {
      var self__ = this;
      var _109267__$1 = this;
      return self__.meta109266;
    };
    cljs.core.async.t109265.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_109267, meta109266__$1) {
      var self__ = this;
      var _109267__$1 = this;
      return new cljs.core.async.t109265(self__.ch, self__.f, self__.map_LT_, meta109266__$1);
    };
    cljs.core.async.__GT_t109265 = function __GT_t109265(ch__$1, f__$1, map_LT___$1, meta109266) {
      return new cljs.core.async.t109265(ch__$1, f__$1, map_LT___$1, meta109266);
    };
  }
  return new cljs.core.async.t109265(ch, f, map_LT_, null);
};
cljs.core.async.map_GT_ = function map_GT_(f, ch) {
  if (typeof cljs.core.async.t109274 !== "undefined") {
  } else {
    cljs.core.async.t109274 = function(ch, f, map_GT_, meta109275) {
      this.ch = ch;
      this.f = f;
      this.map_GT_ = map_GT_;
      this.meta109275 = meta109275;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t109274.cljs$lang$type = true;
    cljs.core.async.t109274.cljs$lang$ctorStr = "cljs.core.async/t109274";
    cljs.core.async.t109274.cljs$lang$ctorPrWriter = function(this__13397__auto__, writer__13398__auto__, opt__13399__auto__) {
      return cljs.core._write.call(null, writer__13398__auto__, "cljs.core.async/t109274");
    };
    cljs.core.async.t109274.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t109274.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn0) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, self__.f.call(null, val), fn0);
    };
    cljs.core.async.t109274.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t109274.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t109274.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t109274.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t109274.prototype.cljs$core$IMeta$_meta$arity$1 = function(_109276) {
      var self__ = this;
      var _109276__$1 = this;
      return self__.meta109275;
    };
    cljs.core.async.t109274.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_109276, meta109275__$1) {
      var self__ = this;
      var _109276__$1 = this;
      return new cljs.core.async.t109274(self__.ch, self__.f, self__.map_GT_, meta109275__$1);
    };
    cljs.core.async.__GT_t109274 = function __GT_t109274(ch__$1, f__$1, map_GT___$1, meta109275) {
      return new cljs.core.async.t109274(ch__$1, f__$1, map_GT___$1, meta109275);
    };
  }
  return new cljs.core.async.t109274(ch, f, map_GT_, null);
};
cljs.core.async.filter_GT_ = function filter_GT_(p, ch) {
  if (typeof cljs.core.async.t109280 !== "undefined") {
  } else {
    cljs.core.async.t109280 = function(ch, p, filter_GT_, meta109281) {
      this.ch = ch;
      this.p = p;
      this.filter_GT_ = filter_GT_;
      this.meta109281 = meta109281;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t109280.cljs$lang$type = true;
    cljs.core.async.t109280.cljs$lang$ctorStr = "cljs.core.async/t109280";
    cljs.core.async.t109280.cljs$lang$ctorPrWriter = function(this__13397__auto__, writer__13398__auto__, opt__13399__auto__) {
      return cljs.core._write.call(null, writer__13398__auto__, "cljs.core.async/t109280");
    };
    cljs.core.async.t109280.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t109280.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn0) {
      var self__ = this;
      var ___$1 = this;
      if (cljs.core.truth_(self__.p.call(null, val))) {
        return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn0);
      } else {
        return cljs.core.async.impl.channels.box.call(null, null);
      }
    };
    cljs.core.async.t109280.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t109280.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t109280.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t109280.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t109280.prototype.cljs$core$IMeta$_meta$arity$1 = function(_109282) {
      var self__ = this;
      var _109282__$1 = this;
      return self__.meta109281;
    };
    cljs.core.async.t109280.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_109282, meta109281__$1) {
      var self__ = this;
      var _109282__$1 = this;
      return new cljs.core.async.t109280(self__.ch, self__.p, self__.filter_GT_, meta109281__$1);
    };
    cljs.core.async.__GT_t109280 = function __GT_t109280(ch__$1, p__$1, filter_GT___$1, meta109281) {
      return new cljs.core.async.t109280(ch__$1, p__$1, filter_GT___$1, meta109281);
    };
  }
  return new cljs.core.async.t109280(ch, p, filter_GT_, null);
};
cljs.core.async.remove_GT_ = function remove_GT_(p, ch) {
  return cljs.core.async.filter_GT_.call(null, cljs.core.complement.call(null, p), ch);
};
cljs.core.async.filter_LT_ = function() {
  var filter_LT_ = null;
  var filter_LT___2 = function(p, ch) {
    return filter_LT_.call(null, p, ch, null);
  };
  var filter_LT___3 = function(p, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__15579__auto___109365 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__15580__auto__ = function() {
        var switch__15564__auto__ = function(state_109344) {
          var state_val_109345 = state_109344[1];
          if (state_val_109345 === 1) {
            var state_109344__$1 = state_109344;
            var statearr_109346_109366 = state_109344__$1;
            statearr_109346_109366[2] = null;
            statearr_109346_109366[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_109345 === 2) {
              var state_109344__$1 = state_109344;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_109344__$1, 4, ch);
            } else {
              if (state_val_109345 === 3) {
                var inst_109342 = state_109344[2];
                var state_109344__$1 = state_109344;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_109344__$1, inst_109342);
              } else {
                if (state_val_109345 === 4) {
                  var inst_109326 = state_109344[7];
                  var inst_109326__$1 = state_109344[2];
                  var inst_109327 = inst_109326__$1 == null;
                  var state_109344__$1 = function() {
                    var statearr_109347 = state_109344;
                    statearr_109347[7] = inst_109326__$1;
                    return statearr_109347;
                  }();
                  if (cljs.core.truth_(inst_109327)) {
                    var statearr_109348_109367 = state_109344__$1;
                    statearr_109348_109367[1] = 5;
                  } else {
                    var statearr_109349_109368 = state_109344__$1;
                    statearr_109349_109368[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_109345 === 5) {
                    var inst_109329 = cljs.core.async.close_BANG_.call(null, out);
                    var state_109344__$1 = state_109344;
                    var statearr_109350_109369 = state_109344__$1;
                    statearr_109350_109369[2] = inst_109329;
                    statearr_109350_109369[1] = 7;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_109345 === 6) {
                      var inst_109326 = state_109344[7];
                      var inst_109331 = p.call(null, inst_109326);
                      var state_109344__$1 = state_109344;
                      if (cljs.core.truth_(inst_109331)) {
                        var statearr_109351_109370 = state_109344__$1;
                        statearr_109351_109370[1] = 8;
                      } else {
                        var statearr_109352_109371 = state_109344__$1;
                        statearr_109352_109371[1] = 9;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_109345 === 7) {
                        var inst_109340 = state_109344[2];
                        var state_109344__$1 = state_109344;
                        var statearr_109353_109372 = state_109344__$1;
                        statearr_109353_109372[2] = inst_109340;
                        statearr_109353_109372[1] = 3;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_109345 === 8) {
                          var inst_109326 = state_109344[7];
                          var state_109344__$1 = state_109344;
                          return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_109344__$1, 11, out, inst_109326);
                        } else {
                          if (state_val_109345 === 9) {
                            var state_109344__$1 = state_109344;
                            var statearr_109354_109373 = state_109344__$1;
                            statearr_109354_109373[2] = null;
                            statearr_109354_109373[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_109345 === 10) {
                              var inst_109337 = state_109344[2];
                              var state_109344__$1 = function() {
                                var statearr_109355 = state_109344;
                                statearr_109355[8] = inst_109337;
                                return statearr_109355;
                              }();
                              var statearr_109356_109374 = state_109344__$1;
                              statearr_109356_109374[2] = null;
                              statearr_109356_109374[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_109345 === 11) {
                                var inst_109334 = state_109344[2];
                                var state_109344__$1 = state_109344;
                                var statearr_109357_109375 = state_109344__$1;
                                statearr_109357_109375[2] = inst_109334;
                                statearr_109357_109375[1] = 10;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__15564__auto__) {
          return function() {
            var state_machine__15565__auto__ = null;
            var state_machine__15565__auto____0 = function() {
              var statearr_109361 = [null, null, null, null, null, null, null, null, null];
              statearr_109361[0] = state_machine__15565__auto__;
              statearr_109361[1] = 1;
              return statearr_109361;
            };
            var state_machine__15565__auto____1 = function(state_109344) {
              while (true) {
                var ret_value__15566__auto__ = function() {
                  try {
                    while (true) {
                      var result__15567__auto__ = switch__15564__auto__.call(null, state_109344);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__15567__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__15567__auto__;
                      }
                      break;
                    }
                  } catch (e109362) {
                    if (e109362 instanceof Object) {
                      var ex__15568__auto__ = e109362;
                      var statearr_109363_109376 = state_109344;
                      statearr_109363_109376[5] = ex__15568__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_109344);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e109362;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__15566__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__109377 = state_109344;
                  state_109344 = G__109377;
                  continue;
                } else {
                  return ret_value__15566__auto__;
                }
                break;
              }
            };
            state_machine__15565__auto__ = function(state_109344) {
              switch(arguments.length) {
                case 0:
                  return state_machine__15565__auto____0.call(this);
                case 1:
                  return state_machine__15565__auto____1.call(this, state_109344);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__15565__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__15565__auto____0;
            state_machine__15565__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__15565__auto____1;
            return state_machine__15565__auto__;
          }();
        }(switch__15564__auto__);
      }();
      var state__15581__auto__ = function() {
        var statearr_109364 = f__15580__auto__.call(null);
        statearr_109364[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__15579__auto___109365;
        return statearr_109364;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__15581__auto__);
    });
    return out;
  };
  filter_LT_ = function(p, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return filter_LT___2.call(this, p, ch);
      case 3:
        return filter_LT___3.call(this, p, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  filter_LT_.cljs$core$IFn$_invoke$arity$2 = filter_LT___2;
  filter_LT_.cljs$core$IFn$_invoke$arity$3 = filter_LT___3;
  return filter_LT_;
}();
cljs.core.async.remove_LT_ = function() {
  var remove_LT_ = null;
  var remove_LT___2 = function(p, ch) {
    return remove_LT_.call(null, p, ch, null);
  };
  var remove_LT___3 = function(p, ch, buf_or_n) {
    return cljs.core.async.filter_LT_.call(null, cljs.core.complement.call(null, p), ch, buf_or_n);
  };
  remove_LT_ = function(p, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return remove_LT___2.call(this, p, ch);
      case 3:
        return remove_LT___3.call(this, p, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  remove_LT_.cljs$core$IFn$_invoke$arity$2 = remove_LT___2;
  remove_LT_.cljs$core$IFn$_invoke$arity$3 = remove_LT___3;
  return remove_LT_;
}();
cljs.core.async.mapcat_STAR_ = function mapcat_STAR_(f, in$, out) {
  var c__15579__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__15580__auto__ = function() {
      var switch__15564__auto__ = function(state_109529) {
        var state_val_109530 = state_109529[1];
        if (state_val_109530 === 1) {
          var state_109529__$1 = state_109529;
          var statearr_109531_109568 = state_109529__$1;
          statearr_109531_109568[2] = null;
          statearr_109531_109568[1] = 2;
          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
        } else {
          if (state_val_109530 === 2) {
            var state_109529__$1 = state_109529;
            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_109529__$1, 4, in$);
          } else {
            if (state_val_109530 === 3) {
              var inst_109527 = state_109529[2];
              var state_109529__$1 = state_109529;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_109529__$1, inst_109527);
            } else {
              if (state_val_109530 === 4) {
                var inst_109475 = state_109529[7];
                var inst_109475__$1 = state_109529[2];
                var inst_109476 = inst_109475__$1 == null;
                var state_109529__$1 = function() {
                  var statearr_109532 = state_109529;
                  statearr_109532[7] = inst_109475__$1;
                  return statearr_109532;
                }();
                if (cljs.core.truth_(inst_109476)) {
                  var statearr_109533_109569 = state_109529__$1;
                  statearr_109533_109569[1] = 5;
                } else {
                  var statearr_109534_109570 = state_109529__$1;
                  statearr_109534_109570[1] = 6;
                }
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
              } else {
                if (state_val_109530 === 5) {
                  var inst_109478 = cljs.core.async.close_BANG_.call(null, out);
                  var state_109529__$1 = state_109529;
                  var statearr_109535_109571 = state_109529__$1;
                  statearr_109535_109571[2] = inst_109478;
                  statearr_109535_109571[1] = 7;
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_109530 === 6) {
                    var inst_109475 = state_109529[7];
                    var inst_109480 = f.call(null, inst_109475);
                    var inst_109485 = cljs.core.seq.call(null, inst_109480);
                    var inst_109486 = inst_109485;
                    var inst_109487 = null;
                    var inst_109488 = 0;
                    var inst_109489 = 0;
                    var state_109529__$1 = function() {
                      var statearr_109536 = state_109529;
                      statearr_109536[8] = inst_109489;
                      statearr_109536[9] = inst_109486;
                      statearr_109536[10] = inst_109488;
                      statearr_109536[11] = inst_109487;
                      return statearr_109536;
                    }();
                    var statearr_109537_109572 = state_109529__$1;
                    statearr_109537_109572[2] = null;
                    statearr_109537_109572[1] = 8;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_109530 === 7) {
                      var inst_109525 = state_109529[2];
                      var state_109529__$1 = state_109529;
                      var statearr_109538_109573 = state_109529__$1;
                      statearr_109538_109573[2] = inst_109525;
                      statearr_109538_109573[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_109530 === 8) {
                        var inst_109489 = state_109529[8];
                        var inst_109488 = state_109529[10];
                        var inst_109491 = inst_109489 < inst_109488;
                        var inst_109492 = inst_109491;
                        var state_109529__$1 = state_109529;
                        if (cljs.core.truth_(inst_109492)) {
                          var statearr_109539_109574 = state_109529__$1;
                          statearr_109539_109574[1] = 10;
                        } else {
                          var statearr_109540_109575 = state_109529__$1;
                          statearr_109540_109575[1] = 11;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_109530 === 9) {
                          var inst_109522 = state_109529[2];
                          var state_109529__$1 = function() {
                            var statearr_109541 = state_109529;
                            statearr_109541[12] = inst_109522;
                            return statearr_109541;
                          }();
                          var statearr_109542_109576 = state_109529__$1;
                          statearr_109542_109576[2] = null;
                          statearr_109542_109576[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_109530 === 10) {
                            var inst_109489 = state_109529[8];
                            var inst_109487 = state_109529[11];
                            var inst_109494 = cljs.core._nth.call(null, inst_109487, inst_109489);
                            var state_109529__$1 = state_109529;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_109529__$1, 13, out, inst_109494);
                          } else {
                            if (state_val_109530 === 11) {
                              var inst_109486 = state_109529[9];
                              var inst_109500 = state_109529[13];
                              var inst_109500__$1 = cljs.core.seq.call(null, inst_109486);
                              var state_109529__$1 = function() {
                                var statearr_109546 = state_109529;
                                statearr_109546[13] = inst_109500__$1;
                                return statearr_109546;
                              }();
                              if (inst_109500__$1) {
                                var statearr_109547_109577 = state_109529__$1;
                                statearr_109547_109577[1] = 14;
                              } else {
                                var statearr_109548_109578 = state_109529__$1;
                                statearr_109548_109578[1] = 15;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_109530 === 12) {
                                var inst_109520 = state_109529[2];
                                var state_109529__$1 = state_109529;
                                var statearr_109549_109579 = state_109529__$1;
                                statearr_109549_109579[2] = inst_109520;
                                statearr_109549_109579[1] = 9;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_109530 === 13) {
                                  var inst_109489 = state_109529[8];
                                  var inst_109486 = state_109529[9];
                                  var inst_109488 = state_109529[10];
                                  var inst_109487 = state_109529[11];
                                  var inst_109496 = state_109529[2];
                                  var inst_109497 = inst_109489 + 1;
                                  var tmp109543 = inst_109486;
                                  var tmp109544 = inst_109488;
                                  var tmp109545 = inst_109487;
                                  var inst_109486__$1 = tmp109543;
                                  var inst_109487__$1 = tmp109545;
                                  var inst_109488__$1 = tmp109544;
                                  var inst_109489__$1 = inst_109497;
                                  var state_109529__$1 = function() {
                                    var statearr_109550 = state_109529;
                                    statearr_109550[8] = inst_109489__$1;
                                    statearr_109550[9] = inst_109486__$1;
                                    statearr_109550[10] = inst_109488__$1;
                                    statearr_109550[11] = inst_109487__$1;
                                    statearr_109550[14] = inst_109496;
                                    return statearr_109550;
                                  }();
                                  var statearr_109551_109580 = state_109529__$1;
                                  statearr_109551_109580[2] = null;
                                  statearr_109551_109580[1] = 8;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_109530 === 14) {
                                    var inst_109500 = state_109529[13];
                                    var inst_109502 = cljs.core.chunked_seq_QMARK_.call(null, inst_109500);
                                    var state_109529__$1 = state_109529;
                                    if (inst_109502) {
                                      var statearr_109552_109581 = state_109529__$1;
                                      statearr_109552_109581[1] = 17;
                                    } else {
                                      var statearr_109553_109582 = state_109529__$1;
                                      statearr_109553_109582[1] = 18;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_109530 === 15) {
                                      var state_109529__$1 = state_109529;
                                      var statearr_109554_109583 = state_109529__$1;
                                      statearr_109554_109583[2] = null;
                                      statearr_109554_109583[1] = 16;
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                    } else {
                                      if (state_val_109530 === 16) {
                                        var inst_109518 = state_109529[2];
                                        var state_109529__$1 = state_109529;
                                        var statearr_109555_109584 = state_109529__$1;
                                        statearr_109555_109584[2] = inst_109518;
                                        statearr_109555_109584[1] = 12;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        if (state_val_109530 === 17) {
                                          var inst_109500 = state_109529[13];
                                          var inst_109504 = cljs.core.chunk_first.call(null, inst_109500);
                                          var inst_109505 = cljs.core.chunk_rest.call(null, inst_109500);
                                          var inst_109506 = cljs.core.count.call(null, inst_109504);
                                          var inst_109486 = inst_109505;
                                          var inst_109487 = inst_109504;
                                          var inst_109488 = inst_109506;
                                          var inst_109489 = 0;
                                          var state_109529__$1 = function() {
                                            var statearr_109556 = state_109529;
                                            statearr_109556[8] = inst_109489;
                                            statearr_109556[9] = inst_109486;
                                            statearr_109556[10] = inst_109488;
                                            statearr_109556[11] = inst_109487;
                                            return statearr_109556;
                                          }();
                                          var statearr_109557_109585 = state_109529__$1;
                                          statearr_109557_109585[2] = null;
                                          statearr_109557_109585[1] = 8;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                        } else {
                                          if (state_val_109530 === 18) {
                                            var inst_109500 = state_109529[13];
                                            var inst_109509 = cljs.core.first.call(null, inst_109500);
                                            var state_109529__$1 = state_109529;
                                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_109529__$1, 20, out, inst_109509);
                                          } else {
                                            if (state_val_109530 === 19) {
                                              var inst_109515 = state_109529[2];
                                              var state_109529__$1 = state_109529;
                                              var statearr_109558_109586 = state_109529__$1;
                                              statearr_109558_109586[2] = inst_109515;
                                              statearr_109558_109586[1] = 16;
                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                            } else {
                                              if (state_val_109530 === 20) {
                                                var inst_109500 = state_109529[13];
                                                var inst_109511 = state_109529[2];
                                                var inst_109512 = cljs.core.next.call(null, inst_109500);
                                                var inst_109486 = inst_109512;
                                                var inst_109487 = null;
                                                var inst_109488 = 0;
                                                var inst_109489 = 0;
                                                var state_109529__$1 = function() {
                                                  var statearr_109559 = state_109529;
                                                  statearr_109559[15] = inst_109511;
                                                  statearr_109559[8] = inst_109489;
                                                  statearr_109559[9] = inst_109486;
                                                  statearr_109559[10] = inst_109488;
                                                  statearr_109559[11] = inst_109487;
                                                  return statearr_109559;
                                                }();
                                                var statearr_109560_109587 = state_109529__$1;
                                                statearr_109560_109587[2] = null;
                                                statearr_109560_109587[1] = 8;
                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                              } else {
                                                return null;
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function(switch__15564__auto__) {
        return function() {
          var state_machine__15565__auto__ = null;
          var state_machine__15565__auto____0 = function() {
            var statearr_109564 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
            statearr_109564[0] = state_machine__15565__auto__;
            statearr_109564[1] = 1;
            return statearr_109564;
          };
          var state_machine__15565__auto____1 = function(state_109529) {
            while (true) {
              var ret_value__15566__auto__ = function() {
                try {
                  while (true) {
                    var result__15567__auto__ = switch__15564__auto__.call(null, state_109529);
                    if (cljs.core.keyword_identical_QMARK_.call(null, result__15567__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                      continue;
                    } else {
                      return result__15567__auto__;
                    }
                    break;
                  }
                } catch (e109565) {
                  if (e109565 instanceof Object) {
                    var ex__15568__auto__ = e109565;
                    var statearr_109566_109588 = state_109529;
                    statearr_109566_109588[5] = ex__15568__auto__;
                    cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_109529);
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                      throw e109565;
                    } else {
                      return null;
                    }
                  }
                }
              }();
              if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__15566__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                var G__109589 = state_109529;
                state_109529 = G__109589;
                continue;
              } else {
                return ret_value__15566__auto__;
              }
              break;
            }
          };
          state_machine__15565__auto__ = function(state_109529) {
            switch(arguments.length) {
              case 0:
                return state_machine__15565__auto____0.call(this);
              case 1:
                return state_machine__15565__auto____1.call(this, state_109529);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__15565__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__15565__auto____0;
          state_machine__15565__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__15565__auto____1;
          return state_machine__15565__auto__;
        }();
      }(switch__15564__auto__);
    }();
    var state__15581__auto__ = function() {
      var statearr_109567 = f__15580__auto__.call(null);
      statearr_109567[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__15579__auto__;
      return statearr_109567;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__15581__auto__);
  });
  return c__15579__auto__;
};
cljs.core.async.mapcat_LT_ = function() {
  var mapcat_LT_ = null;
  var mapcat_LT___2 = function(f, in$) {
    return mapcat_LT_.call(null, f, in$, null);
  };
  var mapcat_LT___3 = function(f, in$, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
    return out;
  };
  mapcat_LT_ = function(f, in$, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return mapcat_LT___2.call(this, f, in$);
      case 3:
        return mapcat_LT___3.call(this, f, in$, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat_LT_.cljs$core$IFn$_invoke$arity$2 = mapcat_LT___2;
  mapcat_LT_.cljs$core$IFn$_invoke$arity$3 = mapcat_LT___3;
  return mapcat_LT_;
}();
cljs.core.async.mapcat_GT_ = function() {
  var mapcat_GT_ = null;
  var mapcat_GT___2 = function(f, out) {
    return mapcat_GT_.call(null, f, out, null);
  };
  var mapcat_GT___3 = function(f, out, buf_or_n) {
    var in$ = cljs.core.async.chan.call(null, buf_or_n);
    cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
    return in$;
  };
  mapcat_GT_ = function(f, out, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return mapcat_GT___2.call(this, f, out);
      case 3:
        return mapcat_GT___3.call(this, f, out, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat_GT_.cljs$core$IFn$_invoke$arity$2 = mapcat_GT___2;
  mapcat_GT_.cljs$core$IFn$_invoke$arity$3 = mapcat_GT___3;
  return mapcat_GT_;
}();
cljs.core.async.pipe = function() {
  var pipe = null;
  var pipe__2 = function(from, to) {
    return pipe.call(null, from, to, true);
  };
  var pipe__3 = function(from, to, close_QMARK_) {
    var c__15579__auto___109670 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__15580__auto__ = function() {
        var switch__15564__auto__ = function(state_109649) {
          var state_val_109650 = state_109649[1];
          if (state_val_109650 === 1) {
            var state_109649__$1 = state_109649;
            var statearr_109651_109671 = state_109649__$1;
            statearr_109651_109671[2] = null;
            statearr_109651_109671[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_109650 === 2) {
              var state_109649__$1 = state_109649;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_109649__$1, 4, from);
            } else {
              if (state_val_109650 === 3) {
                var inst_109647 = state_109649[2];
                var state_109649__$1 = state_109649;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_109649__$1, inst_109647);
              } else {
                if (state_val_109650 === 4) {
                  var inst_109632 = state_109649[7];
                  var inst_109632__$1 = state_109649[2];
                  var inst_109633 = inst_109632__$1 == null;
                  var state_109649__$1 = function() {
                    var statearr_109652 = state_109649;
                    statearr_109652[7] = inst_109632__$1;
                    return statearr_109652;
                  }();
                  if (cljs.core.truth_(inst_109633)) {
                    var statearr_109653_109672 = state_109649__$1;
                    statearr_109653_109672[1] = 5;
                  } else {
                    var statearr_109654_109673 = state_109649__$1;
                    statearr_109654_109673[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_109650 === 5) {
                    var state_109649__$1 = state_109649;
                    if (cljs.core.truth_(close_QMARK_)) {
                      var statearr_109655_109674 = state_109649__$1;
                      statearr_109655_109674[1] = 8;
                    } else {
                      var statearr_109656_109675 = state_109649__$1;
                      statearr_109656_109675[1] = 9;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_109650 === 6) {
                      var inst_109632 = state_109649[7];
                      var state_109649__$1 = state_109649;
                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_109649__$1, 11, to, inst_109632);
                    } else {
                      if (state_val_109650 === 7) {
                        var inst_109645 = state_109649[2];
                        var state_109649__$1 = state_109649;
                        var statearr_109657_109676 = state_109649__$1;
                        statearr_109657_109676[2] = inst_109645;
                        statearr_109657_109676[1] = 3;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_109650 === 8) {
                          var inst_109636 = cljs.core.async.close_BANG_.call(null, to);
                          var state_109649__$1 = state_109649;
                          var statearr_109658_109677 = state_109649__$1;
                          statearr_109658_109677[2] = inst_109636;
                          statearr_109658_109677[1] = 10;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_109650 === 9) {
                            var state_109649__$1 = state_109649;
                            var statearr_109659_109678 = state_109649__$1;
                            statearr_109659_109678[2] = null;
                            statearr_109659_109678[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_109650 === 10) {
                              var inst_109639 = state_109649[2];
                              var state_109649__$1 = state_109649;
                              var statearr_109660_109679 = state_109649__$1;
                              statearr_109660_109679[2] = inst_109639;
                              statearr_109660_109679[1] = 7;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_109650 === 11) {
                                var inst_109642 = state_109649[2];
                                var state_109649__$1 = function() {
                                  var statearr_109661 = state_109649;
                                  statearr_109661[8] = inst_109642;
                                  return statearr_109661;
                                }();
                                var statearr_109662_109680 = state_109649__$1;
                                statearr_109662_109680[2] = null;
                                statearr_109662_109680[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__15564__auto__) {
          return function() {
            var state_machine__15565__auto__ = null;
            var state_machine__15565__auto____0 = function() {
              var statearr_109666 = [null, null, null, null, null, null, null, null, null];
              statearr_109666[0] = state_machine__15565__auto__;
              statearr_109666[1] = 1;
              return statearr_109666;
            };
            var state_machine__15565__auto____1 = function(state_109649) {
              while (true) {
                var ret_value__15566__auto__ = function() {
                  try {
                    while (true) {
                      var result__15567__auto__ = switch__15564__auto__.call(null, state_109649);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__15567__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__15567__auto__;
                      }
                      break;
                    }
                  } catch (e109667) {
                    if (e109667 instanceof Object) {
                      var ex__15568__auto__ = e109667;
                      var statearr_109668_109681 = state_109649;
                      statearr_109668_109681[5] = ex__15568__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_109649);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e109667;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__15566__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__109682 = state_109649;
                  state_109649 = G__109682;
                  continue;
                } else {
                  return ret_value__15566__auto__;
                }
                break;
              }
            };
            state_machine__15565__auto__ = function(state_109649) {
              switch(arguments.length) {
                case 0:
                  return state_machine__15565__auto____0.call(this);
                case 1:
                  return state_machine__15565__auto____1.call(this, state_109649);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__15565__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__15565__auto____0;
            state_machine__15565__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__15565__auto____1;
            return state_machine__15565__auto__;
          }();
        }(switch__15564__auto__);
      }();
      var state__15581__auto__ = function() {
        var statearr_109669 = f__15580__auto__.call(null);
        statearr_109669[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__15579__auto___109670;
        return statearr_109669;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__15581__auto__);
    });
    return to;
  };
  pipe = function(from, to, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return pipe__2.call(this, from, to);
      case 3:
        return pipe__3.call(this, from, to, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  pipe.cljs$core$IFn$_invoke$arity$2 = pipe__2;
  pipe.cljs$core$IFn$_invoke$arity$3 = pipe__3;
  return pipe;
}();
cljs.core.async.split = function() {
  var split = null;
  var split__2 = function(p, ch) {
    return split.call(null, p, ch, null, null);
  };
  var split__4 = function(p, ch, t_buf_or_n, f_buf_or_n) {
    var tc = cljs.core.async.chan.call(null, t_buf_or_n);
    var fc = cljs.core.async.chan.call(null, f_buf_or_n);
    var c__15579__auto___109769 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__15580__auto__ = function() {
        var switch__15564__auto__ = function(state_109747) {
          var state_val_109748 = state_109747[1];
          if (state_val_109748 === 1) {
            var state_109747__$1 = state_109747;
            var statearr_109749_109770 = state_109747__$1;
            statearr_109749_109770[2] = null;
            statearr_109749_109770[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_109748 === 2) {
              var state_109747__$1 = state_109747;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_109747__$1, 4, ch);
            } else {
              if (state_val_109748 === 3) {
                var inst_109745 = state_109747[2];
                var state_109747__$1 = state_109747;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_109747__$1, inst_109745);
              } else {
                if (state_val_109748 === 4) {
                  var inst_109728 = state_109747[7];
                  var inst_109728__$1 = state_109747[2];
                  var inst_109729 = inst_109728__$1 == null;
                  var state_109747__$1 = function() {
                    var statearr_109750 = state_109747;
                    statearr_109750[7] = inst_109728__$1;
                    return statearr_109750;
                  }();
                  if (cljs.core.truth_(inst_109729)) {
                    var statearr_109751_109771 = state_109747__$1;
                    statearr_109751_109771[1] = 5;
                  } else {
                    var statearr_109752_109772 = state_109747__$1;
                    statearr_109752_109772[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_109748 === 5) {
                    var inst_109731 = cljs.core.async.close_BANG_.call(null, tc);
                    var inst_109732 = cljs.core.async.close_BANG_.call(null, fc);
                    var state_109747__$1 = function() {
                      var statearr_109753 = state_109747;
                      statearr_109753[8] = inst_109731;
                      return statearr_109753;
                    }();
                    var statearr_109754_109773 = state_109747__$1;
                    statearr_109754_109773[2] = inst_109732;
                    statearr_109754_109773[1] = 7;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_109748 === 6) {
                      var inst_109728 = state_109747[7];
                      var inst_109734 = p.call(null, inst_109728);
                      var state_109747__$1 = state_109747;
                      if (cljs.core.truth_(inst_109734)) {
                        var statearr_109755_109774 = state_109747__$1;
                        statearr_109755_109774[1] = 9;
                      } else {
                        var statearr_109756_109775 = state_109747__$1;
                        statearr_109756_109775[1] = 10;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_109748 === 7) {
                        var inst_109743 = state_109747[2];
                        var state_109747__$1 = state_109747;
                        var statearr_109757_109776 = state_109747__$1;
                        statearr_109757_109776[2] = inst_109743;
                        statearr_109757_109776[1] = 3;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_109748 === 8) {
                          var inst_109740 = state_109747[2];
                          var state_109747__$1 = function() {
                            var statearr_109758 = state_109747;
                            statearr_109758[9] = inst_109740;
                            return statearr_109758;
                          }();
                          var statearr_109759_109777 = state_109747__$1;
                          statearr_109759_109777[2] = null;
                          statearr_109759_109777[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_109748 === 9) {
                            var state_109747__$1 = state_109747;
                            var statearr_109760_109778 = state_109747__$1;
                            statearr_109760_109778[2] = tc;
                            statearr_109760_109778[1] = 11;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_109748 === 10) {
                              var state_109747__$1 = state_109747;
                              var statearr_109761_109779 = state_109747__$1;
                              statearr_109761_109779[2] = fc;
                              statearr_109761_109779[1] = 11;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_109748 === 11) {
                                var inst_109728 = state_109747[7];
                                var inst_109738 = state_109747[2];
                                var state_109747__$1 = state_109747;
                                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_109747__$1, 8, inst_109738, inst_109728);
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__15564__auto__) {
          return function() {
            var state_machine__15565__auto__ = null;
            var state_machine__15565__auto____0 = function() {
              var statearr_109765 = [null, null, null, null, null, null, null, null, null, null];
              statearr_109765[0] = state_machine__15565__auto__;
              statearr_109765[1] = 1;
              return statearr_109765;
            };
            var state_machine__15565__auto____1 = function(state_109747) {
              while (true) {
                var ret_value__15566__auto__ = function() {
                  try {
                    while (true) {
                      var result__15567__auto__ = switch__15564__auto__.call(null, state_109747);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__15567__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__15567__auto__;
                      }
                      break;
                    }
                  } catch (e109766) {
                    if (e109766 instanceof Object) {
                      var ex__15568__auto__ = e109766;
                      var statearr_109767_109780 = state_109747;
                      statearr_109767_109780[5] = ex__15568__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_109747);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e109766;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__15566__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__109781 = state_109747;
                  state_109747 = G__109781;
                  continue;
                } else {
                  return ret_value__15566__auto__;
                }
                break;
              }
            };
            state_machine__15565__auto__ = function(state_109747) {
              switch(arguments.length) {
                case 0:
                  return state_machine__15565__auto____0.call(this);
                case 1:
                  return state_machine__15565__auto____1.call(this, state_109747);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__15565__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__15565__auto____0;
            state_machine__15565__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__15565__auto____1;
            return state_machine__15565__auto__;
          }();
        }(switch__15564__auto__);
      }();
      var state__15581__auto__ = function() {
        var statearr_109768 = f__15580__auto__.call(null);
        statearr_109768[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__15579__auto___109769;
        return statearr_109768;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__15581__auto__);
    });
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tc, fc], null);
  };
  split = function(p, ch, t_buf_or_n, f_buf_or_n) {
    switch(arguments.length) {
      case 2:
        return split__2.call(this, p, ch);
      case 4:
        return split__4.call(this, p, ch, t_buf_or_n, f_buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  split.cljs$core$IFn$_invoke$arity$2 = split__2;
  split.cljs$core$IFn$_invoke$arity$4 = split__4;
  return split;
}();
cljs.core.async.reduce = function reduce(f, init, ch) {
  var c__15579__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__15580__auto__ = function() {
      var switch__15564__auto__ = function(state_109828) {
        var state_val_109829 = state_109828[1];
        if (state_val_109829 === 7) {
          var inst_109824 = state_109828[2];
          var state_109828__$1 = state_109828;
          var statearr_109830_109846 = state_109828__$1;
          statearr_109830_109846[2] = inst_109824;
          statearr_109830_109846[1] = 3;
          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
        } else {
          if (state_val_109829 === 6) {
            var inst_109817 = state_109828[7];
            var inst_109814 = state_109828[8];
            var inst_109821 = f.call(null, inst_109814, inst_109817);
            var inst_109814__$1 = inst_109821;
            var state_109828__$1 = function() {
              var statearr_109831 = state_109828;
              statearr_109831[8] = inst_109814__$1;
              return statearr_109831;
            }();
            var statearr_109832_109847 = state_109828__$1;
            statearr_109832_109847[2] = null;
            statearr_109832_109847[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_109829 === 5) {
              var inst_109814 = state_109828[8];
              var state_109828__$1 = state_109828;
              var statearr_109833_109848 = state_109828__$1;
              statearr_109833_109848[2] = inst_109814;
              statearr_109833_109848[1] = 7;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_109829 === 4) {
                var inst_109817 = state_109828[7];
                var inst_109817__$1 = state_109828[2];
                var inst_109818 = inst_109817__$1 == null;
                var state_109828__$1 = function() {
                  var statearr_109834 = state_109828;
                  statearr_109834[7] = inst_109817__$1;
                  return statearr_109834;
                }();
                if (cljs.core.truth_(inst_109818)) {
                  var statearr_109835_109849 = state_109828__$1;
                  statearr_109835_109849[1] = 5;
                } else {
                  var statearr_109836_109850 = state_109828__$1;
                  statearr_109836_109850[1] = 6;
                }
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
              } else {
                if (state_val_109829 === 3) {
                  var inst_109826 = state_109828[2];
                  var state_109828__$1 = state_109828;
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_109828__$1, inst_109826);
                } else {
                  if (state_val_109829 === 2) {
                    var state_109828__$1 = state_109828;
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_109828__$1, 4, ch);
                  } else {
                    if (state_val_109829 === 1) {
                      var inst_109814 = init;
                      var state_109828__$1 = function() {
                        var statearr_109837 = state_109828;
                        statearr_109837[8] = inst_109814;
                        return statearr_109837;
                      }();
                      var statearr_109838_109851 = state_109828__$1;
                      statearr_109838_109851[2] = null;
                      statearr_109838_109851[1] = 2;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      return null;
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function(switch__15564__auto__) {
        return function() {
          var state_machine__15565__auto__ = null;
          var state_machine__15565__auto____0 = function() {
            var statearr_109842 = [null, null, null, null, null, null, null, null, null];
            statearr_109842[0] = state_machine__15565__auto__;
            statearr_109842[1] = 1;
            return statearr_109842;
          };
          var state_machine__15565__auto____1 = function(state_109828) {
            while (true) {
              var ret_value__15566__auto__ = function() {
                try {
                  while (true) {
                    var result__15567__auto__ = switch__15564__auto__.call(null, state_109828);
                    if (cljs.core.keyword_identical_QMARK_.call(null, result__15567__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                      continue;
                    } else {
                      return result__15567__auto__;
                    }
                    break;
                  }
                } catch (e109843) {
                  if (e109843 instanceof Object) {
                    var ex__15568__auto__ = e109843;
                    var statearr_109844_109852 = state_109828;
                    statearr_109844_109852[5] = ex__15568__auto__;
                    cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_109828);
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                      throw e109843;
                    } else {
                      return null;
                    }
                  }
                }
              }();
              if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__15566__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                var G__109853 = state_109828;
                state_109828 = G__109853;
                continue;
              } else {
                return ret_value__15566__auto__;
              }
              break;
            }
          };
          state_machine__15565__auto__ = function(state_109828) {
            switch(arguments.length) {
              case 0:
                return state_machine__15565__auto____0.call(this);
              case 1:
                return state_machine__15565__auto____1.call(this, state_109828);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__15565__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__15565__auto____0;
          state_machine__15565__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__15565__auto____1;
          return state_machine__15565__auto__;
        }();
      }(switch__15564__auto__);
    }();
    var state__15581__auto__ = function() {
      var statearr_109845 = f__15580__auto__.call(null);
      statearr_109845[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__15579__auto__;
      return statearr_109845;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__15581__auto__);
  });
  return c__15579__auto__;
};
cljs.core.async.onto_chan = function() {
  var onto_chan = null;
  var onto_chan__2 = function(ch, coll) {
    return onto_chan.call(null, ch, coll, true);
  };
  var onto_chan__3 = function(ch, coll, close_QMARK_) {
    var c__15579__auto__ = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__15580__auto__ = function() {
        var switch__15564__auto__ = function(state_109915) {
          var state_val_109916 = state_109915[1];
          if (state_val_109916 === 1) {
            var inst_109895 = cljs.core.seq.call(null, coll);
            var inst_109896 = inst_109895;
            var state_109915__$1 = function() {
              var statearr_109917 = state_109915;
              statearr_109917[7] = inst_109896;
              return statearr_109917;
            }();
            var statearr_109918_109936 = state_109915__$1;
            statearr_109918_109936[2] = null;
            statearr_109918_109936[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_109916 === 2) {
              var inst_109896 = state_109915[7];
              var state_109915__$1 = state_109915;
              if (cljs.core.truth_(inst_109896)) {
                var statearr_109919_109937 = state_109915__$1;
                statearr_109919_109937[1] = 4;
              } else {
                var statearr_109920_109938 = state_109915__$1;
                statearr_109920_109938[1] = 5;
              }
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_109916 === 3) {
                var inst_109913 = state_109915[2];
                var state_109915__$1 = state_109915;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_109915__$1, inst_109913);
              } else {
                if (state_val_109916 === 4) {
                  var inst_109896 = state_109915[7];
                  var inst_109899 = cljs.core.first.call(null, inst_109896);
                  var state_109915__$1 = state_109915;
                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_109915__$1, 7, ch, inst_109899);
                } else {
                  if (state_val_109916 === 5) {
                    var state_109915__$1 = state_109915;
                    if (cljs.core.truth_(close_QMARK_)) {
                      var statearr_109921_109939 = state_109915__$1;
                      statearr_109921_109939[1] = 8;
                    } else {
                      var statearr_109922_109940 = state_109915__$1;
                      statearr_109922_109940[1] = 9;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_109916 === 6) {
                      var inst_109911 = state_109915[2];
                      var state_109915__$1 = state_109915;
                      var statearr_109923_109941 = state_109915__$1;
                      statearr_109923_109941[2] = inst_109911;
                      statearr_109923_109941[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_109916 === 7) {
                        var inst_109896 = state_109915[7];
                        var inst_109901 = state_109915[2];
                        var inst_109902 = cljs.core.next.call(null, inst_109896);
                        var inst_109896__$1 = inst_109902;
                        var state_109915__$1 = function() {
                          var statearr_109924 = state_109915;
                          statearr_109924[7] = inst_109896__$1;
                          statearr_109924[8] = inst_109901;
                          return statearr_109924;
                        }();
                        var statearr_109925_109942 = state_109915__$1;
                        statearr_109925_109942[2] = null;
                        statearr_109925_109942[1] = 2;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_109916 === 8) {
                          var inst_109906 = cljs.core.async.close_BANG_.call(null, ch);
                          var state_109915__$1 = state_109915;
                          var statearr_109926_109943 = state_109915__$1;
                          statearr_109926_109943[2] = inst_109906;
                          statearr_109926_109943[1] = 10;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_109916 === 9) {
                            var state_109915__$1 = state_109915;
                            var statearr_109927_109944 = state_109915__$1;
                            statearr_109927_109944[2] = null;
                            statearr_109927_109944[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_109916 === 10) {
                              var inst_109909 = state_109915[2];
                              var state_109915__$1 = state_109915;
                              var statearr_109928_109945 = state_109915__$1;
                              statearr_109928_109945[2] = inst_109909;
                              statearr_109928_109945[1] = 6;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              return null;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__15564__auto__) {
          return function() {
            var state_machine__15565__auto__ = null;
            var state_machine__15565__auto____0 = function() {
              var statearr_109932 = [null, null, null, null, null, null, null, null, null];
              statearr_109932[0] = state_machine__15565__auto__;
              statearr_109932[1] = 1;
              return statearr_109932;
            };
            var state_machine__15565__auto____1 = function(state_109915) {
              while (true) {
                var ret_value__15566__auto__ = function() {
                  try {
                    while (true) {
                      var result__15567__auto__ = switch__15564__auto__.call(null, state_109915);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__15567__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__15567__auto__;
                      }
                      break;
                    }
                  } catch (e109933) {
                    if (e109933 instanceof Object) {
                      var ex__15568__auto__ = e109933;
                      var statearr_109934_109946 = state_109915;
                      statearr_109934_109946[5] = ex__15568__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_109915);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e109933;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__15566__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__109947 = state_109915;
                  state_109915 = G__109947;
                  continue;
                } else {
                  return ret_value__15566__auto__;
                }
                break;
              }
            };
            state_machine__15565__auto__ = function(state_109915) {
              switch(arguments.length) {
                case 0:
                  return state_machine__15565__auto____0.call(this);
                case 1:
                  return state_machine__15565__auto____1.call(this, state_109915);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__15565__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__15565__auto____0;
            state_machine__15565__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__15565__auto____1;
            return state_machine__15565__auto__;
          }();
        }(switch__15564__auto__);
      }();
      var state__15581__auto__ = function() {
        var statearr_109935 = f__15580__auto__.call(null);
        statearr_109935[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__15579__auto__;
        return statearr_109935;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__15581__auto__);
    });
    return c__15579__auto__;
  };
  onto_chan = function(ch, coll, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return onto_chan__2.call(this, ch, coll);
      case 3:
        return onto_chan__3.call(this, ch, coll, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  onto_chan.cljs$core$IFn$_invoke$arity$2 = onto_chan__2;
  onto_chan.cljs$core$IFn$_invoke$arity$3 = onto_chan__3;
  return onto_chan;
}();
cljs.core.async.to_chan = function to_chan(coll) {
  var ch = cljs.core.async.chan.call(null, cljs.core.bounded_count.call(null, 100, coll));
  cljs.core.async.onto_chan.call(null, ch, coll);
  return ch;
};
cljs.core.async.Mux = function() {
  var obj109949 = {};
  return obj109949;
}();
cljs.core.async.muxch_STAR_ = function muxch_STAR_(_) {
  if (function() {
    var and__12818__auto__ = _;
    if (and__12818__auto__) {
      return _.cljs$core$async$Mux$muxch_STAR_$arity$1;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return _.cljs$core$async$Mux$muxch_STAR_$arity$1(_);
  } else {
    var x__13457__auto__ = _ == null ? null : _;
    return function() {
      var or__12830__auto__ = cljs.core.async.muxch_STAR_[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = cljs.core.async.muxch_STAR_["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mux.muxch*", _);
        }
      }
    }().call(null, _);
  }
};
cljs.core.async.Mult = function() {
  var obj109951 = {};
  return obj109951;
}();
cljs.core.async.tap_STAR_ = function tap_STAR_(m, ch, close_QMARK_) {
  if (function() {
    var and__12818__auto__ = m;
    if (and__12818__auto__) {
      return m.cljs$core$async$Mult$tap_STAR_$arity$3;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$tap_STAR_$arity$3(m, ch, close_QMARK_);
  } else {
    var x__13457__auto__ = m == null ? null : m;
    return function() {
      var or__12830__auto__ = cljs.core.async.tap_STAR_[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = cljs.core.async.tap_STAR_["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.tap*", m);
        }
      }
    }().call(null, m, ch, close_QMARK_);
  }
};
cljs.core.async.untap_STAR_ = function untap_STAR_(m, ch) {
  if (function() {
    var and__12818__auto__ = m;
    if (and__12818__auto__) {
      return m.cljs$core$async$Mult$untap_STAR_$arity$2;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$untap_STAR_$arity$2(m, ch);
  } else {
    var x__13457__auto__ = m == null ? null : m;
    return function() {
      var or__12830__auto__ = cljs.core.async.untap_STAR_[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = cljs.core.async.untap_STAR_["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.untap*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.untap_all_STAR_ = function untap_all_STAR_(m) {
  if (function() {
    var and__12818__auto__ = m;
    if (and__12818__auto__) {
      return m.cljs$core$async$Mult$untap_all_STAR_$arity$1;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$untap_all_STAR_$arity$1(m);
  } else {
    var x__13457__auto__ = m == null ? null : m;
    return function() {
      var or__12830__auto__ = cljs.core.async.untap_all_STAR_[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = cljs.core.async.untap_all_STAR_["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.untap-all*", m);
        }
      }
    }().call(null, m);
  }
};
cljs.core.async.mult = function mult(ch) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var m = function() {
    if (typeof cljs.core.async.t110175 !== "undefined") {
    } else {
      cljs.core.async.t110175 = function(cs, ch, mult, meta110176) {
        this.cs = cs;
        this.ch = ch;
        this.mult = mult;
        this.meta110176 = meta110176;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
      };
      cljs.core.async.t110175.cljs$lang$type = true;
      cljs.core.async.t110175.cljs$lang$ctorStr = "cljs.core.async/t110175";
      cljs.core.async.t110175.cljs$lang$ctorPrWriter = function(cs) {
        return function(this__13397__auto__, writer__13398__auto__, opt__13399__auto__) {
          return cljs.core._write.call(null, writer__13398__auto__, "cljs.core.async/t110175");
        };
      }(cs);
      cljs.core.async.t110175.prototype.cljs$core$async$Mult$ = true;
      cljs.core.async.t110175.prototype.cljs$core$async$Mult$tap_STAR_$arity$3 = function(cs) {
        return function(_, ch__$2, close_QMARK_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch__$2, close_QMARK_);
          return null;
        };
      }(cs);
      cljs.core.async.t110175.prototype.cljs$core$async$Mult$untap_STAR_$arity$2 = function(cs) {
        return function(_, ch__$2) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch__$2);
          return null;
        };
      }(cs);
      cljs.core.async.t110175.prototype.cljs$core$async$Mult$untap_all_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return null;
        };
      }(cs);
      cljs.core.async.t110175.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t110175.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.ch;
        };
      }(cs);
      cljs.core.async.t110175.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs) {
        return function(_110177) {
          var self__ = this;
          var _110177__$1 = this;
          return self__.meta110176;
        };
      }(cs);
      cljs.core.async.t110175.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs) {
        return function(_110177, meta110176__$1) {
          var self__ = this;
          var _110177__$1 = this;
          return new cljs.core.async.t110175(self__.cs, self__.ch, self__.mult, meta110176__$1);
        };
      }(cs);
      cljs.core.async.__GT_t110175 = function(cs) {
        return function __GT_t110175(cs__$1, ch__$1, mult__$1, meta110176) {
          return new cljs.core.async.t110175(cs__$1, ch__$1, mult__$1, meta110176);
        };
      }(cs);
    }
    return new cljs.core.async.t110175(cs, ch, mult, null);
  }();
  var dchan = cljs.core.async.chan.call(null, 1);
  var dctr = cljs.core.atom.call(null, null);
  var done = function(cs, m, dchan, dctr) {
    return function() {
      if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
        return cljs.core.async.put_BANG_.call(null, dchan, true);
      } else {
        return null;
      }
    };
  }(cs, m, dchan, dctr);
  var c__15579__auto___110398 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__15580__auto__ = function() {
      var switch__15564__auto__ = function(state_110312) {
        var state_val_110313 = state_110312[1];
        if (state_val_110313 === 32) {
          var inst_110180 = state_110312[7];
          var inst_110256 = state_110312[8];
          var _ = cljs.core.async.impl.ioc_helpers.add_exception_frame.call(null, state_110312, 31, Object, null, 30);
          var inst_110263 = cljs.core.async.put_BANG_.call(null, inst_110256, inst_110180, done);
          var state_110312__$1 = state_110312;
          var statearr_110314_110399 = state_110312__$1;
          statearr_110314_110399[2] = inst_110263;
          cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_110312__$1);
          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
        } else {
          if (state_val_110313 === 1) {
            var state_110312__$1 = state_110312;
            var statearr_110315_110400 = state_110312__$1;
            statearr_110315_110400[2] = null;
            statearr_110315_110400[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_110313 === 33) {
              var inst_110269 = state_110312[9];
              var inst_110271 = cljs.core.chunked_seq_QMARK_.call(null, inst_110269);
              var state_110312__$1 = state_110312;
              if (inst_110271) {
                var statearr_110316_110401 = state_110312__$1;
                statearr_110316_110401[1] = 36;
              } else {
                var statearr_110317_110402 = state_110312__$1;
                statearr_110317_110402[1] = 37;
              }
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_110313 === 2) {
                var state_110312__$1 = state_110312;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_110312__$1, 4, ch);
              } else {
                if (state_val_110313 === 34) {
                  var state_110312__$1 = state_110312;
                  var statearr_110318_110403 = state_110312__$1;
                  statearr_110318_110403[2] = null;
                  statearr_110318_110403[1] = 35;
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_110313 === 3) {
                    var inst_110310 = state_110312[2];
                    var state_110312__$1 = state_110312;
                    return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_110312__$1, inst_110310);
                  } else {
                    if (state_val_110313 === 35) {
                      var inst_110294 = state_110312[2];
                      var state_110312__$1 = state_110312;
                      var statearr_110319_110404 = state_110312__$1;
                      statearr_110319_110404[2] = inst_110294;
                      statearr_110319_110404[1] = 29;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_110313 === 4) {
                        var inst_110180 = state_110312[7];
                        var inst_110180__$1 = state_110312[2];
                        var inst_110181 = inst_110180__$1 == null;
                        var state_110312__$1 = function() {
                          var statearr_110320 = state_110312;
                          statearr_110320[7] = inst_110180__$1;
                          return statearr_110320;
                        }();
                        if (cljs.core.truth_(inst_110181)) {
                          var statearr_110321_110405 = state_110312__$1;
                          statearr_110321_110405[1] = 5;
                        } else {
                          var statearr_110322_110406 = state_110312__$1;
                          statearr_110322_110406[1] = 6;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_110313 === 36) {
                          var inst_110269 = state_110312[9];
                          var inst_110273 = cljs.core.chunk_first.call(null, inst_110269);
                          var inst_110274 = cljs.core.chunk_rest.call(null, inst_110269);
                          var inst_110275 = cljs.core.count.call(null, inst_110273);
                          var inst_110248 = inst_110274;
                          var inst_110249 = inst_110273;
                          var inst_110250 = inst_110275;
                          var inst_110251 = 0;
                          var state_110312__$1 = function() {
                            var statearr_110323 = state_110312;
                            statearr_110323[10] = inst_110249;
                            statearr_110323[11] = inst_110248;
                            statearr_110323[12] = inst_110250;
                            statearr_110323[13] = inst_110251;
                            return statearr_110323;
                          }();
                          var statearr_110324_110407 = state_110312__$1;
                          statearr_110324_110407[2] = null;
                          statearr_110324_110407[1] = 25;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_110313 === 5) {
                            var inst_110187 = cljs.core.deref.call(null, cs);
                            var inst_110188 = cljs.core.seq.call(null, inst_110187);
                            var inst_110189 = inst_110188;
                            var inst_110190 = null;
                            var inst_110191 = 0;
                            var inst_110192 = 0;
                            var state_110312__$1 = function() {
                              var statearr_110325 = state_110312;
                              statearr_110325[14] = inst_110190;
                              statearr_110325[15] = inst_110189;
                              statearr_110325[16] = inst_110192;
                              statearr_110325[17] = inst_110191;
                              return statearr_110325;
                            }();
                            var statearr_110326_110408 = state_110312__$1;
                            statearr_110326_110408[2] = null;
                            statearr_110326_110408[1] = 8;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_110313 === 37) {
                              var inst_110269 = state_110312[9];
                              var inst_110278 = cljs.core.first.call(null, inst_110269);
                              var state_110312__$1 = function() {
                                var statearr_110327 = state_110312;
                                statearr_110327[18] = inst_110278;
                                return statearr_110327;
                              }();
                              var statearr_110328_110409 = state_110312__$1;
                              statearr_110328_110409[2] = null;
                              statearr_110328_110409[1] = 41;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_110313 === 6) {
                                var inst_110240 = state_110312[19];
                                var inst_110239 = cljs.core.deref.call(null, cs);
                                var inst_110240__$1 = cljs.core.keys.call(null, inst_110239);
                                var inst_110241 = cljs.core.count.call(null, inst_110240__$1);
                                var inst_110242 = cljs.core.reset_BANG_.call(null, dctr, inst_110241);
                                var inst_110247 = cljs.core.seq.call(null, inst_110240__$1);
                                var inst_110248 = inst_110247;
                                var inst_110249 = null;
                                var inst_110250 = 0;
                                var inst_110251 = 0;
                                var state_110312__$1 = function() {
                                  var statearr_110329 = state_110312;
                                  statearr_110329[10] = inst_110249;
                                  statearr_110329[19] = inst_110240__$1;
                                  statearr_110329[11] = inst_110248;
                                  statearr_110329[12] = inst_110250;
                                  statearr_110329[13] = inst_110251;
                                  statearr_110329[20] = inst_110242;
                                  return statearr_110329;
                                }();
                                var statearr_110330_110410 = state_110312__$1;
                                statearr_110330_110410[2] = null;
                                statearr_110330_110410[1] = 25;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_110313 === 38) {
                                  var inst_110291 = state_110312[2];
                                  var state_110312__$1 = state_110312;
                                  var statearr_110331_110411 = state_110312__$1;
                                  statearr_110331_110411[2] = inst_110291;
                                  statearr_110331_110411[1] = 35;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_110313 === 7) {
                                    var inst_110308 = state_110312[2];
                                    var state_110312__$1 = state_110312;
                                    var statearr_110332_110412 = state_110312__$1;
                                    statearr_110332_110412[2] = inst_110308;
                                    statearr_110332_110412[1] = 3;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_110313 === 39) {
                                      var inst_110269 = state_110312[9];
                                      var inst_110287 = state_110312[2];
                                      var inst_110288 = cljs.core.next.call(null, inst_110269);
                                      var inst_110248 = inst_110288;
                                      var inst_110249 = null;
                                      var inst_110250 = 0;
                                      var inst_110251 = 0;
                                      var state_110312__$1 = function() {
                                        var statearr_110333 = state_110312;
                                        statearr_110333[10] = inst_110249;
                                        statearr_110333[11] = inst_110248;
                                        statearr_110333[12] = inst_110250;
                                        statearr_110333[13] = inst_110251;
                                        statearr_110333[21] = inst_110287;
                                        return statearr_110333;
                                      }();
                                      var statearr_110334_110413 = state_110312__$1;
                                      statearr_110334_110413[2] = null;
                                      statearr_110334_110413[1] = 25;
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                    } else {
                                      if (state_val_110313 === 8) {
                                        var inst_110192 = state_110312[16];
                                        var inst_110191 = state_110312[17];
                                        var inst_110194 = inst_110192 < inst_110191;
                                        var inst_110195 = inst_110194;
                                        var state_110312__$1 = state_110312;
                                        if (cljs.core.truth_(inst_110195)) {
                                          var statearr_110335_110414 = state_110312__$1;
                                          statearr_110335_110414[1] = 10;
                                        } else {
                                          var statearr_110336_110415 = state_110312__$1;
                                          statearr_110336_110415[1] = 11;
                                        }
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        if (state_val_110313 === 40) {
                                          var inst_110278 = state_110312[18];
                                          var inst_110279 = state_110312[2];
                                          var inst_110280 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                                          var inst_110281 = cljs.core.async.untap_STAR_.call(null, m, inst_110278);
                                          var state_110312__$1 = function() {
                                            var statearr_110337 = state_110312;
                                            statearr_110337[22] = inst_110280;
                                            statearr_110337[23] = inst_110279;
                                            return statearr_110337;
                                          }();
                                          var statearr_110338_110416 = state_110312__$1;
                                          statearr_110338_110416[2] = inst_110281;
                                          cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_110312__$1);
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                        } else {
                                          if (state_val_110313 === 9) {
                                            var inst_110237 = state_110312[2];
                                            var state_110312__$1 = state_110312;
                                            var statearr_110339_110417 = state_110312__$1;
                                            statearr_110339_110417[2] = inst_110237;
                                            statearr_110339_110417[1] = 7;
                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                          } else {
                                            if (state_val_110313 === 41) {
                                              var inst_110180 = state_110312[7];
                                              var inst_110278 = state_110312[18];
                                              var _ = cljs.core.async.impl.ioc_helpers.add_exception_frame.call(null, state_110312, 40, Object, null, 39);
                                              var inst_110285 = cljs.core.async.put_BANG_.call(null, inst_110278, inst_110180, done);
                                              var state_110312__$1 = state_110312;
                                              var statearr_110340_110418 = state_110312__$1;
                                              statearr_110340_110418[2] = inst_110285;
                                              cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_110312__$1);
                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                            } else {
                                              if (state_val_110313 === 10) {
                                                var inst_110190 = state_110312[14];
                                                var inst_110192 = state_110312[16];
                                                var inst_110198 = cljs.core._nth.call(null, inst_110190, inst_110192);
                                                var inst_110199 = cljs.core.nth.call(null, inst_110198, 0, null);
                                                var inst_110200 = cljs.core.nth.call(null, inst_110198, 1, null);
                                                var state_110312__$1 = function() {
                                                  var statearr_110341 = state_110312;
                                                  statearr_110341[24] = inst_110199;
                                                  return statearr_110341;
                                                }();
                                                if (cljs.core.truth_(inst_110200)) {
                                                  var statearr_110342_110419 = state_110312__$1;
                                                  statearr_110342_110419[1] = 13;
                                                } else {
                                                  var statearr_110343_110420 = state_110312__$1;
                                                  statearr_110343_110420[1] = 14;
                                                }
                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                              } else {
                                                if (state_val_110313 === 42) {
                                                  var state_110312__$1 = state_110312;
                                                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_110312__$1, 45, dchan);
                                                } else {
                                                  if (state_val_110313 === 11) {
                                                    var inst_110189 = state_110312[15];
                                                    var inst_110209 = state_110312[25];
                                                    var inst_110209__$1 = cljs.core.seq.call(null, inst_110189);
                                                    var state_110312__$1 = function() {
                                                      var statearr_110344 = state_110312;
                                                      statearr_110344[25] = inst_110209__$1;
                                                      return statearr_110344;
                                                    }();
                                                    if (inst_110209__$1) {
                                                      var statearr_110345_110421 = state_110312__$1;
                                                      statearr_110345_110421[1] = 16;
                                                    } else {
                                                      var statearr_110346_110422 = state_110312__$1;
                                                      statearr_110346_110422[1] = 17;
                                                    }
                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                  } else {
                                                    if (state_val_110313 === 43) {
                                                      var state_110312__$1 = state_110312;
                                                      var statearr_110347_110423 = state_110312__$1;
                                                      statearr_110347_110423[2] = null;
                                                      statearr_110347_110423[1] = 44;
                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                    } else {
                                                      if (state_val_110313 === 12) {
                                                        var inst_110235 = state_110312[2];
                                                        var state_110312__$1 = state_110312;
                                                        var statearr_110348_110424 = state_110312__$1;
                                                        statearr_110348_110424[2] = inst_110235;
                                                        statearr_110348_110424[1] = 9;
                                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                      } else {
                                                        if (state_val_110313 === 44) {
                                                          var inst_110305 = state_110312[2];
                                                          var state_110312__$1 = function() {
                                                            var statearr_110349 = state_110312;
                                                            statearr_110349[26] = inst_110305;
                                                            return statearr_110349;
                                                          }();
                                                          var statearr_110350_110425 = state_110312__$1;
                                                          statearr_110350_110425[2] = null;
                                                          statearr_110350_110425[1] = 2;
                                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                        } else {
                                                          if (state_val_110313 === 13) {
                                                            var inst_110199 = state_110312[24];
                                                            var inst_110202 = cljs.core.async.close_BANG_.call(null, inst_110199);
                                                            var state_110312__$1 = state_110312;
                                                            var statearr_110351_110426 = state_110312__$1;
                                                            statearr_110351_110426[2] = inst_110202;
                                                            statearr_110351_110426[1] = 15;
                                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                          } else {
                                                            if (state_val_110313 === 45) {
                                                              var inst_110302 = state_110312[2];
                                                              var state_110312__$1 = state_110312;
                                                              var statearr_110355_110427 = state_110312__$1;
                                                              statearr_110355_110427[2] = inst_110302;
                                                              statearr_110355_110427[1] = 44;
                                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                            } else {
                                                              if (state_val_110313 === 14) {
                                                                var state_110312__$1 = state_110312;
                                                                var statearr_110356_110428 = state_110312__$1;
                                                                statearr_110356_110428[2] = null;
                                                                statearr_110356_110428[1] = 15;
                                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                              } else {
                                                                if (state_val_110313 === 15) {
                                                                  var inst_110190 = state_110312[14];
                                                                  var inst_110189 = state_110312[15];
                                                                  var inst_110192 = state_110312[16];
                                                                  var inst_110191 = state_110312[17];
                                                                  var inst_110205 = state_110312[2];
                                                                  var inst_110206 = inst_110192 + 1;
                                                                  var tmp110352 = inst_110190;
                                                                  var tmp110353 = inst_110189;
                                                                  var tmp110354 = inst_110191;
                                                                  var inst_110189__$1 = tmp110353;
                                                                  var inst_110190__$1 = tmp110352;
                                                                  var inst_110191__$1 = tmp110354;
                                                                  var inst_110192__$1 = inst_110206;
                                                                  var state_110312__$1 = function() {
                                                                    var statearr_110357 = state_110312;
                                                                    statearr_110357[27] = inst_110205;
                                                                    statearr_110357[14] = inst_110190__$1;
                                                                    statearr_110357[15] = inst_110189__$1;
                                                                    statearr_110357[16] = inst_110192__$1;
                                                                    statearr_110357[17] = inst_110191__$1;
                                                                    return statearr_110357;
                                                                  }();
                                                                  var statearr_110358_110429 = state_110312__$1;
                                                                  statearr_110358_110429[2] = null;
                                                                  statearr_110358_110429[1] = 8;
                                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                } else {
                                                                  if (state_val_110313 === 16) {
                                                                    var inst_110209 = state_110312[25];
                                                                    var inst_110211 = cljs.core.chunked_seq_QMARK_.call(null, inst_110209);
                                                                    var state_110312__$1 = state_110312;
                                                                    if (inst_110211) {
                                                                      var statearr_110359_110430 = state_110312__$1;
                                                                      statearr_110359_110430[1] = 19;
                                                                    } else {
                                                                      var statearr_110360_110431 = state_110312__$1;
                                                                      statearr_110360_110431[1] = 20;
                                                                    }
                                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                  } else {
                                                                    if (state_val_110313 === 17) {
                                                                      var state_110312__$1 = state_110312;
                                                                      var statearr_110361_110432 = state_110312__$1;
                                                                      statearr_110361_110432[2] = null;
                                                                      statearr_110361_110432[1] = 18;
                                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                    } else {
                                                                      if (state_val_110313 === 18) {
                                                                        var inst_110233 = state_110312[2];
                                                                        var state_110312__$1 = state_110312;
                                                                        var statearr_110362_110433 = state_110312__$1;
                                                                        statearr_110362_110433[2] = inst_110233;
                                                                        statearr_110362_110433[1] = 12;
                                                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                      } else {
                                                                        if (state_val_110313 === 19) {
                                                                          var inst_110209 = state_110312[25];
                                                                          var inst_110213 = cljs.core.chunk_first.call(null, inst_110209);
                                                                          var inst_110214 = cljs.core.chunk_rest.call(null, inst_110209);
                                                                          var inst_110215 = cljs.core.count.call(null, inst_110213);
                                                                          var inst_110189 = inst_110214;
                                                                          var inst_110190 = inst_110213;
                                                                          var inst_110191 = inst_110215;
                                                                          var inst_110192 = 0;
                                                                          var state_110312__$1 = function() {
                                                                            var statearr_110363 = state_110312;
                                                                            statearr_110363[14] = inst_110190;
                                                                            statearr_110363[15] = inst_110189;
                                                                            statearr_110363[16] = inst_110192;
                                                                            statearr_110363[17] = inst_110191;
                                                                            return statearr_110363;
                                                                          }();
                                                                          var statearr_110364_110434 = state_110312__$1;
                                                                          statearr_110364_110434[2] = null;
                                                                          statearr_110364_110434[1] = 8;
                                                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                        } else {
                                                                          if (state_val_110313 === 20) {
                                                                            var inst_110209 = state_110312[25];
                                                                            var inst_110219 = cljs.core.first.call(null, inst_110209);
                                                                            var inst_110220 = cljs.core.nth.call(null, inst_110219, 0, null);
                                                                            var inst_110221 = cljs.core.nth.call(null, inst_110219, 1, null);
                                                                            var state_110312__$1 = function() {
                                                                              var statearr_110365 = state_110312;
                                                                              statearr_110365[28] = inst_110220;
                                                                              return statearr_110365;
                                                                            }();
                                                                            if (cljs.core.truth_(inst_110221)) {
                                                                              var statearr_110366_110435 = state_110312__$1;
                                                                              statearr_110366_110435[1] = 22;
                                                                            } else {
                                                                              var statearr_110367_110436 = state_110312__$1;
                                                                              statearr_110367_110436[1] = 23;
                                                                            }
                                                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                          } else {
                                                                            if (state_val_110313 === 21) {
                                                                              var inst_110230 = state_110312[2];
                                                                              var state_110312__$1 = state_110312;
                                                                              var statearr_110368_110437 = state_110312__$1;
                                                                              statearr_110368_110437[2] = inst_110230;
                                                                              statearr_110368_110437[1] = 18;
                                                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                            } else {
                                                                              if (state_val_110313 === 22) {
                                                                                var inst_110220 = state_110312[28];
                                                                                var inst_110223 = cljs.core.async.close_BANG_.call(null, inst_110220);
                                                                                var state_110312__$1 = state_110312;
                                                                                var statearr_110369_110438 = state_110312__$1;
                                                                                statearr_110369_110438[2] = inst_110223;
                                                                                statearr_110369_110438[1] = 24;
                                                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                              } else {
                                                                                if (state_val_110313 === 23) {
                                                                                  var state_110312__$1 = state_110312;
                                                                                  var statearr_110370_110439 = state_110312__$1;
                                                                                  statearr_110370_110439[2] = null;
                                                                                  statearr_110370_110439[1] = 24;
                                                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                } else {
                                                                                  if (state_val_110313 === 24) {
                                                                                    var inst_110209 = state_110312[25];
                                                                                    var inst_110226 = state_110312[2];
                                                                                    var inst_110227 = cljs.core.next.call(null, inst_110209);
                                                                                    var inst_110189 = inst_110227;
                                                                                    var inst_110190 = null;
                                                                                    var inst_110191 = 0;
                                                                                    var inst_110192 = 0;
                                                                                    var state_110312__$1 = function() {
                                                                                      var statearr_110371 = state_110312;
                                                                                      statearr_110371[29] = inst_110226;
                                                                                      statearr_110371[14] = inst_110190;
                                                                                      statearr_110371[15] = inst_110189;
                                                                                      statearr_110371[16] = inst_110192;
                                                                                      statearr_110371[17] = inst_110191;
                                                                                      return statearr_110371;
                                                                                    }();
                                                                                    var statearr_110372_110440 = state_110312__$1;
                                                                                    statearr_110372_110440[2] = null;
                                                                                    statearr_110372_110440[1] = 8;
                                                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                  } else {
                                                                                    if (state_val_110313 === 25) {
                                                                                      var inst_110250 = state_110312[12];
                                                                                      var inst_110251 = state_110312[13];
                                                                                      var inst_110253 = inst_110251 < inst_110250;
                                                                                      var inst_110254 = inst_110253;
                                                                                      var state_110312__$1 = state_110312;
                                                                                      if (cljs.core.truth_(inst_110254)) {
                                                                                        var statearr_110373_110441 = state_110312__$1;
                                                                                        statearr_110373_110441[1] = 27;
                                                                                      } else {
                                                                                        var statearr_110374_110442 = state_110312__$1;
                                                                                        statearr_110374_110442[1] = 28;
                                                                                      }
                                                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                    } else {
                                                                                      if (state_val_110313 === 26) {
                                                                                        var inst_110240 = state_110312[19];
                                                                                        var inst_110298 = state_110312[2];
                                                                                        var inst_110299 = cljs.core.seq.call(null, inst_110240);
                                                                                        var state_110312__$1 = function() {
                                                                                          var statearr_110375 = state_110312;
                                                                                          statearr_110375[30] = inst_110298;
                                                                                          return statearr_110375;
                                                                                        }();
                                                                                        if (inst_110299) {
                                                                                          var statearr_110376_110443 = state_110312__$1;
                                                                                          statearr_110376_110443[1] = 42;
                                                                                        } else {
                                                                                          var statearr_110377_110444 = state_110312__$1;
                                                                                          statearr_110377_110444[1] = 43;
                                                                                        }
                                                                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                      } else {
                                                                                        if (state_val_110313 === 27) {
                                                                                          var inst_110249 = state_110312[10];
                                                                                          var inst_110251 = state_110312[13];
                                                                                          var inst_110256 = cljs.core._nth.call(null, inst_110249, inst_110251);
                                                                                          var state_110312__$1 = function() {
                                                                                            var statearr_110378 = state_110312;
                                                                                            statearr_110378[8] = inst_110256;
                                                                                            return statearr_110378;
                                                                                          }();
                                                                                          var statearr_110379_110445 = state_110312__$1;
                                                                                          statearr_110379_110445[2] = null;
                                                                                          statearr_110379_110445[1] = 32;
                                                                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                        } else {
                                                                                          if (state_val_110313 === 28) {
                                                                                            var inst_110269 = state_110312[9];
                                                                                            var inst_110248 = state_110312[11];
                                                                                            var inst_110269__$1 = cljs.core.seq.call(null, inst_110248);
                                                                                            var state_110312__$1 = function() {
                                                                                              var statearr_110383 = state_110312;
                                                                                              statearr_110383[9] = inst_110269__$1;
                                                                                              return statearr_110383;
                                                                                            }();
                                                                                            if (inst_110269__$1) {
                                                                                              var statearr_110384_110446 = state_110312__$1;
                                                                                              statearr_110384_110446[1] = 33;
                                                                                            } else {
                                                                                              var statearr_110385_110447 = state_110312__$1;
                                                                                              statearr_110385_110447[1] = 34;
                                                                                            }
                                                                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                          } else {
                                                                                            if (state_val_110313 === 29) {
                                                                                              var inst_110296 = state_110312[2];
                                                                                              var state_110312__$1 = state_110312;
                                                                                              var statearr_110386_110448 = state_110312__$1;
                                                                                              statearr_110386_110448[2] = inst_110296;
                                                                                              statearr_110386_110448[1] = 26;
                                                                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                            } else {
                                                                                              if (state_val_110313 === 30) {
                                                                                                var inst_110249 = state_110312[10];
                                                                                                var inst_110248 = state_110312[11];
                                                                                                var inst_110250 = state_110312[12];
                                                                                                var inst_110251 = state_110312[13];
                                                                                                var inst_110265 = state_110312[2];
                                                                                                var inst_110266 = inst_110251 + 1;
                                                                                                var tmp110380 = inst_110249;
                                                                                                var tmp110381 = inst_110248;
                                                                                                var tmp110382 = inst_110250;
                                                                                                var inst_110248__$1 = tmp110381;
                                                                                                var inst_110249__$1 = tmp110380;
                                                                                                var inst_110250__$1 = tmp110382;
                                                                                                var inst_110251__$1 = inst_110266;
                                                                                                var state_110312__$1 = function() {
                                                                                                  var statearr_110387 = state_110312;
                                                                                                  statearr_110387[10] = inst_110249__$1;
                                                                                                  statearr_110387[31] = inst_110265;
                                                                                                  statearr_110387[11] = inst_110248__$1;
                                                                                                  statearr_110387[12] = inst_110250__$1;
                                                                                                  statearr_110387[13] = inst_110251__$1;
                                                                                                  return statearr_110387;
                                                                                                }();
                                                                                                var statearr_110388_110449 = state_110312__$1;
                                                                                                statearr_110388_110449[2] = null;
                                                                                                statearr_110388_110449[1] = 25;
                                                                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                              } else {
                                                                                                if (state_val_110313 === 31) {
                                                                                                  var inst_110256 = state_110312[8];
                                                                                                  var inst_110257 = state_110312[2];
                                                                                                  var inst_110258 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                                                                                                  var inst_110259 = cljs.core.async.untap_STAR_.call(null, m, inst_110256);
                                                                                                  var state_110312__$1 = function() {
                                                                                                    var statearr_110389 = state_110312;
                                                                                                    statearr_110389[32] = inst_110257;
                                                                                                    statearr_110389[33] = inst_110258;
                                                                                                    return statearr_110389;
                                                                                                  }();
                                                                                                  var statearr_110390_110450 = state_110312__$1;
                                                                                                  statearr_110390_110450[2] = inst_110259;
                                                                                                  cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_110312__$1);
                                                                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                                } else {
                                                                                                  return null;
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function(switch__15564__auto__) {
        return function() {
          var state_machine__15565__auto__ = null;
          var state_machine__15565__auto____0 = function() {
            var statearr_110394 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
            statearr_110394[0] = state_machine__15565__auto__;
            statearr_110394[1] = 1;
            return statearr_110394;
          };
          var state_machine__15565__auto____1 = function(state_110312) {
            while (true) {
              var ret_value__15566__auto__ = function() {
                try {
                  while (true) {
                    var result__15567__auto__ = switch__15564__auto__.call(null, state_110312);
                    if (cljs.core.keyword_identical_QMARK_.call(null, result__15567__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                      continue;
                    } else {
                      return result__15567__auto__;
                    }
                    break;
                  }
                } catch (e110395) {
                  if (e110395 instanceof Object) {
                    var ex__15568__auto__ = e110395;
                    var statearr_110396_110451 = state_110312;
                    statearr_110396_110451[5] = ex__15568__auto__;
                    cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_110312);
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                      throw e110395;
                    } else {
                      return null;
                    }
                  }
                }
              }();
              if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__15566__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                var G__110452 = state_110312;
                state_110312 = G__110452;
                continue;
              } else {
                return ret_value__15566__auto__;
              }
              break;
            }
          };
          state_machine__15565__auto__ = function(state_110312) {
            switch(arguments.length) {
              case 0:
                return state_machine__15565__auto____0.call(this);
              case 1:
                return state_machine__15565__auto____1.call(this, state_110312);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__15565__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__15565__auto____0;
          state_machine__15565__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__15565__auto____1;
          return state_machine__15565__auto__;
        }();
      }(switch__15564__auto__);
    }();
    var state__15581__auto__ = function() {
      var statearr_110397 = f__15580__auto__.call(null);
      statearr_110397[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__15579__auto___110398;
      return statearr_110397;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__15581__auto__);
  });
  return m;
};
cljs.core.async.tap = function() {
  var tap = null;
  var tap__2 = function(mult, ch) {
    return tap.call(null, mult, ch, true);
  };
  var tap__3 = function(mult, ch, close_QMARK_) {
    cljs.core.async.tap_STAR_.call(null, mult, ch, close_QMARK_);
    return ch;
  };
  tap = function(mult, ch, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return tap__2.call(this, mult, ch);
      case 3:
        return tap__3.call(this, mult, ch, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  tap.cljs$core$IFn$_invoke$arity$2 = tap__2;
  tap.cljs$core$IFn$_invoke$arity$3 = tap__3;
  return tap;
}();
cljs.core.async.untap = function untap(mult, ch) {
  return cljs.core.async.untap_STAR_.call(null, mult, ch);
};
cljs.core.async.untap_all = function untap_all(mult) {
  return cljs.core.async.untap_all_STAR_.call(null, mult);
};
cljs.core.async.Mix = function() {
  var obj110454 = {};
  return obj110454;
}();
cljs.core.async.admix_STAR_ = function admix_STAR_(m, ch) {
  if (function() {
    var and__12818__auto__ = m;
    if (and__12818__auto__) {
      return m.cljs$core$async$Mix$admix_STAR_$arity$2;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$admix_STAR_$arity$2(m, ch);
  } else {
    var x__13457__auto__ = m == null ? null : m;
    return function() {
      var or__12830__auto__ = cljs.core.async.admix_STAR_[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = cljs.core.async.admix_STAR_["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.admix*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.unmix_STAR_ = function unmix_STAR_(m, ch) {
  if (function() {
    var and__12818__auto__ = m;
    if (and__12818__auto__) {
      return m.cljs$core$async$Mix$unmix_STAR_$arity$2;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$unmix_STAR_$arity$2(m, ch);
  } else {
    var x__13457__auto__ = m == null ? null : m;
    return function() {
      var or__12830__auto__ = cljs.core.async.unmix_STAR_[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = cljs.core.async.unmix_STAR_["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.unmix*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.unmix_all_STAR_ = function unmix_all_STAR_(m) {
  if (function() {
    var and__12818__auto__ = m;
    if (and__12818__auto__) {
      return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1(m);
  } else {
    var x__13457__auto__ = m == null ? null : m;
    return function() {
      var or__12830__auto__ = cljs.core.async.unmix_all_STAR_[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = cljs.core.async.unmix_all_STAR_["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.unmix-all*", m);
        }
      }
    }().call(null, m);
  }
};
cljs.core.async.toggle_STAR_ = function toggle_STAR_(m, state_map) {
  if (function() {
    var and__12818__auto__ = m;
    if (and__12818__auto__) {
      return m.cljs$core$async$Mix$toggle_STAR_$arity$2;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$toggle_STAR_$arity$2(m, state_map);
  } else {
    var x__13457__auto__ = m == null ? null : m;
    return function() {
      var or__12830__auto__ = cljs.core.async.toggle_STAR_[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = cljs.core.async.toggle_STAR_["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.toggle*", m);
        }
      }
    }().call(null, m, state_map);
  }
};
cljs.core.async.solo_mode_STAR_ = function solo_mode_STAR_(m, mode) {
  if (function() {
    var and__12818__auto__ = m;
    if (and__12818__auto__) {
      return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2(m, mode);
  } else {
    var x__13457__auto__ = m == null ? null : m;
    return function() {
      var or__12830__auto__ = cljs.core.async.solo_mode_STAR_[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = cljs.core.async.solo_mode_STAR_["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.solo-mode*", m);
        }
      }
    }().call(null, m, mode);
  }
};
cljs.core.async.mix = function mix(out) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var solo_modes = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "pause", "pause", 1120344424), null, new cljs.core.Keyword(null, "mute", "mute", 1017267595), null], null), null);
  var attrs = cljs.core.conj.call(null, solo_modes, new cljs.core.Keyword(null, "solo", "solo", 1017440337));
  var solo_mode = cljs.core.atom.call(null, new cljs.core.Keyword(null, "mute", "mute", 1017267595));
  var change = cljs.core.async.chan.call(null);
  var changed = function(cs, solo_modes, attrs, solo_mode, change) {
    return function() {
      return cljs.core.async.put_BANG_.call(null, change, true);
    };
  }(cs, solo_modes, attrs, solo_mode, change);
  var pick = function(cs, solo_modes, attrs, solo_mode, change, changed) {
    return function(attr, chs) {
      return cljs.core.reduce_kv.call(null, function(cs, solo_modes, attrs, solo_mode, change, changed) {
        return function(ret, c, v) {
          if (cljs.core.truth_(attr.call(null, v))) {
            return cljs.core.conj.call(null, ret, c);
          } else {
            return ret;
          }
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed), cljs.core.PersistentHashSet.EMPTY, chs);
    };
  }(cs, solo_modes, attrs, solo_mode, change, changed);
  var calc_state = function(cs, solo_modes, attrs, solo_mode, change, changed, pick) {
    return function() {
      var chs = cljs.core.deref.call(null, cs);
      var mode = cljs.core.deref.call(null, solo_mode);
      var solos = pick.call(null, new cljs.core.Keyword(null, "solo", "solo", 1017440337), chs);
      var pauses = pick.call(null, new cljs.core.Keyword(null, "pause", "pause", 1120344424), chs);
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "solos", "solos", 1123523302), solos, new cljs.core.Keyword(null, "mutes", "mutes", 1118168300), pick.call(null, new cljs.core.Keyword(null, "mute", "mute", 1017267595), chs), new cljs.core.Keyword(null, "reads", "reads", 1122290959), cljs.core.conj.call(null, cljs.core._EQ_.call(null, mode, new cljs.core.Keyword(null, "pause", "pause", 1120344424)) && !cljs.core.empty_QMARK_.call(null, solos) ? cljs.core.vec.call(null, 
      solos) : cljs.core.vec.call(null, cljs.core.remove.call(null, pauses, cljs.core.keys.call(null, chs))), change)], null);
    };
  }(cs, solo_modes, attrs, solo_mode, change, changed, pick);
  var m = function() {
    if (typeof cljs.core.async.t110564 !== "undefined") {
    } else {
      cljs.core.async.t110564 = function(pick, out, attrs, cs, calc_state, solo_modes, mix, changed, change, solo_mode, meta110565) {
        this.pick = pick;
        this.out = out;
        this.attrs = attrs;
        this.cs = cs;
        this.calc_state = calc_state;
        this.solo_modes = solo_modes;
        this.mix = mix;
        this.changed = changed;
        this.change = change;
        this.solo_mode = solo_mode;
        this.meta110565 = meta110565;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
      };
      cljs.core.async.t110564.cljs$lang$type = true;
      cljs.core.async.t110564.cljs$lang$ctorStr = "cljs.core.async/t110564";
      cljs.core.async.t110564.cljs$lang$ctorPrWriter = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(this__13397__auto__, writer__13398__auto__, opt__13399__auto__) {
          return cljs.core._write.call(null, writer__13398__auto__, "cljs.core.async/t110564");
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t110564.prototype.cljs$core$async$Mix$ = true;
      cljs.core.async.t110564.prototype.cljs$core$async$Mix$admix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t110564.prototype.cljs$core$async$Mix$unmix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t110564.prototype.cljs$core$async$Mix$unmix_all_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t110564.prototype.cljs$core$async$Mix$toggle_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, state_map) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.partial.call(null, cljs.core.merge_with, cljs.core.merge), state_map);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t110564.prototype.cljs$core$async$Mix$solo_mode_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, mode) {
          var self__ = this;
          var ___$1 = this;
          if (cljs.core.truth_(self__.solo_modes.call(null, mode))) {
          } else {
            throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("mode must be one of: "), cljs.core.str(self__.solo_modes)].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "solo-modes", "solo-modes", -1162732933, null), new cljs.core.Symbol(null, "mode", "mode", -1637174436, null))))].join(""));
          }
          cljs.core.reset_BANG_.call(null, self__.solo_mode, mode);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t110564.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t110564.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.out;
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t110564.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_110566) {
          var self__ = this;
          var _110566__$1 = this;
          return self__.meta110565;
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t110564.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_110566, meta110565__$1) {
          var self__ = this;
          var _110566__$1 = this;
          return new cljs.core.async.t110564(self__.pick, self__.out, self__.attrs, self__.cs, self__.calc_state, self__.solo_modes, self__.mix, self__.changed, self__.change, self__.solo_mode, meta110565__$1);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.__GT_t110564 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function __GT_t110564(pick__$1, out__$1, attrs__$1, cs__$1, calc_state__$1, solo_modes__$1, mix__$1, changed__$1, change__$1, solo_mode__$1, meta110565) {
          return new cljs.core.async.t110564(pick__$1, out__$1, attrs__$1, cs__$1, calc_state__$1, solo_modes__$1, mix__$1, changed__$1, change__$1, solo_mode__$1, meta110565);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
    }
    return new cljs.core.async.t110564(pick, out, attrs, cs, calc_state, solo_modes, mix, changed, change, solo_mode, null);
  }();
  var c__15579__auto___110673 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__15580__auto__ = function() {
      var switch__15564__auto__ = function(state_110631) {
        var state_val_110632 = state_110631[1];
        if (state_val_110632 === 1) {
          var inst_110570 = state_110631[7];
          var inst_110570__$1 = calc_state.call(null);
          var inst_110571 = cljs.core.seq_QMARK_.call(null, inst_110570__$1);
          var state_110631__$1 = function() {
            var statearr_110633 = state_110631;
            statearr_110633[7] = inst_110570__$1;
            return statearr_110633;
          }();
          if (inst_110571) {
            var statearr_110634_110674 = state_110631__$1;
            statearr_110634_110674[1] = 2;
          } else {
            var statearr_110635_110675 = state_110631__$1;
            statearr_110635_110675[1] = 3;
          }
          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
        } else {
          if (state_val_110632 === 2) {
            var inst_110570 = state_110631[7];
            var inst_110573 = cljs.core.apply.call(null, cljs.core.hash_map, inst_110570);
            var state_110631__$1 = state_110631;
            var statearr_110636_110676 = state_110631__$1;
            statearr_110636_110676[2] = inst_110573;
            statearr_110636_110676[1] = 4;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_110632 === 3) {
              var inst_110570 = state_110631[7];
              var state_110631__$1 = state_110631;
              var statearr_110637_110677 = state_110631__$1;
              statearr_110637_110677[2] = inst_110570;
              statearr_110637_110677[1] = 4;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_110632 === 4) {
                var inst_110570 = state_110631[7];
                var inst_110576 = state_110631[2];
                var inst_110577 = cljs.core.get.call(null, inst_110576, new cljs.core.Keyword(null, "reads", "reads", 1122290959));
                var inst_110578 = cljs.core.get.call(null, inst_110576, new cljs.core.Keyword(null, "mutes", "mutes", 1118168300));
                var inst_110579 = cljs.core.get.call(null, inst_110576, new cljs.core.Keyword(null, "solos", "solos", 1123523302));
                var inst_110580 = inst_110570;
                var state_110631__$1 = function() {
                  var statearr_110638 = state_110631;
                  statearr_110638[8] = inst_110580;
                  statearr_110638[9] = inst_110577;
                  statearr_110638[10] = inst_110578;
                  statearr_110638[11] = inst_110579;
                  return statearr_110638;
                }();
                var statearr_110639_110678 = state_110631__$1;
                statearr_110639_110678[2] = null;
                statearr_110639_110678[1] = 5;
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
              } else {
                if (state_val_110632 === 5) {
                  var inst_110580 = state_110631[8];
                  var inst_110583 = cljs.core.seq_QMARK_.call(null, inst_110580);
                  var state_110631__$1 = state_110631;
                  if (inst_110583) {
                    var statearr_110640_110679 = state_110631__$1;
                    statearr_110640_110679[1] = 7;
                  } else {
                    var statearr_110641_110680 = state_110631__$1;
                    statearr_110641_110680[1] = 8;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_110632 === 6) {
                    var inst_110629 = state_110631[2];
                    var state_110631__$1 = state_110631;
                    return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_110631__$1, inst_110629);
                  } else {
                    if (state_val_110632 === 7) {
                      var inst_110580 = state_110631[8];
                      var inst_110585 = cljs.core.apply.call(null, cljs.core.hash_map, inst_110580);
                      var state_110631__$1 = state_110631;
                      var statearr_110642_110681 = state_110631__$1;
                      statearr_110642_110681[2] = inst_110585;
                      statearr_110642_110681[1] = 9;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_110632 === 8) {
                        var inst_110580 = state_110631[8];
                        var state_110631__$1 = state_110631;
                        var statearr_110643_110682 = state_110631__$1;
                        statearr_110643_110682[2] = inst_110580;
                        statearr_110643_110682[1] = 9;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_110632 === 9) {
                          var inst_110588 = state_110631[12];
                          var inst_110588__$1 = state_110631[2];
                          var inst_110589 = cljs.core.get.call(null, inst_110588__$1, new cljs.core.Keyword(null, "reads", "reads", 1122290959));
                          var inst_110590 = cljs.core.get.call(null, inst_110588__$1, new cljs.core.Keyword(null, "mutes", "mutes", 1118168300));
                          var inst_110591 = cljs.core.get.call(null, inst_110588__$1, new cljs.core.Keyword(null, "solos", "solos", 1123523302));
                          var state_110631__$1 = function() {
                            var statearr_110644 = state_110631;
                            statearr_110644[12] = inst_110588__$1;
                            statearr_110644[13] = inst_110591;
                            statearr_110644[14] = inst_110590;
                            return statearr_110644;
                          }();
                          return cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_.call(null, state_110631__$1, 10, inst_110589);
                        } else {
                          if (state_val_110632 === 10) {
                            var inst_110596 = state_110631[15];
                            var inst_110595 = state_110631[16];
                            var inst_110594 = state_110631[2];
                            var inst_110595__$1 = cljs.core.nth.call(null, inst_110594, 0, null);
                            var inst_110596__$1 = cljs.core.nth.call(null, inst_110594, 1, null);
                            var inst_110597 = inst_110595__$1 == null;
                            var inst_110598 = cljs.core._EQ_.call(null, inst_110596__$1, change);
                            var inst_110599 = inst_110597 || inst_110598;
                            var state_110631__$1 = function() {
                              var statearr_110645 = state_110631;
                              statearr_110645[15] = inst_110596__$1;
                              statearr_110645[16] = inst_110595__$1;
                              return statearr_110645;
                            }();
                            if (cljs.core.truth_(inst_110599)) {
                              var statearr_110646_110683 = state_110631__$1;
                              statearr_110646_110683[1] = 11;
                            } else {
                              var statearr_110647_110684 = state_110631__$1;
                              statearr_110647_110684[1] = 12;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_110632 === 11) {
                              var inst_110595 = state_110631[16];
                              var inst_110601 = inst_110595 == null;
                              var state_110631__$1 = state_110631;
                              if (cljs.core.truth_(inst_110601)) {
                                var statearr_110648_110685 = state_110631__$1;
                                statearr_110648_110685[1] = 14;
                              } else {
                                var statearr_110649_110686 = state_110631__$1;
                                statearr_110649_110686[1] = 15;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_110632 === 12) {
                                var inst_110596 = state_110631[15];
                                var inst_110591 = state_110631[13];
                                var inst_110610 = state_110631[17];
                                var inst_110610__$1 = inst_110591.call(null, inst_110596);
                                var state_110631__$1 = function() {
                                  var statearr_110650 = state_110631;
                                  statearr_110650[17] = inst_110610__$1;
                                  return statearr_110650;
                                }();
                                if (cljs.core.truth_(inst_110610__$1)) {
                                  var statearr_110651_110687 = state_110631__$1;
                                  statearr_110651_110687[1] = 17;
                                } else {
                                  var statearr_110652_110688 = state_110631__$1;
                                  statearr_110652_110688[1] = 18;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_110632 === 13) {
                                  var inst_110627 = state_110631[2];
                                  var state_110631__$1 = state_110631;
                                  var statearr_110653_110689 = state_110631__$1;
                                  statearr_110653_110689[2] = inst_110627;
                                  statearr_110653_110689[1] = 6;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_110632 === 14) {
                                    var inst_110596 = state_110631[15];
                                    var inst_110603 = cljs.core.swap_BANG_.call(null, cs, cljs.core.dissoc, inst_110596);
                                    var state_110631__$1 = state_110631;
                                    var statearr_110654_110690 = state_110631__$1;
                                    statearr_110654_110690[2] = inst_110603;
                                    statearr_110654_110690[1] = 16;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_110632 === 15) {
                                      var state_110631__$1 = state_110631;
                                      var statearr_110655_110691 = state_110631__$1;
                                      statearr_110655_110691[2] = null;
                                      statearr_110655_110691[1] = 16;
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                    } else {
                                      if (state_val_110632 === 16) {
                                        var inst_110606 = state_110631[2];
                                        var inst_110607 = calc_state.call(null);
                                        var inst_110580 = inst_110607;
                                        var state_110631__$1 = function() {
                                          var statearr_110656 = state_110631;
                                          statearr_110656[8] = inst_110580;
                                          statearr_110656[18] = inst_110606;
                                          return statearr_110656;
                                        }();
                                        var statearr_110657_110692 = state_110631__$1;
                                        statearr_110657_110692[2] = null;
                                        statearr_110657_110692[1] = 5;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        if (state_val_110632 === 17) {
                                          var inst_110610 = state_110631[17];
                                          var state_110631__$1 = state_110631;
                                          var statearr_110658_110693 = state_110631__$1;
                                          statearr_110658_110693[2] = inst_110610;
                                          statearr_110658_110693[1] = 19;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                        } else {
                                          if (state_val_110632 === 18) {
                                            var inst_110596 = state_110631[15];
                                            var inst_110591 = state_110631[13];
                                            var inst_110590 = state_110631[14];
                                            var inst_110613 = cljs.core.empty_QMARK_.call(null, inst_110591);
                                            var inst_110614 = inst_110590.call(null, inst_110596);
                                            var inst_110615 = cljs.core.not.call(null, inst_110614);
                                            var inst_110616 = inst_110613 && inst_110615;
                                            var state_110631__$1 = state_110631;
                                            var statearr_110659_110694 = state_110631__$1;
                                            statearr_110659_110694[2] = inst_110616;
                                            statearr_110659_110694[1] = 19;
                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                          } else {
                                            if (state_val_110632 === 19) {
                                              var inst_110618 = state_110631[2];
                                              var state_110631__$1 = state_110631;
                                              if (cljs.core.truth_(inst_110618)) {
                                                var statearr_110660_110695 = state_110631__$1;
                                                statearr_110660_110695[1] = 20;
                                              } else {
                                                var statearr_110661_110696 = state_110631__$1;
                                                statearr_110661_110696[1] = 21;
                                              }
                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                            } else {
                                              if (state_val_110632 === 20) {
                                                var inst_110595 = state_110631[16];
                                                var state_110631__$1 = state_110631;
                                                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_110631__$1, 23, out, inst_110595);
                                              } else {
                                                if (state_val_110632 === 21) {
                                                  var state_110631__$1 = state_110631;
                                                  var statearr_110662_110697 = state_110631__$1;
                                                  statearr_110662_110697[2] = null;
                                                  statearr_110662_110697[1] = 22;
                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                } else {
                                                  if (state_val_110632 === 22) {
                                                    var inst_110588 = state_110631[12];
                                                    var inst_110624 = state_110631[2];
                                                    var inst_110580 = inst_110588;
                                                    var state_110631__$1 = function() {
                                                      var statearr_110663 = state_110631;
                                                      statearr_110663[8] = inst_110580;
                                                      statearr_110663[19] = inst_110624;
                                                      return statearr_110663;
                                                    }();
                                                    var statearr_110664_110698 = state_110631__$1;
                                                    statearr_110664_110698[2] = null;
                                                    statearr_110664_110698[1] = 5;
                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                  } else {
                                                    if (state_val_110632 === 23) {
                                                      var inst_110621 = state_110631[2];
                                                      var state_110631__$1 = state_110631;
                                                      var statearr_110665_110699 = state_110631__$1;
                                                      statearr_110665_110699[2] = inst_110621;
                                                      statearr_110665_110699[1] = 22;
                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                    } else {
                                                      return null;
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function(switch__15564__auto__) {
        return function() {
          var state_machine__15565__auto__ = null;
          var state_machine__15565__auto____0 = function() {
            var statearr_110669 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
            statearr_110669[0] = state_machine__15565__auto__;
            statearr_110669[1] = 1;
            return statearr_110669;
          };
          var state_machine__15565__auto____1 = function(state_110631) {
            while (true) {
              var ret_value__15566__auto__ = function() {
                try {
                  while (true) {
                    var result__15567__auto__ = switch__15564__auto__.call(null, state_110631);
                    if (cljs.core.keyword_identical_QMARK_.call(null, result__15567__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                      continue;
                    } else {
                      return result__15567__auto__;
                    }
                    break;
                  }
                } catch (e110670) {
                  if (e110670 instanceof Object) {
                    var ex__15568__auto__ = e110670;
                    var statearr_110671_110700 = state_110631;
                    statearr_110671_110700[5] = ex__15568__auto__;
                    cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_110631);
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                      throw e110670;
                    } else {
                      return null;
                    }
                  }
                }
              }();
              if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__15566__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                var G__110701 = state_110631;
                state_110631 = G__110701;
                continue;
              } else {
                return ret_value__15566__auto__;
              }
              break;
            }
          };
          state_machine__15565__auto__ = function(state_110631) {
            switch(arguments.length) {
              case 0:
                return state_machine__15565__auto____0.call(this);
              case 1:
                return state_machine__15565__auto____1.call(this, state_110631);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__15565__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__15565__auto____0;
          state_machine__15565__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__15565__auto____1;
          return state_machine__15565__auto__;
        }();
      }(switch__15564__auto__);
    }();
    var state__15581__auto__ = function() {
      var statearr_110672 = f__15580__auto__.call(null);
      statearr_110672[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__15579__auto___110673;
      return statearr_110672;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__15581__auto__);
  });
  return m;
};
cljs.core.async.admix = function admix(mix, ch) {
  return cljs.core.async.admix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix = function unmix(mix, ch) {
  return cljs.core.async.unmix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix_all = function unmix_all(mix) {
  return cljs.core.async.unmix_all_STAR_.call(null, mix);
};
cljs.core.async.toggle = function toggle(mix, state_map) {
  return cljs.core.async.toggle_STAR_.call(null, mix, state_map);
};
cljs.core.async.solo_mode = function solo_mode(mix, mode) {
  return cljs.core.async.solo_mode_STAR_.call(null, mix, mode);
};
cljs.core.async.Pub = function() {
  var obj110703 = {};
  return obj110703;
}();
cljs.core.async.sub_STAR_ = function sub_STAR_(p, v, ch, close_QMARK_) {
  if (function() {
    var and__12818__auto__ = p;
    if (and__12818__auto__) {
      return p.cljs$core$async$Pub$sub_STAR_$arity$4;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$sub_STAR_$arity$4(p, v, ch, close_QMARK_);
  } else {
    var x__13457__auto__ = p == null ? null : p;
    return function() {
      var or__12830__auto__ = cljs.core.async.sub_STAR_[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = cljs.core.async.sub_STAR_["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.sub*", p);
        }
      }
    }().call(null, p, v, ch, close_QMARK_);
  }
};
cljs.core.async.unsub_STAR_ = function unsub_STAR_(p, v, ch) {
  if (function() {
    var and__12818__auto__ = p;
    if (and__12818__auto__) {
      return p.cljs$core$async$Pub$unsub_STAR_$arity$3;
    } else {
      return and__12818__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$unsub_STAR_$arity$3(p, v, ch);
  } else {
    var x__13457__auto__ = p == null ? null : p;
    return function() {
      var or__12830__auto__ = cljs.core.async.unsub_STAR_[goog.typeOf(x__13457__auto__)];
      if (or__12830__auto__) {
        return or__12830__auto__;
      } else {
        var or__12830__auto____$1 = cljs.core.async.unsub_STAR_["_"];
        if (or__12830__auto____$1) {
          return or__12830__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.unsub*", p);
        }
      }
    }().call(null, p, v, ch);
  }
};
cljs.core.async.unsub_all_STAR_ = function() {
  var unsub_all_STAR_ = null;
  var unsub_all_STAR___1 = function(p) {
    if (function() {
      var and__12818__auto__ = p;
      if (and__12818__auto__) {
        return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1;
      } else {
        return and__12818__auto__;
      }
    }()) {
      return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1(p);
    } else {
      var x__13457__auto__ = p == null ? null : p;
      return function() {
        var or__12830__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__13457__auto__)];
        if (or__12830__auto__) {
          return or__12830__auto__;
        } else {
          var or__12830__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
          if (or__12830__auto____$1) {
            return or__12830__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
          }
        }
      }().call(null, p);
    }
  };
  var unsub_all_STAR___2 = function(p, v) {
    if (function() {
      var and__12818__auto__ = p;
      if (and__12818__auto__) {
        return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2;
      } else {
        return and__12818__auto__;
      }
    }()) {
      return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2(p, v);
    } else {
      var x__13457__auto__ = p == null ? null : p;
      return function() {
        var or__12830__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__13457__auto__)];
        if (or__12830__auto__) {
          return or__12830__auto__;
        } else {
          var or__12830__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
          if (or__12830__auto____$1) {
            return or__12830__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
          }
        }
      }().call(null, p, v);
    }
  };
  unsub_all_STAR_ = function(p, v) {
    switch(arguments.length) {
      case 1:
        return unsub_all_STAR___1.call(this, p);
      case 2:
        return unsub_all_STAR___2.call(this, p, v);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unsub_all_STAR_.cljs$core$IFn$_invoke$arity$1 = unsub_all_STAR___1;
  unsub_all_STAR_.cljs$core$IFn$_invoke$arity$2 = unsub_all_STAR___2;
  return unsub_all_STAR_;
}();
cljs.core.async.pub = function() {
  var pub = null;
  var pub__2 = function(ch, topic_fn) {
    return pub.call(null, ch, topic_fn, cljs.core.constantly.call(null, null));
  };
  var pub__3 = function(ch, topic_fn, buf_fn) {
    var mults = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var ensure_mult = function(mults) {
      return function(topic) {
        var or__12830__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, mults), topic);
        if (cljs.core.truth_(or__12830__auto__)) {
          return or__12830__auto__;
        } else {
          return cljs.core.get.call(null, cljs.core.swap_BANG_.call(null, mults, function(or__12830__auto__, mults) {
            return function(p1__110704_SHARP_) {
              if (cljs.core.truth_(p1__110704_SHARP_.call(null, topic))) {
                return p1__110704_SHARP_;
              } else {
                return cljs.core.assoc.call(null, p1__110704_SHARP_, topic, cljs.core.async.mult.call(null, cljs.core.async.chan.call(null, buf_fn.call(null, topic))));
              }
            };
          }(or__12830__auto__, mults)), topic);
        }
      };
    }(mults);
    var p = function() {
      if (typeof cljs.core.async.t110829 !== "undefined") {
      } else {
        cljs.core.async.t110829 = function(ensure_mult, mults, buf_fn, topic_fn, ch, pub, meta110830) {
          this.ensure_mult = ensure_mult;
          this.mults = mults;
          this.buf_fn = buf_fn;
          this.topic_fn = topic_fn;
          this.ch = ch;
          this.pub = pub;
          this.meta110830 = meta110830;
          this.cljs$lang$protocol_mask$partition1$ = 0;
          this.cljs$lang$protocol_mask$partition0$ = 393216;
        };
        cljs.core.async.t110829.cljs$lang$type = true;
        cljs.core.async.t110829.cljs$lang$ctorStr = "cljs.core.async/t110829";
        cljs.core.async.t110829.cljs$lang$ctorPrWriter = function(mults, ensure_mult) {
          return function(this__13397__auto__, writer__13398__auto__, opt__13399__auto__) {
            return cljs.core._write.call(null, writer__13398__auto__, "cljs.core.async/t110829");
          };
        }(mults, ensure_mult);
        cljs.core.async.t110829.prototype.cljs$core$async$Pub$ = true;
        cljs.core.async.t110829.prototype.cljs$core$async$Pub$sub_STAR_$arity$4 = function(mults, ensure_mult) {
          return function(p, topic, ch__$2, close_QMARK_) {
            var self__ = this;
            var p__$1 = this;
            var m = self__.ensure_mult.call(null, topic);
            return cljs.core.async.tap.call(null, m, ch__$2, close_QMARK_);
          };
        }(mults, ensure_mult);
        cljs.core.async.t110829.prototype.cljs$core$async$Pub$unsub_STAR_$arity$3 = function(mults, ensure_mult) {
          return function(p, topic, ch__$2) {
            var self__ = this;
            var p__$1 = this;
            var temp__4092__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, self__.mults), topic);
            if (cljs.core.truth_(temp__4092__auto__)) {
              var m = temp__4092__auto__;
              return cljs.core.async.untap.call(null, m, ch__$2);
            } else {
              return null;
            }
          };
        }(mults, ensure_mult);
        cljs.core.async.t110829.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$1 = function(mults, ensure_mult) {
          return function(_) {
            var self__ = this;
            var ___$1 = this;
            return cljs.core.reset_BANG_.call(null, self__.mults, cljs.core.PersistentArrayMap.EMPTY);
          };
        }(mults, ensure_mult);
        cljs.core.async.t110829.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$2 = function(mults, ensure_mult) {
          return function(_, topic) {
            var self__ = this;
            var ___$1 = this;
            return cljs.core.swap_BANG_.call(null, self__.mults, cljs.core.dissoc, topic);
          };
        }(mults, ensure_mult);
        cljs.core.async.t110829.prototype.cljs$core$async$Mux$ = true;
        cljs.core.async.t110829.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(mults, ensure_mult) {
          return function(_) {
            var self__ = this;
            var ___$1 = this;
            return self__.ch;
          };
        }(mults, ensure_mult);
        cljs.core.async.t110829.prototype.cljs$core$IMeta$_meta$arity$1 = function(mults, ensure_mult) {
          return function(_110831) {
            var self__ = this;
            var _110831__$1 = this;
            return self__.meta110830;
          };
        }(mults, ensure_mult);
        cljs.core.async.t110829.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(mults, ensure_mult) {
          return function(_110831, meta110830__$1) {
            var self__ = this;
            var _110831__$1 = this;
            return new cljs.core.async.t110829(self__.ensure_mult, self__.mults, self__.buf_fn, self__.topic_fn, self__.ch, self__.pub, meta110830__$1);
          };
        }(mults, ensure_mult);
        cljs.core.async.__GT_t110829 = function(mults, ensure_mult) {
          return function __GT_t110829(ensure_mult__$1, mults__$1, buf_fn__$1, topic_fn__$1, ch__$1, pub__$1, meta110830) {
            return new cljs.core.async.t110829(ensure_mult__$1, mults__$1, buf_fn__$1, topic_fn__$1, ch__$1, pub__$1, meta110830);
          };
        }(mults, ensure_mult);
      }
      return new cljs.core.async.t110829(ensure_mult, mults, buf_fn, topic_fn, ch, pub, null);
    }();
    var c__15579__auto___110953 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__15580__auto__ = function() {
        var switch__15564__auto__ = function(state_110905) {
          var state_val_110906 = state_110905[1];
          if (state_val_110906 === 1) {
            var state_110905__$1 = state_110905;
            var statearr_110907_110954 = state_110905__$1;
            statearr_110907_110954[2] = null;
            statearr_110907_110954[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_110906 === 2) {
              var state_110905__$1 = state_110905;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_110905__$1, 4, ch);
            } else {
              if (state_val_110906 === 3) {
                var inst_110903 = state_110905[2];
                var state_110905__$1 = state_110905;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_110905__$1, inst_110903);
              } else {
                if (state_val_110906 === 4) {
                  var inst_110834 = state_110905[7];
                  var inst_110834__$1 = state_110905[2];
                  var inst_110835 = inst_110834__$1 == null;
                  var state_110905__$1 = function() {
                    var statearr_110908 = state_110905;
                    statearr_110908[7] = inst_110834__$1;
                    return statearr_110908;
                  }();
                  if (cljs.core.truth_(inst_110835)) {
                    var statearr_110909_110955 = state_110905__$1;
                    statearr_110909_110955[1] = 5;
                  } else {
                    var statearr_110910_110956 = state_110905__$1;
                    statearr_110910_110956[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_110906 === 5) {
                    var inst_110841 = cljs.core.deref.call(null, mults);
                    var inst_110842 = cljs.core.vals.call(null, inst_110841);
                    var inst_110843 = cljs.core.seq.call(null, inst_110842);
                    var inst_110844 = inst_110843;
                    var inst_110845 = null;
                    var inst_110846 = 0;
                    var inst_110847 = 0;
                    var state_110905__$1 = function() {
                      var statearr_110911 = state_110905;
                      statearr_110911[8] = inst_110844;
                      statearr_110911[9] = inst_110846;
                      statearr_110911[10] = inst_110845;
                      statearr_110911[11] = inst_110847;
                      return statearr_110911;
                    }();
                    var statearr_110912_110957 = state_110905__$1;
                    statearr_110912_110957[2] = null;
                    statearr_110912_110957[1] = 8;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_110906 === 6) {
                      var inst_110834 = state_110905[7];
                      var inst_110884 = state_110905[12];
                      var inst_110882 = state_110905[13];
                      var inst_110882__$1 = topic_fn.call(null, inst_110834);
                      var inst_110883 = cljs.core.deref.call(null, mults);
                      var inst_110884__$1 = cljs.core.get.call(null, inst_110883, inst_110882__$1);
                      var state_110905__$1 = function() {
                        var statearr_110913 = state_110905;
                        statearr_110913[12] = inst_110884__$1;
                        statearr_110913[13] = inst_110882__$1;
                        return statearr_110913;
                      }();
                      if (cljs.core.truth_(inst_110884__$1)) {
                        var statearr_110914_110958 = state_110905__$1;
                        statearr_110914_110958[1] = 19;
                      } else {
                        var statearr_110915_110959 = state_110905__$1;
                        statearr_110915_110959[1] = 20;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_110906 === 7) {
                        var inst_110901 = state_110905[2];
                        var state_110905__$1 = state_110905;
                        var statearr_110916_110960 = state_110905__$1;
                        statearr_110916_110960[2] = inst_110901;
                        statearr_110916_110960[1] = 3;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_110906 === 8) {
                          var inst_110846 = state_110905[9];
                          var inst_110847 = state_110905[11];
                          var inst_110849 = inst_110847 < inst_110846;
                          var inst_110850 = inst_110849;
                          var state_110905__$1 = state_110905;
                          if (cljs.core.truth_(inst_110850)) {
                            var statearr_110920_110961 = state_110905__$1;
                            statearr_110920_110961[1] = 10;
                          } else {
                            var statearr_110921_110962 = state_110905__$1;
                            statearr_110921_110962[1] = 11;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_110906 === 9) {
                            var inst_110880 = state_110905[2];
                            var state_110905__$1 = state_110905;
                            var statearr_110922_110963 = state_110905__$1;
                            statearr_110922_110963[2] = inst_110880;
                            statearr_110922_110963[1] = 7;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_110906 === 10) {
                              var inst_110844 = state_110905[8];
                              var inst_110846 = state_110905[9];
                              var inst_110845 = state_110905[10];
                              var inst_110847 = state_110905[11];
                              var inst_110852 = cljs.core._nth.call(null, inst_110845, inst_110847);
                              var inst_110853 = cljs.core.async.muxch_STAR_.call(null, inst_110852);
                              var inst_110854 = cljs.core.async.close_BANG_.call(null, inst_110853);
                              var inst_110855 = inst_110847 + 1;
                              var tmp110917 = inst_110844;
                              var tmp110918 = inst_110846;
                              var tmp110919 = inst_110845;
                              var inst_110844__$1 = tmp110917;
                              var inst_110845__$1 = tmp110919;
                              var inst_110846__$1 = tmp110918;
                              var inst_110847__$1 = inst_110855;
                              var state_110905__$1 = function() {
                                var statearr_110923 = state_110905;
                                statearr_110923[8] = inst_110844__$1;
                                statearr_110923[9] = inst_110846__$1;
                                statearr_110923[10] = inst_110845__$1;
                                statearr_110923[11] = inst_110847__$1;
                                statearr_110923[14] = inst_110854;
                                return statearr_110923;
                              }();
                              var statearr_110924_110964 = state_110905__$1;
                              statearr_110924_110964[2] = null;
                              statearr_110924_110964[1] = 8;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_110906 === 11) {
                                var inst_110844 = state_110905[8];
                                var inst_110858 = state_110905[15];
                                var inst_110858__$1 = cljs.core.seq.call(null, inst_110844);
                                var state_110905__$1 = function() {
                                  var statearr_110925 = state_110905;
                                  statearr_110925[15] = inst_110858__$1;
                                  return statearr_110925;
                                }();
                                if (inst_110858__$1) {
                                  var statearr_110926_110965 = state_110905__$1;
                                  statearr_110926_110965[1] = 13;
                                } else {
                                  var statearr_110927_110966 = state_110905__$1;
                                  statearr_110927_110966[1] = 14;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_110906 === 12) {
                                  var inst_110878 = state_110905[2];
                                  var state_110905__$1 = state_110905;
                                  var statearr_110928_110967 = state_110905__$1;
                                  statearr_110928_110967[2] = inst_110878;
                                  statearr_110928_110967[1] = 9;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_110906 === 13) {
                                    var inst_110858 = state_110905[15];
                                    var inst_110860 = cljs.core.chunked_seq_QMARK_.call(null, inst_110858);
                                    var state_110905__$1 = state_110905;
                                    if (inst_110860) {
                                      var statearr_110929_110968 = state_110905__$1;
                                      statearr_110929_110968[1] = 16;
                                    } else {
                                      var statearr_110930_110969 = state_110905__$1;
                                      statearr_110930_110969[1] = 17;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_110906 === 14) {
                                      var state_110905__$1 = state_110905;
                                      var statearr_110931_110970 = state_110905__$1;
                                      statearr_110931_110970[2] = null;
                                      statearr_110931_110970[1] = 15;
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                    } else {
                                      if (state_val_110906 === 15) {
                                        var inst_110876 = state_110905[2];
                                        var state_110905__$1 = state_110905;
                                        var statearr_110932_110971 = state_110905__$1;
                                        statearr_110932_110971[2] = inst_110876;
                                        statearr_110932_110971[1] = 12;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        if (state_val_110906 === 16) {
                                          var inst_110858 = state_110905[15];
                                          var inst_110862 = cljs.core.chunk_first.call(null, inst_110858);
                                          var inst_110863 = cljs.core.chunk_rest.call(null, inst_110858);
                                          var inst_110864 = cljs.core.count.call(null, inst_110862);
                                          var inst_110844 = inst_110863;
                                          var inst_110845 = inst_110862;
                                          var inst_110846 = inst_110864;
                                          var inst_110847 = 0;
                                          var state_110905__$1 = function() {
                                            var statearr_110933 = state_110905;
                                            statearr_110933[8] = inst_110844;
                                            statearr_110933[9] = inst_110846;
                                            statearr_110933[10] = inst_110845;
                                            statearr_110933[11] = inst_110847;
                                            return statearr_110933;
                                          }();
                                          var statearr_110934_110972 = state_110905__$1;
                                          statearr_110934_110972[2] = null;
                                          statearr_110934_110972[1] = 8;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                        } else {
                                          if (state_val_110906 === 17) {
                                            var inst_110858 = state_110905[15];
                                            var inst_110867 = cljs.core.first.call(null, inst_110858);
                                            var inst_110868 = cljs.core.async.muxch_STAR_.call(null, inst_110867);
                                            var inst_110869 = cljs.core.async.close_BANG_.call(null, inst_110868);
                                            var inst_110870 = cljs.core.next.call(null, inst_110858);
                                            var inst_110844 = inst_110870;
                                            var inst_110845 = null;
                                            var inst_110846 = 0;
                                            var inst_110847 = 0;
                                            var state_110905__$1 = function() {
                                              var statearr_110935 = state_110905;
                                              statearr_110935[8] = inst_110844;
                                              statearr_110935[9] = inst_110846;
                                              statearr_110935[10] = inst_110845;
                                              statearr_110935[11] = inst_110847;
                                              statearr_110935[16] = inst_110869;
                                              return statearr_110935;
                                            }();
                                            var statearr_110936_110973 = state_110905__$1;
                                            statearr_110936_110973[2] = null;
                                            statearr_110936_110973[1] = 8;
                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                          } else {
                                            if (state_val_110906 === 18) {
                                              var inst_110873 = state_110905[2];
                                              var state_110905__$1 = state_110905;
                                              var statearr_110937_110974 = state_110905__$1;
                                              statearr_110937_110974[2] = inst_110873;
                                              statearr_110937_110974[1] = 15;
                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                            } else {
                                              if (state_val_110906 === 19) {
                                                var state_110905__$1 = state_110905;
                                                var statearr_110938_110975 = state_110905__$1;
                                                statearr_110938_110975[2] = null;
                                                statearr_110938_110975[1] = 24;
                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                              } else {
                                                if (state_val_110906 === 20) {
                                                  var state_110905__$1 = state_110905;
                                                  var statearr_110939_110976 = state_110905__$1;
                                                  statearr_110939_110976[2] = null;
                                                  statearr_110939_110976[1] = 21;
                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                } else {
                                                  if (state_val_110906 === 21) {
                                                    var inst_110898 = state_110905[2];
                                                    var state_110905__$1 = function() {
                                                      var statearr_110940 = state_110905;
                                                      statearr_110940[17] = inst_110898;
                                                      return statearr_110940;
                                                    }();
                                                    var statearr_110941_110977 = state_110905__$1;
                                                    statearr_110941_110977[2] = null;
                                                    statearr_110941_110977[1] = 2;
                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                  } else {
                                                    if (state_val_110906 === 22) {
                                                      var inst_110895 = state_110905[2];
                                                      var state_110905__$1 = state_110905;
                                                      var statearr_110942_110978 = state_110905__$1;
                                                      statearr_110942_110978[2] = inst_110895;
                                                      statearr_110942_110978[1] = 21;
                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                    } else {
                                                      if (state_val_110906 === 23) {
                                                        var inst_110882 = state_110905[13];
                                                        var inst_110886 = state_110905[2];
                                                        var inst_110887 = cljs.core.swap_BANG_.call(null, mults, cljs.core.dissoc, inst_110882);
                                                        var state_110905__$1 = function() {
                                                          var statearr_110943 = state_110905;
                                                          statearr_110943[18] = inst_110886;
                                                          return statearr_110943;
                                                        }();
                                                        var statearr_110944_110979 = state_110905__$1;
                                                        statearr_110944_110979[2] = inst_110887;
                                                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_110905__$1);
                                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                      } else {
                                                        if (state_val_110906 === 24) {
                                                          var inst_110834 = state_110905[7];
                                                          var inst_110884 = state_110905[12];
                                                          var _ = cljs.core.async.impl.ioc_helpers.add_exception_frame.call(null, state_110905, 23, Object, null, 22);
                                                          var inst_110891 = cljs.core.async.muxch_STAR_.call(null, inst_110884);
                                                          var state_110905__$1 = state_110905;
                                                          return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_110905__$1, 25, inst_110891, inst_110834);
                                                        } else {
                                                          if (state_val_110906 === 25) {
                                                            var inst_110893 = state_110905[2];
                                                            var state_110905__$1 = state_110905;
                                                            var statearr_110945_110980 = state_110905__$1;
                                                            statearr_110945_110980[2] = inst_110893;
                                                            cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_110905__$1);
                                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                          } else {
                                                            return null;
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__15564__auto__) {
          return function() {
            var state_machine__15565__auto__ = null;
            var state_machine__15565__auto____0 = function() {
              var statearr_110949 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_110949[0] = state_machine__15565__auto__;
              statearr_110949[1] = 1;
              return statearr_110949;
            };
            var state_machine__15565__auto____1 = function(state_110905) {
              while (true) {
                var ret_value__15566__auto__ = function() {
                  try {
                    while (true) {
                      var result__15567__auto__ = switch__15564__auto__.call(null, state_110905);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__15567__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__15567__auto__;
                      }
                      break;
                    }
                  } catch (e110950) {
                    if (e110950 instanceof Object) {
                      var ex__15568__auto__ = e110950;
                      var statearr_110951_110981 = state_110905;
                      statearr_110951_110981[5] = ex__15568__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_110905);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e110950;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__15566__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__110982 = state_110905;
                  state_110905 = G__110982;
                  continue;
                } else {
                  return ret_value__15566__auto__;
                }
                break;
              }
            };
            state_machine__15565__auto__ = function(state_110905) {
              switch(arguments.length) {
                case 0:
                  return state_machine__15565__auto____0.call(this);
                case 1:
                  return state_machine__15565__auto____1.call(this, state_110905);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__15565__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__15565__auto____0;
            state_machine__15565__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__15565__auto____1;
            return state_machine__15565__auto__;
          }();
        }(switch__15564__auto__);
      }();
      var state__15581__auto__ = function() {
        var statearr_110952 = f__15580__auto__.call(null);
        statearr_110952[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__15579__auto___110953;
        return statearr_110952;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__15581__auto__);
    });
    return p;
  };
  pub = function(ch, topic_fn, buf_fn) {
    switch(arguments.length) {
      case 2:
        return pub__2.call(this, ch, topic_fn);
      case 3:
        return pub__3.call(this, ch, topic_fn, buf_fn);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  pub.cljs$core$IFn$_invoke$arity$2 = pub__2;
  pub.cljs$core$IFn$_invoke$arity$3 = pub__3;
  return pub;
}();
cljs.core.async.sub = function() {
  var sub = null;
  var sub__3 = function(p, topic, ch) {
    return sub.call(null, p, topic, ch, true);
  };
  var sub__4 = function(p, topic, ch, close_QMARK_) {
    return cljs.core.async.sub_STAR_.call(null, p, topic, ch, close_QMARK_);
  };
  sub = function(p, topic, ch, close_QMARK_) {
    switch(arguments.length) {
      case 3:
        return sub__3.call(this, p, topic, ch);
      case 4:
        return sub__4.call(this, p, topic, ch, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sub.cljs$core$IFn$_invoke$arity$3 = sub__3;
  sub.cljs$core$IFn$_invoke$arity$4 = sub__4;
  return sub;
}();
cljs.core.async.unsub = function unsub(p, topic, ch) {
  return cljs.core.async.unsub_STAR_.call(null, p, topic, ch);
};
cljs.core.async.unsub_all = function() {
  var unsub_all = null;
  var unsub_all__1 = function(p) {
    return cljs.core.async.unsub_all_STAR_.call(null, p);
  };
  var unsub_all__2 = function(p, topic) {
    return cljs.core.async.unsub_all_STAR_.call(null, p, topic);
  };
  unsub_all = function(p, topic) {
    switch(arguments.length) {
      case 1:
        return unsub_all__1.call(this, p);
      case 2:
        return unsub_all__2.call(this, p, topic);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unsub_all.cljs$core$IFn$_invoke$arity$1 = unsub_all__1;
  unsub_all.cljs$core$IFn$_invoke$arity$2 = unsub_all__2;
  return unsub_all;
}();
cljs.core.async.map = function() {
  var map = null;
  var map__2 = function(f, chs) {
    return map.call(null, f, chs, null);
  };
  var map__3 = function(f, chs, buf_or_n) {
    var chs__$1 = cljs.core.vec.call(null, chs);
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var cnt = cljs.core.count.call(null, chs__$1);
    var rets = cljs.core.object_array.call(null, cnt);
    var dchan = cljs.core.async.chan.call(null, 1);
    var dctr = cljs.core.atom.call(null, null);
    var done = cljs.core.mapv.call(null, function(chs__$1, out, cnt, rets, dchan, dctr) {
      return function(i) {
        return function(chs__$1, out, cnt, rets, dchan, dctr) {
          return function(ret) {
            rets[i] = ret;
            if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
              return cljs.core.async.put_BANG_.call(null, dchan, rets.slice(0));
            } else {
              return null;
            }
          };
        }(chs__$1, out, cnt, rets, dchan, dctr);
      };
    }(chs__$1, out, cnt, rets, dchan, dctr), cljs.core.range.call(null, cnt));
    var c__15579__auto___111119 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__15580__auto__ = function() {
        var switch__15564__auto__ = function(state_111089) {
          var state_val_111090 = state_111089[1];
          if (state_val_111090 === 1) {
            var state_111089__$1 = state_111089;
            var statearr_111091_111120 = state_111089__$1;
            statearr_111091_111120[2] = null;
            statearr_111091_111120[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_111090 === 2) {
              var inst_111052 = cljs.core.reset_BANG_.call(null, dctr, cnt);
              var inst_111053 = 0;
              var state_111089__$1 = function() {
                var statearr_111092 = state_111089;
                statearr_111092[7] = inst_111053;
                statearr_111092[8] = inst_111052;
                return statearr_111092;
              }();
              var statearr_111093_111121 = state_111089__$1;
              statearr_111093_111121[2] = null;
              statearr_111093_111121[1] = 4;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_111090 === 3) {
                var inst_111087 = state_111089[2];
                var state_111089__$1 = state_111089;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_111089__$1, inst_111087);
              } else {
                if (state_val_111090 === 4) {
                  var inst_111053 = state_111089[7];
                  var inst_111055 = inst_111053 < cnt;
                  var state_111089__$1 = state_111089;
                  if (cljs.core.truth_(inst_111055)) {
                    var statearr_111094_111122 = state_111089__$1;
                    statearr_111094_111122[1] = 6;
                  } else {
                    var statearr_111095_111123 = state_111089__$1;
                    statearr_111095_111123[1] = 7;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_111090 === 5) {
                    var inst_111073 = state_111089[2];
                    var state_111089__$1 = function() {
                      var statearr_111096 = state_111089;
                      statearr_111096[9] = inst_111073;
                      return statearr_111096;
                    }();
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_111089__$1, 12, dchan);
                  } else {
                    if (state_val_111090 === 6) {
                      var state_111089__$1 = state_111089;
                      var statearr_111097_111124 = state_111089__$1;
                      statearr_111097_111124[2] = null;
                      statearr_111097_111124[1] = 11;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_111090 === 7) {
                        var state_111089__$1 = state_111089;
                        var statearr_111098_111125 = state_111089__$1;
                        statearr_111098_111125[2] = null;
                        statearr_111098_111125[1] = 8;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_111090 === 8) {
                          var inst_111071 = state_111089[2];
                          var state_111089__$1 = state_111089;
                          var statearr_111099_111126 = state_111089__$1;
                          statearr_111099_111126[2] = inst_111071;
                          statearr_111099_111126[1] = 5;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_111090 === 9) {
                            var inst_111053 = state_111089[7];
                            var inst_111066 = state_111089[2];
                            var inst_111067 = inst_111053 + 1;
                            var inst_111053__$1 = inst_111067;
                            var state_111089__$1 = function() {
                              var statearr_111100 = state_111089;
                              statearr_111100[7] = inst_111053__$1;
                              statearr_111100[10] = inst_111066;
                              return statearr_111100;
                            }();
                            var statearr_111101_111127 = state_111089__$1;
                            statearr_111101_111127[2] = null;
                            statearr_111101_111127[1] = 4;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_111090 === 10) {
                              var inst_111057 = state_111089[2];
                              var inst_111058 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                              var state_111089__$1 = function() {
                                var statearr_111102 = state_111089;
                                statearr_111102[11] = inst_111057;
                                return statearr_111102;
                              }();
                              var statearr_111103_111128 = state_111089__$1;
                              statearr_111103_111128[2] = inst_111058;
                              cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_111089__$1);
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_111090 === 11) {
                                var inst_111053 = state_111089[7];
                                var _ = cljs.core.async.impl.ioc_helpers.add_exception_frame.call(null, state_111089, 10, Object, null, 9);
                                var inst_111062 = chs__$1.call(null, inst_111053);
                                var inst_111063 = done.call(null, inst_111053);
                                var inst_111064 = cljs.core.async.take_BANG_.call(null, inst_111062, inst_111063);
                                var state_111089__$1 = state_111089;
                                var statearr_111104_111129 = state_111089__$1;
                                statearr_111104_111129[2] = inst_111064;
                                cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_111089__$1);
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_111090 === 12) {
                                  var inst_111075 = state_111089[12];
                                  var inst_111075__$1 = state_111089[2];
                                  var inst_111076 = cljs.core.some.call(null, cljs.core.nil_QMARK_, inst_111075__$1);
                                  var state_111089__$1 = function() {
                                    var statearr_111105 = state_111089;
                                    statearr_111105[12] = inst_111075__$1;
                                    return statearr_111105;
                                  }();
                                  if (cljs.core.truth_(inst_111076)) {
                                    var statearr_111106_111130 = state_111089__$1;
                                    statearr_111106_111130[1] = 13;
                                  } else {
                                    var statearr_111107_111131 = state_111089__$1;
                                    statearr_111107_111131[1] = 14;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_111090 === 13) {
                                    var inst_111078 = cljs.core.async.close_BANG_.call(null, out);
                                    var state_111089__$1 = state_111089;
                                    var statearr_111108_111132 = state_111089__$1;
                                    statearr_111108_111132[2] = inst_111078;
                                    statearr_111108_111132[1] = 15;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_111090 === 14) {
                                      var inst_111075 = state_111089[12];
                                      var inst_111080 = cljs.core.apply.call(null, f, inst_111075);
                                      var state_111089__$1 = state_111089;
                                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_111089__$1, 16, out, inst_111080);
                                    } else {
                                      if (state_val_111090 === 15) {
                                        var inst_111085 = state_111089[2];
                                        var state_111089__$1 = state_111089;
                                        var statearr_111109_111133 = state_111089__$1;
                                        statearr_111109_111133[2] = inst_111085;
                                        statearr_111109_111133[1] = 3;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        if (state_val_111090 === 16) {
                                          var inst_111082 = state_111089[2];
                                          var state_111089__$1 = function() {
                                            var statearr_111110 = state_111089;
                                            statearr_111110[13] = inst_111082;
                                            return statearr_111110;
                                          }();
                                          var statearr_111111_111134 = state_111089__$1;
                                          statearr_111111_111134[2] = null;
                                          statearr_111111_111134[1] = 2;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                        } else {
                                          return null;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__15564__auto__) {
          return function() {
            var state_machine__15565__auto__ = null;
            var state_machine__15565__auto____0 = function() {
              var statearr_111115 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_111115[0] = state_machine__15565__auto__;
              statearr_111115[1] = 1;
              return statearr_111115;
            };
            var state_machine__15565__auto____1 = function(state_111089) {
              while (true) {
                var ret_value__15566__auto__ = function() {
                  try {
                    while (true) {
                      var result__15567__auto__ = switch__15564__auto__.call(null, state_111089);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__15567__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__15567__auto__;
                      }
                      break;
                    }
                  } catch (e111116) {
                    if (e111116 instanceof Object) {
                      var ex__15568__auto__ = e111116;
                      var statearr_111117_111135 = state_111089;
                      statearr_111117_111135[5] = ex__15568__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_111089);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e111116;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__15566__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__111136 = state_111089;
                  state_111089 = G__111136;
                  continue;
                } else {
                  return ret_value__15566__auto__;
                }
                break;
              }
            };
            state_machine__15565__auto__ = function(state_111089) {
              switch(arguments.length) {
                case 0:
                  return state_machine__15565__auto____0.call(this);
                case 1:
                  return state_machine__15565__auto____1.call(this, state_111089);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__15565__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__15565__auto____0;
            state_machine__15565__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__15565__auto____1;
            return state_machine__15565__auto__;
          }();
        }(switch__15564__auto__);
      }();
      var state__15581__auto__ = function() {
        var statearr_111118 = f__15580__auto__.call(null);
        statearr_111118[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__15579__auto___111119;
        return statearr_111118;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__15581__auto__);
    });
    return out;
  };
  map = function(f, chs, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return map__2.call(this, f, chs);
      case 3:
        return map__3.call(this, f, chs, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  map.cljs$core$IFn$_invoke$arity$2 = map__2;
  map.cljs$core$IFn$_invoke$arity$3 = map__3;
  return map;
}();
cljs.core.async.merge = function() {
  var merge = null;
  var merge__1 = function(chs) {
    return merge.call(null, chs, null);
  };
  var merge__2 = function(chs, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__15579__auto___111244 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__15580__auto__ = function() {
        var switch__15564__auto__ = function(state_111220) {
          var state_val_111221 = state_111220[1];
          if (state_val_111221 === 1) {
            var inst_111191 = cljs.core.vec.call(null, chs);
            var inst_111192 = inst_111191;
            var state_111220__$1 = function() {
              var statearr_111222 = state_111220;
              statearr_111222[7] = inst_111192;
              return statearr_111222;
            }();
            var statearr_111223_111245 = state_111220__$1;
            statearr_111223_111245[2] = null;
            statearr_111223_111245[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_111221 === 2) {
              var inst_111192 = state_111220[7];
              var inst_111194 = cljs.core.count.call(null, inst_111192);
              var inst_111195 = inst_111194 > 0;
              var state_111220__$1 = state_111220;
              if (cljs.core.truth_(inst_111195)) {
                var statearr_111224_111246 = state_111220__$1;
                statearr_111224_111246[1] = 4;
              } else {
                var statearr_111225_111247 = state_111220__$1;
                statearr_111225_111247[1] = 5;
              }
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_111221 === 3) {
                var inst_111218 = state_111220[2];
                var state_111220__$1 = state_111220;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_111220__$1, inst_111218);
              } else {
                if (state_val_111221 === 4) {
                  var inst_111192 = state_111220[7];
                  var state_111220__$1 = state_111220;
                  return cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_.call(null, state_111220__$1, 7, inst_111192);
                } else {
                  if (state_val_111221 === 5) {
                    var inst_111214 = cljs.core.async.close_BANG_.call(null, out);
                    var state_111220__$1 = state_111220;
                    var statearr_111226_111248 = state_111220__$1;
                    statearr_111226_111248[2] = inst_111214;
                    statearr_111226_111248[1] = 6;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_111221 === 6) {
                      var inst_111216 = state_111220[2];
                      var state_111220__$1 = state_111220;
                      var statearr_111227_111249 = state_111220__$1;
                      statearr_111227_111249[2] = inst_111216;
                      statearr_111227_111249[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_111221 === 7) {
                        var inst_111200 = state_111220[8];
                        var inst_111199 = state_111220[9];
                        var inst_111199__$1 = state_111220[2];
                        var inst_111200__$1 = cljs.core.nth.call(null, inst_111199__$1, 0, null);
                        var inst_111201 = cljs.core.nth.call(null, inst_111199__$1, 1, null);
                        var inst_111202 = inst_111200__$1 == null;
                        var state_111220__$1 = function() {
                          var statearr_111228 = state_111220;
                          statearr_111228[10] = inst_111201;
                          statearr_111228[8] = inst_111200__$1;
                          statearr_111228[9] = inst_111199__$1;
                          return statearr_111228;
                        }();
                        if (cljs.core.truth_(inst_111202)) {
                          var statearr_111229_111250 = state_111220__$1;
                          statearr_111229_111250[1] = 8;
                        } else {
                          var statearr_111230_111251 = state_111220__$1;
                          statearr_111230_111251[1] = 9;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_111221 === 8) {
                          var inst_111201 = state_111220[10];
                          var inst_111200 = state_111220[8];
                          var inst_111192 = state_111220[7];
                          var inst_111199 = state_111220[9];
                          var inst_111204 = function() {
                            var c = inst_111201;
                            var v = inst_111200;
                            var vec__111197 = inst_111199;
                            var cs = inst_111192;
                            return function(c, v, vec__111197, cs, inst_111201, inst_111200, inst_111192, inst_111199, state_val_111221) {
                              return function(p1__111137_SHARP_) {
                                return cljs.core.not_EQ_.call(null, c, p1__111137_SHARP_);
                              };
                            }(c, v, vec__111197, cs, inst_111201, inst_111200, inst_111192, inst_111199, state_val_111221);
                          }();
                          var inst_111205 = cljs.core.filterv.call(null, inst_111204, inst_111192);
                          var inst_111192__$1 = inst_111205;
                          var state_111220__$1 = function() {
                            var statearr_111231 = state_111220;
                            statearr_111231[7] = inst_111192__$1;
                            return statearr_111231;
                          }();
                          var statearr_111232_111252 = state_111220__$1;
                          statearr_111232_111252[2] = null;
                          statearr_111232_111252[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_111221 === 9) {
                            var inst_111200 = state_111220[8];
                            var state_111220__$1 = state_111220;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_111220__$1, 11, out, inst_111200);
                          } else {
                            if (state_val_111221 === 10) {
                              var inst_111212 = state_111220[2];
                              var state_111220__$1 = state_111220;
                              var statearr_111234_111253 = state_111220__$1;
                              statearr_111234_111253[2] = inst_111212;
                              statearr_111234_111253[1] = 6;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_111221 === 11) {
                                var inst_111192 = state_111220[7];
                                var inst_111209 = state_111220[2];
                                var tmp111233 = inst_111192;
                                var inst_111192__$1 = tmp111233;
                                var state_111220__$1 = function() {
                                  var statearr_111235 = state_111220;
                                  statearr_111235[11] = inst_111209;
                                  statearr_111235[7] = inst_111192__$1;
                                  return statearr_111235;
                                }();
                                var statearr_111236_111254 = state_111220__$1;
                                statearr_111236_111254[2] = null;
                                statearr_111236_111254[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__15564__auto__) {
          return function() {
            var state_machine__15565__auto__ = null;
            var state_machine__15565__auto____0 = function() {
              var statearr_111240 = [null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_111240[0] = state_machine__15565__auto__;
              statearr_111240[1] = 1;
              return statearr_111240;
            };
            var state_machine__15565__auto____1 = function(state_111220) {
              while (true) {
                var ret_value__15566__auto__ = function() {
                  try {
                    while (true) {
                      var result__15567__auto__ = switch__15564__auto__.call(null, state_111220);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__15567__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__15567__auto__;
                      }
                      break;
                    }
                  } catch (e111241) {
                    if (e111241 instanceof Object) {
                      var ex__15568__auto__ = e111241;
                      var statearr_111242_111255 = state_111220;
                      statearr_111242_111255[5] = ex__15568__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_111220);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e111241;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__15566__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__111256 = state_111220;
                  state_111220 = G__111256;
                  continue;
                } else {
                  return ret_value__15566__auto__;
                }
                break;
              }
            };
            state_machine__15565__auto__ = function(state_111220) {
              switch(arguments.length) {
                case 0:
                  return state_machine__15565__auto____0.call(this);
                case 1:
                  return state_machine__15565__auto____1.call(this, state_111220);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__15565__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__15565__auto____0;
            state_machine__15565__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__15565__auto____1;
            return state_machine__15565__auto__;
          }();
        }(switch__15564__auto__);
      }();
      var state__15581__auto__ = function() {
        var statearr_111243 = f__15580__auto__.call(null);
        statearr_111243[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__15579__auto___111244;
        return statearr_111243;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__15581__auto__);
    });
    return out;
  };
  merge = function(chs, buf_or_n) {
    switch(arguments.length) {
      case 1:
        return merge__1.call(this, chs);
      case 2:
        return merge__2.call(this, chs, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  merge.cljs$core$IFn$_invoke$arity$1 = merge__1;
  merge.cljs$core$IFn$_invoke$arity$2 = merge__2;
  return merge;
}();
cljs.core.async.into = function into(coll, ch) {
  return cljs.core.async.reduce.call(null, cljs.core.conj, coll, ch);
};
cljs.core.async.take = function() {
  var take = null;
  var take__2 = function(n, ch) {
    return take.call(null, n, ch, null);
  };
  var take__3 = function(n, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__15579__auto___111349 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__15580__auto__ = function() {
        var switch__15564__auto__ = function(state_111326) {
          var state_val_111327 = state_111326[1];
          if (state_val_111327 === 1) {
            var inst_111303 = 0;
            var state_111326__$1 = function() {
              var statearr_111328 = state_111326;
              statearr_111328[7] = inst_111303;
              return statearr_111328;
            }();
            var statearr_111329_111350 = state_111326__$1;
            statearr_111329_111350[2] = null;
            statearr_111329_111350[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_111327 === 2) {
              var inst_111303 = state_111326[7];
              var inst_111305 = inst_111303 < n;
              var state_111326__$1 = state_111326;
              if (cljs.core.truth_(inst_111305)) {
                var statearr_111330_111351 = state_111326__$1;
                statearr_111330_111351[1] = 4;
              } else {
                var statearr_111331_111352 = state_111326__$1;
                statearr_111331_111352[1] = 5;
              }
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_111327 === 3) {
                var inst_111323 = state_111326[2];
                var inst_111324 = cljs.core.async.close_BANG_.call(null, out);
                var state_111326__$1 = function() {
                  var statearr_111332 = state_111326;
                  statearr_111332[8] = inst_111323;
                  return statearr_111332;
                }();
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_111326__$1, inst_111324);
              } else {
                if (state_val_111327 === 4) {
                  var state_111326__$1 = state_111326;
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_111326__$1, 7, ch);
                } else {
                  if (state_val_111327 === 5) {
                    var state_111326__$1 = state_111326;
                    var statearr_111333_111353 = state_111326__$1;
                    statearr_111333_111353[2] = null;
                    statearr_111333_111353[1] = 6;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_111327 === 6) {
                      var inst_111321 = state_111326[2];
                      var state_111326__$1 = state_111326;
                      var statearr_111334_111354 = state_111326__$1;
                      statearr_111334_111354[2] = inst_111321;
                      statearr_111334_111354[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_111327 === 7) {
                        var inst_111308 = state_111326[9];
                        var inst_111308__$1 = state_111326[2];
                        var inst_111309 = inst_111308__$1 == null;
                        var inst_111310 = cljs.core.not.call(null, inst_111309);
                        var state_111326__$1 = function() {
                          var statearr_111335 = state_111326;
                          statearr_111335[9] = inst_111308__$1;
                          return statearr_111335;
                        }();
                        if (inst_111310) {
                          var statearr_111336_111355 = state_111326__$1;
                          statearr_111336_111355[1] = 8;
                        } else {
                          var statearr_111337_111356 = state_111326__$1;
                          statearr_111337_111356[1] = 9;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_111327 === 8) {
                          var inst_111308 = state_111326[9];
                          var state_111326__$1 = state_111326;
                          return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_111326__$1, 11, out, inst_111308);
                        } else {
                          if (state_val_111327 === 9) {
                            var state_111326__$1 = state_111326;
                            var statearr_111338_111357 = state_111326__$1;
                            statearr_111338_111357[2] = null;
                            statearr_111338_111357[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_111327 === 10) {
                              var inst_111318 = state_111326[2];
                              var state_111326__$1 = state_111326;
                              var statearr_111339_111358 = state_111326__$1;
                              statearr_111339_111358[2] = inst_111318;
                              statearr_111339_111358[1] = 6;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_111327 === 11) {
                                var inst_111303 = state_111326[7];
                                var inst_111313 = state_111326[2];
                                var inst_111314 = inst_111303 + 1;
                                var inst_111303__$1 = inst_111314;
                                var state_111326__$1 = function() {
                                  var statearr_111340 = state_111326;
                                  statearr_111340[10] = inst_111313;
                                  statearr_111340[7] = inst_111303__$1;
                                  return statearr_111340;
                                }();
                                var statearr_111341_111359 = state_111326__$1;
                                statearr_111341_111359[2] = null;
                                statearr_111341_111359[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__15564__auto__) {
          return function() {
            var state_machine__15565__auto__ = null;
            var state_machine__15565__auto____0 = function() {
              var statearr_111345 = [null, null, null, null, null, null, null, null, null, null, null];
              statearr_111345[0] = state_machine__15565__auto__;
              statearr_111345[1] = 1;
              return statearr_111345;
            };
            var state_machine__15565__auto____1 = function(state_111326) {
              while (true) {
                var ret_value__15566__auto__ = function() {
                  try {
                    while (true) {
                      var result__15567__auto__ = switch__15564__auto__.call(null, state_111326);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__15567__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__15567__auto__;
                      }
                      break;
                    }
                  } catch (e111346) {
                    if (e111346 instanceof Object) {
                      var ex__15568__auto__ = e111346;
                      var statearr_111347_111360 = state_111326;
                      statearr_111347_111360[5] = ex__15568__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_111326);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e111346;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__15566__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__111361 = state_111326;
                  state_111326 = G__111361;
                  continue;
                } else {
                  return ret_value__15566__auto__;
                }
                break;
              }
            };
            state_machine__15565__auto__ = function(state_111326) {
              switch(arguments.length) {
                case 0:
                  return state_machine__15565__auto____0.call(this);
                case 1:
                  return state_machine__15565__auto____1.call(this, state_111326);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__15565__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__15565__auto____0;
            state_machine__15565__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__15565__auto____1;
            return state_machine__15565__auto__;
          }();
        }(switch__15564__auto__);
      }();
      var state__15581__auto__ = function() {
        var statearr_111348 = f__15580__auto__.call(null);
        statearr_111348[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__15579__auto___111349;
        return statearr_111348;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__15581__auto__);
    });
    return out;
  };
  take = function(n, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return take__2.call(this, n, ch);
      case 3:
        return take__3.call(this, n, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take.cljs$core$IFn$_invoke$arity$2 = take__2;
  take.cljs$core$IFn$_invoke$arity$3 = take__3;
  return take;
}();
cljs.core.async.unique = function() {
  var unique = null;
  var unique__1 = function(ch) {
    return unique.call(null, ch, null);
  };
  var unique__2 = function(ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__15579__auto___111458 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__15580__auto__ = function() {
        var switch__15564__auto__ = function(state_111433) {
          var state_val_111434 = state_111433[1];
          if (state_val_111434 === 1) {
            var inst_111410 = null;
            var state_111433__$1 = function() {
              var statearr_111435 = state_111433;
              statearr_111435[7] = inst_111410;
              return statearr_111435;
            }();
            var statearr_111436_111459 = state_111433__$1;
            statearr_111436_111459[2] = null;
            statearr_111436_111459[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_111434 === 2) {
              var state_111433__$1 = state_111433;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_111433__$1, 4, ch);
            } else {
              if (state_val_111434 === 3) {
                var inst_111430 = state_111433[2];
                var inst_111431 = cljs.core.async.close_BANG_.call(null, out);
                var state_111433__$1 = function() {
                  var statearr_111437 = state_111433;
                  statearr_111437[8] = inst_111430;
                  return statearr_111437;
                }();
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_111433__$1, inst_111431);
              } else {
                if (state_val_111434 === 4) {
                  var inst_111413 = state_111433[9];
                  var inst_111413__$1 = state_111433[2];
                  var inst_111414 = inst_111413__$1 == null;
                  var inst_111415 = cljs.core.not.call(null, inst_111414);
                  var state_111433__$1 = function() {
                    var statearr_111438 = state_111433;
                    statearr_111438[9] = inst_111413__$1;
                    return statearr_111438;
                  }();
                  if (inst_111415) {
                    var statearr_111439_111460 = state_111433__$1;
                    statearr_111439_111460[1] = 5;
                  } else {
                    var statearr_111440_111461 = state_111433__$1;
                    statearr_111440_111461[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_111434 === 5) {
                    var inst_111413 = state_111433[9];
                    var inst_111410 = state_111433[7];
                    var inst_111417 = cljs.core._EQ_.call(null, inst_111413, inst_111410);
                    var state_111433__$1 = state_111433;
                    if (inst_111417) {
                      var statearr_111441_111462 = state_111433__$1;
                      statearr_111441_111462[1] = 8;
                    } else {
                      var statearr_111442_111463 = state_111433__$1;
                      statearr_111442_111463[1] = 9;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_111434 === 6) {
                      var state_111433__$1 = state_111433;
                      var statearr_111444_111464 = state_111433__$1;
                      statearr_111444_111464[2] = null;
                      statearr_111444_111464[1] = 7;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_111434 === 7) {
                        var inst_111428 = state_111433[2];
                        var state_111433__$1 = state_111433;
                        var statearr_111445_111465 = state_111433__$1;
                        statearr_111445_111465[2] = inst_111428;
                        statearr_111445_111465[1] = 3;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_111434 === 8) {
                          var inst_111410 = state_111433[7];
                          var tmp111443 = inst_111410;
                          var inst_111410__$1 = tmp111443;
                          var state_111433__$1 = function() {
                            var statearr_111446 = state_111433;
                            statearr_111446[7] = inst_111410__$1;
                            return statearr_111446;
                          }();
                          var statearr_111447_111466 = state_111433__$1;
                          statearr_111447_111466[2] = null;
                          statearr_111447_111466[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_111434 === 9) {
                            var inst_111413 = state_111433[9];
                            var state_111433__$1 = state_111433;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_111433__$1, 11, out, inst_111413);
                          } else {
                            if (state_val_111434 === 10) {
                              var inst_111425 = state_111433[2];
                              var state_111433__$1 = state_111433;
                              var statearr_111448_111467 = state_111433__$1;
                              statearr_111448_111467[2] = inst_111425;
                              statearr_111448_111467[1] = 7;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_111434 === 11) {
                                var inst_111413 = state_111433[9];
                                var inst_111422 = state_111433[2];
                                var inst_111410 = inst_111413;
                                var state_111433__$1 = function() {
                                  var statearr_111449 = state_111433;
                                  statearr_111449[10] = inst_111422;
                                  statearr_111449[7] = inst_111410;
                                  return statearr_111449;
                                }();
                                var statearr_111450_111468 = state_111433__$1;
                                statearr_111450_111468[2] = null;
                                statearr_111450_111468[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__15564__auto__) {
          return function() {
            var state_machine__15565__auto__ = null;
            var state_machine__15565__auto____0 = function() {
              var statearr_111454 = [null, null, null, null, null, null, null, null, null, null, null];
              statearr_111454[0] = state_machine__15565__auto__;
              statearr_111454[1] = 1;
              return statearr_111454;
            };
            var state_machine__15565__auto____1 = function(state_111433) {
              while (true) {
                var ret_value__15566__auto__ = function() {
                  try {
                    while (true) {
                      var result__15567__auto__ = switch__15564__auto__.call(null, state_111433);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__15567__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__15567__auto__;
                      }
                      break;
                    }
                  } catch (e111455) {
                    if (e111455 instanceof Object) {
                      var ex__15568__auto__ = e111455;
                      var statearr_111456_111469 = state_111433;
                      statearr_111456_111469[5] = ex__15568__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_111433);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e111455;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__15566__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__111470 = state_111433;
                  state_111433 = G__111470;
                  continue;
                } else {
                  return ret_value__15566__auto__;
                }
                break;
              }
            };
            state_machine__15565__auto__ = function(state_111433) {
              switch(arguments.length) {
                case 0:
                  return state_machine__15565__auto____0.call(this);
                case 1:
                  return state_machine__15565__auto____1.call(this, state_111433);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__15565__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__15565__auto____0;
            state_machine__15565__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__15565__auto____1;
            return state_machine__15565__auto__;
          }();
        }(switch__15564__auto__);
      }();
      var state__15581__auto__ = function() {
        var statearr_111457 = f__15580__auto__.call(null);
        statearr_111457[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__15579__auto___111458;
        return statearr_111457;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__15581__auto__);
    });
    return out;
  };
  unique = function(ch, buf_or_n) {
    switch(arguments.length) {
      case 1:
        return unique__1.call(this, ch);
      case 2:
        return unique__2.call(this, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unique.cljs$core$IFn$_invoke$arity$1 = unique__1;
  unique.cljs$core$IFn$_invoke$arity$2 = unique__2;
  return unique;
}();
cljs.core.async.partition = function() {
  var partition = null;
  var partition__2 = function(n, ch) {
    return partition.call(null, n, ch, null);
  };
  var partition__3 = function(n, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__15579__auto___111605 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__15580__auto__ = function() {
        var switch__15564__auto__ = function(state_111575) {
          var state_val_111576 = state_111575[1];
          if (state_val_111576 === 1) {
            var inst_111538 = new Array(n);
            var inst_111539 = inst_111538;
            var inst_111540 = 0;
            var state_111575__$1 = function() {
              var statearr_111577 = state_111575;
              statearr_111577[7] = inst_111539;
              statearr_111577[8] = inst_111540;
              return statearr_111577;
            }();
            var statearr_111578_111606 = state_111575__$1;
            statearr_111578_111606[2] = null;
            statearr_111578_111606[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_111576 === 2) {
              var state_111575__$1 = state_111575;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_111575__$1, 4, ch);
            } else {
              if (state_val_111576 === 3) {
                var inst_111573 = state_111575[2];
                var state_111575__$1 = state_111575;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_111575__$1, inst_111573);
              } else {
                if (state_val_111576 === 4) {
                  var inst_111543 = state_111575[9];
                  var inst_111543__$1 = state_111575[2];
                  var inst_111544 = inst_111543__$1 == null;
                  var inst_111545 = cljs.core.not.call(null, inst_111544);
                  var state_111575__$1 = function() {
                    var statearr_111579 = state_111575;
                    statearr_111579[9] = inst_111543__$1;
                    return statearr_111579;
                  }();
                  if (inst_111545) {
                    var statearr_111580_111607 = state_111575__$1;
                    statearr_111580_111607[1] = 5;
                  } else {
                    var statearr_111581_111608 = state_111575__$1;
                    statearr_111581_111608[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_111576 === 5) {
                    var inst_111539 = state_111575[7];
                    var inst_111543 = state_111575[9];
                    var inst_111548 = state_111575[10];
                    var inst_111540 = state_111575[8];
                    var inst_111547 = inst_111539[inst_111540] = inst_111543;
                    var inst_111548__$1 = inst_111540 + 1;
                    var inst_111549 = inst_111548__$1 < n;
                    var state_111575__$1 = function() {
                      var statearr_111582 = state_111575;
                      statearr_111582[10] = inst_111548__$1;
                      statearr_111582[11] = inst_111547;
                      return statearr_111582;
                    }();
                    if (cljs.core.truth_(inst_111549)) {
                      var statearr_111583_111609 = state_111575__$1;
                      statearr_111583_111609[1] = 8;
                    } else {
                      var statearr_111584_111610 = state_111575__$1;
                      statearr_111584_111610[1] = 9;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_111576 === 6) {
                      var inst_111540 = state_111575[8];
                      var inst_111561 = inst_111540 > 0;
                      var state_111575__$1 = state_111575;
                      if (cljs.core.truth_(inst_111561)) {
                        var statearr_111586_111611 = state_111575__$1;
                        statearr_111586_111611[1] = 12;
                      } else {
                        var statearr_111587_111612 = state_111575__$1;
                        statearr_111587_111612[1] = 13;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_111576 === 7) {
                        var inst_111571 = state_111575[2];
                        var state_111575__$1 = state_111575;
                        var statearr_111588_111613 = state_111575__$1;
                        statearr_111588_111613[2] = inst_111571;
                        statearr_111588_111613[1] = 3;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_111576 === 8) {
                          var inst_111539 = state_111575[7];
                          var inst_111548 = state_111575[10];
                          var tmp111585 = inst_111539;
                          var inst_111539__$1 = tmp111585;
                          var inst_111540 = inst_111548;
                          var state_111575__$1 = function() {
                            var statearr_111589 = state_111575;
                            statearr_111589[7] = inst_111539__$1;
                            statearr_111589[8] = inst_111540;
                            return statearr_111589;
                          }();
                          var statearr_111590_111614 = state_111575__$1;
                          statearr_111590_111614[2] = null;
                          statearr_111590_111614[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_111576 === 9) {
                            var inst_111539 = state_111575[7];
                            var inst_111553 = cljs.core.vec.call(null, inst_111539);
                            var state_111575__$1 = state_111575;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_111575__$1, 11, out, inst_111553);
                          } else {
                            if (state_val_111576 === 10) {
                              var inst_111559 = state_111575[2];
                              var state_111575__$1 = state_111575;
                              var statearr_111591_111615 = state_111575__$1;
                              statearr_111591_111615[2] = inst_111559;
                              statearr_111591_111615[1] = 7;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_111576 === 11) {
                                var inst_111555 = state_111575[2];
                                var inst_111556 = new Array(n);
                                var inst_111539 = inst_111556;
                                var inst_111540 = 0;
                                var state_111575__$1 = function() {
                                  var statearr_111592 = state_111575;
                                  statearr_111592[12] = inst_111555;
                                  statearr_111592[7] = inst_111539;
                                  statearr_111592[8] = inst_111540;
                                  return statearr_111592;
                                }();
                                var statearr_111593_111616 = state_111575__$1;
                                statearr_111593_111616[2] = null;
                                statearr_111593_111616[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_111576 === 12) {
                                  var inst_111539 = state_111575[7];
                                  var inst_111563 = cljs.core.vec.call(null, inst_111539);
                                  var state_111575__$1 = state_111575;
                                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_111575__$1, 15, out, inst_111563);
                                } else {
                                  if (state_val_111576 === 13) {
                                    var state_111575__$1 = state_111575;
                                    var statearr_111594_111617 = state_111575__$1;
                                    statearr_111594_111617[2] = null;
                                    statearr_111594_111617[1] = 14;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_111576 === 14) {
                                      var inst_111568 = state_111575[2];
                                      var inst_111569 = cljs.core.async.close_BANG_.call(null, out);
                                      var state_111575__$1 = function() {
                                        var statearr_111595 = state_111575;
                                        statearr_111595[13] = inst_111568;
                                        return statearr_111595;
                                      }();
                                      var statearr_111596_111618 = state_111575__$1;
                                      statearr_111596_111618[2] = inst_111569;
                                      statearr_111596_111618[1] = 7;
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                    } else {
                                      if (state_val_111576 === 15) {
                                        var inst_111565 = state_111575[2];
                                        var state_111575__$1 = state_111575;
                                        var statearr_111597_111619 = state_111575__$1;
                                        statearr_111597_111619[2] = inst_111565;
                                        statearr_111597_111619[1] = 14;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        return null;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__15564__auto__) {
          return function() {
            var state_machine__15565__auto__ = null;
            var state_machine__15565__auto____0 = function() {
              var statearr_111601 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_111601[0] = state_machine__15565__auto__;
              statearr_111601[1] = 1;
              return statearr_111601;
            };
            var state_machine__15565__auto____1 = function(state_111575) {
              while (true) {
                var ret_value__15566__auto__ = function() {
                  try {
                    while (true) {
                      var result__15567__auto__ = switch__15564__auto__.call(null, state_111575);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__15567__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__15567__auto__;
                      }
                      break;
                    }
                  } catch (e111602) {
                    if (e111602 instanceof Object) {
                      var ex__15568__auto__ = e111602;
                      var statearr_111603_111620 = state_111575;
                      statearr_111603_111620[5] = ex__15568__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_111575);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e111602;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__15566__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__111621 = state_111575;
                  state_111575 = G__111621;
                  continue;
                } else {
                  return ret_value__15566__auto__;
                }
                break;
              }
            };
            state_machine__15565__auto__ = function(state_111575) {
              switch(arguments.length) {
                case 0:
                  return state_machine__15565__auto____0.call(this);
                case 1:
                  return state_machine__15565__auto____1.call(this, state_111575);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__15565__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__15565__auto____0;
            state_machine__15565__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__15565__auto____1;
            return state_machine__15565__auto__;
          }();
        }(switch__15564__auto__);
      }();
      var state__15581__auto__ = function() {
        var statearr_111604 = f__15580__auto__.call(null);
        statearr_111604[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__15579__auto___111605;
        return statearr_111604;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__15581__auto__);
    });
    return out;
  };
  partition = function(n, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return partition__2.call(this, n, ch);
      case 3:
        return partition__3.call(this, n, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition.cljs$core$IFn$_invoke$arity$2 = partition__2;
  partition.cljs$core$IFn$_invoke$arity$3 = partition__3;
  return partition;
}();
cljs.core.async.partition_by = function() {
  var partition_by = null;
  var partition_by__2 = function(f, ch) {
    return partition_by.call(null, f, ch, null);
  };
  var partition_by__3 = function(f, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__15579__auto___111764 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__15580__auto__ = function() {
        var switch__15564__auto__ = function(state_111734) {
          var state_val_111735 = state_111734[1];
          if (state_val_111735 === 1) {
            var inst_111693 = [];
            var inst_111694 = inst_111693;
            var inst_111695 = new cljs.core.Keyword("cljs.core.async", "nothing", "cljs.core.async/nothing", 4382193538);
            var state_111734__$1 = function() {
              var statearr_111736 = state_111734;
              statearr_111736[7] = inst_111695;
              statearr_111736[8] = inst_111694;
              return statearr_111736;
            }();
            var statearr_111737_111765 = state_111734__$1;
            statearr_111737_111765[2] = null;
            statearr_111737_111765[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_111735 === 2) {
              var state_111734__$1 = state_111734;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_111734__$1, 4, ch);
            } else {
              if (state_val_111735 === 3) {
                var inst_111732 = state_111734[2];
                var state_111734__$1 = state_111734;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_111734__$1, inst_111732);
              } else {
                if (state_val_111735 === 4) {
                  var inst_111698 = state_111734[9];
                  var inst_111698__$1 = state_111734[2];
                  var inst_111699 = inst_111698__$1 == null;
                  var inst_111700 = cljs.core.not.call(null, inst_111699);
                  var state_111734__$1 = function() {
                    var statearr_111738 = state_111734;
                    statearr_111738[9] = inst_111698__$1;
                    return statearr_111738;
                  }();
                  if (inst_111700) {
                    var statearr_111739_111766 = state_111734__$1;
                    statearr_111739_111766[1] = 5;
                  } else {
                    var statearr_111740_111767 = state_111734__$1;
                    statearr_111740_111767[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_111735 === 5) {
                    var inst_111702 = state_111734[10];
                    var inst_111698 = state_111734[9];
                    var inst_111695 = state_111734[7];
                    var inst_111702__$1 = f.call(null, inst_111698);
                    var inst_111703 = cljs.core._EQ_.call(null, inst_111702__$1, inst_111695);
                    var inst_111704 = cljs.core.keyword_identical_QMARK_.call(null, inst_111695, new cljs.core.Keyword("cljs.core.async", "nothing", "cljs.core.async/nothing", 4382193538));
                    var inst_111705 = inst_111703 || inst_111704;
                    var state_111734__$1 = function() {
                      var statearr_111741 = state_111734;
                      statearr_111741[10] = inst_111702__$1;
                      return statearr_111741;
                    }();
                    if (cljs.core.truth_(inst_111705)) {
                      var statearr_111742_111768 = state_111734__$1;
                      statearr_111742_111768[1] = 8;
                    } else {
                      var statearr_111743_111769 = state_111734__$1;
                      statearr_111743_111769[1] = 9;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_111735 === 6) {
                      var inst_111694 = state_111734[8];
                      var inst_111719 = inst_111694.length;
                      var inst_111720 = inst_111719 > 0;
                      var state_111734__$1 = state_111734;
                      if (cljs.core.truth_(inst_111720)) {
                        var statearr_111745_111770 = state_111734__$1;
                        statearr_111745_111770[1] = 12;
                      } else {
                        var statearr_111746_111771 = state_111734__$1;
                        statearr_111746_111771[1] = 13;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_111735 === 7) {
                        var inst_111730 = state_111734[2];
                        var state_111734__$1 = state_111734;
                        var statearr_111747_111772 = state_111734__$1;
                        statearr_111747_111772[2] = inst_111730;
                        statearr_111747_111772[1] = 3;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_111735 === 8) {
                          var inst_111702 = state_111734[10];
                          var inst_111698 = state_111734[9];
                          var inst_111694 = state_111734[8];
                          var inst_111707 = inst_111694.push(inst_111698);
                          var tmp111744 = inst_111694;
                          var inst_111694__$1 = tmp111744;
                          var inst_111695 = inst_111702;
                          var state_111734__$1 = function() {
                            var statearr_111748 = state_111734;
                            statearr_111748[11] = inst_111707;
                            statearr_111748[7] = inst_111695;
                            statearr_111748[8] = inst_111694__$1;
                            return statearr_111748;
                          }();
                          var statearr_111749_111773 = state_111734__$1;
                          statearr_111749_111773[2] = null;
                          statearr_111749_111773[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_111735 === 9) {
                            var inst_111694 = state_111734[8];
                            var inst_111710 = cljs.core.vec.call(null, inst_111694);
                            var state_111734__$1 = state_111734;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_111734__$1, 11, out, inst_111710);
                          } else {
                            if (state_val_111735 === 10) {
                              var inst_111717 = state_111734[2];
                              var state_111734__$1 = state_111734;
                              var statearr_111750_111774 = state_111734__$1;
                              statearr_111750_111774[2] = inst_111717;
                              statearr_111750_111774[1] = 7;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_111735 === 11) {
                                var inst_111702 = state_111734[10];
                                var inst_111698 = state_111734[9];
                                var inst_111712 = state_111734[2];
                                var inst_111713 = [];
                                var inst_111714 = inst_111713.push(inst_111698);
                                var inst_111694 = inst_111713;
                                var inst_111695 = inst_111702;
                                var state_111734__$1 = function() {
                                  var statearr_111751 = state_111734;
                                  statearr_111751[12] = inst_111712;
                                  statearr_111751[13] = inst_111714;
                                  statearr_111751[7] = inst_111695;
                                  statearr_111751[8] = inst_111694;
                                  return statearr_111751;
                                }();
                                var statearr_111752_111775 = state_111734__$1;
                                statearr_111752_111775[2] = null;
                                statearr_111752_111775[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_111735 === 12) {
                                  var inst_111694 = state_111734[8];
                                  var inst_111722 = cljs.core.vec.call(null, inst_111694);
                                  var state_111734__$1 = state_111734;
                                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_111734__$1, 15, out, inst_111722);
                                } else {
                                  if (state_val_111735 === 13) {
                                    var state_111734__$1 = state_111734;
                                    var statearr_111753_111776 = state_111734__$1;
                                    statearr_111753_111776[2] = null;
                                    statearr_111753_111776[1] = 14;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_111735 === 14) {
                                      var inst_111727 = state_111734[2];
                                      var inst_111728 = cljs.core.async.close_BANG_.call(null, out);
                                      var state_111734__$1 = function() {
                                        var statearr_111754 = state_111734;
                                        statearr_111754[14] = inst_111727;
                                        return statearr_111754;
                                      }();
                                      var statearr_111755_111777 = state_111734__$1;
                                      statearr_111755_111777[2] = inst_111728;
                                      statearr_111755_111777[1] = 7;
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                    } else {
                                      if (state_val_111735 === 15) {
                                        var inst_111724 = state_111734[2];
                                        var state_111734__$1 = state_111734;
                                        var statearr_111756_111778 = state_111734__$1;
                                        statearr_111756_111778[2] = inst_111724;
                                        statearr_111756_111778[1] = 14;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        return null;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__15564__auto__) {
          return function() {
            var state_machine__15565__auto__ = null;
            var state_machine__15565__auto____0 = function() {
              var statearr_111760 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_111760[0] = state_machine__15565__auto__;
              statearr_111760[1] = 1;
              return statearr_111760;
            };
            var state_machine__15565__auto____1 = function(state_111734) {
              while (true) {
                var ret_value__15566__auto__ = function() {
                  try {
                    while (true) {
                      var result__15567__auto__ = switch__15564__auto__.call(null, state_111734);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__15567__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__15567__auto__;
                      }
                      break;
                    }
                  } catch (e111761) {
                    if (e111761 instanceof Object) {
                      var ex__15568__auto__ = e111761;
                      var statearr_111762_111779 = state_111734;
                      statearr_111762_111779[5] = ex__15568__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_111734);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e111761;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__15566__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__111780 = state_111734;
                  state_111734 = G__111780;
                  continue;
                } else {
                  return ret_value__15566__auto__;
                }
                break;
              }
            };
            state_machine__15565__auto__ = function(state_111734) {
              switch(arguments.length) {
                case 0:
                  return state_machine__15565__auto____0.call(this);
                case 1:
                  return state_machine__15565__auto____1.call(this, state_111734);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__15565__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__15565__auto____0;
            state_machine__15565__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__15565__auto____1;
            return state_machine__15565__auto__;
          }();
        }(switch__15564__auto__);
      }();
      var state__15581__auto__ = function() {
        var statearr_111763 = f__15580__auto__.call(null);
        statearr_111763[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__15579__auto___111764;
        return statearr_111763;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__15581__auto__);
    });
    return out;
  };
  partition_by = function(f, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return partition_by__2.call(this, f, ch);
      case 3:
        return partition_by__3.call(this, f, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition_by.cljs$core$IFn$_invoke$arity$2 = partition_by__2;
  partition_by.cljs$core$IFn$_invoke$arity$3 = partition_by__3;
  return partition_by;
}();
goog.provide("ocr_visualizer.client2");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("ajax.core");
goog.require("ajax.core");
goog.require("cljs.reader");
goog.require("om.dom");
goog.require("om.core");
goog.require("clojure.string");
goog.require("om.core");
goog.require("clojure.string");
goog.require("domina");
goog.require("domina");
goog.require("om.dom");
goog.require("cljs.reader");
goog.require("clojure.browser.repl");
goog.require("cljs.core.async");
goog.require("clojure.browser.repl");
cljs.core.enable_console_print_BANG_.call(null);
1 + 2 + 3;
ocr_visualizer.client2.dev_mode = true;
ocr_visualizer.client2.repl_connect = function repl_connect() {
  if (cljs.core.truth_(ocr_visualizer.client2.dev_mode)) {
    return clojure.browser.repl.connect.call(null, "http://localhost:9000/repl");
  } else {
    return null;
  }
};
ocr_visualizer.client2.get_errors = function get_errors() {
  return cljs.reader.read_string.call(null, domina.text.call(null, domina.by_id.call(null, "errors")));
};
ocr_visualizer.client2.get_left = function get_left() {
  return domina.html.call(null, domina.by_id.call(null, "left"));
};
ocr_visualizer.client2.get_right = function get_right() {
  return domina.html.call(null, domina.by_id.call(null, "right"));
};
ocr_visualizer.client2.highlights_left = cljs.core.atom.call(null, cljs.core.PersistentVector.EMPTY);
ocr_visualizer.client2.dev_mode = true;
ocr_visualizer.client2.repl_connect = function repl_connect() {
  if (cljs.core.truth_(ocr_visualizer.client2.dev_mode)) {
    return clojure.browser.repl.connect.call(null, "http://localhost:9000/repl");
  } else {
    return null;
  }
};
ocr_visualizer.client2.get_errors = function get_errors() {
  return cljs.reader.read_string.call(null, domina.text.call(null, domina.by_id.call(null, "errors")));
};
ocr_visualizer.client2.get_left = function get_left() {
  return domina.html.call(null, domina.by_id.call(null, "left"));
};
ocr_visualizer.client2.get_right = function get_right() {
  return domina.html.call(null, domina.by_id.call(null, "right"));
};
ocr_visualizer.client2.highlights_left = cljs.core.atom.call(null, cljs.core.PersistentVector.EMPTY);
ocr_visualizer.client2.highlights_right = cljs.core.atom.call(null, cljs.core.PersistentVector.EMPTY);
ocr_visualizer.client2.text_left = cljs.core.atom.call(null, cljs.core.PersistentVector.EMPTY);
ocr_visualizer.client2.text_right = cljs.core.atom.call(null, cljs.core.PersistentVector.EMPTY);
ocr_visualizer.client2.highlight = function() {
  var highlight = null;
  var highlight__1 = function(text) {
    return highlight.call(null, text, "blue");
  };
  var highlight__2 = function(text, color) {
    return[cljs.core.str('\x3cspan style\x3d"background-color:'), cljs.core.str(color), cljs.core.str('"\x3e'), cljs.core.str(cljs.core._EQ_.call(null, text, "") ? "|" : text), cljs.core.str("\x3c/span\x3e")].join("");
  };
  highlight = function(text, color) {
    switch(arguments.length) {
      case 1:
        return highlight__1.call(this, text);
      case 2:
        return highlight__2.call(this, text, color);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  highlight.cljs$core$IFn$_invoke$arity$1 = highlight__1;
  highlight.cljs$core$IFn$_invoke$arity$2 = highlight__2;
  return highlight;
}();
ocr_visualizer.client2.save_texts = function save_texts(r) {
  cljs.core.reset_BANG_.call(null, ocr_visualizer.client2.text_left, cljs.core.map.call(null, function(p1__9530_SHARP_) {
    return domina.html.call(null, domina.by_id.call(null, [cljs.core.str("left-"), cljs.core.str(p1__9530_SHARP_)].join("")));
  }, r));
  return cljs.core.reset_BANG_.call(null, ocr_visualizer.client2.text_right, cljs.core.map.call(null, function(p1__9531_SHARP_) {
    return domina.html.call(null, domina.by_id.call(null, [cljs.core.str("right-"), cljs.core.str(p1__9531_SHARP_)].join("")));
  }, r));
};
ocr_visualizer.client2.offset = 43;
ocr_visualizer.client2.highlight_text = function highlight_text(text, positions) {
  return cljs.core.apply.call(null, cljs.core.str, cljs.core.conj.call(null, cljs.core.second.call(null, cljs.core.reduce.call(null, function(p__9536, p__9537) {
    var vec__9538 = p__9536;
    var pos = cljs.core.nth.call(null, vec__9538, 0, null);
    var substrings = cljs.core.nth.call(null, vec__9538, 1, null);
    var vec__9539 = p__9537;
    var nstart = cljs.core.nth.call(null, vec__9539, 0, null);
    var nend = cljs.core.nth.call(null, vec__9539, 1, null);
    var color = cljs.core.nth.call(null, vec__9539, 2, null);
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [nend, cljs.core.conj.call(null, substrings, text.substring(pos, nstart), ocr_visualizer.client2.highlight.call(null, text.substring(nstart, nend), color))], null);
  }, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, cljs.core.PersistentVector.EMPTY], null), positions)), text.substring(cljs.core.second.call(null, cljs.core.last.call(null, positions)), cljs.core.count.call(null, text))));
};
ocr_visualizer.client2.build_insertion_highlight = function build_insertion_highlight(p__9540) {
  var vec__9543 = p__9540;
  var _ = cljs.core.nth.call(null, vec__9543, 0, null);
  var vec__9544 = cljs.core.nth.call(null, vec__9543, 1, null);
  var l = cljs.core.nth.call(null, vec__9544, 0, null);
  var r = cljs.core.nth.call(null, vec__9544, 1, null);
  var error = vec__9543;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "type", "type", 1017479852), new cljs.core.Keyword(null, "insertion", "insertion", 629449249), new cljs.core.Keyword(null, "error", "error", 1110689146), error, new cljs.core.Keyword(null, "position", "position", 1761709211), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [l, l, "green"], null)], null), 
  new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "type", "type", 1017479852), new cljs.core.Keyword(null, "insertion", "insertion", 629449249), new cljs.core.Keyword(null, "error", "error", 1110689146), error, new cljs.core.Keyword(null, "position", "position", 1761709211), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [r, r + 1, "green"], null)], null)], null);
};
ocr_visualizer.client2.build_deletion_highlight = function build_deletion_highlight(p__9545) {
  var vec__9548 = p__9545;
  var _ = cljs.core.nth.call(null, vec__9548, 0, null);
  var vec__9549 = cljs.core.nth.call(null, vec__9548, 1, null);
  var l = cljs.core.nth.call(null, vec__9549, 0, null);
  var r = cljs.core.nth.call(null, vec__9549, 1, null);
  var error = vec__9548;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "type", "type", 1017479852), new cljs.core.Keyword(null, "deletion", "deletion", 1833621312), new cljs.core.Keyword(null, "error", "error", 1110689146), error, new cljs.core.Keyword(null, "position", "position", 1761709211), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [l, l + 1, "red"], null)], null), 
  new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "type", "type", 1017479852), new cljs.core.Keyword(null, "deletion", "deletion", 1833621312), new cljs.core.Keyword(null, "error", "error", 1110689146), error, new cljs.core.Keyword(null, "position", "position", 1761709211), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [r, r, "red"], null)], null)], null);
};
ocr_visualizer.client2.build_one_to_many_highlight = function build_one_to_many_highlight(p__9550) {
  var vec__9554 = p__9550;
  var _ = cljs.core.nth.call(null, vec__9554, 0, null);
  var vec__9555 = cljs.core.nth.call(null, vec__9554, 1, null);
  var ls = cljs.core.nth.call(null, vec__9555, 0, null);
  var rs = cljs.core.nth.call(null, vec__9555, 1, null);
  var vec__9556 = cljs.core.nth.call(null, vec__9554, 2, null);
  var le = cljs.core.nth.call(null, vec__9556, 0, null);
  var re = cljs.core.nth.call(null, vec__9556, 1, null);
  var error = vec__9554;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "type", "type", 1017479852), new cljs.core.Keyword(null, "one-to-many", "one-to-many", 1025879420), new cljs.core.Keyword(null, "error", "error", 1110689146), error, new cljs.core.Keyword(null, "position", "position", 1761709211), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [ls, le, "yellow"], null)], 
  null), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "type", "type", 1017479852), new cljs.core.Keyword(null, "one-to-many", "one-to-many", 1025879420), new cljs.core.Keyword(null, "error", "error", 1110689146), error, new cljs.core.Keyword(null, "position", "position", 1761709211), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [rs, re + 1, "yellow"], null)], null)], null);
};
ocr_visualizer.client2.build_many_to_one_highlight = function build_many_to_one_highlight(p__9557) {
  var vec__9561 = p__9557;
  var _ = cljs.core.nth.call(null, vec__9561, 0, null);
  var vec__9562 = cljs.core.nth.call(null, vec__9561, 1, null);
  var ls = cljs.core.nth.call(null, vec__9562, 0, null);
  var rs = cljs.core.nth.call(null, vec__9562, 1, null);
  var vec__9563 = cljs.core.nth.call(null, vec__9561, 2, null);
  var le = cljs.core.nth.call(null, vec__9563, 0, null);
  var re = cljs.core.nth.call(null, vec__9563, 1, null);
  var error = vec__9561;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "type", "type", 1017479852), new cljs.core.Keyword(null, "many-to-one", "many-to-one", 4715821748), new cljs.core.Keyword(null, "error", "error", 1110689146), error, new cljs.core.Keyword(null, "position", "position", 1761709211), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [ls, le + 1, "orange"], null)], 
  null), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "type", "type", 1017479852), new cljs.core.Keyword(null, "many-to-one", "many-to-one", 4715821748), new cljs.core.Keyword(null, "error", "error", 1110689146), error, new cljs.core.Keyword(null, "position", "position", 1761709211), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [rs, re, "orange"], null)], null)], null);
};
ocr_visualizer.client2.build_substitution_highlight = function build_substitution_highlight(p__9564) {
  var vec__9567 = p__9564;
  var _ = cljs.core.nth.call(null, vec__9567, 0, null);
  var vec__9568 = cljs.core.nth.call(null, vec__9567, 1, null);
  var l = cljs.core.nth.call(null, vec__9568, 0, null);
  var r = cljs.core.nth.call(null, vec__9568, 1, null);
  var error = vec__9567;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "type", "type", 1017479852), new cljs.core.Keyword(null, "substitution", "substitution", 1840051823), new cljs.core.Keyword(null, "error", "error", 1110689146), error, new cljs.core.Keyword(null, "position", "position", 1761709211), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [l, l + 1, "#00FFFF"], 
  null)], null), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "type", "type", 1017479852), new cljs.core.Keyword(null, "substitution", "substitution", 1840051823), new cljs.core.Keyword(null, "error", "error", 1110689146), error, new cljs.core.Keyword(null, "position", "position", 1761709211), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [r, r + 1, "#00FFFF"], null)], null)], null);
};
ocr_visualizer.client2.get_position = function() {
  var method_table__4462__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var prefer_table__4463__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var method_cache__4464__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var cached_hierarchy__4465__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var hierarchy__4466__auto__ = cljs.core.get.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "hierarchy", "hierarchy", 3129050535), cljs.core.get_global_hierarchy.call(null));
  return new cljs.core.MultiFn("get-position", function(a, b) {
    return a;
  }, new cljs.core.Keyword(null, "default", "default", 2558708147), hierarchy__4466__auto__, method_table__4462__auto__, prefer_table__4463__auto__, method_cache__4464__auto__, cached_hierarchy__4465__auto__);
}();
cljs.core._add_method.call(null, ocr_visualizer.client2.get_position, new cljs.core.Keyword(null, "substitution", "substitution", 1840051823), function(_, p__9569) {
  var vec__9570 = p__9569;
  var ___$1 = cljs.core.nth.call(null, vec__9570, 0, null);
  var vec__9571 = cljs.core.nth.call(null, vec__9570, 1, null);
  var l = cljs.core.nth.call(null, vec__9571, 0, null);
  var r = cljs.core.nth.call(null, vec__9571, 1, null);
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [l, l + 1], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [r, r + 1], null)], null);
});
cljs.core._add_method.call(null, ocr_visualizer.client2.get_position, new cljs.core.Keyword(null, "many-to-one", "many-to-one", 4715821748), function(_, p__9572) {
  var vec__9573 = p__9572;
  var ___$1 = cljs.core.nth.call(null, vec__9573, 0, null);
  var vec__9574 = cljs.core.nth.call(null, vec__9573, 1, null);
  var ls = cljs.core.nth.call(null, vec__9574, 0, null);
  var rs = cljs.core.nth.call(null, vec__9574, 1, null);
  var vec__9575 = cljs.core.nth.call(null, vec__9573, 2, null);
  var le = cljs.core.nth.call(null, vec__9575, 0, null);
  var re = cljs.core.nth.call(null, vec__9575, 1, null);
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [ls, le + 1], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [rs, re], null)], null);
});
cljs.core._add_method.call(null, ocr_visualizer.client2.get_position, new cljs.core.Keyword(null, "one-to-many", "one-to-many", 1025879420), function(_, p__9576) {
  var vec__9577 = p__9576;
  var ___$1 = cljs.core.nth.call(null, vec__9577, 0, null);
  var vec__9578 = cljs.core.nth.call(null, vec__9577, 1, null);
  var ls = cljs.core.nth.call(null, vec__9578, 0, null);
  var rs = cljs.core.nth.call(null, vec__9578, 1, null);
  var vec__9579 = cljs.core.nth.call(null, vec__9577, 2, null);
  var le = cljs.core.nth.call(null, vec__9579, 0, null);
  var re = cljs.core.nth.call(null, vec__9579, 1, null);
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [ls, le], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [rs, re + 1], null)], null);
});
cljs.core._add_method.call(null, ocr_visualizer.client2.get_position, new cljs.core.Keyword(null, "insertion", "insertion", 629449249), function(_, p__9580) {
  var vec__9581 = p__9580;
  var ___$1 = cljs.core.nth.call(null, vec__9581, 0, null);
  var vec__9582 = cljs.core.nth.call(null, vec__9581, 1, null);
  var l = cljs.core.nth.call(null, vec__9582, 0, null);
  var r = cljs.core.nth.call(null, vec__9582, 1, null);
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [l, l], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [r, r + 1], null)], null);
});
cljs.core._add_method.call(null, ocr_visualizer.client2.get_position, new cljs.core.Keyword(null, "deletion", "deletion", 1833621312), function(_, p__9583) {
  var vec__9584 = p__9583;
  var ___$1 = cljs.core.nth.call(null, vec__9584, 0, null);
  var vec__9585 = cljs.core.nth.call(null, vec__9584, 1, null);
  var l = cljs.core.nth.call(null, vec__9585, 0, null);
  var r = cljs.core.nth.call(null, vec__9585, 1, null);
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [l, l + 1], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [r, r], null)], null);
});
ocr_visualizer.client2.empty_sign = "|";
ocr_visualizer.client2.get_text = function get_text(p__9586, text) {
  var vec__9588 = p__9586;
  var start = cljs.core.nth.call(null, vec__9588, 0, null);
  var end = cljs.core.nth.call(null, vec__9588, 1, null);
  var t = text.substring(start, end);
  if (!cljs.core._EQ_.call(null, t, "")) {
    return t;
  } else {
    return ocr_visualizer.client2.empty_sign;
  }
};
ocr_visualizer.client2.make_highlight = function make_highlight(error, type, a, b, page_index) {
  var positionlr = ocr_visualizer.client2.get_position.call(null, type, error);
  var textlr = cljs.core.mapv.call(null, ocr_visualizer.client2.get_text, positionlr, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [a, b], null));
  var color = cljs.core.get.call(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "substitution", "substitution", 1840051823), "#00FFFF", new cljs.core.Keyword(null, "insertion", "insertion", 629449249), "green", new cljs.core.Keyword(null, "deletion", "deletion", 1833621312), "red", new cljs.core.Keyword(null, "one-to-many", "one-to-many", 1025879420), "yellow", new cljs.core.Keyword(null, "many-to-one", "many-to-one", 4715821748), "orange"], null), type);
  return cljs.core.mapv.call(null, function(pos, text, lr) {
    return new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "type", "type", 1017479852), type, new cljs.core.Keyword(null, "position", "position", 1761709211), pos, new cljs.core.Keyword(null, "color", "color", 1108746965), color, new cljs.core.Keyword(null, "text", "text", 1017460895), text, new cljs.core.Keyword(null, "error", "error", 1110689146), error, new cljs.core.Keyword(null, "id", "id", 1013907597), [cljs.core.str(page_index), cljs.core.str("-"), cljs.core.str(error), 
    cljs.core.str("-"), cljs.core.str(lr)].join("")], null);
  }, positionlr, textlr, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["l", "r"], null));
};
ocr_visualizer.client2.get_type = function get_type(error) {
  var vec__9590 = cljs.core.first.call(null, error);
  var a = cljs.core.nth.call(null, vec__9590, 0, null);
  var b = cljs.core.nth.call(null, vec__9590, 1, null);
  if (cljs.core._EQ_.call(null, a, 8)) {
    return new cljs.core.Keyword(null, "insertion", "insertion", 629449249);
  } else {
    if (cljs.core._EQ_.call(null, b, 8)) {
      return new cljs.core.Keyword(null, "deletion", "deletion", 1833621312);
    } else {
      if (cljs.core._EQ_.call(null, b, 7)) {
        return new cljs.core.Keyword(null, "one-to-many", "one-to-many", 1025879420);
      } else {
        if (cljs.core._EQ_.call(null, a, 7)) {
          return new cljs.core.Keyword(null, "many-to-one", "many-to-one", 4715821748);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            return new cljs.core.Keyword(null, "substitution", "substitution", 1840051823);
          } else {
            return null;
          }
        }
      }
    }
  }
};
ocr_visualizer.client2.get_type.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, 1], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [3, 3], null)], null));
ocr_visualizer.client2.build_highlight = function build_highlight(error, texta, textb, page_index) {
  var type = ocr_visualizer.client2.get_type.call(null, error);
  return ocr_visualizer.client2.make_highlight.call(null, error, type, texta, textb, page_index);
};
ocr_visualizer.client2.highlight_text = function highlight_text(text, positions) {
  return cljs.core.apply.call(null, cljs.core.str, cljs.core.conj.call(null, cljs.core.second.call(null, cljs.core.reduce.call(null, function(p__9595, p__9596) {
    var vec__9597 = p__9595;
    var pos = cljs.core.nth.call(null, vec__9597, 0, null);
    var substrings = cljs.core.nth.call(null, vec__9597, 1, null);
    var vec__9598 = p__9596;
    var nstart = cljs.core.nth.call(null, vec__9598, 0, null);
    var nend = cljs.core.nth.call(null, vec__9598, 1, null);
    var color = cljs.core.nth.call(null, vec__9598, 2, null);
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [nend, cljs.core.conj.call(null, substrings, text.substring(pos, nstart), ocr_visualizer.client2.highlight.call(null, text.substring(nstart, nend), color))], null);
  }, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, cljs.core.PersistentVector.EMPTY], null), positions)), text.substring(cljs.core.second.call(null, cljs.core.last.call(null, positions)), cljs.core.count.call(null, text))));
};
ocr_visualizer.client2.build_highlights = function build_highlights(errors, a, b, page_index) {
  var x = cljs.core.reduce.call(null, function(p__9607, error) {
    var vec__9608 = p__9607;
    var posl = cljs.core.nth.call(null, vec__9608, 0, null);
    var hls_left = cljs.core.nth.call(null, vec__9608, 1, null);
    var posr = cljs.core.nth.call(null, vec__9608, 2, null);
    var hls_right = cljs.core.nth.call(null, vec__9608, 3, null);
    var vec__9609 = ocr_visualizer.client2.build_highlight.call(null, error, a, b, page_index);
    var map__9610 = cljs.core.nth.call(null, vec__9609, 0, null);
    var map__9610__$1 = cljs.core.seq_QMARK_.call(null, map__9610) ? cljs.core.apply.call(null, cljs.core.hash_map, map__9610) : map__9610;
    var hl_l = map__9610__$1;
    var vec__9611 = cljs.core.get.call(null, map__9610__$1, new cljs.core.Keyword(null, "position", "position", 1761709211));
    var ls = cljs.core.nth.call(null, vec__9611, 0, null);
    var le = cljs.core.nth.call(null, vec__9611, 1, null);
    var map__9612 = cljs.core.nth.call(null, vec__9609, 1, null);
    var map__9612__$1 = cljs.core.seq_QMARK_.call(null, map__9612) ? cljs.core.apply.call(null, cljs.core.hash_map, map__9612) : map__9612;
    var hl_r = map__9612__$1;
    var vec__9613 = cljs.core.get.call(null, map__9612__$1, new cljs.core.Keyword(null, "position", "position", 1761709211));
    var rs = cljs.core.nth.call(null, vec__9613, 0, null);
    var re = cljs.core.nth.call(null, vec__9613, 1, null);
    return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [le, cljs.core.conj.call(null, hls_left, a.substring(posl, ls), hl_l), re, cljs.core.conj.call(null, hls_right, b.substring(posr, rs), hl_r)], null);
  }, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, cljs.core.PersistentVector.EMPTY, 0, cljs.core.PersistentVector.EMPTY], null), errors);
  var x__$1 = function() {
    var vec__9614 = x;
    var le = cljs.core.nth.call(null, vec__9614, 0, null);
    var hls = cljs.core.nth.call(null, vec__9614, 1, null);
    var re = cljs.core.nth.call(null, vec__9614, 2, null);
    var hlr = cljs.core.nth.call(null, vec__9614, 3, null);
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.conj.call(null, hls, a.substring(le, cljs.core.count.call(null, a))), cljs.core.conj.call(null, hlr, b.substring(re, cljs.core.count.call(null, b)))], null);
  }();
  return x__$1;
};
ocr_visualizer.client2.fill_highlights = function fill_highlights(r) {
  var errors = cljs.core.map.call(null, function(p1__9615_SHARP_) {
    return cljs.reader.read_string.call(null, domina.html.call(null, domina.by_id.call(null, [cljs.core.str("errors-"), cljs.core.str(p1__9615_SHARP_)].join(""))));
  }, r);
  var hl = cljs.core.map.call(null, function(errors) {
    return function(errors__$1) {
      var iter__4321__auto__ = function(errors) {
        return function iter__9620(s__9621) {
          return new cljs.core.LazySeq(null, function(errors) {
            return function() {
              var s__9621__$1 = s__9621;
              while (true) {
                var temp__4092__auto__ = cljs.core.seq.call(null, s__9621__$1);
                if (temp__4092__auto__) {
                  var s__9621__$2 = temp__4092__auto__;
                  if (cljs.core.chunked_seq_QMARK_.call(null, s__9621__$2)) {
                    var c__4319__auto__ = cljs.core.chunk_first.call(null, s__9621__$2);
                    var size__4320__auto__ = cljs.core.count.call(null, c__4319__auto__);
                    var b__9623 = cljs.core.chunk_buffer.call(null, size__4320__auto__);
                    if (function() {
                      var i__9622 = 0;
                      while (true) {
                        if (i__9622 < size__4320__auto__) {
                          var e = cljs.core._nth.call(null, c__4319__auto__, i__9622);
                          cljs.core.chunk_append.call(null, b__9623, ocr_visualizer.client2.highlight.call(null, e));
                          var G__9624 = i__9622 + 1;
                          i__9622 = G__9624;
                          continue;
                        } else {
                          return true;
                        }
                        break;
                      }
                    }()) {
                      return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__9623), iter__9620.call(null, cljs.core.chunk_rest.call(null, s__9621__$2)));
                    } else {
                      return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__9623), null);
                    }
                  } else {
                    var e = cljs.core.first.call(null, s__9621__$2);
                    return cljs.core.cons.call(null, ocr_visualizer.client2.highlight.call(null, e), iter__9620.call(null, cljs.core.rest.call(null, s__9621__$2)));
                  }
                } else {
                  return null;
                }
                break;
              }
            };
          }(errors), null, null);
        };
      }(errors);
      return iter__4321__auto__.call(null, errors__$1);
    };
  }(errors), errors);
  cljs.core.reset_BANG_.call(null, ocr_visualizer.client2.highlights_left, cljs.core.map.call(null, function(hl__$1) {
    return cljs.core.distinct.call(null, cljs.core.map.call(null, cljs.core.first, hl__$1));
  }, hl));
  return cljs.core.reset_BANG_.call(null, ocr_visualizer.client2.highlights_right, cljs.core.map.call(null, function(hl__$1) {
    return cljs.core.distinct.call(null, cljs.core.map.call(null, cljs.core.second, hl__$1));
  }, hl));
};
ocr_visualizer.client2.show_highlights = function show_highlights(r) {
  var n__4452__auto__ = cljs.core.count.call(null, r);
  var i = 0;
  while (true) {
    if (i < n__4452__auto__) {
      domina.set_html_BANG_.call(null, domina.by_id.call(null, [cljs.core.str("left-"), cljs.core.str(i)].join("")), ocr_visualizer.client2.highlight_text.call(null, cljs.core.nth.call(null, cljs.core.deref.call(null, ocr_visualizer.client2.text_left), i), cljs.core.nth.call(null, cljs.core.deref.call(null, ocr_visualizer.client2.highlights_left), i)));
      domina.set_html_BANG_.call(null, domina.by_id.call(null, [cljs.core.str("right-"), cljs.core.str(i)].join("")), ocr_visualizer.client2.highlight_text.call(null, cljs.core.nth.call(null, cljs.core.deref.call(null, ocr_visualizer.client2.text_right), i), cljs.core.nth.call(null, cljs.core.deref.call(null, ocr_visualizer.client2.highlights_right), i)));
      var G__9625 = i + 1;
      i = G__9625;
      continue;
    } else {
      return null;
    }
    break;
  }
};
ocr_visualizer.client2.fill_table = function fill_table(r) {
  var n__4452__auto__ = cljs.core.count.call(null, r);
  var i = 0;
  while (true) {
    if (i < n__4452__auto__) {
      var errors_9643 = cljs.reader.read_string.call(null, domina.html.call(null, domina.by_id.call(null, [cljs.core.str("errors-"), cljs.core.str(i)].join(""))));
      var kinds_9644 = cljs.core.group_by.call(null, cljs.core.first, errors_9643);
      var rows_9645 = function() {
        var iter__4321__auto__ = function(i, errors_9643, kinds_9644) {
          return function iter__9635(s__9636) {
            return new cljs.core.LazySeq(null, function(i, errors_9643, kinds_9644) {
              return function() {
                var s__9636__$1 = s__9636;
                while (true) {
                  var temp__4092__auto__ = cljs.core.seq.call(null, s__9636__$1);
                  if (temp__4092__auto__) {
                    var s__9636__$2 = temp__4092__auto__;
                    if (cljs.core.chunked_seq_QMARK_.call(null, s__9636__$2)) {
                      var c__4319__auto__ = cljs.core.chunk_first.call(null, s__9636__$2);
                      var size__4320__auto__ = cljs.core.count.call(null, c__4319__auto__);
                      var b__9638 = cljs.core.chunk_buffer.call(null, size__4320__auto__);
                      if (function() {
                        var i__9637 = 0;
                        while (true) {
                          if (i__9637 < size__4320__auto__) {
                            var vec__9641 = cljs.core._nth.call(null, c__4319__auto__, i__9637);
                            var code = cljs.core.nth.call(null, vec__9641, 0, null);
                            var positions = cljs.core.nth.call(null, vec__9641, 1, null);
                            cljs.core.chunk_append.call(null, b__9638, [cljs.core.str("\x3ctr\x3e"), cljs.core.str("\x3ctd\x3e"), cljs.core.str(code), cljs.core.str("\x3c/td\x3e"), cljs.core.str("\x3ctd\x3e"), cljs.core.str(cljs.core.count.call(null, positions)), cljs.core.str("\x3c/td\x3e"), cljs.core.str("\x3ctd\x3e"), cljs.core.str(positions), cljs.core.str("\x3c/td\x3e"), cljs.core.str("\x3ctd\x3e"), cljs.core.str(cljs.core.nth.call(null, cljs.core.first.call(null, ocr_visualizer.client2.highlight.call(null, 
                            new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [code, cljs.core.first.call(null, positions)], null))), 2)), cljs.core.str("\x3c/tr\x3e")].join(""));
                            var G__9647 = i__9637 + 1;
                            i__9637 = G__9647;
                            continue;
                          } else {
                            return true;
                          }
                          break;
                        }
                      }()) {
                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__9638), iter__9635.call(null, cljs.core.chunk_rest.call(null, s__9636__$2)));
                      } else {
                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__9638), null);
                      }
                    } else {
                      var vec__9642 = cljs.core.first.call(null, s__9636__$2);
                      var code = cljs.core.nth.call(null, vec__9642, 0, null);
                      var positions = cljs.core.nth.call(null, vec__9642, 1, null);
                      return cljs.core.cons.call(null, [cljs.core.str("\x3ctr\x3e"), cljs.core.str("\x3ctd\x3e"), cljs.core.str(code), cljs.core.str("\x3c/td\x3e"), cljs.core.str("\x3ctd\x3e"), cljs.core.str(cljs.core.count.call(null, positions)), cljs.core.str("\x3c/td\x3e"), cljs.core.str("\x3ctd\x3e"), cljs.core.str(positions), cljs.core.str("\x3c/td\x3e"), cljs.core.str("\x3ctd\x3e"), cljs.core.str(cljs.core.nth.call(null, cljs.core.first.call(null, ocr_visualizer.client2.highlight.call(null, 
                      new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [code, cljs.core.first.call(null, positions)], null))), 2)), cljs.core.str("\x3c/tr\x3e")].join(""), iter__9635.call(null, cljs.core.rest.call(null, s__9636__$2)));
                    }
                  } else {
                    return null;
                  }
                  break;
                }
              };
            }(i, errors_9643, kinds_9644), null, null);
          };
        }(i, errors_9643, kinds_9644);
        return iter__4321__auto__.call(null, cljs.core.sort_by.call(null, cljs.core.comp.call(null, function(i, iter__4321__auto__, errors_9643, kinds_9644) {
          return function(p1__9626_SHARP_) {
            return cljs.core.reduce.call(null, cljs.core._PLUS_, p1__9626_SHARP_);
          };
        }(i, iter__4321__auto__, errors_9643, kinds_9644), cljs.core.first), kinds_9644));
      }();
      var table_9646 = domina.html.call(null, domina.by_id.call(null, [cljs.core.str("table-"), cljs.core.str(i)].join("")));
      domina.set_html_BANG_.call(null, domina.by_id.call(null, [cljs.core.str("table-"), cljs.core.str(i)].join("")), [cljs.core.str(table_9646.substring(0, cljs.core.count.call(null, table_9646) - 8)), cljs.core.str(cljs.core.apply.call(null, cljs.core.str, rows_9645))].join(""));
      var G__9648 = i + 1;
      i = G__9648;
      continue;
    } else {
      return null;
    }
    break;
  }
};
ocr_visualizer.client2.visualize_errors = function visualize_errors() {
  var i = cljs.core.range.call(null, cljs.core.count.call(null, domina.by_class.call(null, "wrap")));
  ocr_visualizer.client2.save_texts.call(null, i);
  ocr_visualizer.client2.fill_highlights.call(null, i);
  ocr_visualizer.client2.show_highlights.call(null, i);
  return ocr_visualizer.client2.fill_table.call(null, i);
};
ocr_visualizer.client2.compute_highlights = function compute_highlights(left, right, error_codes) {
  var highlights = cljs.core.map.call(null, ocr_visualizer.client2.light, error_codes);
  var left_hl = cljs.core.map.call(null, cljs.core.first, highlights);
  var right_hl = cljs.core.map.call(null, cljs.core.second, highlights);
  return null;
};
ocr_visualizer.client2.app_state = cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "pages", "pages", 1120330550), cljs.core.PersistentVector.EMPTY, new cljs.core.Keyword(null, "available-pages", "available-pages", 4626810674), cljs.core.PersistentVector.EMPTY], null));
ocr_visualizer.client2.highlight_view = function highlight_view(highlight, owner) {
  if (typeof ocr_visualizer.client2.t9652 !== "undefined") {
  } else {
    ocr_visualizer.client2.t9652 = function(owner, highlight, highlight_view, meta9653) {
      this.owner = owner;
      this.highlight = highlight;
      this.highlight_view = highlight_view;
      this.meta9653 = meta9653;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    ocr_visualizer.client2.t9652.cljs$lang$type = true;
    ocr_visualizer.client2.t9652.cljs$lang$ctorStr = "ocr-visualizer.client2/t9652";
    ocr_visualizer.client2.t9652.cljs$lang$ctorPrWriter = function(this__4171__auto__, writer__4172__auto__, opt__4173__auto__) {
      return cljs.core._write.call(null, writer__4172__auto__, "ocr-visualizer.client2/t9652");
    };
    ocr_visualizer.client2.t9652.prototype.om$core$IRender$ = true;
    ocr_visualizer.client2.t9652.prototype.om$core$IRender$render$arity$1 = function(this$) {
      var self__ = this;
      var this$__$1 = this;
      if (typeof self__.highlight === "string") {
        return React.DOM.span(null, self__.highlight.replace(/\r?\n/, "\\n"));
      } else {
        return React.DOM.span({"id":(new cljs.core.Keyword(null, "id", "id", 1013907597)).cljs$core$IFn$_invoke$arity$1(self__.highlight), "style":{"backgroundColor":(new cljs.core.Keyword(null, "color", "color", 1108746965)).cljs$core$IFn$_invoke$arity$1(self__.highlight)}}, (new cljs.core.Keyword(null, "text", "text", 1017460895)).cljs$core$IFn$_invoke$arity$1(self__.highlight).replace(/\r?\n/, "\\n"));
      }
    };
    ocr_visualizer.client2.t9652.prototype.cljs$core$IMeta$_meta$arity$1 = function(_9654) {
      var self__ = this;
      var _9654__$1 = this;
      return self__.meta9653;
    };
    ocr_visualizer.client2.t9652.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_9654, meta9653__$1) {
      var self__ = this;
      var _9654__$1 = this;
      return new ocr_visualizer.client2.t9652(self__.owner, self__.highlight, self__.highlight_view, meta9653__$1);
    };
    ocr_visualizer.client2.__GT_t9652 = function __GT_t9652(owner__$1, highlight__$1, highlight_view__$1, meta9653) {
      return new ocr_visualizer.client2.t9652(owner__$1, highlight__$1, highlight_view__$1, meta9653);
    };
  }
  return new ocr_visualizer.client2.t9652(owner, highlight, highlight_view, null);
};
ocr_visualizer.client2.goto_and_mark = function goto_and_mark(error_code, i) {
  var idl = [cljs.core.str(i), cljs.core.str("-"), cljs.core.str(error_code), cljs.core.str("-l")].join("");
  var idr = [cljs.core.str(i), cljs.core.str("-"), cljs.core.str(error_code), cljs.core.str("-r")].join("");
  document.getElementById(idl).scrollIntoView(false);
  domina.add_class_BANG_.call(null, domina.by_id.call(null, idl), "boxed");
  domina.add_class_BANG_.call(null, domina.by_id.call(null, idr), "boxed");
  return setTimeout(function() {
    cljs.core.prn.call(null, "unsetting");
    domina.remove_class_BANG_.call(null, domina.by_id.call(null, idl), "boxed");
    return domina.remove_class_BANG_.call(null, domina.by_id.call(null, idr), "boxed");
  }, 2E3);
};
ocr_visualizer.client2.error_code_link_view = function error_code_link_view(p__9655, owner) {
  var vec__9661 = p__9655;
  var error_code = cljs.core.nth.call(null, vec__9661, 0, null);
  var left = cljs.core.nth.call(null, vec__9661, 1, null);
  var right = cljs.core.nth.call(null, vec__9661, 2, null);
  var i = cljs.core.nth.call(null, vec__9661, 3, null);
  if (typeof ocr_visualizer.client2.t9662 !== "undefined") {
  } else {
    ocr_visualizer.client2.t9662 = function(i, right, left, error_code, vec__9661, owner, p__9655, error_code_link_view, meta9663) {
      this.i = i;
      this.right = right;
      this.left = left;
      this.error_code = error_code;
      this.vec__9661 = vec__9661;
      this.owner = owner;
      this.p__9655 = p__9655;
      this.error_code_link_view = error_code_link_view;
      this.meta9663 = meta9663;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    ocr_visualizer.client2.t9662.cljs$lang$type = true;
    ocr_visualizer.client2.t9662.cljs$lang$ctorStr = "ocr-visualizer.client2/t9662";
    ocr_visualizer.client2.t9662.cljs$lang$ctorPrWriter = function(this__4171__auto__, writer__4172__auto__, opt__4173__auto__) {
      return cljs.core._write.call(null, writer__4172__auto__, "ocr-visualizer.client2/t9662");
    };
    ocr_visualizer.client2.t9662.prototype.om$core$IRender$ = true;
    ocr_visualizer.client2.t9662.prototype.om$core$IRender$render$arity$1 = function(this$) {
      var self__ = this;
      var this$__$1 = this;
      var vec__9665 = ocr_visualizer.client2.build_highlight.call(null, self__.error_code, self__.left, self__.right, self__.i);
      var hl = cljs.core.nth.call(null, vec__9665, 0, null);
      var hr = cljs.core.nth.call(null, vec__9665, 1, null);
      return React.DOM.a({"onClick":function() {
        var G__9666__delegate = function(args) {
          return ocr_visualizer.client2.goto_and_mark.call(null, self__.error_code, self__.i);
        };
        var G__9666 = function(var_args) {
          var args = null;
          if (arguments.length > 0) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
          }
          return G__9666__delegate.call(this, args);
        };
        G__9666.cljs$lang$maxFixedArity = 0;
        G__9666.cljs$lang$applyTo = function(arglist__9667) {
          var args = cljs.core.seq(arglist__9667);
          return G__9666__delegate(args);
        };
        G__9666.cljs$core$IFn$_invoke$arity$variadic = G__9666__delegate;
        return G__9666;
      }()}, [cljs.core.str(cljs.core.first.call(null, self__.error_code)), cljs.core.str(":"), cljs.core.str((new cljs.core.Keyword(null, "text", "text", 1017460895)).cljs$core$IFn$_invoke$arity$1(hl)), cljs.core.str("-\x3e"), cljs.core.str((new cljs.core.Keyword(null, "text", "text", 1017460895)).cljs$core$IFn$_invoke$arity$1(hr))].join(""));
    };
    ocr_visualizer.client2.t9662.prototype.cljs$core$IMeta$_meta$arity$1 = function(_9664) {
      var self__ = this;
      var _9664__$1 = this;
      return self__.meta9663;
    };
    ocr_visualizer.client2.t9662.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_9664, meta9663__$1) {
      var self__ = this;
      var _9664__$1 = this;
      return new ocr_visualizer.client2.t9662(self__.i, self__.right, self__.left, self__.error_code, self__.vec__9661, self__.owner, self__.p__9655, self__.error_code_link_view, meta9663__$1);
    };
    ocr_visualizer.client2.__GT_t9662 = function __GT_t9662(i__$1, right__$1, left__$1, error_code__$1, vec__9661__$1, owner__$1, p__9655__$1, error_code_link_view__$1, meta9663) {
      return new ocr_visualizer.client2.t9662(i__$1, right__$1, left__$1, error_code__$1, vec__9661__$1, owner__$1, p__9655__$1, error_code_link_view__$1, meta9663);
    };
  }
  return new ocr_visualizer.client2.t9662(i, right, left, error_code, vec__9661, owner, p__9655, error_code_link_view, null);
};
ocr_visualizer.client2.table_view = function table_view(p__9668, owner) {
  var vec__9681 = p__9668;
  var error_codes = cljs.core.nth.call(null, vec__9681, 0, null);
  var left = cljs.core.nth.call(null, vec__9681, 1, null);
  var right = cljs.core.nth.call(null, vec__9681, 2, null);
  var i = cljs.core.nth.call(null, vec__9681, 3, null);
  if (typeof ocr_visualizer.client2.t9682 !== "undefined") {
  } else {
    ocr_visualizer.client2.t9682 = function(i, right, left, error_codes, vec__9681, owner, p__9668, table_view, meta9683) {
      this.i = i;
      this.right = right;
      this.left = left;
      this.error_codes = error_codes;
      this.vec__9681 = vec__9681;
      this.owner = owner;
      this.p__9668 = p__9668;
      this.table_view = table_view;
      this.meta9683 = meta9683;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    ocr_visualizer.client2.t9682.cljs$lang$type = true;
    ocr_visualizer.client2.t9682.cljs$lang$ctorStr = "ocr-visualizer.client2/t9682";
    ocr_visualizer.client2.t9682.cljs$lang$ctorPrWriter = function(this__4171__auto__, writer__4172__auto__, opt__4173__auto__) {
      return cljs.core._write.call(null, writer__4172__auto__, "ocr-visualizer.client2/t9682");
    };
    ocr_visualizer.client2.t9682.prototype.om$core$IRender$ = true;
    ocr_visualizer.client2.t9682.prototype.om$core$IRender$render$arity$1 = function(this$) {
      var self__ = this;
      var this$__$1 = this;
      var categories = cljs.core.group_by.call(null, ocr_visualizer.client2.get_type, self__.error_codes);
      return React.DOM.div({"className":"table-div"}, React.DOM.table({"id":[cljs.core.str("table-"), cljs.core.str(self__.i)].join(""), "className":"table"}, cljs.core.apply.call(null, om.dom.tbody, null, React.DOM.tr(null, React.DOM.th(null, "Fehlerart"), React.DOM.th(null, "Fehler"), React.DOM.th(null, "Anzahl")), function() {
        var iter__4321__auto__ = function iter__9685(s__9686) {
          return new cljs.core.LazySeq(null, function() {
            var s__9686__$1 = s__9686;
            while (true) {
              var temp__4092__auto__ = cljs.core.seq.call(null, s__9686__$1);
              if (temp__4092__auto__) {
                var s__9686__$2 = temp__4092__auto__;
                if (cljs.core.chunked_seq_QMARK_.call(null, s__9686__$2)) {
                  var c__4319__auto__ = cljs.core.chunk_first.call(null, s__9686__$2);
                  var size__4320__auto__ = cljs.core.count.call(null, c__4319__auto__);
                  var b__9688 = cljs.core.chunk_buffer.call(null, size__4320__auto__);
                  if (function() {
                    var i__9687 = 0;
                    while (true) {
                      if (i__9687 < size__4320__auto__) {
                        var vec__9691 = cljs.core._nth.call(null, c__4319__auto__, i__9687);
                        var k = cljs.core.nth.call(null, vec__9691, 0, null);
                        var codes = cljs.core.nth.call(null, vec__9691, 1, null);
                        cljs.core.chunk_append.call(null, b__9688, React.DOM.tr(null, React.DOM.td(null, cljs.core.name.call(null, k)), cljs.core.apply.call(null, om.dom.td, null, om.core.build_all.call(null, ocr_visualizer.client2.error_code_link_view, cljs.core.map.call(null, function(i__9687, vec__9691, k, codes, c__4319__auto__, size__4320__auto__, b__9688, s__9686__$2, temp__4092__auto__) {
                          return function(a) {
                            return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [a, self__.left, self__.right, self__.i], null);
                          };
                        }(i__9687, vec__9691, k, codes, c__4319__auto__, size__4320__auto__, b__9688, s__9686__$2, temp__4092__auto__), codes))), React.DOM.td(null, [cljs.core.str(cljs.core.count.call(null, codes))].join(""))));
                        var G__9693 = i__9687 + 1;
                        i__9687 = G__9693;
                        continue;
                      } else {
                        return true;
                      }
                      break;
                    }
                  }()) {
                    return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__9688), iter__9685.call(null, cljs.core.chunk_rest.call(null, s__9686__$2)));
                  } else {
                    return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__9688), null);
                  }
                } else {
                  var vec__9692 = cljs.core.first.call(null, s__9686__$2);
                  var k = cljs.core.nth.call(null, vec__9692, 0, null);
                  var codes = cljs.core.nth.call(null, vec__9692, 1, null);
                  return cljs.core.cons.call(null, React.DOM.tr(null, React.DOM.td(null, cljs.core.name.call(null, k)), cljs.core.apply.call(null, om.dom.td, null, om.core.build_all.call(null, ocr_visualizer.client2.error_code_link_view, cljs.core.map.call(null, function(vec__9692, k, codes, s__9686__$2, temp__4092__auto__) {
                    return function(a) {
                      return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [a, self__.left, self__.right, self__.i], null);
                    };
                  }(vec__9692, k, codes, s__9686__$2, temp__4092__auto__), codes))), React.DOM.td(null, [cljs.core.str(cljs.core.count.call(null, codes))].join(""))), iter__9685.call(null, cljs.core.rest.call(null, s__9686__$2)));
                }
              } else {
                return null;
              }
              break;
            }
          }, null, null);
        };
        return iter__4321__auto__.call(null, categories);
      }())));
    };
    ocr_visualizer.client2.t9682.prototype.cljs$core$IMeta$_meta$arity$1 = function(_9684) {
      var self__ = this;
      var _9684__$1 = this;
      return self__.meta9683;
    };
    ocr_visualizer.client2.t9682.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_9684, meta9683__$1) {
      var self__ = this;
      var _9684__$1 = this;
      return new ocr_visualizer.client2.t9682(self__.i, self__.right, self__.left, self__.error_codes, self__.vec__9681, self__.owner, self__.p__9668, self__.table_view, meta9683__$1);
    };
    ocr_visualizer.client2.__GT_t9682 = function __GT_t9682(i__$1, right__$1, left__$1, error_codes__$1, vec__9681__$1, owner__$1, p__9668__$1, table_view__$1, meta9683) {
      return new ocr_visualizer.client2.t9682(i__$1, right__$1, left__$1, error_codes__$1, vec__9681__$1, owner__$1, p__9668__$1, table_view__$1, meta9683);
    };
  }
  return new ocr_visualizer.client2.t9682(i, right, left, error_codes, vec__9681, owner, p__9668, table_view, null);
};
ocr_visualizer.client2.page_summary_view = function page_summary_view(p__9694, owner) {
  var vec__9700 = p__9694;
  var map__9701 = cljs.core.nth.call(null, vec__9700, 0, null);
  var map__9701__$1 = cljs.core.seq_QMARK_.call(null, map__9701) ? cljs.core.apply.call(null, cljs.core.hash_map, map__9701) : map__9701;
  var name = cljs.core.get.call(null, map__9701__$1, new cljs.core.Keyword(null, "name", "name", 1017277949));
  var right = cljs.core.get.call(null, map__9701__$1, new cljs.core.Keyword(null, "right", "right", 1122416014));
  var left = cljs.core.get.call(null, map__9701__$1, new cljs.core.Keyword(null, "left", "left", 1017222009));
  var error_codes = cljs.core.get.call(null, map__9701__$1, new cljs.core.Keyword(null, "error-codes", "error-codes", 3044098963));
  var i = cljs.core.nth.call(null, vec__9700, 1, null);
  if (typeof ocr_visualizer.client2.t9702 !== "undefined") {
  } else {
    ocr_visualizer.client2.t9702 = function(error_codes, p__9694, vec__9700, name, map__9701, owner, page_summary_view, i, right, left, meta9703) {
      this.error_codes = error_codes;
      this.p__9694 = p__9694;
      this.vec__9700 = vec__9700;
      this.name = name;
      this.map__9701 = map__9701;
      this.owner = owner;
      this.page_summary_view = page_summary_view;
      this.i = i;
      this.right = right;
      this.left = left;
      this.meta9703 = meta9703;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    ocr_visualizer.client2.t9702.cljs$lang$type = true;
    ocr_visualizer.client2.t9702.cljs$lang$ctorStr = "ocr-visualizer.client2/t9702";
    ocr_visualizer.client2.t9702.cljs$lang$ctorPrWriter = function(this__4171__auto__, writer__4172__auto__, opt__4173__auto__) {
      return cljs.core._write.call(null, writer__4172__auto__, "ocr-visualizer.client2/t9702");
    };
    ocr_visualizer.client2.t9702.prototype.om$core$IRender$ = true;
    ocr_visualizer.client2.t9702.prototype.om$core$IRender$render$arity$1 = function(this$) {
      var self__ = this;
      var this$__$1 = this;
      return React.DOM.div({"className":"summary-div"}, React.DOM.p(null, self__.name), om.core.build.call(null, ocr_visualizer.client2.table_view, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.error_codes, self__.left, self__.right, self__.i], null)));
    };
    ocr_visualizer.client2.t9702.prototype.cljs$core$IMeta$_meta$arity$1 = function(_9704) {
      var self__ = this;
      var _9704__$1 = this;
      return self__.meta9703;
    };
    ocr_visualizer.client2.t9702.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_9704, meta9703__$1) {
      var self__ = this;
      var _9704__$1 = this;
      return new ocr_visualizer.client2.t9702(self__.error_codes, self__.p__9694, self__.vec__9700, self__.name, self__.map__9701, self__.owner, self__.page_summary_view, self__.i, self__.right, self__.left, meta9703__$1);
    };
    ocr_visualizer.client2.__GT_t9702 = function __GT_t9702(error_codes__$1, p__9694__$1, vec__9700__$1, name__$1, map__9701__$2, owner__$1, page_summary_view__$1, i__$1, right__$1, left__$1, meta9703) {
      return new ocr_visualizer.client2.t9702(error_codes__$1, p__9694__$1, vec__9700__$1, name__$1, map__9701__$2, owner__$1, page_summary_view__$1, i__$1, right__$1, left__$1, meta9703);
    };
  }
  return new ocr_visualizer.client2.t9702(error_codes, p__9694, vec__9700, name, map__9701__$1, owner, page_summary_view, i, right, left, null);
};
ocr_visualizer.client2.page_view = function page_view(p__9705, owner) {
  var vec__9711 = p__9705;
  var page = cljs.core.nth.call(null, vec__9711, 0, null);
  var i = cljs.core.nth.call(null, vec__9711, 1, null);
  if (typeof ocr_visualizer.client2.t9712 !== "undefined") {
  } else {
    ocr_visualizer.client2.t9712 = function(i, page, vec__9711, owner, p__9705, page_view, meta9713) {
      this.i = i;
      this.page = page;
      this.vec__9711 = vec__9711;
      this.owner = owner;
      this.p__9705 = p__9705;
      this.page_view = page_view;
      this.meta9713 = meta9713;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    ocr_visualizer.client2.t9712.cljs$lang$type = true;
    ocr_visualizer.client2.t9712.cljs$lang$ctorStr = "ocr-visualizer.client2/t9712";
    ocr_visualizer.client2.t9712.cljs$lang$ctorPrWriter = function(this__4171__auto__, writer__4172__auto__, opt__4173__auto__) {
      return cljs.core._write.call(null, writer__4172__auto__, "ocr-visualizer.client2/t9712");
    };
    ocr_visualizer.client2.t9712.prototype.om$core$IRender$ = true;
    ocr_visualizer.client2.t9712.prototype.om$core$IRender$render$arity$1 = function(this$) {
      var self__ = this;
      var this$__$1 = this;
      var vec__9715 = ocr_visualizer.client2.build_highlights.call(null, (new cljs.core.Keyword(null, "error-codes", "error-codes", 3044098963)).cljs$core$IFn$_invoke$arity$1(self__.page), (new cljs.core.Keyword(null, "left", "left", 1017222009)).cljs$core$IFn$_invoke$arity$1(self__.page), (new cljs.core.Keyword(null, "right", "right", 1122416014)).cljs$core$IFn$_invoke$arity$1(self__.page), self__.i);
      var hl = cljs.core.nth.call(null, vec__9715, 0, null);
      var hr = cljs.core.nth.call(null, vec__9715, 1, null);
      var _ = cljs.core.prn.call(null, "hl hr ", hl, hr);
      return React.DOM.div({"className":"wrap"}, om.core.build.call(null, ocr_visualizer.client2.page_summary_view, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.page, self__.i], null)), cljs.core.apply.call(null, om.dom.div, {"id":[cljs.core.str("left-"), cljs.core.str(self__.i)].join(""), "className":"left"}, om.core.build_all.call(null, ocr_visualizer.client2.highlight_view, hl)), cljs.core.apply.call(null, om.dom.div, {"id":[cljs.core.str("right-"), 
      cljs.core.str(self__.i)].join(""), "className":"right"}, om.core.build_all.call(null, ocr_visualizer.client2.highlight_view, hr)));
    };
    ocr_visualizer.client2.t9712.prototype.cljs$core$IMeta$_meta$arity$1 = function(_9714) {
      var self__ = this;
      var _9714__$1 = this;
      return self__.meta9713;
    };
    ocr_visualizer.client2.t9712.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_9714, meta9713__$1) {
      var self__ = this;
      var _9714__$1 = this;
      return new ocr_visualizer.client2.t9712(self__.i, self__.page, self__.vec__9711, self__.owner, self__.p__9705, self__.page_view, meta9713__$1);
    };
    ocr_visualizer.client2.__GT_t9712 = function __GT_t9712(i__$1, page__$1, vec__9711__$1, owner__$1, p__9705__$1, page_view__$1, meta9713) {
      return new ocr_visualizer.client2.t9712(i__$1, page__$1, vec__9711__$1, owner__$1, p__9705__$1, page_view__$1, meta9713);
    };
  }
  return new ocr_visualizer.client2.t9712(i, page, vec__9711, owner, p__9705, page_view, null);
};
ocr_visualizer.client2.pages_view = function pages_view(pages, owner) {
  if (typeof ocr_visualizer.client2.t9719 !== "undefined") {
  } else {
    ocr_visualizer.client2.t9719 = function(owner, pages, pages_view, meta9720) {
      this.owner = owner;
      this.pages = pages;
      this.pages_view = pages_view;
      this.meta9720 = meta9720;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    ocr_visualizer.client2.t9719.cljs$lang$type = true;
    ocr_visualizer.client2.t9719.cljs$lang$ctorStr = "ocr-visualizer.client2/t9719";
    ocr_visualizer.client2.t9719.cljs$lang$ctorPrWriter = function(this__4171__auto__, writer__4172__auto__, opt__4173__auto__) {
      return cljs.core._write.call(null, writer__4172__auto__, "ocr-visualizer.client2/t9719");
    };
    ocr_visualizer.client2.t9719.prototype.om$core$IRender$ = true;
    ocr_visualizer.client2.t9719.prototype.om$core$IRender$render$arity$1 = function(this$) {
      var self__ = this;
      var this$__$1 = this;
      cljs.core.prn.call(null, "hi there");
      return cljs.core.apply.call(null, om.dom.div, null, om.core.build_all.call(null, ocr_visualizer.client2.page_view, cljs.core.map.call(null, function(a, b) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [a, b], null);
      }, self__.pages, cljs.core.range.call(null))));
    };
    ocr_visualizer.client2.t9719.prototype.cljs$core$IMeta$_meta$arity$1 = function(_9721) {
      var self__ = this;
      var _9721__$1 = this;
      return self__.meta9720;
    };
    ocr_visualizer.client2.t9719.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_9721, meta9720__$1) {
      var self__ = this;
      var _9721__$1 = this;
      return new ocr_visualizer.client2.t9719(self__.owner, self__.pages, self__.pages_view, meta9720__$1);
    };
    ocr_visualizer.client2.__GT_t9719 = function __GT_t9719(owner__$1, pages__$1, pages_view__$1, meta9720) {
      return new ocr_visualizer.client2.t9719(owner__$1, pages__$1, pages_view__$1, meta9720);
    };
  }
  return new ocr_visualizer.client2.t9719(owner, pages, pages_view, null);
};
ocr_visualizer.client2.load_or_remove_page = function load_or_remove_page(load_chan, page, id) {
  return cljs.core.async.put_BANG_.call(null, load_chan, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [page, id], null));
};
ocr_visualizer.client2.handle_change = function handle_change(load_chan, selected_idx, page, i) {
  cljs.core.prn.call(null, "handle-change", load_chan, selected_idx, page, i);
  var temp__4090__auto__ = cljs.core.some.call(null, cljs.core.PersistentHashSet.fromArray([page], true), cljs.core.map.call(null, new cljs.core.Keyword(null, "name", "name", 1017277949), cljs.core.get.call(null, cljs.core.deref.call(null, ocr_visualizer.client2.app_state), new cljs.core.Keyword(null, "pages", "pages", 1120330550))));
  if (cljs.core.truth_(temp__4090__auto__)) {
    var p = temp__4090__auto__;
    return cljs.core.swap_BANG_.call(null, ocr_visualizer.client2.app_state, cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "pages", "pages", 1120330550)], null), function(p1__9722_SHARP_) {
      return cljs.core.remove.call(null, cljs.core.comp.call(null, cljs.core.PersistentHashSet.fromArray([page], true), new cljs.core.Keyword(null, "name", "name", 1017277949)), p1__9722_SHARP_);
    });
  } else {
    return ajax.core.GET.call(null, [cljs.core.str("/get-site/"), cljs.core.str(i), cljs.core.str("?bd\x3d"), cljs.core.str((new cljs.core.Keyword(null, "base-directory", "base-directory", 4253837795)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, ocr_visualizer.client2.app_state)))].join(""), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "handler", "handler", 1706707644), function(data) {
      return cljs.core.swap_BANG_.call(null, ocr_visualizer.client2.app_state, cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "pages", "pages", 1120330550)], null), function(p1__9723_SHARP_) {
        return cljs.core.sort_by.call(null, new cljs.core.Keyword(null, "name", "name", 1017277949), cljs.core.concat.call(null, p1__9723_SHARP_, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.assoc.call(null, data, new cljs.core.Keyword(null, "name", "name", 1017277949), page)], null)));
      });
    }], null));
  }
};
ocr_visualizer.client2.page_list_view = function page_list_view(available_pages, owner) {
  if (typeof ocr_visualizer.client2.t9737 !== "undefined") {
  } else {
    ocr_visualizer.client2.t9737 = function(owner, available_pages, page_list_view, meta9738) {
      this.owner = owner;
      this.available_pages = available_pages;
      this.page_list_view = page_list_view;
      this.meta9738 = meta9738;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    ocr_visualizer.client2.t9737.cljs$lang$type = true;
    ocr_visualizer.client2.t9737.cljs$lang$ctorStr = "ocr-visualizer.client2/t9737";
    ocr_visualizer.client2.t9737.cljs$lang$ctorPrWriter = function(this__4171__auto__, writer__4172__auto__, opt__4173__auto__) {
      return cljs.core._write.call(null, writer__4172__auto__, "ocr-visualizer.client2/t9737");
    };
    ocr_visualizer.client2.t9737.prototype.om$core$IRenderState$ = true;
    ocr_visualizer.client2.t9737.prototype.om$core$IRenderState$render_state$arity$2 = function(this$, p__9740) {
      var self__ = this;
      var map__9741 = p__9740;
      var map__9741__$1 = cljs.core.seq_QMARK_.call(null, map__9741) ? cljs.core.apply.call(null, cljs.core.hash_map, map__9741) : map__9741;
      var selected_idx = cljs.core.get.call(null, map__9741__$1, new cljs.core.Keyword(null, "selected-idx", "selected-idx", 3553242109));
      var load_chan = cljs.core.get.call(null, map__9741__$1, new cljs.core.Keyword(null, "load-chan", "load-chan", 2356806475));
      var this$__$1 = this;
      cljs.core.prn.call(null, "available-pages ", self__.available_pages, load_chan);
      return cljs.core.apply.call(null, om.dom.ul, null, function() {
        var iter__4321__auto__ = function iter__9742(s__9743) {
          return new cljs.core.LazySeq(null, function() {
            var s__9743__$1 = s__9743;
            while (true) {
              var temp__4092__auto__ = cljs.core.seq.call(null, s__9743__$1);
              if (temp__4092__auto__) {
                var s__9743__$2 = temp__4092__auto__;
                if (cljs.core.chunked_seq_QMARK_.call(null, s__9743__$2)) {
                  var c__4319__auto__ = cljs.core.chunk_first.call(null, s__9743__$2);
                  var size__4320__auto__ = cljs.core.count.call(null, c__4319__auto__);
                  var b__9745 = cljs.core.chunk_buffer.call(null, size__4320__auto__);
                  if (function() {
                    var i__9744 = 0;
                    while (true) {
                      if (i__9744 < size__4320__auto__) {
                        var vec__9748 = cljs.core._nth.call(null, c__4319__auto__, i__9744);
                        var page = cljs.core.nth.call(null, vec__9748, 0, null);
                        var i = cljs.core.nth.call(null, vec__9748, 1, null);
                        cljs.core.chunk_append.call(null, b__9745, React.DOM.li(null, om.dom.input.call(null, {"onClick":function(i__9744, vec__9748, page, i, c__4319__auto__, size__4320__auto__, b__9745, s__9743__$2, temp__4092__auto__) {
                          return function() {
                            cljs.core.prn.call(null, "called ", load_chan, page, i);
                            return ocr_visualizer.client2.handle_change.call(null, load_chan, selected_idx, page, i);
                          };
                        }(i__9744, vec__9748, page, i, c__4319__auto__, size__4320__auto__, b__9745, s__9743__$2, temp__4092__auto__), "type":"checkbox"}, page)));
                        var G__9750 = i__9744 + 1;
                        i__9744 = G__9750;
                        continue;
                      } else {
                        return true;
                      }
                      break;
                    }
                  }()) {
                    return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__9745), iter__9742.call(null, cljs.core.chunk_rest.call(null, s__9743__$2)));
                  } else {
                    return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__9745), null);
                  }
                } else {
                  var vec__9749 = cljs.core.first.call(null, s__9743__$2);
                  var page = cljs.core.nth.call(null, vec__9749, 0, null);
                  var i = cljs.core.nth.call(null, vec__9749, 1, null);
                  return cljs.core.cons.call(null, React.DOM.li(null, om.dom.input.call(null, {"onClick":function(vec__9749, page, i, s__9743__$2, temp__4092__auto__) {
                    return function() {
                      cljs.core.prn.call(null, "called ", load_chan, page, i);
                      return ocr_visualizer.client2.handle_change.call(null, load_chan, selected_idx, page, i);
                    };
                  }(vec__9749, page, i, s__9743__$2, temp__4092__auto__), "type":"checkbox"}, page)), iter__9742.call(null, cljs.core.rest.call(null, s__9743__$2)));
                }
              } else {
                return null;
              }
              break;
            }
          }, null, null);
        };
        return iter__4321__auto__.call(null, cljs.core.map.call(null, function(a, b) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [a, b], null);
        }, self__.available_pages, cljs.core.range.call(null)));
      }());
    };
    ocr_visualizer.client2.t9737.prototype.om$core$IInitState$ = true;
    ocr_visualizer.client2.t9737.prototype.om$core$IInitState$init_state$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "load-chan", "load-chan", 2356806475), cljs.core.async.chan.call(null), new cljs.core.Keyword(null, "selected-idx", "selected-idx", 3553242109), cljs.core.PersistentVector.EMPTY], null);
    };
    ocr_visualizer.client2.t9737.prototype.cljs$core$IMeta$_meta$arity$1 = function(_9739) {
      var self__ = this;
      var _9739__$1 = this;
      return self__.meta9738;
    };
    ocr_visualizer.client2.t9737.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_9739, meta9738__$1) {
      var self__ = this;
      var _9739__$1 = this;
      return new ocr_visualizer.client2.t9737(self__.owner, self__.available_pages, self__.page_list_view, meta9738__$1);
    };
    ocr_visualizer.client2.__GT_t9737 = function __GT_t9737(owner__$1, available_pages__$1, page_list_view__$1, meta9738) {
      return new ocr_visualizer.client2.t9737(owner__$1, available_pages__$1, page_list_view__$1, meta9738);
    };
  }
  return new ocr_visualizer.client2.t9737(owner, available_pages, page_list_view, null);
};
ocr_visualizer.client2.get_page_list = function get_page_list(app_state) {
  cljs.core.prn.call(null, "get-page-list ", (new cljs.core.Keyword(null, "base-directory", "base-directory", 4253837795)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, app_state)));
  return ajax.core.GET.call(null, [cljs.core.str("/page-list?bd\x3d"), cljs.core.str((new cljs.core.Keyword(null, "base-directory", "base-directory", 4253837795)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, app_state)))].join(""), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "handler", "handler", 1706707644), function(data) {
    cljs.core.prn.call(null, "get-page-list callback called ", data);
    return cljs.core.swap_BANG_.call(null, app_state, cljs.core.assoc, new cljs.core.Keyword(null, "available-pages", "available-pages", 4626810674), data);
  }], null));
};
ocr_visualizer.client2.page_select_view = function page_select_view(app, owner) {
  if (typeof ocr_visualizer.client2.t9754 !== "undefined") {
  } else {
    ocr_visualizer.client2.t9754 = function(owner, app, page_select_view, meta9755) {
      this.owner = owner;
      this.app = app;
      this.page_select_view = page_select_view;
      this.meta9755 = meta9755;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    ocr_visualizer.client2.t9754.cljs$lang$type = true;
    ocr_visualizer.client2.t9754.cljs$lang$ctorStr = "ocr-visualizer.client2/t9754";
    ocr_visualizer.client2.t9754.cljs$lang$ctorPrWriter = function(this__4171__auto__, writer__4172__auto__, opt__4173__auto__) {
      return cljs.core._write.call(null, writer__4172__auto__, "ocr-visualizer.client2/t9754");
    };
    ocr_visualizer.client2.t9754.prototype.om$core$IRender$ = true;
    ocr_visualizer.client2.t9754.prototype.om$core$IRender$render$arity$1 = function(this$) {
      var self__ = this;
      var this$__$1 = this;
      if (cljs.core.not.call(null, cljs.core.seq.call(null, (new cljs.core.Keyword(null, "available-pages", "available-pages", 4626810674)).cljs$core$IFn$_invoke$arity$1(self__.app)))) {
        return React.DOM.div(null, om.dom.input.call(null, {"onClick":function() {
          return cljs.core.prn.call(null, "file-clicked");
        }, "name":"base-directory-input", "id":"base-directory-input", "size":"300", "type":"text"}), om.dom.input.call(null, {"onClick":function() {
          cljs.core.prn.call(null, "button clicked");
          var bd_input = domina.by_id.call(null, "base-directory-input");
          cljs.core.swap_BANG_.call(null, ocr_visualizer.client2.app_state, cljs.core.assoc, new cljs.core.Keyword(null, "base-directory", "base-directory", 4253837795), domina.value.call(null, bd_input));
          return ocr_visualizer.client2.get_page_list.call(null, ocr_visualizer.client2.app_state);
        }, "type":"button", "value":"set base directory"}));
      } else {
        return React.DOM.div(null, React.DOM.h3(null, [cljs.core.str((new cljs.core.Keyword(null, "base-directory", "base-directory", 4253837795)).cljs$core$IFn$_invoke$arity$1(self__.app))].join("")), React.DOM.div(null, "Lade Seiten: "), om.core.build.call(null, ocr_visualizer.client2.page_list_view, (new cljs.core.Keyword(null, "available-pages", "available-pages", 4626810674)).cljs$core$IFn$_invoke$arity$1(self__.app)));
      }
    };
    ocr_visualizer.client2.t9754.prototype.cljs$core$IMeta$_meta$arity$1 = function(_9756) {
      var self__ = this;
      var _9756__$1 = this;
      return self__.meta9755;
    };
    ocr_visualizer.client2.t9754.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_9756, meta9755__$1) {
      var self__ = this;
      var _9756__$1 = this;
      return new ocr_visualizer.client2.t9754(self__.owner, self__.app, self__.page_select_view, meta9755__$1);
    };
    ocr_visualizer.client2.__GT_t9754 = function __GT_t9754(owner__$1, app__$1, page_select_view__$1, meta9755) {
      return new ocr_visualizer.client2.t9754(owner__$1, app__$1, page_select_view__$1, meta9755);
    };
  }
  return new ocr_visualizer.client2.t9754(owner, app, page_select_view, null);
};
ocr_visualizer.client2.init = function init() {
  return om.core.root.call(null, function(app, owner) {
    return React.DOM.div(null, om.core.build.call(null, ocr_visualizer.client2.page_select_view, app), React.DOM.div(null, om.core.build.call(null, ocr_visualizer.client2.pages_view, (new cljs.core.Keyword(null, "pages", "pages", 1120330550)).cljs$core$IFn$_invoke$arity$1(app))));
  }, ocr_visualizer.client2.app_state, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "target", "target", 4427965699), document.getElementById("page-container")], null));
};
window.onload = function() {
  cljs.core.prn.call(null, "hi");
  return ocr_visualizer.client2.init.call(null);
};
